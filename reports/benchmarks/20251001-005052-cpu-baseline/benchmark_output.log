================================================================================
Detailed nanoBragg Performance Analysis
================================================================================

Outputs will be saved to: reports/benchmarks/20251001-005118

System Information:
CPU cores: 32
Total RAM: 125.7 GB
PyTorch version: 2.7.1+cu126
CUDA available: True
GPU: NVIDIA GeForce RTX 3090

Benchmark Configuration:
Test sizes: [512, 1024, 2048, 4096]
Iterations: 5
Device: cpu
Dtype: float32

C binary: ./golden_suite_generator/nanoBragg

================================================================================
Benchmarking Different Detector Sizes
================================================================================

PERF-PYTORCH-005: Testing simulator cache reuse
Each size will be run twice: cold (first run) and warm (cached)

==================================================
Detector Size: 512x512 (262,144 pixels)
--------------------------------------------------
Running C implementation...
Running PyTorch COLD (first run) on CPU...
  Setup time (cold): 0.006s
  Simulation time: 4.983s
  Cache hit: False
Running PyTorch WARM (cached) on CPU...
  Setup time (warm): 0.000s
  Simulation time: 0.006s
  Cache hit: True
  Setup speedup: 6035.0x faster

Results:
  C time: 0.014s (memory: 0.0 MB)
  PyTorch COLD total: 4.989s (memory: 306.7 MB)
  PyTorch WARM total: 0.006s (memory: -0.2 MB)
  Speedup (cold): 0.00x (C faster)
  Speedup (warm): 2.22x (PyTorch faster)
  Correlation (cold): 1.000000
  Correlation (warm): 1.000000

  ✓ Cache effectiveness: 6035.0x faster setup
  ✓ PERF-PYTORCH-005 EXIT CRITERIA MET: Warm setup 0.0ms < 50ms

==================================================
Detector Size: 1024x1024 (1,048,576 pixels)
--------------------------------------------------
Running C implementation...
Running PyTorch COLD (first run) on CPU...
  Setup time (cold): 0.008s
  Simulation time: 0.656s
  Cache hit: False
Running PyTorch WARM (cached) on CPU...
  Setup time (warm): 0.000s
  Simulation time: 0.090s
  Cache hit: True
  Setup speedup: 8626.5x faster

Results:
  C time: 0.044s (memory: 0.0 MB)
  PyTorch COLD total: 0.667s (memory: 108.5 MB)
  PyTorch WARM total: 0.093s (memory: -12.0 MB)
  Speedup (cold): 0.07x (C faster)
  Speedup (warm): 0.47x (C faster)
  Correlation (cold): 1.000000
  Correlation (warm): 1.000000

  ✓ Cache effectiveness: 8626.5x faster setup
  ✓ PERF-PYTORCH-005 EXIT CRITERIA MET: Warm setup 0.0ms < 50ms

==================================================
Detector Size: 2048x2048 (4,194,304 pixels)
--------------------------------------------------
Running C implementation...
Running PyTorch COLD (first run) on CPU...
  Setup time (cold): 0.039s
  Simulation time: 0.426s
  Cache hit: False
Running PyTorch WARM (cached) on CPU...
  Setup time (warm): 0.000s
  Simulation time: 0.418s
  Cache hit: True
  Setup speedup: 18176.9x faster

Results:
  C time: 0.136s (memory: 0.0 MB)
  PyTorch COLD total: 0.475s (memory: 63.5 MB)
  PyTorch WARM total: 0.428s (memory: 0.5 MB)
  Speedup (cold): 0.29x (C faster)
  Speedup (warm): 0.32x (C faster)
  Correlation (cold): 1.000000
  Correlation (warm): 1.000000

  ✓ Cache effectiveness: 18176.9x faster setup
  ✓ PERF-PYTORCH-005 EXIT CRITERIA MET: Warm setup 0.0ms < 50ms

==================================================
Detector Size: 4096x4096 (16,777,216 pixels)
--------------------------------------------------
Running C implementation...
Running PyTorch COLD (first run) on CPU...
  Setup time (cold): 0.162s
  Simulation time: 1.717s
  Cache hit: False
Running PyTorch WARM (cached) on CPU...
  Setup time (warm): 0.000s
  Simulation time: 1.744s
  Cache hit: True
  Setup speedup: 113507.5x faster

Results:
  C time: 0.502s (memory: 0.0 MB)
  PyTorch COLD total: 1.919s (memory: 256.3 MB)
  PyTorch WARM total: 1.783s (memory: -0.5 MB)
  Speedup (cold): 0.26x (C faster)
  Speedup (warm): 0.28x (C faster)
  Correlation (cold): 1.000000
  Correlation (warm): 1.000000

  ✓ Cache effectiveness: 113507.5x faster setup
  ✓ PERF-PYTORCH-005 EXIT CRITERIA MET: Warm setup 0.0ms < 50ms

================================================================================
PERFORMANCE SUMMARY (PERF-PYTORCH-005: Cache Reuse)
================================================================================

Size             Pixels    C (s)    PyTorch    PyTorch      Setup       Corr
                                   COLD (s)   WARM (s)    Speedup     (warm)
----------------------------------------------------------------------------------
512x512         262,144    0.014      4.989      0.006    6035.0x   1.000000
1024x1024     1,048,576    0.044      0.667      0.093    8626.5x   1.000000
2048x2048     4,194,304    0.136      0.475      0.428   18176.9x   1.000000
4096x4096    16,777,216    0.502      1.919      1.783  113507.5x   1.000000

================================================================================
CACHE EFFECTIVENESS (PERF-PYTORCH-005)
================================================================================

Size       Setup COLD (ms) Setup WARM (ms)      Speedup    Exit Crit
----------------------------------------------------------------------
512x512                5.8             0.0      6035.0x            ✓
1024x1024              8.2             0.0      8626.5x            ✓
2048x2048             39.0             0.0     18176.9x            ✓
4096x4096            162.4             0.0    113507.5x            ✓

PERF-PYTORCH-005 Exit Criteria: Setup time < 50ms for cached runs
  ✓ ALL SIZES MEET EXIT CRITERIA

Detailed results saved to reports/benchmarks/20251001-005118/benchmark_results.json

================================================================================
ANALYSIS
================================================================================

COLD runs (first time, includes compilation):
  ✓ C is on average 6.50x faster than PyTorch

WARM runs (cached simulator):
  ✓ C is on average 1.22x faster than PyTorch

Cache effectiveness: 36586.5x faster setup on average
✓ All correlations > 0.99, indicating excellent numerical agreement


All outputs saved to: reports/benchmarks/20251001-005118
