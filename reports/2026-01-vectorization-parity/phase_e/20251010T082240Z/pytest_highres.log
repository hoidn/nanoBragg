============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.4.1, pluggy-1.5.0 -- /home/ollie/miniconda3/bin/python3.13
cachedir: .pytest_cache
rootdir: /home/ollie/Documents/tmp/nanoBragg
configfile: pyproject.toml
plugins: anyio-4.9.0
collecting ... collected 1 item

tests/test_at_parallel_012.py::TestATParallel012ReferencePatternCorrelation::test_high_resolution_variant FAILED [100%]

=================================== FAILURES ===================================
__ TestATParallel012ReferencePatternCorrelation.test_high_resolution_variant ___

self = <tests.test_at_parallel_012.TestATParallel012ReferencePatternCorrelation object at 0x7aadee3c3e10>

    def test_high_resolution_variant(self):
        """
        Test high-resolution variant with 4096×4096 detector.
    
        Requirements from spec-a-parallel.md AT-PARALLEL-012:
        - λ=0.5Å
        - 4096×4096 detector, 0.05mm pixels, 500mm distance
        - Compare on 512×512 ROI centered on beam (slice [1792:2304, 1792:2304])
        - Pass: No NaNs/Infs, correlation ≥ 0.95 on ROI, top 50 peaks ≤ 1.0 px
        """
        # Load golden data (4096x4096)
        golden_file = Path(__file__).parent / "golden_data" / "high_resolution_4096" / "image.bin"
        golden_image = load_golden_float_image(str(golden_file), (4096, 4096))
    
        # Setup PyTorch configuration to match golden data generation
        # Generated with: -lambda 0.5 -cell 100 100 100 90 90 90 -N 5 -default_F 100 -distance 500 -detpixels 4096 -pixel 0.05
        crystal_config = CrystalConfig(
            cell_a=100.0, cell_b=100.0, cell_c=100.0,
            cell_alpha=90.0, cell_beta=90.0, cell_gamma=90.0,
            N_cells=(5, 5, 5),
            default_F=100.0
        )
    
        detector_config = DetectorConfig(
            spixels=4096,
            fpixels=4096,
            pixel_size_mm=0.05,
            distance_mm=500.0,
            detector_convention=DetectorConvention.MOSFLM,  # C code default
            detector_pivot=DetectorPivot.BEAM
        )
    
        beam_config = BeamConfig(
            wavelength_A=0.5
            # Use default fluence to match C code default
        )
    
        # Run PyTorch simulation
        crystal = Crystal(crystal_config)
        detector = Detector(detector_config)
        simulator = Simulator(crystal, detector, crystal_config, beam_config)
    
        pytorch_image = simulator.run().cpu().numpy()
    
        # Extract 512×512 ROI centered on beam (indices 1792:2304 for both axes)
        roi_slice = slice(1792, 2304)
        golden_roi = golden_image[roi_slice, roi_slice]
        pytorch_roi = pytorch_image[roi_slice, roi_slice]
    
        # Check for NaNs/Infs
        assert not np.any(np.isnan(pytorch_roi)), "PyTorch ROI contains NaNs"
        assert not np.any(np.isinf(pytorch_roi)), "PyTorch ROI contains Infs"
        assert not np.any(np.isnan(golden_roi)), "Golden ROI contains NaNs"
        assert not np.any(np.isinf(golden_roi)), "Golden ROI contains Infs"
    
        # Calculate correlation on ROI
        corr, _ = pearsonr(golden_roi.flatten(), pytorch_roi.flatten())
    
        # Find peaks in ROI (both should detect exactly 50 per spec)
        golden_peaks = find_peaks(golden_roi, n_peaks=50, percentile=99.0)
        pytorch_peaks = find_peaks(pytorch_roi.astype(np.float32), n_peaks=50, percentile=99.0)
    
        # Match peaks using spec-required 1.0 pixel tolerance (relaxed for high-res)
        n_matches, mean_dist = match_peaks_hungarian(golden_peaks, pytorch_peaks, max_distance=1.0)
    
        # Assertions per spec-a-parallel.md §AT-012 high-resolution variant
>       assert corr >= 0.95, f"ROI correlation {corr:.4f} < 0.95 requirement"
E       AssertionError: ROI correlation 0.7157 < 0.95 requirement
E       assert np.float32(0.7156602) >= 0.95

tests/test_at_parallel_012.py:430: AssertionError
----------------------------- Captured stdout call -----------------------------
auto-selected 1-fold oversampling
=========================== short test summary info ============================
FAILED tests/test_at_parallel_012.py::TestATParallel012ReferencePatternCorrelation::test_high_resolution_variant
============================== 1 failed in 5.87s ===============================
