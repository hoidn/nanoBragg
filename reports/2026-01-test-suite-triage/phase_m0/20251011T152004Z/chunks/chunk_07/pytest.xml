<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="3" tests="63" time="23.963" timestamp="2025-10-11T08:26:29.351849-07:00" hostname="ollie-System-Product-Name"><testcase classname="tests.test_at_cli_005" name="test_cli_roi_basic" time="1.567" /><testcase classname="tests.test_at_cli_005" name="test_cli_roi_with_noise" time="1.481" /><testcase classname="tests.test_at_cli_005" name="test_cli_roi_edge_cases" time="2.576" /><testcase classname="tests.test_at_cli_005" name="test_cli_roi_different_conventions" time="2.506" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_axis_defaults" time="0.001" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_axis_override" time="0.000" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_rotation_applied" time="0.002" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_value_preserved" time="0.002" /><testcase classname="tests.test_at_geo_004" name="test_mosflm_twotheta_rotation" time="0.001" /><testcase classname="tests.test_at_geo_004" name="test_dials_twotheta_rotation" time="0.000" /><testcase classname="tests.test_at_parallel_003.TestATParallel003" name="test_detector_offset_preservation" time="0.002"><failure message="AssertionError: Beam center S pixels incorrect for 256x256&#10;assert 0.5 &lt; 0.01&#10; +  where 0.5 = abs((200.5 - 200.0))&#10; +    where 200.5 = &lt;built-in method item of Tensor object at 0x729c038f30c0&gt;()&#10; +      where &lt;built-in method item of Tensor object at 0x729c038f30c0&gt; = tensor(200.5000).item&#10; +        where tensor(200.5000) = &lt;src.nanobrag_torch.models.detector.Detector object at 0x729c0374e690&gt;.beam_center_s">self = &lt;tests.test_at_parallel_003.TestATParallel003 object at 0x729c57ccc2d0&gt;

    def test_detector_offset_preservation(self):
        """Test that beam centers preserve offset ratios across detector sizes.
    
        AT-PARALLEL-003: Test beam centers (20,20), (30,40), (45,25), (60,60)mm
        with 256x256, 512x512, 1024x1024 detectors.
        Peak SHALL appear at beam_center_mm / pixel_size_mm ±1 pixel.
        Offset ratios preserved ±2%.
        """
        # Test configurations
        beam_centers_mm = [
            (20.0, 20.0),
            (30.0, 40.0),
            (45.0, 25.0),
            (60.0, 60.0)
        ]
        detector_sizes = [256, 512, 1024]
        pixel_size_mm = 0.1
    
        for beam_s_mm, beam_f_mm in beam_centers_mm:
            for detector_size in detector_sizes:
                # Create detector config with specified beam center
                detector_config = DetectorConfig(
                    detector_convention=DetectorConvention.MOSFLM,
                    distance_mm=100.0,
                    pixel_size_mm=pixel_size_mm,
                    spixels=detector_size,
                    fpixels=detector_size,
                    beam_center_s=beam_s_mm,
                    beam_center_f=beam_f_mm,
                )
    
                # Verify beam centers are preserved in mm
                assert abs(detector_config.beam_center_s - beam_s_mm) &lt; 0.001, \
                    f"Beam center S not preserved: {detector_config.beam_center_s} vs {beam_s_mm}"
                assert abs(detector_config.beam_center_f - beam_f_mm) &lt; 0.001, \
                    f"Beam center F not preserved: {detector_config.beam_center_f} vs {beam_f_mm}"
    
                # Create detector and check pixel coordinates
                detector = Detector(detector_config)
    
                # Expected beam center in pixels
                # When beam centers are explicitly provided, they are used as-is (no +0.5 offset)
                # The MOSFLM +0.5 offset is ONLY for auto-calculated defaults
                expected_s_pixels = beam_s_mm / pixel_size_mm
                expected_f_pixels = beam_f_mm / pixel_size_mm
    
                # Verify beam centers in pixels
&gt;               assert abs(detector.beam_center_s.item() - expected_s_pixels) &lt; 0.01, \
                    f"Beam center S pixels incorrect for {detector_size}x{detector_size}"
E               AssertionError: Beam center S pixels incorrect for 256x256
E               assert 0.5 &lt; 0.01
E                +  where 0.5 = abs((200.5 - 200.0))
E                +    where 200.5 = &lt;built-in method item of Tensor object at 0x729c038f30c0&gt;()
E                +      where &lt;built-in method item of Tensor object at 0x729c038f30c0&gt; = tensor(200.5000).item
E                +        where tensor(200.5000) = &lt;src.nanobrag_torch.models.detector.Detector object at 0x729c0374e690&gt;.beam_center_s

tests/test_at_parallel_003.py:70: AssertionError</failure></testcase><testcase classname="tests.test_at_parallel_003.TestATParallel003" name="test_peak_position_at_offset_beam_centers" time="5.927" /><testcase classname="tests.test_at_parallel_003.TestATParallel003" name="test_offset_ratio_preservation" time="0.000" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_pytorch_determinism_same_seed" time="1.083" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_pytorch_determinism_different_seeds" time="1.138" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_pytorch_consistency_across_runs" time="2.477" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_c_pytorch_equivalence" time="0.000"><skipped type="pytest.skip" message="Requires NB_RUN_PARALLEL=1 and C binary">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_013.py:231: Requires NB_RUN_PARALLEL=1 and C binary</skipped></testcase><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_platform_fingerprint" time="0.000" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_numerical_precision_float64" time="0.021" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_pytorch_determinism" time="0.077" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_seed_independence" time="0.037" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_c_pytorch_equivalence" time="0.000"><skipped type="pytest.skip" message="Known scaling issue: ~500x difference between C and PyTorch implementations. Interface fix is complete - C code correctly receives misset parameters.">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_024.py:192: Known scaling issue: ~500x difference between C and PyTorch implementations. Interface fix is complete - C code correctly receives misset parameters.</skipped></testcase><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_lcg_compatibility" time="0.000" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_mosaic_rotation_umat_determinism" time="0.001" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_umat2misset_round_trip" time="0.002" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_torch_compile_speedup" time="1.023" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_hot_function_compilation" time="0.251" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_compilation_amortization" time="0.157" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_gpu_kernel_compilation" time="0.000"><skipped type="pytest.skip" message="CUDA required for GPU compilation test">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_005.py:281: CUDA required for GPU compilation test</skipped></testcase><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_dtype_optimization_impact" time="0.168" /><testcase classname="tests.test_at_sam_003" name="test_dmin_culling_basic" time="0.016" /><testcase classname="tests.test_at_sam_003" name="test_dmin_culling_exact_threshold" time="0.006" /><testcase classname="tests.test_at_sam_003" name="test_dmin_zero_no_culling" time="0.008" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_sparse_hkl_loading" time="0.001" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_missing_reflection_uses_default_f" time="0.001" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_intensity_ratios_with_sparse_hkl" time="0.007" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_fallback_with_no_hkl_uses_default_f" time="0.001" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_fdump_preserves_sparse_behavior" time="0.002" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_default_mosflm_convention" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_default_xds_convention" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_single_axis_rotations" time="0.002" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_combined_rotations" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_twotheta_rotation" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_all_rotations_combined" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_tensor_rotation_parameters" time="0.001" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_linter_finds_repo_root" time="0.000" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_linter_loads_yaml" time="0.015" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_yaml_structure_validation" time="0.002" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_missing_yaml_file" time="0.000" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_invalid_yaml" time="0.001" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_real_repo_linting" time="0.015" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_extraction_of_spec_ats" time="0.000" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_extraction_of_yaml_ats" time="0.014" /><testcase classname="tests.test_units.TestUnitConversions" name="test_mm_to_angstroms_scalar" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_mm_to_angstroms_tensor" time="0.001" /><testcase classname="tests.test_units.TestUnitConversions" name="test_mm_to_angstroms_gradient" time="0.001" /><testcase classname="tests.test_units.TestUnitConversions" name="test_meters_to_angstroms_scalar" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_meters_to_angstroms_tensor" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_degrees_to_radians_scalar" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_degrees_to_radians_tensor" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_degrees_to_radians_gradient" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_inverse_conversions" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_batch_tensor_conversions" time="0.000" /></testsuite></testsuites>