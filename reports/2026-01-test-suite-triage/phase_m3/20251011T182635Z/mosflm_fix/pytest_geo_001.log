============================= test session starts ==============================
platform linux -- Python 3.13.5, pytest-8.4.1, pluggy-1.5.0 -- /home/ollie/miniconda3/bin/python3.13
cachedir: .pytest_cache
rootdir: /home/ollie/Documents/tmp/nanoBragg
configfile: pyproject.toml
plugins: anyio-4.9.0
collecting ... collected 1 item

tests/test_at_geo_001.py::test_at_geo_001_mosflm_beam_center_mapping FAILED [100%]

=================================== FAILURES ===================================
__________________ test_at_geo_001_mosflm_beam_center_mapping __________________

    def test_at_geo_001_mosflm_beam_center_mapping():
        """Test AT-GEO-001: MOSFLM beam-center mapping and 0.5-pixel offsets."""
    
        # Setup as specified in AT-GEO-001
        config = DetectorConfig(
            detector_convention=DetectorConvention.MOSFLM,
            pixel_size_mm=0.1,
            distance_mm=100.0,
            beam_center_f=51.2,  # Xbeam in C code maps to beam_center_f (fast)
            beam_center_s=51.2,  # Ybeam in C code maps to beam_center_s (slow)
            detector_pivot=DetectorPivot.BEAM,
            detector_rotx_deg=0.0,
            detector_roty_deg=0.0,
            detector_rotz_deg=0.0,
            detector_twotheta_deg=0.0,
            spixels=1024,
            fpixels=1024
        )
    
        detector = Detector(config=config, dtype=torch.float64)
    
        # Check basis vectors match expected values
        expected_f = torch.tensor([0.0, 0.0, 1.0], dtype=torch.float64)
        expected_s = torch.tensor([0.0, -1.0, 0.0], dtype=torch.float64)
        expected_o = torch.tensor([1.0, 0.0, 0.0], dtype=torch.float64)
    
        assert torch.allclose(detector.fdet_vec, expected_f, atol=1e-9), \
            f"Fast axis mismatch: {detector.fdet_vec} != {expected_f}"
        assert torch.allclose(detector.sdet_vec, expected_s, atol=1e-9), \
            f"Slow axis mismatch: {detector.sdet_vec} != {expected_s}"
        assert torch.allclose(detector.odet_vec, expected_o, atol=1e-9), \
            f"Normal axis mismatch: {detector.odet_vec} != {expected_o}"
    
        # Check Fbeam and Sbeam calculation with 0.5 pixel offset
        # Current implementation: No auto-adjustment in DetectorConfig.__post_init__
        # MOSFLM convention adds 0.5 pixel offset in the pix0 calculation
    
        # The actual calculation is:
        # 1. Input beam centers: 51.2 mm (no auto-adjustment)
        # 2. Convert to pixels: 51.2 mm / 0.1 mm/pixel = 512 pixels
        # 3. MOSFLM adds 0.5 pixel: 512 + 0.5 = 512.5 pixels
        # 4. Convert to meters: 512.5 * 0.0001 m/pixel = 0.05125 m
    
        # Check pix0_vector
        # The actual calculation without auto-adjustment:
        # - beam_center_f = beam_center_s = 51.2 mm = 512 pixels
        # - MOSFLM adds 0.5 pixel: 512 + 0.5 = 512.5 pixels
        # - Convert to meters: 512.5 * 0.1 mm = 51.25 mm = 0.05125 m
        expected_pix0 = torch.tensor([0.1, 0.05125, -0.05125], dtype=torch.float64)
    
        # The actual pix0_vector calculation is:
        # pix0 = -Fbeam * f - Sbeam * s + distance * beam
        # Where:
        #   Fbeam = 0.05125 m (512.5 pixels * 0.1 mm/pixel = 51.25 mm = 0.05125 m)
        #   Sbeam = 0.05125 m (512.5 pixels * 0.1 mm/pixel = 51.25 mm = 0.05125 m)
        #   distance = 0.1 m
        #   beam = [1, 0, 0] (MOSFLM convention)
        #   f = [0, 0, 1]
        #   s = [0, -1, 0]
        #
        # So: pix0 = -0.05125 * [0,0,1] - 0.05125 * [0,-1,0] + 0.1 * [1,0,0]
        #          = [0, 0, -0.05125] + [0, 0.05125, 0] + [0.1, 0, 0]
        #          = [0.1, 0.05125, -0.05125]
    
        print(f"Calculated pix0_vector: {detector.pix0_vector}")
        print(f"Expected pix0_vector: {expected_pix0}")
    
        # Check with specified tolerance
>       assert torch.allclose(detector.pix0_vector, expected_pix0, atol=1e-9), \
            f"pix0_vector mismatch: {detector.pix0_vector} != {expected_pix0}"
E       AssertionError: pix0_vector mismatch: tensor([ 0.1000,  0.0512, -0.0512], dtype=torch.float64) != tensor([ 0.1000,  0.0512, -0.0512], dtype=torch.float64)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x762addd80fc0>(tensor([ 0.1000,  0.0512, -0.0512], dtype=torch.float64), tensor([ 0.1000,  0.0512, -0.0512], dtype=torch.float64), atol=1e-09)
E        +    where <built-in method allclose of type object at 0x762addd80fc0> = torch.allclose
E        +    and   tensor([ 0.1000,  0.0512, -0.0512], dtype=torch.float64) = <nanobrag_torch.models.detector.Detector object at 0x762ae5ce8590>.pix0_vector

tests/test_at_geo_001.py:85: AssertionError
----------------------------- Captured stdout call -----------------------------
Calculated pix0_vector: tensor([ 0.1000,  0.0512, -0.0512], dtype=torch.float64)
Expected pix0_vector: tensor([ 0.1000,  0.0512, -0.0512], dtype=torch.float64)
=========================== short test summary info ============================
FAILED tests/test_at_geo_001.py::test_at_geo_001_mosflm_beam_center_mapping
============================== 1 failed in 1.93s ===============================
