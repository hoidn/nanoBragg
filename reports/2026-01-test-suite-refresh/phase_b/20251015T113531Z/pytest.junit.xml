<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="8" skipped="145" tests="693" time="1653.410" timestamp="2025-10-15T04:51:19.619123-07:00" hostname="ollie-System-Product-Name"><testcase classname="" name="tests.test_at_parallel_009" time="0.000"><skipped message="collection skipped">('/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_009.py', 24, 'Skipped: Skipping parallel validation tests. Set NB_RUN_PARALLEL=1 to run.')</skipped></testcase><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_absorption_disabled_when_zero[cpu]" time="0.007" /><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_capture_fraction_calculation[False-cpu]" time="0.001" /><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_capture_fraction_calculation[True-cpu]" time="0.001" /><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_last_value_vs_accumulation_semantics[cpu]" time="0.006" /><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_parallax_dependence[False-cpu]" time="0.007" /><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_parallax_dependence[True-cpu]" time="0.005" /><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_absorption_with_tilted_detector[False-cpu]" time="0.006" /><testcase classname="tests.test_at_abs_001.TestAT_ABS_001" name="test_absorption_with_tilted_detector[True-cpu]" time="0.006" /><testcase classname="tests.test_at_bkg_001.TestAT_BKG_001" name="test_water_background_calculation" time="0.003" /><testcase classname="tests.test_at_bkg_001.TestAT_BKG_001" name="test_water_background_zero" time="0.003" /><testcase classname="tests.test_at_bkg_001.TestAT_BKG_001" name="test_water_background_additive" time="0.005" /><testcase classname="tests.test_at_cli_001.TestAT_CLI_001" name="test_cli_help_short_flag" time="0.991" /><testcase classname="tests.test_at_cli_001.TestAT_CLI_001" name="test_cli_help_long_flag" time="0.988" /><testcase classname="tests.test_at_cli_001.TestAT_CLI_001" name="test_cli_invocable" time="0.000" /><testcase classname="tests.test_at_cli_001.TestAT_CLI_001" name="test_cli_help_includes_examples" time="0.994" /><testcase classname="tests.test_at_cli_001.TestAT_CLI_001" name="test_cli_help_includes_wavelength_synonyms" time="0.986" /><testcase classname="tests.test_at_cli_001.TestAT_CLI_001" name="test_cli_help_includes_output_synonyms" time="0.986" /><testcase classname="tests.test_at_cli_002.TestAT_CLI_002" name="test_minimal_render_with_default_F" time="0.998" /><testcase classname="tests.test_at_cli_002.TestAT_CLI_002" name="test_minimal_render_with_hkl_file" time="1.005" /><testcase classname="tests.test_at_cli_002.TestAT_CLI_002" name="test_data_ordering_fast_major" time="0.998" /><testcase classname="tests.test_at_cli_002.TestAT_CLI_002" name="test_error_without_required_inputs" time="1.006" /><testcase classname="tests.test_at_cli_003.TestATCLI003" name="test_mosflm_default_pivot_beam" time="1.002" /><testcase classname="tests.test_at_cli_003.TestATCLI003" name="test_xds_default_pivot_sample" time="1.009" /><testcase classname="tests.test_at_cli_003.TestATCLI003" name="test_pivot_override_mosflm_to_sample" time="1.001" /><testcase classname="tests.test_at_cli_003.TestATCLI003" name="test_pivot_override_xds_to_beam" time="0.998" /><testcase classname="tests.test_at_cli_003.TestATCLI003" name="test_convention_header_keys_consistency" time="3.010" /><testcase classname="tests.test_at_cli_004" name="test_header_precedence_img_then_mask" time="1.011" /><testcase classname="tests.test_at_cli_004" name="test_mask_zeros_are_skipped" time="0.997" /><testcase classname="tests.test_at_cli_004" name="test_mask_beam_center_y_flip" time="1.006" /><testcase classname="tests.test_at_cli_004" name="test_conflicting_detector_size" time="0.998" /><testcase classname="tests.test_at_cli_004" name="test_img_only_no_mask" time="1.002" /><testcase classname="tests.test_at_cli_005" name="test_cli_roi_basic" time="1.000" /><testcase classname="tests.test_at_cli_005" name="test_cli_roi_with_noise" time="1.002" /><testcase classname="tests.test_at_cli_005" name="test_cli_roi_edge_cases" time="2.001" /><testcase classname="tests.test_at_cli_005" name="test_cli_roi_different_conventions" time="2.028" /><testcase classname="tests.test_at_cli_006" name="test_autoscale_without_scale_flag" time="1.003" /><testcase classname="tests.test_at_cli_006" name="test_explicit_scale_flag" time="0.993" /><testcase classname="tests.test_at_cli_006" name="test_pgm_without_pgmscale" time="0.999" /><testcase classname="tests.test_at_cli_006" name="test_pgm_with_explicit_pgmscale" time="0.996" /><testcase classname="tests.test_at_cli_006" name="test_pgm_format_compliance" time="0.998" /><testcase classname="tests.test_at_cli_007.TestATCLI007NoiseDeterminism" name="test_identical_seed_produces_identical_noise" time="2.022" /><testcase classname="tests.test_at_cli_007.TestATCLI007NoiseDeterminism" name="test_different_seed_produces_different_noise" time="2.017" /><testcase classname="tests.test_at_cli_007.TestATCLI007NoiseDeterminism" name="test_seed_determinism_without_roi" time="2.013" /><testcase classname="tests.test_at_cli_007.TestATCLI007NoiseDeterminism" name="test_negative_seed_accepted" time="2.035" /><testcase classname="tests.test_at_cli_007.TestATCLI007NoiseDeterminism" name="test_overload_count_determinism" time="3.031" /><testcase classname="tests.test_at_cli_008.TestATCLI008DminFiltering" name="test_dmin_filtering_reduces_intensity" time="2.034" /><testcase classname="tests.test_at_cli_008.TestATCLI008DminFiltering" name="test_dmin_very_strict_removes_most_intensity" time="1.005" /><testcase classname="tests.test_at_cli_008.TestATCLI008DminFiltering" name="test_dmin_zero_has_no_effect" time="2.010" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_missing_hkl_and_fdump_with_default_f_zero" time="0.997" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_missing_hkl_but_has_default_f" time="1.002" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_missing_cell_parameters" time="1.003" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_fdump_fallback" time="0.999" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_help_message" time="0.997" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_unsupported_flag_dispstep" time="1.004" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_unsupported_flag_hdiv" time="0.996" /><testcase classname="tests.test_at_cli_009.TestATCLI009ErrorHandling" name="test_unsupported_flag_vdiv" time="0.988" /><testcase classname="tests.test_at_crystal_absolute.TestATCrystalAbsolute" name="test_triclinic_absolute_positions" time="0.020" /><testcase classname="tests.test_at_crystal_absolute.TestATCrystalAbsolute" name="test_cubic_vs_triclinic_systematic_difference" time="0.017" /><testcase classname="tests.test_at_crystal_absolute.TestATCrystalAbsolute" name="test_known_reflection_d_spacings" time="0.003" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_fluence_calculation_from_flux_exposure_beamsize" time="0.000" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_no_fluence_calculation_when_flux_zero" time="0.000" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_no_fluence_calculation_when_exposure_zero" time="0.000" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_fluence_calculation_with_beamsize_zero" time="0.000" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_flux_recomputation_from_fluence_and_exposure" time="0.000" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_sample_clipping_warning" time="0.001" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_no_clipping_when_beamsize_larger" time="0.000" /><testcase classname="tests.test_at_flu_001.TestAT_FLU_001" name="test_no_clipping_when_beamsize_zero" time="0.000" /><testcase classname="tests.test_at_geo_001" name="test_at_geo_001_mosflm_beam_center_mapping" time="0.002" /><testcase classname="tests.test_at_geo_002" name="test_at_geo_002_setup_a_distance_only" time="0.000" /><testcase classname="tests.test_at_geo_002" name="test_at_geo_002_setup_b_close_distance_only" time="0.000" /><testcase classname="tests.test_at_geo_002" name="test_at_geo_002_setup_c_explicit_override" time="0.000" /><testcase classname="tests.test_at_geo_002" name="test_at_geo_002_setup_c_beam_override" time="0.000" /><testcase classname="tests.test_at_geo_002" name="test_at_geo_002_direct_instantiation" time="0.000" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_r_factor_calculation" time="0.001" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_distance_update_with_close_distance" time="0.001" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_beam_center_preservation_beam_pivot" time="0.001" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_beam_center_preservation_sample_pivot" time="0.001" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_no_rotations_r_factor_equals_one" time="0.001" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_beam_center_with_various_rotations[DetectorPivot.BEAM]" time="0.003" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_beam_center_with_various_rotations[DetectorPivot.SAMPLE]" time="0.004" /><testcase classname="tests.test_at_geo_003.TestATGEO003RFactorAndBeamCenter" name="test_gradients_flow_through_r_factor" time="0.001" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_axis_defaults" time="0.001" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_axis_override" time="0.000" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_rotation_applied" time="0.001" /><testcase classname="tests.test_at_geo_004" name="test_twotheta_value_preserved" time="0.001" /><testcase classname="tests.test_at_geo_004" name="test_mosflm_twotheta_rotation" time="0.001" /><testcase classname="tests.test_at_geo_004" name="test_dials_twotheta_rotation" time="0.000" /><testcase classname="tests.test_at_geo_005.TestATGEO005CurvedDetector" name="test_curved_detector_equal_distance" time="0.001" /><testcase classname="tests.test_at_geo_005.TestATGEO005CurvedDetector" name="test_curved_vs_planar_difference" time="0.002" /><testcase classname="tests.test_at_geo_005.TestATGEO005CurvedDetector" name="test_small_angle_rotation_consistency" time="0.001" /><testcase classname="tests.test_at_geo_005.TestATGEO005CurvedDetector" name="test_gradient_flow_curved_detector" time="0.001" /><testcase classname="tests.test_at_geo_005.TestATGEO005CurvedDetector" name="test_beam_center_affects_curvature" time="0.002" /><testcase classname="tests.test_at_geo_006.TestATGEO006PointPixelSolidAngle" name="test_point_pixel_solid_angle" time="0.001" /><testcase classname="tests.test_at_geo_006.TestATGEO006PointPixelSolidAngle" name="test_default_solid_angle_with_obliquity" time="0.001" /><testcase classname="tests.test_at_geo_006.TestATGEO006PointPixelSolidAngle" name="test_off_center_pixel_comparison" time="0.002" /><testcase classname="tests.test_at_geo_006.TestATGEO006PointPixelSolidAngle" name="test_gradient_flow" time="0.001" /><testcase classname="tests.test_at_geo_006.TestATGEO006PointPixelSolidAngle" name="test_corner_pixel_values" time="0.001" /><testcase classname="tests.test_at_io_001.TestAT_IO_001" name="test_smv_header_required_keys" time="0.001" /><testcase classname="tests.test_at_io_001.TestAT_IO_001" name="test_smv_data_ordering" time="0.000" /><testcase classname="tests.test_at_io_001.TestAT_IO_001" name="test_smv_convention_specific_headers" time="0.001" /><testcase classname="tests.test_at_io_001.TestAT_IO_001" name="test_smv_torch_tensor_input" time="0.001" /><testcase classname="tests.test_at_io_001.TestAT_IO_001" name="test_smv_byte_order" time="0.001" /><testcase classname="tests.test_at_io_002.TestAT_IO_002" name="test_pgm_header_format" time="0.000" /><testcase classname="tests.test_at_io_002.TestAT_IO_002" name="test_pgm_pixel_scaling" time="0.000" /><testcase classname="tests.test_at_io_002.TestAT_IO_002" name="test_pgm_with_default_scale" time="0.000" /><testcase classname="tests.test_at_io_002.TestAT_IO_002" name="test_pgm_torch_tensor_input" time="0.000" /><testcase classname="tests.test_at_io_002.TestAT_IO_002" name="test_pgm_clipping_behavior" time="0.000" /><testcase classname="tests.test_at_io_003.TestAT_IO_003" name="test_fdump_write_and_read" time="0.001" /><testcase classname="tests.test_at_io_003.TestAT_IO_003" name="test_fdump_cache_behavior" time="0.001" /><testcase classname="tests.test_at_io_003.TestAT_IO_003" name="test_fdump_no_files_with_default_F" time="0.000" /><testcase classname="tests.test_at_io_003.TestAT_IO_003" name="test_fdump_no_files_zero_default" time="0.000" /><testcase classname="tests.test_at_io_003.TestAT_IO_003" name="test_fdump_preserves_default_F" time="0.001" /><testcase classname="tests.test_at_io_003.TestAT_IO_003" name="test_fdump_header_structure" time="0.001" /><testcase classname="tests.test_at_io_004.TestAT_IO_004" name="test_minimal_hkl_format" time="0.001" /><testcase classname="tests.test_at_io_004.TestAT_IO_004" name="test_five_column_with_phase" time="0.001" /><testcase classname="tests.test_at_io_004.TestAT_IO_004" name="test_six_column_with_sigma_and_phase" time="0.001" /><testcase classname="tests.test_at_io_004.TestAT_IO_004" name="test_negative_indices_handling" time="0.001" /><testcase classname="tests.test_at_io_004.TestAT_IO_004" name="test_all_formats_produce_same_pattern" time="0.010" /><testcase classname="tests.test_at_io_004.TestAT_IO_004" name="test_fdump_caching_for_all_formats" time="0.003" /><testcase classname="tests.test_at_io_004.TestAT_IO_004" name="test_comment_and_blank_line_handling" time="0.001" /><testcase classname="tests.test_at_noise_001.TestATNoise001" name="test_small_mean_exact_poisson" time="0.655" /><testcase classname="tests.test_at_noise_001.TestATNoise001" name="test_medium_mean_rejection_sampling" time="0.067" /><testcase classname="tests.test_at_noise_001.TestATNoise001" name="test_large_mean_gaussian_approximation" time="0.009" /><testcase classname="tests.test_at_noise_001.TestATNoise001" name="test_seed_reproducibility" time="0.001" /><testcase classname="tests.test_at_noise_001.TestATNoise001" name="test_adc_and_clipping" time="0.000" /><testcase classname="tests.test_at_noise_001.TestATNoise001" name="test_all_regimes_in_single_image" time="0.000" /><testcase classname="tests.test_at_noise_001.TestATNoise001" name="test_noise_config_integration" time="0.000" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_beam_center_scales_with_detector_size[64]" time="0.000" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_beam_center_scales_with_detector_size[128]" time="0.000" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_beam_center_scales_with_detector_size[256]" time="0.000" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_beam_center_scales_with_detector_size[512]" time="0.000" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_beam_center_scales_with_detector_size[1024]" time="0.000" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_peak_position_at_beam_center" time="0.005" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_cli_beam_center_calculation" time="3.050" /><testcase classname="tests.test_at_parallel_001.TestATParallel001" name="test_intensity_scaling_with_solid_angle" time="0.010" /><testcase classname="tests.test_at_parallel_002.TestATParallel002" name="test_beam_center_scales_with_pixel_size" time="0.002" /><testcase classname="tests.test_at_parallel_002.TestATParallel002" name="test_peak_position_scales_inversely_with_pixel_size" time="0.036" /><testcase classname="tests.test_at_parallel_002.TestATParallel002" name="test_pattern_correlation_across_pixel_sizes" time="0.143" /><testcase classname="tests.test_at_parallel_002.TestATParallel002" name="test_beam_center_parameter_consistency" time="0.002" /><testcase classname="tests.test_at_parallel_003.TestATParallel003" name="test_detector_offset_preservation" time="0.005" /><testcase classname="tests.test_at_parallel_003.TestATParallel003" name="test_peak_position_at_offset_beam_centers" time="0.027" /><testcase classname="tests.test_at_parallel_003.TestATParallel003" name="test_offset_ratio_preservation" time="0.000" /><testcase classname="tests.test_at_parallel_004.TestAT_PARALLEL_004" name="test_mosflm_adds_half_pixel_offset" time="0.001" /><testcase classname="tests.test_at_parallel_004.TestAT_PARALLEL_004" name="test_xds_has_no_pixel_offset" time="0.001" /><testcase classname="tests.test_at_parallel_004.TestAT_PARALLEL_004" name="test_peak_position_difference" time="0.023" /><testcase classname="tests.test_at_parallel_004.TestAT_PARALLEL_004" name="test_pattern_correlation_when_aligned" time="0.023" /><testcase classname="tests.test_at_parallel_004.TestAT_PARALLEL_004" name="test_beam_center_calculation_consistency" time="0.001" /><testcase classname="tests.test_at_parallel_005.TestAT_PARALLEL_005_BeamCenterMapping" name="test_mosflm_xbeam_ybeam_mapping" time="0.000"><skipped type="pytest.skip" message="Parallel validation tests only run with NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_005.py:39: Parallel validation tests only run with NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_005.TestAT_PARALLEL_005_BeamCenterMapping" name="test_xds_orgx_orgy_mapping" time="0.000"><skipped type="pytest.skip" message="Parallel validation tests only run with NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_005.py:64: Parallel validation tests only run with NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_005.TestAT_PARALLEL_005_BeamCenterMapping" name="test_pivot_mode_consistency" time="0.000"><skipped type="pytest.skip" message="Parallel validation tests only run with NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_005.py:90: Parallel validation tests only run with NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_005.TestAT_PARALLEL_005_BeamCenterMapping" name="test_equivalent_configurations_produce_same_pattern" time="0.000"><skipped type="pytest.skip" message="Parallel validation tests only run with NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_005.py:131: Parallel validation tests only run with NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_006.TestATParallel006SingleReflection" name="test_bragg_angle_prediction_single_distance" time="0.065" /><testcase classname="tests.test_at_parallel_006.TestATParallel006SingleReflection" name="test_distance_scaling" time="0.100" /><testcase classname="tests.test_at_parallel_006.TestATParallel006SingleReflection" name="test_combined_wavelength_and_distance" time="0.085" /><testcase classname="tests.test_at_parallel_007.TestATParallel007PeakPositionWithRotations" name="test_peak_positions_with_rotations" time="0.000"><skipped type="pytest.skip" message="Parallel C-PyTorch tests disabled (set NB_RUN_PARALLEL=1)">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_007.py:244: Parallel C-PyTorch tests disabled (set NB_RUN_PARALLEL=1)</skipped></testcase><testcase classname="tests.test_at_parallel_007.TestATParallel007PeakPositionWithRotations" name="test_peak_intensity_ordering" time="0.000"><skipped type="pytest.skip" message="Parallel C-PyTorch tests disabled">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_007.py:303: Parallel C-PyTorch tests disabled</skipped></testcase><testcase classname="tests.test_at_parallel_007.TestATParallel007PeakPositionWithRotations" name="test_rotation_effect_on_pattern" time="0.000"><skipped type="pytest.skip" message="Parallel C-PyTorch tests disabled">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_007.py:335: Parallel C-PyTorch tests disabled</skipped></testcase><testcase classname="tests.test_at_parallel_008.TestAT_PARALLEL_008" name="test_triclinic_multi_peak_pattern" time="0.000"><skipped type="pytest.skip" message="Requires NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_008.py:187: Requires NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_008.TestAT_PARALLEL_008" name="test_peak_intensity_ordering" time="0.000"><skipped type="pytest.skip" message="Requires NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_008.py:324: Requires NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_008.TestAT_PARALLEL_008" name="test_non_max_suppression" time="0.000"><skipped type="pytest.skip" message="Requires NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_008.py:368: Requires NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_010.TestATParallel010SolidAngleCorrections" name="test_point_pixel_distance_scaling" time="0.000"><skipped type="pytest.skip" message="AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_010.py:152: AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary</skipped></testcase><testcase classname="tests.test_at_parallel_010.TestATParallel010SolidAngleCorrections" name="test_obliquity_distance_scaling" time="0.000"><skipped type="pytest.skip" message="AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_010.py:228: AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary</skipped></testcase><testcase classname="tests.test_at_parallel_010.TestATParallel010SolidAngleCorrections" name="test_obliquity_with_tilts" time="0.000"><skipped type="pytest.skip" message="AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_010.py:285: AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary</skipped></testcase><testcase classname="tests.test_at_parallel_010.TestATParallel010SolidAngleCorrections" name="test_combined_distance_and_tilt" time="0.000"><skipped type="pytest.skip" message="AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_010.py:340: AT-PARALLEL tests require NB_RUN_PARALLEL=1 and C binary</skipped></testcase><testcase classname="tests.test_at_parallel_011.TestATParallel011PolarizationFactor" name="test_unpolarized_theory" time="0.011" /><testcase classname="tests.test_at_parallel_011.TestATParallel011PolarizationFactor" name="test_polarized_kahn_model" time="0.007" /><testcase classname="tests.test_at_parallel_011.TestATParallel011PolarizationFactor" name="test_c_pytorch_equivalence" time="0.000"><skipped type="pytest.skip" message="Parallel validation requires NB_RUN_PARALLEL=1 environment variable">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_011.py:360: Parallel validation requires NB_RUN_PARALLEL=1 environment variable</skipped></testcase><testcase classname="tests.test_at_parallel_012.TestATParallel012ReferencePatternCorrelation" name="test_simple_cubic_correlation" time="0.187" /><testcase classname="tests.test_at_parallel_012.TestATParallel012ReferencePatternCorrelation" name="test_triclinic_P1_correlation" time="0.115" /><testcase classname="tests.test_at_parallel_012.TestATParallel012ReferencePatternCorrelation" name="test_cubic_tilted_detector_correlation" time="0.202" /><testcase classname="tests.test_at_parallel_012.TestATParallel012ReferencePatternCorrelation" name="test_high_resolution_variant" time="3.316" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_pytorch_determinism_same_seed" time="1.551" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_pytorch_determinism_different_seeds" time="0.836" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_pytorch_consistency_across_runs" time="1.921" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_c_pytorch_equivalence" time="0.000"><skipped type="pytest.skip" message="Requires NB_RUN_PARALLEL=1 and C binary">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_013.py:231: Requires NB_RUN_PARALLEL=1 and C binary</skipped></testcase><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_platform_fingerprint" time="0.000" /><testcase classname="tests.test_at_parallel_013.TestATParallel013CrossPlatformConsistency" name="test_numerical_precision_float64" time="0.018" /><testcase classname="tests.test_at_parallel_014.TestATParallel014NoiseRobustness" name="test_mean_preservation_after_scaling" time="0.023" /><testcase classname="tests.test_at_parallel_014.TestATParallel014NoiseRobustness" name="test_peak_centroid_stability" time="0.036" /><testcase classname="tests.test_at_parallel_014.TestATParallel014NoiseRobustness" name="test_overload_count_consistency" time="0.025" /><testcase classname="tests.test_at_parallel_014.TestATParallel014NoiseRobustness" name="test_noise_statistics" time="1.451" /><testcase classname="tests.test_at_parallel_014.TestATParallel014NoiseRobustness" name="test_deterministic_noise_with_seed" time="0.018" /><testcase classname="tests.test_at_parallel_015.TestATParallel015MixedUnits" name="test_distance_units_consistency" time="0.011" /><testcase classname="tests.test_at_parallel_015.TestATParallel015MixedUnits" name="test_wavelength_units_consistency" time="0.019" /><testcase classname="tests.test_at_parallel_015.TestATParallel015MixedUnits" name="test_angle_units_consistency" time="0.015" /><testcase classname="tests.test_at_parallel_015.TestATParallel015MixedUnits" name="test_mixed_units_comprehensive" time="0.008" /><testcase classname="tests.test_at_parallel_015.TestATParallel015MixedUnits" name="test_detector_rotation_units" time="0.027" /><testcase classname="tests.test_at_parallel_016.TestATParallel016ExtremeScale" name="test_tiny_scale" time="1.065" /><testcase classname="tests.test_at_parallel_016.TestATParallel016ExtremeScale" name="test_large_cell" time="1.269" /><testcase classname="tests.test_at_parallel_016.TestATParallel016ExtremeScale" name="test_long_distance" time="0.018" /><testcase classname="tests.test_at_parallel_016.TestATParallel016ExtremeScale" name="test_extreme_scale_c_comparison" time="0.000"><skipped type="pytest.skip" message="C-PyTorch parallel tests require NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_016.py:223: C-PyTorch parallel tests require NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_016.TestATParallel016ExtremeScale" name="test_combined_extremes" time="0.013" /><testcase classname="tests.test_at_parallel_016.TestATParallel016ExtremeScale" name="test_numerical_stability_metrics" time="0.004" /><testcase classname="tests.test_at_parallel_017.TestATParallel017GrazingIncidence" name="test_large_detector_tilts" time="0.015" /><testcase classname="tests.test_at_parallel_017.TestATParallel017GrazingIncidence" name="test_large_twotheta" time="0.014" /><testcase classname="tests.test_at_parallel_017.TestATParallel017GrazingIncidence" name="test_combined_extreme_angles" time="0.008" /><testcase classname="tests.test_at_parallel_017.TestATParallel017GrazingIncidence" name="test_near_90_degree_incidence" time="0.007" /><testcase classname="tests.test_at_parallel_017.TestATParallel017GrazingIncidence" name="test_solid_angle_obliquity_corrections" time="0.002" /><testcase classname="tests.test_at_parallel_017.TestATParallel017GrazingIncidence" name="test_extreme_rotation_stability" time="0.005" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_cubic_crystal_aligned_axes" time="0.006" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_zero_angle_rotations" time="0.006" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_near_singular_cell_angles" time="0.010" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_aligned_spindle_and_beam" time="0.007" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_very_small_unit_cell" time="0.006" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_very_large_unit_cell" time="0.006" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_continuity_near_90_degrees" time="0.037" /><testcase classname="tests.test_at_parallel_018.TestATParallel018CrystalBoundaryConditions" name="test_identity_misset_matrix" time="0.006" /><testcase classname="tests.test_at_parallel_020.TestATParallel020" name="test_comprehensive_integration" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_020.py:280: NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)</skipped></testcase><testcase classname="tests.test_at_parallel_020.TestATParallel020" name="test_comprehensive_without_absorption" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_020.py:332: NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)</skipped></testcase><testcase classname="tests.test_at_parallel_020.TestATParallel020" name="test_phi_rotation_only" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_020.py:364: NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)</skipped></testcase><testcase classname="tests.test_at_parallel_020.TestATParallel020" name="test_comprehensive_minimal_features" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_020.py:399: NB_RUN_PARALLEL=1 not set (C-PyTorch validation tests disabled)</skipped></testcase><testcase classname="tests.test_at_parallel_021.TestCrystalPhiRotation" name="test_single_step_phi_rotation" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_021.py:114: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_021.TestCrystalPhiRotation" name="test_multi_step_phi_rotation" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_021.py:252: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_022.TestATParallel022" name="test_single_step_with_detector_rotations" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_022.py:188: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_022.TestATParallel022" name="test_multi_step_with_detector_rotations" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_022.py:265: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_022.TestATParallel022" name="test_large_detector_rotations" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_022.py:343: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles0-cubic-cell_params0]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles0-triclinic-cell_params1]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles1-cubic-cell_params0]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles1-triclinic-cell_params1]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles2-cubic-cell_params0]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles2-triclinic-cell_params1]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles3-cubic-cell_params0]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles3-triclinic-cell_params1]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles4-cubic-cell_params0]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_explicit_misset_equivalence[misset_angles4-triclinic-cell_params1]" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:194: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_023.TestAT_PARALLEL_023_MissetAnglesEquivalence" name="test_misset_changes_pattern" time="0.000"><skipped type="pytest.skip" message="C binary not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_023.py:293: C binary not available</skipped></testcase><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_pytorch_determinism" time="0.061" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_seed_independence" time="0.030" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_c_pytorch_equivalence" time="0.000"><skipped type="pytest.skip" message="Known scaling issue: ~500x difference between C and PyTorch implementations. Interface fix is complete - C code correctly receives misset parameters.">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_024.py:192: Known scaling issue: ~500x difference between C and PyTorch implementations. Interface fix is complete - C code correctly receives misset parameters.</skipped></testcase><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_lcg_compatibility" time="0.000" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_mosaic_rotation_umat_determinism" time="0.000" /><testcase classname="tests.test_at_parallel_024.TestAT_PARALLEL_024" name="test_umat2misset_round_trip" time="0.002" /><testcase classname="tests.test_at_parallel_025" name="test_maximum_intensity_simple_case" time="0.000"><skipped type="pytest.skip" message="AT-PARALLEL tests require NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_025.py:60: AT-PARALLEL tests require NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_025" name="test_maximum_intensity_with_offset" time="0.000"><skipped type="pytest.skip" message="AT-PARALLEL tests require NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_025.py:126: AT-PARALLEL tests require NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_025" name="test_maximum_intensity_triclinic" time="0.000"><skipped type="pytest.skip" message="AT-PARALLEL tests require NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_025.py:193: AT-PARALLEL tests require NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition" name="test_triclinic_absolute_peak_position_pytorch_only" time="0.014" /><testcase classname="tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition" name="test_triclinic_absolute_peak_position_vs_c" time="0.014"><failure message="AssertionError: C reference run failed&#10;assert None is not None">self = &lt;tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition object at 0x7507442b9d10&gt;

    @pytest.mark.requires_c_binary
    def test_triclinic_absolute_peak_position_vs_c(self):
        """Test that PyTorch and C produce peaks at the same absolute position"""
    
        from scripts.c_reference_runner import CReferenceRunner
    
        # Setup configuration
        crystal_config, detector_config, beam_config = self.setup_triclinic_config()
    
        # Create models
        crystal = Crystal(crystal_config)
        detector = Detector(detector_config)
    
        # Create PyTorch simulator
        simulator = Simulator(crystal, detector, crystal_config, beam_config)
    
        # Run PyTorch simulation
        pytorch_image = simulator.run()
        pytorch_slow, pytorch_fast, pytorch_intensity = self.find_peak_position(pytorch_image)
    
        # Setup C runner
        runner = CReferenceRunner()
    
        # Run C simulation with same configs
        c_image = runner.run_simulation(
            detector_config,
            crystal_config,
            beam_config,
            label="Triclinic absolute position test"
        )
    
&gt;       assert c_image is not None, "C reference run failed"
E       AssertionError: C reference run failed
E       assert None is not None

/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_026.py:147: AssertionError</failure></testcase><testcase classname="tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition" name="test_triclinic_vs_cubic_peak_difference" time="0.027" /><testcase classname="tests.test_at_parallel_027.TestAT_PARALLEL_027" name="test_structure_factor_loading" time="0.001" /><testcase classname="tests.test_at_parallel_027.TestAT_PARALLEL_027" name="test_intensity_ratios" time="0.006" /><testcase classname="tests.test_at_parallel_027.TestAT_PARALLEL_027" name="test_pattern_structure" time="0.006" /><testcase classname="tests.test_at_parallel_027.TestAT_PARALLEL_027" name="test_c_pytorch_equivalence" time="0.000"><skipped type="pytest.skip" message="C-PyTorch parallel tests disabled unless NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_027.py:156: C-PyTorch parallel tests disabled unless NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_027.TestAT_PARALLEL_027" name="test_f_squared_scaling" time="0.001" /><testcase classname="tests.test_at_parallel_028.TestATParallel028PerformanceParity" name="test_cpu_performance_parity" time="0.000"><skipped type="pytest.skip" message="Performance tests disabled by default. Set NB_RUN_PERFORMANCE=1 to run.">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_028.py:171: Performance tests disabled by default. Set NB_RUN_PERFORMANCE=1 to run.</skipped></testcase><testcase classname="tests.test_at_parallel_028.TestATParallel028PerformanceParity" name="test_gpu_performance_superiority" time="0.000"><skipped type="pytest.skip" message="Performance tests disabled by default. Set NB_RUN_PERFORMANCE=1 to run.">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_028.py:204: Performance tests disabled by default. Set NB_RUN_PERFORMANCE=1 to run.</skipped></testcase><testcase classname="tests.test_at_parallel_028.TestATParallel028PerformanceParity" name="test_performance_measurement_validity" time="1.236" /><testcase classname="tests.test_at_parallel_029.TestSubpixelSamplingAT029" name="test_pytorch_aliasing_reduction" time="1.528" /><testcase classname="tests.test_at_parallel_029.TestSubpixelSamplingAT029" name="test_pytorch_peak_stability" time="1.533" /><testcase classname="tests.test_at_parallel_029.TestSubpixelSamplingAT029" name="test_pytorch_fwhm_convergence" time="1.530" /><testcase classname="tests.test_at_parallel_029.TestSubpixelSamplingAT029" name="test_c_pytorch_oversample_equivalence" time="0.000"><skipped type="pytest.skip" message="Parallel validation requires C binary and NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_029.py:271: Parallel validation requires C binary and NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_parallel_029.TestSubpixelSamplingAT029" name="test_issue_subpixel_aliasing" time="0.000"><skipped type="pytest.skip" message="Parallel validation requires C binary and NB_RUN_PARALLEL=1">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_parallel_029.py:326: Parallel validation requires C binary and NB_RUN_PARALLEL=1</skipped></testcase><testcase classname="tests.test_at_perf_001.TestATPERF001VectorizationPerformance" name="test_vectorization_scaling" time="2.564" /><testcase classname="tests.test_at_perf_001.TestATPERF001VectorizationPerformance" name="test_performance_parity_with_c" time="0.031"><skipped type="pytest.skip" message="C binary not found at ./nanoBragg">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_001.py:99: C binary not found at ./nanoBragg</skipped></testcase><testcase classname="tests.test_at_perf_001.TestATPERF001VectorizationPerformance" name="test_memory_scaling" time="0.126" /><testcase classname="tests.test_at_perf_002.TestATPERF002ParallelExecution" name="test_cpu_thread_scaling" time="2.158" /><testcase classname="tests.test_at_perf_002.TestATPERF002ParallelExecution" name="test_pytorch_cpu_vs_c_performance" time="0.411"><skipped type="pytest.skip" message="C binary not found at ./nanoBragg">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_002.py:87: C binary not found at ./nanoBragg</skipped></testcase><testcase classname="tests.test_at_perf_002.TestATPERF002ParallelExecution" name="test_gpu_acceleration" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_002.py:183: CUDA not available</skipped></testcase><testcase classname="tests.test_at_perf_002.TestATPERF002ParallelExecution" name="test_thread_efficiency" time="2.479" /><testcase classname="tests.test_at_perf_003.TestATPERF003MemoryBandwidth" name="test_peak_memory_usage" time="5.553" /><testcase classname="tests.test_at_perf_003.TestATPERF003MemoryBandwidth" name="test_float32_vs_float64_performance" time="7.740" /><testcase classname="tests.test_at_perf_003.TestATPERF003MemoryBandwidth" name="test_cache_friendly_access" time="0.532" /><testcase classname="tests.test_at_perf_003.TestATPERF003MemoryBandwidth" name="test_memory_bandwidth_utilization" time="1.997"><failure message="AssertionError: Bandwidth utilization decreases too much with size: 0.176 GB/s vs 0.364 GB/s&#10;assert np.float64(0.1760494259806621) &gt;= (np.float64(0.36395069082998377) * 0.5)">self = &lt;tests.test_at_perf_003.TestATPERF003MemoryBandwidth object at 0x750743f96190&gt;

    def test_memory_bandwidth_utilization(self):
        """Test memory bandwidth utilization efficiency."""
        print("\n" + "="*60)
        print("AT-PERF-003: Memory Bandwidth Utilization")
        print("="*60)
    
        # Test with different detector sizes to see bandwidth scaling
        sizes = [512, 1024, 2048]
        bandwidths = {}
    
        for size in sizes:
            crystal_config = CrystalConfig(
                cell_a=100.0, cell_b=100.0, cell_c=100.0,
                cell_alpha=90.0, cell_beta=90.0, cell_gamma=90.0,
                N_cells=(5, 5, 5),
                default_F=100.0
            )
    
            detector_config = DetectorConfig(
                distance_mm=100.0,
                pixel_size_mm=0.1,
                spixels=size,
                fpixels=size,
                detector_convention=DetectorConvention.MOSFLM
            )
    
            beam_config = BeamConfig(wavelength_A=6.2)
    
            # Create Crystal and Detector objects first
            crystal = Crystal(crystal_config)
            detector = Detector(detector_config)
    
            simulator = Simulator(
                crystal=crystal,
                detector=detector,
                beam_config=beam_config,
            )
    
            # Measure time
            times = []
            for _ in range(3):
                start = time.perf_counter()
                _ = simulator.run()
                end = time.perf_counter()
                times.append(end - start)
    
            median_time = np.median(times)
    
            # Estimate bandwidth (very rough)
            # Assume we read/write the image at least 3 times
            # Using float64 by default (8 bytes per element)
            bytes_moved = size * size * 8 * 3  # float64, 3 passes
            bandwidth = bytes_moved / median_time / (1024**3)  # GB/s
    
            bandwidths[size] = bandwidth
            print(f"  {size}×{size}: {median_time:.3f}s, "
                  f"~{bandwidth:.1f} GB/s effective")
    
        # For complex simulations with many intermediate operations,
        # bandwidth may decrease with size due to cache effects.
        # We expect at least 50% of the small-size bandwidth for large arrays
        # (relaxed from 80% to account for realistic cache and memory effects)
&gt;       assert bandwidths[2048] &gt;= bandwidths[512] * 0.5, \
            f"Bandwidth utilization decreases too much with size: " \
            f"{bandwidths[2048]:.3f} GB/s vs {bandwidths[512]:.3f} GB/s"
E       AssertionError: Bandwidth utilization decreases too much with size: 0.176 GB/s vs 0.364 GB/s
E       assert np.float64(0.1760494259806621) &gt;= (np.float64(0.36395069082998377) * 0.5)

/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_003.py:298: AssertionError</failure></testcase><testcase classname="tests.test_at_perf_003.TestATPERF003MemoryBandwidth" name="test_intermediate_tensor_optimization" time="0.019" /><testcase classname="tests.test_at_perf_004.TestATPERF004HotPathOptimization" name="test_sincg_throughput" time="0.577" /><testcase classname="tests.test_at_perf_004.TestATPERF004HotPathOptimization" name="test_dot_product_throughput" time="0.097" /><testcase classname="tests.test_at_perf_004.TestATPERF004HotPathOptimization" name="test_profile_hot_paths" time="0.094" /><testcase classname="tests.test_at_perf_004.TestATPERF004HotPathOptimization" name="test_vectorization_efficiency" time="0.052" /><testcase classname="tests.test_at_perf_004.TestATPERF004HotPathOptimization" name="test_critical_operations_performance" time="0.274" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_torch_compile_speedup" time="0.946" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_hot_function_compilation" time="0.182" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_compilation_amortization" time="0.131" /><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_gpu_kernel_compilation" time="0.000"><skipped type="pytest.skip" message="CUDA required for GPU compilation test">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_005.py:281: CUDA required for GPU compilation test</skipped></testcase><testcase classname="tests.test_at_perf_005.TestATPERF005CompilationOptimization" name="test_dtype_optimization_impact" time="0.106" /><testcase classname="tests.test_at_perf_006.TestATPERF006TensorVectorization" name="test_no_python_loops_in_core_path" time="0.003" /><testcase classname="tests.test_at_perf_006.TestATPERF006TensorVectorization" name="test_profile_tensor_operations_ratio" time="0.020" /><testcase classname="tests.test_at_perf_006.TestATPERF006TensorVectorization" name="test_vectorized_speedup" time="0.119" /><testcase classname="tests.test_at_perf_006.TestATPERF006TensorVectorization" name="test_tensor_shapes_include_all_dimensions" time="0.002"><skipped type="pytest.skip" message="Cannot verify tensor shapes without access to intermediate values">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_006.py:218: Cannot verify tensor shapes without access to intermediate values</skipped></testcase><testcase classname="tests.test_at_perf_006" name="test_oversample_performance_scaling[1]" time="0.007" /><testcase classname="tests.test_at_perf_006" name="test_oversample_performance_scaling[2]" time="0.009" /><testcase classname="tests.test_at_perf_006" name="test_oversample_performance_scaling[3]" time="0.011" /><testcase classname="tests.test_at_perf_006" name="test_oversample_performance_scaling[4]" time="0.017" /><testcase classname="tests.test_at_perf_006" name="test_detector_thickness_vectorization" time="0.024" /><testcase classname="tests.test_at_perf_007.TestATPerf007ComprehensiveBenchmark" name="test_benchmark_suite_execution" time="0.000"><skipped type="pytest.skip" message="Set NB_RUN_BENCHMARKS=1 to run comprehensive benchmarks">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_007.py:376: Set NB_RUN_BENCHMARKS=1 to run comprehensive benchmarks</skipped></testcase><testcase classname="tests.test_at_perf_007.TestATPerf007ComprehensiveBenchmark" name="test_pytorch_performance_basic" time="0.028" /><testcase classname="tests.test_at_perf_007.TestATPerf007ComprehensiveBenchmark" name="test_memory_scaling" time="0.066" /><testcase classname="tests.test_at_perf_007.TestATPerf007ComprehensiveBenchmark" name="test_gpu_performance" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_007.py:465: CUDA not available</skipped></testcase><testcase classname="tests.test_at_perf_007.TestATPerf007ComprehensiveBenchmark" name="test_benchmark_output_format" time="0.001" /><testcase classname="tests.test_at_perf_008.TestATPERF008CUDATensorResidency" name="test_large_tensor_gpu_residency" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_008.py:141: CUDA not available</skipped></testcase><testcase classname="tests.test_at_perf_008.TestATPERF008CUDATensorResidency" name="test_auto_device_selection_uses_cuda" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_008.py:212: CUDA not available</skipped></testcase><testcase classname="tests.test_at_perf_008.TestATPERF008CUDATensorResidency" name="test_skip_when_cuda_unavailable" time="0.006" /><testcase classname="tests.test_at_perf_008.TestATPERF008CUDATensorResidency" name="test_memory_efficient_gpu_usage" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_at_perf_008.py:283: CUDA not available</skipped></testcase><testcase classname="tests.test_at_pol_001.TestATPOL001KahnModel" name="test_polarization_factor_calculation" time="0.001" /><testcase classname="tests.test_at_pol_001.TestATPOL001KahnModel" name="test_nopolar_toggle" time="0.009" /><testcase classname="tests.test_at_pol_001.TestATPOL001KahnModel" name="test_oversample_polar_last_value_semantics" time="0.013" /><testcase classname="tests.test_at_pol_001.TestATPOL001KahnModel" name="test_polarization_with_tilted_detector" time="0.010" /><testcase classname="tests.test_at_pol_001.TestATPOL001KahnModel" name="test_polarization_factor_range" time="0.094" /><testcase classname="tests.test_at_pre_001" name="test_header_precedence_img_then_mask" time="0.975" /><testcase classname="tests.test_at_pre_001" name="test_mask_beam_center_y_flip" time="0.979" /><testcase classname="tests.test_at_pre_001" name="test_img_only_no_mask" time="0.986" /><testcase classname="tests.test_at_pre_002" name="test_xbeam_ybeam_forces_beam_pivot" time="0.972" /><testcase classname="tests.test_at_pre_002" name="test_xclose_yclose_forces_sample_pivot" time="0.991" /><testcase classname="tests.test_at_pre_002" name="test_orgx_orgy_forces_sample_pivot" time="0.976" /><testcase classname="tests.test_at_pre_002" name="test_explicit_pivot_override" time="1.962" /><testcase classname="tests.test_at_pre_002" name="test_distance_vs_close_distance_pivot_defaults" time="1.964" /><testcase classname="tests.test_at_pre_002" name="test_convention_default_pivots" time="1.941" /><testcase classname="tests.test_at_roi_001.TestAT_ROI_001" name="test_roi_bounds_default_to_full_detector" time="0.000" /><testcase classname="tests.test_at_roi_001.TestAT_ROI_001" name="test_roi_bounds_validation" time="0.001" /><testcase classname="tests.test_at_roi_001.TestAT_ROI_001" name="test_roi_limits_rendering_area" time="0.007" /><testcase classname="tests.test_at_roi_001.TestAT_ROI_001" name="test_mask_array_filtering" time="0.006" /><testcase classname="tests.test_at_roi_001.TestAT_ROI_001" name="test_roi_and_mask_combination" time="0.006" /><testcase classname="tests.test_at_roi_001.TestAT_ROI_001" name="test_mask_array_dimension_validation" time="0.000" /><testcase classname="tests.test_at_roi_001.TestAT_ROI_001" name="test_statistics_exclude_masked_pixels" time="0.011" /><testcase classname="tests.test_at_sam_001" name="test_at_sam_001_steps_normalization" time="0.014" /><testcase classname="tests.test_at_sam_002.TestAT_SAM_002_OversampleLastValue" name="test_oversample_omega_last_value_semantics" time="0.009" /><testcase classname="tests.test_at_sam_002.TestAT_SAM_002_OversampleLastValue" name="test_oversample_without_subpixel_flags" time="0.008" /><testcase classname="tests.test_at_sam_002.TestAT_SAM_002_OversampleLastValue" name="test_oversample_flag_precedence" time="0.005" /><testcase classname="tests.test_at_sam_003" name="test_dmin_culling_basic" time="0.013" /><testcase classname="tests.test_at_sam_003" name="test_dmin_culling_exact_threshold" time="0.006" /><testcase classname="tests.test_at_sam_003" name="test_dmin_zero_no_culling" time="0.006" /><testcase classname="tests.test_at_src_001.TestAT_SRC_001_SourcefileAndWeighting" name="test_sourcefile_with_all_columns" time="0.001" /><testcase classname="tests.test_at_src_001.TestAT_SRC_001_SourcefileAndWeighting" name="test_sourcefile_with_missing_columns" time="0.001" /><testcase classname="tests.test_at_src_001.TestAT_SRC_001_SourcefileAndWeighting" name="test_sourcefile_default_position" time="0.001" /><testcase classname="tests.test_at_src_001.TestAT_SRC_001_SourcefileAndWeighting" name="test_multiple_sources_normalization" time="0.001" /><testcase classname="tests.test_at_src_001.TestAT_SRC_001_SourcefileAndWeighting" name="test_empty_sourcefile" time="0.000" /><testcase classname="tests.test_at_src_001.TestAT_SRC_001_SourcefileAndWeighting" name="test_weighted_sources_integration" time="0.006" /><testcase classname="tests.test_at_src_001_cli.TestAT_SRC_001_CLI" name="test_sourcefile_loading_via_cli" time="0.974" /><testcase classname="tests.test_at_src_001_cli.TestAT_SRC_001_CLI" name="test_sourcefile_with_missing_columns" time="0.975" /><testcase classname="tests.test_at_src_001_cli.TestAT_SRC_001_CLI" name="test_sourcefile_takes_precedence_over_divergence" time="0.978" /><testcase classname="tests.test_at_src_001_simple" name="test_sourcefile_dtype_propagation[dtype0]" time="0.001" /><testcase classname="tests.test_at_src_001_simple" name="test_sourcefile_dtype_propagation[dtype1]" time="0.001" /><testcase classname="tests.test_at_src_001_simple" name="test_sourcefile_dtype_propagation[None]" time="0.001" /><testcase classname="tests.test_at_src_001_simple" name="test_sourcefile_parsing" time="0.002" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_no_parameters_provided" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_only_step_provided" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_only_range_provided" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_only_count_provided_angles" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_only_count_provided_thickness" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_range_and_step_provided" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_count_and_range_provided" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_divergence_auto_selection" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_dispersion_auto_selection" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_thickness_auto_selection" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_all_parameters_provided" time="0.000" /><testcase classname="tests.test_at_src_002.TestAT_SRC_002" name="test_conflicting_parameters" time="0.000" /><testcase classname="tests.test_at_src_003.TestSourcefileLambdaOverride" name="test_lambda_override_single_source" time="0.001" /><testcase classname="tests.test_at_src_003.TestSourcefileLambdaOverride" name="test_lambda_override_multiple_sources" time="0.001" /><testcase classname="tests.test_at_src_003.TestSourcefileWarningEmission" name="test_warning_emitted_on_mismatch" time="0.000" /><testcase classname="tests.test_at_src_003.TestSourcefileWarningEmission" name="test_no_warning_when_matching" time="0.000" /><testcase classname="tests.test_at_src_003.TestSourcefileWarningEmission" name="test_no_warning_when_column_missing" time="0.000" /><testcase classname="tests.test_at_src_003.TestStepsNormalizationParity" name="test_steps_count_includes_zero_weight_sources" time="0.000" /><testcase classname="tests.test_at_src_003.TestStepsNormalizationParity" name="test_equal_weighting_preserved" time="0.000" /><testcase classname="tests.test_at_sta_001.TestAT_STA_001" name="test_statistics_basic" time="0.006" /><testcase classname="tests.test_at_sta_001.TestAT_STA_001" name="test_statistics_with_roi" time="0.006" /><testcase classname="tests.test_at_sta_001.TestAT_STA_001" name="test_statistics_with_mask" time="0.002" /><testcase classname="tests.test_at_sta_001.TestAT_STA_001" name="test_statistics_empty_roi" time="0.005" /><testcase classname="tests.test_at_sta_001.TestAT_STA_001" name="test_statistics_last_max_location" time="0.005" /><testcase classname="tests.test_at_str_001" name="test_at_str_001_nearest_neighbor_lookup" time="0.002" /><testcase classname="tests.test_at_str_002" name="test_tricubic_interpolation_enabled" time="0.007" /><testcase classname="tests.test_at_str_002" name="test_tricubic_out_of_bounds_fallback" time="0.001" /><testcase classname="tests.test_at_str_002" name="test_auto_enable_interpolation" time="0.001" /><testcase classname="tests.test_at_str_003.TestAT_STR_003_LatticeShapeModels" name="test_square_shape_model" time="0.001" /><testcase classname="tests.test_at_str_003.TestAT_STR_003_LatticeShapeModels" name="test_round_shape_model" time="0.001" /><testcase classname="tests.test_at_str_003.TestAT_STR_003_LatticeShapeModels" name="test_gauss_shape_model" time="0.002" /><testcase classname="tests.test_at_str_003.TestAT_STR_003_LatticeShapeModels" name="test_tophat_shape_model" time="0.000" /><testcase classname="tests.test_at_str_003.TestAT_STR_003_LatticeShapeModels" name="test_shape_model_comparison" time="0.006" /><testcase classname="tests.test_at_str_003.TestAT_STR_003_LatticeShapeModels" name="test_fudge_parameter_scaling" time="0.001" /><testcase classname="tests.test_at_str_003.TestAT_STR_003_LatticeShapeModels" name="test_shape_models_at_bragg_peak" time="0.001" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_sparse_hkl_loading" time="0.000" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_missing_reflection_uses_default_f" time="0.001" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_intensity_ratios_with_sparse_hkl" time="0.007" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_fallback_with_no_hkl_uses_default_f" time="0.001" /><testcase classname="tests.test_at_str_004.TestAT_STR_004" name="test_fdump_preserves_sparse_behavior" time="0.002" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_find_c_binary_resolution" time="0.001" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_find_py_binary_resolution" time="0.973" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_load_float_image" time="0.002" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_resample_image" time="0.001" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_compute_metrics" time="0.003" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_find_peaks" time="0.001" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_script_integration" time="0.011"><failure message="assert 2 in [0, 3]&#10; +  where 2 = CompletedProcess(args=['python', 'scripts/nb_compare.py', '--outdir', 'test_comparison', '--', '-default_F', '100', '-cell', '100', '100', '100', '90', '90', '90', '-lambda', '1.0', '-distance', '100', '-detpixels', '64', '-floatfile', 'test.bin'], returncode=2, stdout='', stderr=&quot;python: can't open file '/tmp/pytest-of-ollie/pytest-549/test_fdump_preserves_sparse_be0/scripts/nb_compare.py': [Errno 2] No such file or directory\n&quot;).returncode">self = &lt;tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison object at 0x750743ecc5a0&gt;

    @pytest.mark.skipif(
        not Path("./nanoBragg").exists() and not Path("./golden_suite_generator/nanoBragg").exists(),
        reason="Requires C binary for integration test"
    )
    def test_script_integration(self):
        """Test the full script execution."""
        # Run with minimal arguments
        cmd = [
            'python', 'scripts/nb_compare.py',
            '--outdir', 'test_comparison',
            '--',
            '-default_F', '100',
            '-cell', '100', '100', '100', '90', '90', '90',
            '-lambda', '1.0',
            '-distance', '100',
            '-detpixels', '64',
            '-floatfile', 'test.bin'
        ]
    
        # Run the script
        result = subprocess.run(cmd, capture_output=True, text=True)
    
        # Check that it ran without critical errors per spec
        # Exit codes: 0=success, 1=usage error, 2=runner failure, 3=correlation&lt;threshold, 4=shape mismatch, 5=I/O error
&gt;       assert result.returncode in [0, 3]  # 0=pass, 3=correlation below threshold
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       assert 2 in [0, 3]
E        +  where 2 = CompletedProcess(args=['python', 'scripts/nb_compare.py', '--outdir', 'test_comparison', '--', '-default_F', '100', '-cell', '100', '100', '100', '90', '90', '90', '-lambda', '1.0', '-distance', '100', '-detpixels', '64', '-floatfile', 'test.bin'], returncode=2, stdout='', stderr="python: can't open file '/tmp/pytest-of-ollie/pytest-549/test_fdump_preserves_sparse_be0/scripts/nb_compare.py': [Errno 2] No such file or directory\n").returncode

/home/ollie/Documents/tmp/nanoBragg/tests/test_at_tools_001.py:191: AssertionError</failure></testcase><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_metrics_with_identical_images" time="0.002" /><testcase classname="tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison" name="test_metrics_with_scaled_images" time="0.002" /><testcase classname="tests.test_beam_center_source.TestBeamCenterSource" name="test_mosflm_auto_calculated_applies_offset" time="0.001" /><testcase classname="tests.test_beam_center_source.TestBeamCenterSource" name="test_mosflm_explicit_no_offset" time="0.001" /><testcase classname="tests.test_beam_center_source.TestBeamCenterSource" name="test_xds_no_offset_regardless_of_source" time="0.002" /><testcase classname="tests.test_beam_center_source.TestBeamCenterSource" name="test_explicit_matches_default_value" time="0.002" /><testcase classname="tests.test_beam_center_source.TestBeamCenterSource" name="test_default_beam_center_source_is_auto" time="0.001" /><testcase classname="tests.test_cli_flags.TestPix0VectorAlias" name="test_pix0_meters_alias" time="0.002" /><testcase classname="tests.test_cli_flags.TestPix0VectorAlias" name="test_pix0_millimeter_alias" time="0.001" /><testcase classname="tests.test_cli_flags.TestPix0VectorAlias" name="test_pix0_meters_and_mm_equivalence" time="0.003" /><testcase classname="tests.test_cli_flags.TestPix0VectorAlias" name="test_dual_pix0_flag_rejection" time="0.001" /><testcase classname="tests.test_cli_flags.TestPix0VectorAlias" name="test_pix0_signed_combinations[pix0_m0-pix0_mm0]" time="0.003" /><testcase classname="tests.test_cli_flags.TestPix0VectorAlias" name="test_pix0_signed_combinations[pix0_m1-pix0_mm1]" time="0.003" /><testcase classname="tests.test_cli_flags.TestPix0VectorAlias" name="test_pix0_signed_combinations[pix0_m2-pix0_mm2]" time="0.016" /><testcase classname="tests.test_cli_flags.TestDetectorOverridePersistence" name="test_detector_override_persistence_cpu" time="0.001" /><testcase classname="tests.test_cli_flags.TestDetectorOverridePersistence" name="test_detector_override_persistence_cuda" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_flags.py:158: CUDA not available</skipped></testcase><testcase classname="tests.test_cli_flags.TestDetectorOverridePersistence" name="test_detector_override_dtype_preservation" time="0.002" /><testcase classname="tests.test_cli_flags.TestNoiseSuppressionFlag" name="test_nonoise_suppresses_noise_output" time="0.001" /><testcase classname="tests.test_cli_flags.TestNoiseSuppressionFlag" name="test_noisefile_without_nonoise" time="0.002" /><testcase classname="tests.test_cli_flags.TestNoiseSuppressionFlag" name="test_nonoise_preserves_seed" time="0.001" /><testcase classname="tests.test_cli_flags.TestNoiseSuppressionFlag" name="test_nonoise_without_noisefile" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIIntegrationSanity" name="test_pix0_does_not_alter_beam_vector" time="0.002" /><testcase classname="tests.test_cli_flags.TestCLIIntegrationSanity" name="test_pix0_triggers_custom_convention" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIIntegrationSanity" name="test_roi_unaffected_by_new_flags" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIIntegrationSanity" name="test_convention_preserved_without_pix0" time="0.002" /><testcase classname="tests.test_cli_flags.TestCLIBeamVector" name="test_custom_beam_vector_propagates" time="0.002" /><testcase classname="tests.test_cli_flags.TestCLIPix0Override" name="test_pix0_override_beam_pivot_transform[cpu-dtype0]" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIPix0Override" name="test_pix0_override_beam_pivot_transform[cuda-dtype1]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_flags.py:399: CUDA not available</skipped></testcase><testcase classname="tests.test_cli_flags.TestCLIPix0Override" name="test_pix0_vector_mm_beam_pivot[cpu]" time="0.000"><failure message="FileNotFoundError: [Errno 2] No such file or directory: 'reports/2025-10-cli-flags/phase_h/implementation/pix0_expected.json'">self = &lt;tests.test_cli_flags.TestCLIPix0Override object at 0x750743e5fa80&gt;
device = 'cpu'

    @pytest.mark.parametrize("device", ["cpu", pytest.param("cuda", marks=pytest.mark.skipif(
        not torch.cuda.is_available(), reason="CUDA not available"))])
    def test_pix0_vector_mm_beam_pivot(self, device):
        """
        Regression test for CLI-FLAGS-003 Phase H3b.
    
        CRITICAL FINDING from Phase H3b1:
        When custom detector vectors are provided, C code IGNORES -pix0_vector_mm entirely.
        The custom vectors already define the detector geometry completely.
    
        This test verifies BOTH scenarios:
        1. WITH custom vectors: pix0_override has NO EFFECT (matches C behavior)
        2. WITHOUT custom vectors: pix0_override IS applied
    
        Expected pix0 vector from C trace (phase_h) WITH custom vectors:
        -0.216336514802265, 0.215206668836451, -0.230198010448577 meters
    
        Reference: plans/active/cli-noise-pix0/plan.md Phase H3b
        Evidence: reports/2025-10-cli-flags/phase_h/implementation/pix0_mapping_analysis.md
        """
        import json
        from pathlib import Path
    
        # Load expected C pix0 vector
        expected_json_path = Path("reports/2025-10-cli-flags/phase_h/implementation/pix0_expected.json")
&gt;       with open(expected_json_path) as f:
             ^^^^^^^^^^^^^^^^^^^^^^^^
E       FileNotFoundError: [Errno 2] No such file or directory: 'reports/2025-10-cli-flags/phase_h/implementation/pix0_expected.json'

/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_flags.py:477: FileNotFoundError</failure></testcase><testcase classname="tests.test_cli_flags.TestCLIPix0Override" name="test_pix0_vector_mm_beam_pivot[cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_flags.py:452: CUDA not available</skipped></testcase><testcase classname="tests.test_cli_flags.TestCLIPolarization" name="test_default_polarization_parity" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIPolarization" name="test_nopolar_flag" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIPolarization" name="test_polar_override" time="0.002" /><testcase classname="tests.test_cli_flags.TestCLIPivotSelection" name="test_custom_vectors_force_sample_pivot[float32-cpu]" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIPivotSelection" name="test_custom_vectors_force_sample_pivot[float32-cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_flags.py:721: CUDA not available</skipped></testcase><testcase classname="tests.test_cli_flags.TestCLIPivotSelection" name="test_custom_vectors_force_sample_pivot[float64-cpu]" time="0.001" /><testcase classname="tests.test_cli_flags.TestCLIPivotSelection" name="test_custom_vectors_force_sample_pivot[float64-cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_flags.py:721: CUDA not available</skipped></testcase><testcase classname="tests.test_cli_flags.TestHKLFdumpParity" name="test_scaled_hkl_roundtrip" time="0.000"><failure message="AssertionError: Missing scaled.hkl&#10;assert False&#10; +  where False = exists()&#10; +    where exists = PosixPath('scaled.hkl').exists&#10; +      where PosixPath('scaled.hkl') = &lt;class 'pathlib._local.Path'&gt;('scaled.hkl')">self = &lt;tests.test_cli_flags.TestHKLFdumpParity object at 0x750743f056d0&gt;

    def test_scaled_hkl_roundtrip(self):
        """
        Roundtrip test: HKL text → PyTorch grid → Fdump → PyTorch grid.
    
        Expected failure (before fix):
        - read_fdump will fail to match HKL grid due to padding mismatch
        - C allocates (range+1) dimensions but PyTorch currently uses range
    
        After fix:
        - Both readers should produce identical grids
        - Max |ΔF| ≤ 1e-6 electrons (spec-a-core.md:460)
        """
        from pathlib import Path
        import tempfile
        from nanobrag_torch.io.hkl import read_hkl_file, write_fdump, read_fdump
    
        # Input files from Phase L1b analysis
        hkl_path = "scaled.hkl"
        c_fdump_path = "reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_20251006181401.bin"
    
        # Verify files exist
&gt;       assert Path(hkl_path).exists(), f"Missing {hkl_path}"
E       AssertionError: Missing scaled.hkl
E       assert False
E        +  where False = exists()
E        +    where exists = PosixPath('scaled.hkl').exists
E        +      where PosixPath('scaled.hkl') = &lt;class 'pathlib._local.Path'&gt;('scaled.hkl')

/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_flags.py:851: AssertionError</failure></testcase><testcase classname="tests.test_cli_scaling.TestMOSFLMCellVectors" name="test_mosflm_cell_vectors" time="0.000"><skipped type="pytest.skip" message="A.mat not found in repository root">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:81: A.mat not found in repository root</skipped></testcase><testcase classname="tests.test_cli_scaling.TestFlattSquareMatchesC" name="test_f_latt_square_matches_c" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL=1 required for C↔PyTorch parity">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:144: NB_RUN_PARALLEL=1 required for C↔PyTorch parity</skipped></testcase><testcase classname="tests.test_cli_scaling.TestSourceWeights" name="test_source_weights_ignored_per_spec" time="1.972" /><testcase classname="tests.test_cli_scaling.TestSourceWeights" name="test_cli_lambda_overrides_sourcefile" time="0.021" /><testcase classname="tests.test_cli_scaling.TestSourceWeights" name="test_uniform_weights_ignored" time="0.000" /><testcase classname="tests.test_cli_scaling.TestSourceWeights" name="test_edge_case_zero_sum_accepted" time="0.000" /><testcase classname="tests.test_cli_scaling.TestSourceWeights" name="test_edge_case_negative_weights_accepted" time="0.000" /><testcase classname="tests.test_cli_scaling.TestSourceWeights" name="test_single_source_fallback" time="0.007" /><testcase classname="tests.test_cli_scaling.TestSourceWeightsDivergence" name="test_c_divergence_reference" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL=1 required">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:585: NB_RUN_PARALLEL=1 required</skipped></testcase><testcase classname="tests.test_cli_scaling.TestSourceWeightsDivergence" name="test_sourcefile_divergence_warning" time="0.000"><skipped type="pytest.skip" message="two_sources.txt fixture not found in expected locations">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:715: two_sources.txt fixture not found in expected locations</skipped></testcase><testcase classname="tests.test_cli_scaling.TestHKLDevice" name="test_hkl_tensor_respects_device[cpu-float32]" time="0.000"><skipped type="pytest.skip" message="scaled.hkl not found (required for Phase L supervisor command)">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:808: scaled.hkl not found (required for Phase L supervisor command)</skipped></testcase><testcase classname="tests.test_cli_scaling.TestHKLDevice" name="test_hkl_tensor_respects_device[cpu-float64]" time="0.000"><skipped type="pytest.skip" message="scaled.hkl not found (required for Phase L supervisor command)">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:808: scaled.hkl not found (required for Phase L supervisor command)</skipped></testcase><testcase classname="tests.test_cli_scaling.TestHKLDevice" name="test_hkl_tensor_respects_device[cuda-float32]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:776: CUDA not available</skipped></testcase><testcase classname="tests.test_cli_scaling.TestHKLDevice" name="test_hkl_tensor_respects_device[cuda-float64]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling.py:776: CUDA not available</skipped></testcase><testcase classname="tests.test_cli_scaling_phi0.TestPhiZeroParity" name="test_rot_b_matches_c" time="0.000"><skipped type="pytest.skip" message="A.mat not found (required for supervisor command reproduction)">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling_phi0.py:56: A.mat not found (required for supervisor command reproduction)</skipped></testcase><testcase classname="tests.test_cli_scaling_phi0.TestPhiZeroParity" name="test_k_frac_phi0_matches_c" time="0.000"><skipped type="pytest.skip" message="A.mat not found">/home/ollie/Documents/tmp/nanoBragg/tests/test_cli_scaling_phi0.py:165: A.mat not found</skipped></testcase><testcase classname="tests.test_configuration_consistency.TestConfigurationConsistency" name="test_explicit_defaults_equal_implicit" time="0.001"><skipped type="pytest.xfail" message="C nanoBragg has known bug: passing default twotheta_axis switches to CUSTOM mode" /></testcase><testcase classname="tests.test_configuration_consistency.TestConfigurationConsistency" name="test_configuration_echo_present" time="0.000"><skipped type="pytest.skip" message="Requires special nanoBragg_config binary with diagnostic output that doesn't exist in standard build">/home/ollie/Documents/tmp/nanoBragg/tests/test_configuration_consistency.py:113: Requires special nanoBragg_config binary with diagnostic output that doesn't exist in standard build</skipped></testcase><testcase classname="tests.test_configuration_consistency.TestConfigurationConsistency" name="test_mode_detection_accuracy" time="0.000"><skipped type="pytest.skip" message="Requires special nanoBragg_config binary with diagnostic output">/home/ollie/Documents/tmp/nanoBragg/tests/test_configuration_consistency.py:147: Requires special nanoBragg_config binary with diagnostic output</skipped></testcase><testcase classname="tests.test_configuration_consistency.TestConfigurationConsistency" name="test_trigger_tracking" time="0.000"><skipped type="pytest.skip" message="Requires special nanoBragg_config binary with diagnostic output">/home/ollie/Documents/tmp/nanoBragg/tests/test_configuration_consistency.py:162: Requires special nanoBragg_config binary with diagnostic output</skipped></testcase><testcase classname="tests.test_configuration_consistency.TestConfigurationConsistency" name="test_all_vector_parameters_trigger_custom" time="0.000"><skipped type="pytest.skip" message="Requires special nanoBragg_config binary with diagnostic output">/home/ollie/Documents/tmp/nanoBragg/tests/test_configuration_consistency.py:177: Requires special nanoBragg_config binary with diagnostic output</skipped></testcase><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_cubic_regression" time="0.005" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_triclinic_correctness" time="0.001" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_metric_duality" time="0.003" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_volume_identity" time="0.001" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_resolution_shell_consistency" time="0.002" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_rotation_invariance" time="0.003" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_gradient_flow" time="0.008" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_angles_to_rotation_matrix_identity" time="0.000" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_angles_to_rotation_matrix_x_rotation" time="0.000" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_angles_to_rotation_matrix_y_rotation" time="0.000" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_angles_to_rotation_matrix_z_rotation" time="0.000" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_angles_to_rotation_matrix_order" time="0.001" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_angles_to_rotation_matrix_properties" time="0.001" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_angles_to_rotation_matrix_tensor_types" time="0.001" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_misset_orientation" time="0.002" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_misset_zero_rotation" time="0.003" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_misset_tensor_inputs" time="0.005" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_misset_rotation_order" time="0.002" /><testcase classname="tests.test_crystal_geometry.TestCrystalGeometry" name="test_misset_gradient_flow" time="0.004" /><testcase classname="tests.test_custom_vectors.TestCustomVectors" name="test_custom_vectors_in_detector_config" time="0.000" /><testcase classname="tests.test_custom_vectors.TestCustomVectors" name="test_custom_vectors_in_detector" time="0.006" /><testcase classname="tests.test_custom_vectors.TestCustomVectors" name="test_cli_custom_vectors" time="0.975" /><testcase classname="tests.test_custom_vectors.TestCustomVectors" name="test_custom_convention_detection" time="0.982" /><testcase classname="tests.test_custom_vectors.TestCustomVectors" name="test_custom_spindle_axis" time="0.983" /><testcase classname="tests.test_debug_trace.TestDebugTraceFeatures" name="test_printout_flag" time="0.977" /><testcase classname="tests.test_debug_trace.TestDebugTraceFeatures" name="test_printout_pixel_flag" time="0.983" /><testcase classname="tests.test_debug_trace.TestDebugTraceFeatures" name="test_trace_pixel_flag" time="0.989" /><testcase classname="tests.test_debug_trace.TestDebugTraceFeatures" name="test_combined_debug_flags" time="0.983" /><testcase classname="tests.test_debug_trace.TestDebugTraceFeatures" name="test_out_of_bounds_pixel" time="0.974" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_default_mosflm_convention" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_default_xds_convention" time="0.002" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_single_axis_rotations" time="0.002" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_combined_rotations" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_twotheta_rotation" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_all_rotations_combined" time="0.001" /><testcase classname="tests.test_detector_basis_vectors.TestDetectorBasisVectors" name="test_tensor_rotation_parameters" time="0.001" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_default_values" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_post_init_defaults" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_custom_twotheta_axis" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_xds_convention_defaults" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_invalid_pixel_counts" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_invalid_distance" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_invalid_pixel_size" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_invalid_oversample" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorConfig" name="test_tensor_parameters" time="0.000" /><testcase classname="tests.test_detector_config.TestDetectorInitialization" name="test_default_initialization" time="0.001" /><testcase classname="tests.test_detector_config.TestDetectorInitialization" name="test_custom_config_initialization" time="0.001" /><testcase classname="tests.test_detector_config.TestDetectorInitialization" name="test_backward_compatibility_check" time="0.001" /><testcase classname="tests.test_detector_config.TestDetectorInitialization" name="test_custom_config_not_default" time="0.001" /><testcase classname="tests.test_detector_config.TestDetectorInitialization" name="test_basis_vectors_initialization" time="0.001" /><testcase classname="tests.test_detector_config.TestDetectorInitialization" name="test_device_and_dtype" time="0.000" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_adxv_convention_basis_vectors" time="0.001" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_denzo_convention_basis_vectors" time="0.002" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_denzo_beam_center_mapping" time="0.002" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_adxv_beam_direction" time="0.001" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_adxv_twotheta_axis_default" time="0.000" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_denzo_twotheta_axis_default" time="0.000" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_adxv_default_beam_centers" time="0.000" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_all_conventions_orthonormal" time="0.005" /><testcase classname="tests.test_detector_conventions.TestDetectorConventions" name="test_conventions_with_rotations" time="0.005" /><testcase classname="tests.test_detector_geometry.TestDetectorGeometryRegressions" name="test_rotated_basis_vectors_match_c_reference" time="0.001" /><testcase classname="tests.test_detector_geometry.TestDetectorGeometryRegressions" name="test_pix0_vector_matches_c_reference_in_beam_pivot" time="0.000" /><testcase classname="tests.test_detector_geometry.TestDetectorGeometryRegressions" name="test_mosflm_axis_mapping_correctness" time="0.001" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_detector_parameter_gradients" time="0.043" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_basis_vector_gradients" time="0.010" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_pixel_coords_basis_vector_gradients" time="0.016" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_comprehensive_gradcheck" time="0.018" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_beam_strike_invariant_in_beam_pivot_mode" time="0.008" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_xds_convention_basic_geometry" time="0.002" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_detector_real_valued_gradients" time="0.003" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_detector_complex_gradient_edge_cases" time="0.001" /><testcase classname="tests.test_detector_geometry.TestDetectorDifferentiability" name="test_simulator_real_valued_gradients" time="0.009" /><testcase classname="tests.test_detector_pivots" name="test_beam_pivot_keeps_beam_indices_and_alignment" time="0.018" /><testcase classname="tests.test_detector_pivots" name="test_sample_pivot_moves_beam_indices_with_twotheta" time="0.017" /><testcase classname="tests.test_divergence_culling.TestDivergenceCullingModes" name="test_round_div_applies_elliptical_trimming" time="0.001" /><testcase classname="tests.test_divergence_culling.TestDivergenceCullingModes" name="test_square_div_uses_full_grid" time="0.001" /><testcase classname="tests.test_divergence_culling.TestDivergenceCullingModes" name="test_round_vs_square_source_count_difference" time="0.001" /><testcase classname="tests.test_divergence_culling.TestDivergenceCullingModes" name="test_single_divergence_point_unaffected" time="0.001" /><testcase classname="tests.test_divergence_culling.TestDivergenceCullingModes" name="test_elliptical_trimming_threshold" time="0.001" /><testcase classname="tests.test_divergence_culling.TestDivergenceCullingModes" name="test_combined_divergence_and_dispersion" time="0.001" /><testcase classname="tests.test_gradients.TestCellParameterGradients" name="test_gradcheck_cell_a" time="47.199" /><testcase classname="tests.test_gradients.TestCellParameterGradients" name="test_gradcheck_cell_b" time="127.853" /><testcase classname="tests.test_gradients.TestCellParameterGradients" name="test_gradcheck_cell_c" time="71.810" /><testcase classname="tests.test_gradients.TestCellParameterGradients" name="test_gradcheck_cell_alpha" time="62.158" /><testcase classname="tests.test_gradients.TestCellParameterGradients" name="test_gradcheck_cell_beta" time="48.681" /><testcase classname="tests.test_gradients.TestCellParameterGradients" name="test_gradcheck_cell_gamma" time="48.936" /><testcase classname="tests.test_gradients.TestAdvancedGradients" name="test_joint_gradcheck" time="145.436" /><testcase classname="tests.test_gradients.TestAdvancedGradients" name="test_gradgradcheck_cell_params" time="51.161" /><testcase classname="tests.test_gradients.TestAdvancedGradients" name="test_gradient_flow_simulation" time="1.917" /><testcase classname="tests.test_gradients.TestPropertyBasedGradients" name="test_property_metric_duality" time="0.128" /><testcase classname="tests.test_gradients.TestPropertyBasedGradients" name="test_property_volume_consistency" time="0.081" /><testcase classname="tests.test_gradients.TestPropertyBasedGradients" name="test_property_gradient_stability" time="906.228"><failure message="Failed: Timeout (&gt;905.0s) from pytest-timeout.">self = &lt;tests.test_gradients.TestPropertyBasedGradients object at 0x750743d3aea0&gt;

    @pytest.mark.slow_gradient
    @pytest.mark.timeout(905)
    def test_property_gradient_stability(self):
        """Ensure gradients remain stable across parameter space."""
        torch.manual_seed(44)  # For reproducibility
    
        for i in range(25):  # Fewer tests as gradcheck is expensive
            # Generate random cell
            cell_params = self.generate_random_cell()
    
            # Create tensor parameters
            cell_params_tensor = torch.tensor(
                [
                    cell_params["cell_a"],
                    cell_params["cell_b"],
                    cell_params["cell_c"],
                    cell_params["cell_alpha"],
                    cell_params["cell_beta"],
                    cell_params["cell_gamma"],
                ],
                dtype=torch.float64,
                requires_grad=True,
            )
    
            def loss_fn(params):
                device = torch.device("cpu")
                dtype = torch.float64
    
                # Unpack parameters
                cell_a, cell_b, cell_c, cell_alpha, cell_beta, cell_gamma = params
    
                # Create config
                config = CrystalConfig(
                    cell_a=cell_a,
                    cell_b=cell_b,
                    cell_c=cell_c,
                    cell_alpha=cell_alpha,
                    cell_beta=cell_beta,
                    cell_gamma=cell_gamma,
                    mosaic_spread_deg=0.0,
                    mosaic_domains=1,
                    N_cells=(5, 5, 5),
                )
    
                # Create objects
                crystal = Crystal(config=config, device=device, dtype=dtype)
                detector = Detector(device=device, dtype=dtype)
    
                # Run simulation
                simulator = Simulator(
                    crystal, detector, crystal_config=config, device=device, dtype=dtype
                )
                image = simulator.run()
    
                return image.sum()
    
            # Verify gradcheck passes for this random geometry
            try:
&gt;               assert gradcheck(
                    loss_fn,
                    (cell_params_tensor,),
                    eps=1e-6,
                    atol=1e-5,  # Slightly relaxed for stability
                    rtol=0.05,
                    raise_exception=True,
                )

/home/ollie/Documents/tmp/nanoBragg/tests/test_gradients.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/ollie/miniconda3/lib/python3.13/site-packages/torch/autograd/gradcheck.py:2056: in gradcheck
    return _gradcheck_helper(**args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
/home/ollie/miniconda3/lib/python3.13/site-packages/torch/autograd/gradcheck.py:2112: in _gradcheck_helper
    _test_backward_mul_by_grad_output(outputs, tupled_inputs, masked)
/home/ollie/miniconda3/lib/python3.13/site-packages/torch/autograd/gradcheck.py:1181: in _test_backward_mul_by_grad_output
    grads_input = torch.autograd.grad(
/home/ollie/miniconda3/lib/python3.13/site-packages/torch/autograd/__init__.py:451: in grad
    return handle_torch_function(
/home/ollie/miniconda3/lib/python3.13/site-packages/torch/overrides.py:1721: in handle_torch_function
    result = mode.__torch_function__(public_api, types, args, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/home/ollie/miniconda3/lib/python3.13/site-packages/torch/utils/_device.py:104: in __torch_function__
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
/home/ollie/miniconda3/lib/python3.13/site-packages/torch/autograd/__init__.py:502: in grad
    result = _engine_run_backward(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

t_outputs = (tensor(0., grad_fn=&lt;SumBackward0&gt;),)
args = ((tensor(0.),), False, False, (tensor([ 62.6236,  51.2905, 161.7528, 101.3378,  97.2310,  81.4797],
       requires_grad=True),), True)
kwargs = {'accumulate_grad': False}, attach_logging_hooks = False

    def _engine_run_backward(
        t_outputs: Sequence[Union[torch.Tensor, GradientEdge]],
        *args: Any,
        **kwargs: Any,
    ) -&gt; tuple[torch.Tensor, ...]:
        attach_logging_hooks = log.getEffectiveLevel() &lt;= logging.DEBUG
        if attach_logging_hooks:
            unregister_hooks = _register_logging_hooks_on_whole_graph(t_outputs)
        try:
&gt;           return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
                t_outputs, *args, **kwargs
            )  # Calls into the C++ engine to run the backward pass
E           Failed: Timeout (&gt;905.0s) from pytest-timeout.

/home/ollie/miniconda3/lib/python3.13/site-packages/torch/autograd/graph.py:824: Failed</failure></testcase><testcase classname="tests.test_gradients.TestOptimizationRecovery" name="test_optimization_recovers_cell" time="0.074" /><testcase classname="tests.test_gradients.TestOptimizationRecovery" name="test_multiple_optimization_scenarios" time="0.347" /><testcase classname="tests.test_mosflm_matrix.TestMOSFLMMatrixLoading" name="test_read_identity_matrix" time="0.001" /><testcase classname="tests.test_mosflm_matrix.TestMOSFLMMatrixLoading" name="test_read_cubic_matrix" time="0.001" /><testcase classname="tests.test_mosflm_matrix.TestMOSFLMMatrixLoading" name="test_wavelength_scaling" time="0.001" /><testcase classname="tests.test_mosflm_matrix.TestMOSFLMMatrixLoading" name="test_triclinic_matrix" time="0.000" /><testcase classname="tests.test_mosflm_matrix.TestMOSFLMMatrixLoading" name="test_missing_file" time="0.000" /><testcase classname="tests.test_mosflm_matrix.TestMOSFLMMatrixLoading" name="test_invalid_format" time="0.000" /><testcase classname="tests.test_mosflm_matrix.TestMOSFLMMatrixLoading" name="test_comments_and_whitespace" time="0.001" /><testcase classname="tests.test_multi_source_integration" name="test_multi_source_intensity_normalization" time="0.018" /><testcase classname="tests.test_oversample_autoselect.TestOversampleAutoSelect" name="test_auto_select_formula" time="0.009" /><testcase classname="tests.test_oversample_autoselect.TestOversampleAutoSelect" name="test_different_crystal_sizes" time="0.036" /><testcase classname="tests.test_oversample_autoselect.TestOversampleAutoSelect" name="test_explicit_oversample_overrides_auto" time="0.017" /><testcase classname="tests.test_oversample_autoselect.TestOversampleAutoSelect" name="test_different_wavelengths" time="0.031" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_linter_finds_repo_root" time="0.000" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_linter_loads_yaml" time="0.013" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_yaml_structure_validation" time="0.002" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_missing_yaml_file" time="0.000" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_invalid_yaml" time="0.001" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_real_repo_linting" time="0.013" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_extraction_of_spec_ats" time="0.000" /><testcase classname="tests.test_parity_coverage_lint.TestParityCoverageLinter" name="test_extraction_of_yaml_ats" time="0.012" /><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-001-detpixels-64]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-001-detpixels-128]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-001-detpixels-256]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-001-detpixels-512]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-002-pixel-0.05mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-002-pixel-0.1mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-002-pixel-0.2mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-002-pixel-0.4mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-003-beam-20-20-detpixels-256]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-003-beam-30-40-detpixels-256]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-003-beam-45-25-detpixels-512]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-003-beam-60-60-detpixels-1024]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-004-mosflm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-004-xds]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-005-mosflm-xbeam-ybeam-beam-pivot]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-005-xds-xbeam-ybeam-sample-pivot]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-005-mosflm-close-distance-sample-pivot]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-005-xds-close-distance-sample-pivot]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-006-dist-50mm-lambda-1.0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-006-dist-100mm-lambda-1.5]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-006-dist-200mm-lambda-2.0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-007-rot-0-0-0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-007-rot-5-3-2]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-007-rot-10-5-3]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-012-simple_cubic]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-011-unpolarized]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-011-polarized]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-020-comprehensive]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-021-single_step_phi]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-021-multi_step_phi]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-022-single_step_phi]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-022-multi_step_phi]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-cubic-misset-0-0-0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-cubic-misset-10p5-0-0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-cubic-misset-0-10p25-0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-cubic-misset-0-0-9p75]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-cubic-misset-15-20p5-30p25]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-triclinic-misset-0-0-0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-triclinic-misset-10p5-0-0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-triclinic-misset-0-10p25-0]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-triclinic-misset-0-0-9p75]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-023-triclinic-misset-15-20p5-30p25]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-024-random-misset-seed-12345]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-024-random-misset-seed-54321]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-point-pixel-distance-50mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-point-pixel-distance-100mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-point-pixel-distance-200mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-point-pixel-distance-400mm]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-obliquity-distance-100mm-tilt-0deg]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-obliquity-distance-100mm-tilt-10deg]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-obliquity-distance-100mm-tilt-20deg]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-010-obliquity-distance-100mm-tilt-30deg]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-016-extreme-tiny]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-016-extreme-large-cell]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_parity_matrix" name="test_parity_case[AT-PARALLEL-016-extreme-long-distance]" time="0.000"><skipped type="pytest.skip" message="NB_RUN_PARALLEL not set to 1">/home/ollie/Documents/tmp/nanoBragg/tests/test_parity_matrix.py:296: NB_RUN_PARALLEL not set to 1</skipped></testcase><testcase classname="tests.test_perf_pytorch_005_cudagraphs.TestCUDAGraphsCompatibility" name="test_basic_execution[cpu]" time="0.006" /><testcase classname="tests.test_perf_pytorch_005_cudagraphs.TestCUDAGraphsCompatibility" name="test_basic_execution[cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_perf_pytorch_005_cudagraphs.py:27: CUDA not available</skipped></testcase><testcase classname="tests.test_perf_pytorch_005_cudagraphs.TestCUDAGraphsCompatibility" name="test_cuda_multiple_runs" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_perf_pytorch_005_cudagraphs.py:77: CUDA not available</skipped></testcase><testcase classname="tests.test_perf_pytorch_005_cudagraphs.TestCUDAGraphsCompatibility" name="test_gradient_flow_preserved" time="0.006" /><testcase classname="tests.test_perf_pytorch_005_cudagraphs.TestCUDAGraphsCompatibility" name="test_cpu_cuda_correlation[cpu]" time="0.006" /><testcase classname="tests.test_perf_pytorch_005_cudagraphs.TestCUDAGraphsCompatibility" name="test_cpu_cuda_correlation[cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_perf_pytorch_005_cudagraphs.py:175: CUDA not available</skipped></testcase><testcase classname="tests.test_perf_pytorch_006" name="test_dtype_support[dtype0]" time="0.006" /><testcase classname="tests.test_perf_pytorch_006" name="test_dtype_support[dtype1]" time="0.006" /><testcase classname="tests.test_perf_pytorch_006" name="test_float32_float64_correlation" time="0.021" /><testcase classname="tests.test_physics.TestPhysicsFunctions" name="test_sincg_against_c_value" time="0.001" /><testcase classname="tests.test_physics.TestPhysicsFunctions" name="test_sincg_fractional_miller_index" time="0.001" /><testcase classname="tests.test_physics.TestPhysicsFunctions" name="test_sincg_at_zero" time="0.000" /><testcase classname="tests.test_physics.TestPhysicsFunctions" name="test_sincg_vectorized" time="0.000" /><testcase classname="tests.test_physics.TestPhysicsFunctions" name="test_sincg_broadcast_N" time="0.000" /><testcase classname="tests.test_pivot_mode_selection.TestPivotModeSelection" name="test_twotheta_zero_uses_config_pivot" time="0.000" /><testcase classname="tests.test_pivot_mode_selection.TestPivotModeSelection" name="test_twotheta_nonzero_forces_sample_pivot" time="0.000" /><testcase classname="tests.test_pivot_mode_selection.TestPivotModeSelection" name="test_small_twotheta_values" time="0.000" /><testcase classname="tests.test_pivot_mode_selection.TestPivotModeSelection" name="test_negative_twotheta_forces_sample_pivot" time="0.000" /><testcase classname="tests.test_pivot_mode_selection.TestPivotModeSelection" name="test_pivot_fix_integration" time="0.000" /><testcase classname="tests.test_show_config.TestShowConfig" name="test_show_config_basic" time="0.990" /><testcase classname="tests.test_show_config.TestShowConfig" name="test_show_config_with_divergence" time="0.985" /><testcase classname="tests.test_show_config.TestShowConfig" name="test_show_config_with_rotations" time="0.978" /><testcase classname="tests.test_show_config.TestShowConfig" name="test_echo_config_alias" time="0.987" /><testcase classname="tests.test_suite.TestGeometryFunctions" name="test_dot_product" time="0.001" /><testcase classname="tests.test_suite.TestGeometryFunctions" name="test_cross_product" time="0.000" /><testcase classname="tests.test_suite.TestGeometryFunctions" name="test_magnitude" time="0.000" /><testcase classname="tests.test_suite.TestGeometryFunctions" name="test_unitize" time="0.000" /><testcase classname="tests.test_suite.TestGeometryFunctions" name="test_rotate_axis" time="0.001" /><testcase classname="tests.test_suite.TestGeometryFunctions" name="test_rotate_umat" time="0.000" /><testcase classname="tests.test_suite.TestCrystalModel" name="test_zero_rotation" time="0.005" /><testcase classname="tests.test_suite.TestCrystalModel" name="test_phi_rotation_90_deg" time="0.004" /><testcase classname="tests.test_suite.TestCrystalModel" name="test_rotation_gradients" time="0.019" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_golden_data_exists" time="0.000" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_simple_cubic_reproduction" time="0.203"><skipped type="pytest.xfail" message="Requires completion of parallel trace debugging initiative - see initiatives/parallel-trace-validation/" /></testcase><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_cubic_tilted_detector_reproduction" time="0.202" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_triclinic_P1_reproduction" time="0.188" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_peak_position_validation" time="0.000" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_sensitivity_to_cell_params" time="0.075" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_performance_simple_cubic" time="0.020" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_performance_triclinic" time="0.433" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_memory_usage_analysis" time="0.172" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_extreme_cell_parameters" time="0.034" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_rotation_compatibility" time="0.087" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_simple_cubic_mosaic_reproduction" time="2.033" /><testcase classname="tests.test_suite.TestTier1TranslationCorrectness" name="test_simulator_phi_rotation" time="0.436" /><testcase classname="tests.test_suite.TestTier2GradientCorrectness" name="test_gradcheck_crystal_params" time="0.063" /><testcase classname="tests.test_suite.TestTier2GradientCorrectness" name="test_gradcheck_detector_params" time="0.008" /><testcase classname="tests.test_suite.TestTier2GradientCorrectness" name="test_gradcheck_phi_rotation" time="0.005"><skipped type="pytest.skip" message="Phi gradient check not yet working: not enough values to unpack (expected 3, got 2)">/home/ollie/Documents/tmp/nanoBragg/tests/test_suite.py:1821: Phi gradient check not yet working: not enough values to unpack (expected 3, got 2)</skipped></testcase><testcase classname="tests.test_suite.TestTier2GradientCorrectness" name="test_gradcheck_mosaic_spread" time="0.005"><skipped type="pytest.skip" message="Mosaic spread gradient check not yet working: not enough values to unpack (expected 3, got 2)">/home/ollie/Documents/tmp/nanoBragg/tests/test_suite.py:1879: Mosaic spread gradient check not yet working: not enough values to unpack (expected 3, got 2)</skipped></testcase><testcase classname="tests.test_suite.TestTier2GradientCorrectness" name="test_gradient_numerical_stability" time="0.005"><skipped type="pytest.skip" message="Gradient stability test not yet working: not enough values to unpack (expected 3, got 2)">/home/ollie/Documents/tmp/nanoBragg/tests/test_suite.py:1954: Gradient stability test not yet working: not enough values to unpack (expected 3, got 2)</skipped></testcase><testcase classname="tests.test_suite.TestTier3ScientificValidation" name="test_bragg_spot_position" time="0.000"><skipped type="pytest.skip" message="Requires implementation of simulation">/home/ollie/Documents/tmp/nanoBragg/tests/test_suite.py:1960: Requires implementation of simulation</skipped></testcase><testcase classname="tests.test_suite.TestTier3ScientificValidation" name="test_polarization_limits" time="0.000"><skipped type="pytest.skip" message="Requires implementation of simulation">/home/ollie/Documents/tmp/nanoBragg/tests/test_suite.py:1966: Requires implementation of simulation</skipped></testcase><testcase classname="tests.test_suite" name="test_import" time="0.000" /><testcase classname="tests.test_trace_pixel.TestScalingTrace" name="test_scaling_trace_matches_physics[dtype0-cpu]" time="0.009" /><testcase classname="tests.test_trace_pixel.TestScalingTrace" name="test_scaling_trace_matches_physics[dtype0-cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_trace_pixel.py:25: CUDA not available</skipped></testcase><testcase classname="tests.test_trace_pixel.TestScalingTrace" name="test_scaling_trace_matches_physics[dtype1-cpu]" time="0.010" /><testcase classname="tests.test_trace_pixel.TestScalingTrace" name="test_scaling_trace_matches_physics[dtype1-cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_trace_pixel.py:25: CUDA not available</skipped></testcase><testcase classname="tests.test_trace_pixel.TestScalingTrace" name="test_scaling_trace_with_absorption[cpu]" time="0.011" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicGather" name="test_vectorized_matches_scalar" time="0.016"><failure message="RuntimeError: Float did not match Double">self = &lt;tests.test_tricubic_vectorized.TestTricubicGather object at 0x750743c925d0&gt;
crystal_with_data = &lt;nanobrag_torch.models.crystal.Crystal object at 0x750742161310&gt;

    def test_vectorized_matches_scalar(self, crystal_with_data):
        """
        Verify that batched gather produces correct neighborhoods.
    
        Phase C1 requirement: Build (B, 4, 4, 4) neighborhoods via advanced indexing.
        This test validates the gather mechanism by comparing:
        1. Scalar interpolation (existing path, B=1)
        2. Shape assertions on batched gather output
        3. Neighborhood contents match expected HKL data
    
        Reference: design_notes.md Section 2.2, Section 5.1
        """
        crystal = crystal_with_data
    
        # Test case 1: Single query point (scalar path, B=1)
        h_scalar = torch.tensor([1.5], dtype=torch.float32)
        k_scalar = torch.tensor([2.3], dtype=torch.float32)
        l_scalar = torch.tensor([0.5], dtype=torch.float32)
    
        # This should use the scalar path (B=1)
        F_scalar = crystal._tricubic_interpolation(h_scalar, k_scalar, l_scalar)
    
        assert F_scalar.shape == h_scalar.shape, f"Scalar output shape mismatch: {F_scalar.shape} vs {h_scalar.shape}"
        assert not torch.isnan(F_scalar).any(), "Scalar output contains NaNs"
        assert not torch.isinf(F_scalar).any(), "Scalar output contains Infs"
    
        # Test case 2: Batched query points (gather path, B&gt;1)
        # Use a small batch to verify neighborhood gathering
        h_batch = torch.tensor([1.5, 2.3, -1.2], dtype=torch.float32)
        k_batch = torch.tensor([2.3, -0.5, 3.1], dtype=torch.float32)
        l_batch = torch.tensor([0.5, 1.8, -2.0], dtype=torch.float32)
    
        # This triggers the batched gather path (B=3)
        # Currently falls back to nearest-neighbor but builds neighborhoods internally
        F_batch = crystal._tricubic_interpolation(h_batch, k_batch, l_batch)
    
        assert F_batch.shape == h_batch.shape, f"Batch output shape mismatch: {F_batch.shape} vs {h_batch.shape}"
        assert not torch.isnan(F_batch).any(), "Batch output contains NaNs"
        assert not torch.isinf(F_batch).any(), "Batch output contains Infs"
    
        # Test case 3: Multi-dimensional batch (detector grid simulation)
        # Simulate a small detector region: (S=2, F=3)
        h_grid = torch.tensor([[1.5, 2.3, 0.8], [-1.2, 3.1, 1.9]], dtype=torch.float32)
        k_grid = torch.tensor([[2.3, -0.5, 1.2], [3.1, -2.0, 0.5]], dtype=torch.float32)
        l_grid = torch.tensor([[0.5, 1.8, -1.0], [-2.0, 0.3, 2.5]], dtype=torch.float32)
    
        # Flatten to (B=6) internally
        F_grid = crystal._tricubic_interpolation(h_grid, k_grid, l_grid)
    
        assert F_grid.shape == h_grid.shape, f"Grid output shape mismatch: {F_grid.shape} vs {h_grid.shape}"
        assert not torch.isnan(F_grid).any(), "Grid output contains NaNs"
        assert not torch.isinf(F_grid).any(), "Grid output contains Infs"
    
        # Test case 4: Verify neighborhood bounds checking still works
        # Query point near edge (h=4.5 → floor=4 → needs neighbors 3,4,5,6; 6&gt;h_max=5)
        h_edge = torch.tensor([4.5], dtype=torch.float32)
        k_edge = torch.tensor([0.0], dtype=torch.float32)
        l_edge = torch.tensor([0.0], dtype=torch.float32)
    
        # Capture warning state before test
        warning_shown_before = crystal._interpolation_warning_shown
    
        # This should trigger OOB fallback and return default_F
        F_edge = crystal._tricubic_interpolation(h_edge, k_edge, l_edge)
    
        # Should fallback to default_F due to OOB
        expected_default = crystal.config.default_F
        # Allow small tolerance due to potential floating point ops
&gt;       assert torch.allclose(F_edge, torch.tensor(expected_default), atol=1e-5), \
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            f"OOB fallback failed: expected {expected_default}, got {F_edge.item()}"

/home/ollie/Documents/tmp/nanoBragg/tests/test_tricubic_vectorized.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;torch.utils._device.DeviceContext object at 0x7506f60b7850&gt;
func = &lt;built-in method allclose of type object at 0x7508b5180fc0&gt;, types = ()
args = (tensor([100.], dtype=torch.float32), tensor(100.))
kwargs = {'atol': 1e-05}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
&gt;       return func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
E       RuntimeError: Float did not match Double

/home/ollie/miniconda3/lib/python3.13/site-packages/torch/utils/_device.py:104: RuntimeError</failure></testcase><testcase classname="tests.test_tricubic_vectorized.TestTricubicGather" name="test_neighborhood_gathering_internals" time="0.007" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicGather" name="test_oob_warning_single_fire" time="0.001"><failure message="RuntimeError: Float did not match Double">self = &lt;tests.test_tricubic_vectorized.TestTricubicGather object at 0x750743e269e0&gt;
simple_crystal_config = CrystalConfig(cell_a=100.0, cell_b=100.0, cell_c=100.0, cell_alpha=90.0, cell_beta=90.0, cell_gamma=90.0, misset_deg=[...square'&gt;, fudge=1.0, sample_x=5.0000000000000004e-08, sample_y=5.0000000000000004e-08, sample_z=5.0000000000000004e-08)

    def test_oob_warning_single_fire(self, simple_crystal_config):
        """
        Verify that out-of-bounds warning fires exactly once and disables interpolation.
    
        Phase C2 requirement: Lock the single-warning behavior for OOB fallback.
        When tricubic interpolation encounters an out-of-bounds neighborhood query:
        1. First occurrence triggers warning message (printed once only)
        2. Interpolation is permanently disabled (self.interpolate = False)
        3. Subsequent OOB queries return default_F without additional warnings
    
        Reference: plans/active/vectorization.md Phase C2
        """
        # Create crystal with small HKL data range to easily trigger OOB
        crystal = Crystal(simple_crystal_config)
    
        h_range, k_range, l_range = 11, 11, 11  # covers h,k,l ∈ [-5, 5]
        hkl_data = torch.ones((h_range, k_range, l_range), dtype=torch.float32) * 50.0
        crystal.hkl_data = hkl_data
        crystal.hkl_metadata = {
            'h_min': -5, 'h_max': 5,
            'k_min': -5, 'k_max': 5,
            'l_min': -5, 'l_max': 5,
            'h_range': 10, 'k_range': 10, 'l_range': 10
        }
    
        # Enable interpolation explicitly
        crystal.interpolate = True
        initial_warning_state = crystal._interpolation_warning_shown
        assert not initial_warning_state, "Warning flag should start False"
        assert crystal.interpolate, "Interpolation should start enabled"
    
        # First OOB query: h=4.8 → floor=4 → needs neighbors [3,4,5,6]
        # Since h_max=5, neighbor h=6 is out of range
        h_oob = torch.tensor([4.8], dtype=torch.float32)
        k_oob = torch.tensor([0.0], dtype=torch.float32)
        l_oob = torch.tensor([0.0], dtype=torch.float32)
    
        # Capture stdout to verify warning message
        import io
        import sys
        captured_output = io.StringIO()
        sys.stdout = captured_output
    
        # First call: should trigger warning
        F_first = crystal._tricubic_interpolation(h_oob, k_oob, l_oob)
    
        # Restore stdout
        sys.stdout = sys.__stdout__
        warning_text = captured_output.getvalue()
    
        # Verify warning was printed
        assert "WARNING: out of range for three point interpolation" in warning_text, \
            "First OOB call should print warning"
        assert "further warnings will not be printed" in warning_text, \
            "Warning should indicate no further warnings"
    
        # Verify state changes
        assert crystal._interpolation_warning_shown, "Warning flag should be set"
        assert not crystal.interpolate, "Interpolation should be disabled"
    
        # Verify fallback to default_F
        expected_default = crystal.config.default_F
&gt;       assert torch.allclose(F_first, torch.tensor(expected_default), atol=1e-5), \
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            f"First OOB call should return default_F={expected_default}, got {F_first.item()}"

/home/ollie/Documents/tmp/nanoBragg/tests/test_tricubic_vectorized.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;torch.utils._device.DeviceContext object at 0x7506f60b7850&gt;
func = &lt;built-in method allclose of type object at 0x7508b5180fc0&gt;, types = ()
args = (tensor([100.], dtype=torch.float32), tensor(100.))
kwargs = {'atol': 1e-05}

    def __torch_function__(self, func, types, args=(), kwargs=None):
        kwargs = kwargs or {}
        if func in _device_constructors() and kwargs.get('device') is None:
            kwargs['device'] = self.device
&gt;       return func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
E       RuntimeError: Float did not match Double

/home/ollie/miniconda3/lib/python3.13/site-packages/torch/utils/_device.py:104: RuntimeError</failure></testcase><testcase classname="tests.test_tricubic_vectorized.TestTricubicGather" name="test_device_neutrality[cpu]" time="0.004" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicGather" name="test_device_neutrality[cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_tricubic_vectorized.py:316: CUDA not available</skipped></testcase><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polint_matches_scalar_batched" time="0.002" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polint_gradient_flow" time="0.006" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polin2_matches_scalar_batched" time="0.003" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polin2_gradient_flow" time="0.007" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polin3_matches_scalar_batched" time="0.010" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polin3_gradient_flow" time="0.020" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polin3_batch_shape_preserved" time="0.004" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polynomials_support_float64[dtype0]" time="0.001" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polynomials_support_float64[dtype1]" time="0.001" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polynomials_device_neutral[cpu]" time="0.004" /><testcase classname="tests.test_tricubic_vectorized.TestTricubicPoly" name="test_polynomials_device_neutral[cuda]" time="0.000"><skipped type="pytest.skip" message="CUDA not available">/home/ollie/Documents/tmp/nanoBragg/tests/test_tricubic_vectorized.py:726: CUDA not available</skipped></testcase><testcase classname="tests.test_units.TestUnitConversions" name="test_mm_to_angstroms_scalar" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_mm_to_angstroms_tensor" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_mm_to_angstroms_gradient" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_meters_to_angstroms_scalar" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_meters_to_angstroms_tensor" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_degrees_to_radians_scalar" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_degrees_to_radians_tensor" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_degrees_to_radians_gradient" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_inverse_conversions" time="0.000" /><testcase classname="tests.test_units.TestUnitConversions" name="test_batch_tensor_conversions" time="0.000" /></testsuite></testsuites>