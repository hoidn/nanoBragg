[
  {
    "nodeid": "tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition.test_triclinic_absolute_peak_position_vs_c",
    "classname": "tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition",
    "name": "test_triclinic_absolute_peak_position_vs_c",
    "time": 0.014,
    "type": "failure",
    "message": "AssertionError: C reference run failed\nassert None is not None",
    "detail_preview": "self = <tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition object at 0x7507442b9d10> @pytest.mark.requires_c_binary def test_triclinic_absolute_peak_position_vs_c(self): \"\"\"Test that PyTorch and C produce peaks at the same absolute position\"\"\" from scripts.c_reference_runner import\u2026"
  },
  {
    "nodeid": "tests.test_at_perf_003.TestATPERF003MemoryBandwidth.test_memory_bandwidth_utilization",
    "classname": "tests.test_at_perf_003.TestATPERF003MemoryBandwidth",
    "name": "test_memory_bandwidth_utilization",
    "time": 1.997,
    "type": "failure",
    "message": "AssertionError: Bandwidth utilization decreases too much with size: 0.176 GB/s vs 0.364 GB/s\nassert np.float64(0.1760494259806621) >= (np.float64(0.36395069082998377) * 0.5)",
    "detail_preview": "self = <tests.test_at_perf_003.TestATPERF003MemoryBandwidth object at 0x750743f96190> def test_memory_bandwidth_utilization(self): \"\"\"Test memory bandwidth utilization efficiency.\"\"\" print(\"\\n\" + \"=\"*60) print(\"AT-PERF-003: Memory Bandwidth Utilization\") print(\"=\"*60) # Test with different detector sizes to see\u2026"
  },
  {
    "nodeid": "tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison.test_script_integration",
    "classname": "tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison",
    "name": "test_script_integration",
    "time": 0.011,
    "type": "failure",
    "message": "assert 2 in [0, 3]\n +  where 2 = CompletedProcess(args=['python', 'scripts/nb_compare.py', '--outdir', 'test_comparison', '--', '-default_F', '100', '-cell', '100', '100', '100', '90', '90', '90', '-lambda', '1.0', '-distance', '100', '-detpixels', '64', '-floatfile', 'test.bin'], returncode=2, stdout='', stderr=\"python: can't open file '/tmp/pytest-of-ollie/pytest-549/test_fdump_preserves_sparse_be0/scripts/nb_compare.py': [Errno 2] No such file or directory\\n\").returncode",
    "detail_preview": "self = <tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison object at 0x750743ecc5a0> @pytest.mark.skipif( not Path(\"./nanoBragg\").exists() and not Path(\"./golden_suite_generator/nanoBragg\").exists(), reason=\"Requires C binary for integration test\" ) def test_script_integration(self): \"\"\"Test the full script\u2026"
  },
  {
    "nodeid": "tests.test_cli_flags.TestCLIPix0Override.test_pix0_vector_mm_beam_pivot[cpu]",
    "classname": "tests.test_cli_flags.TestCLIPix0Override",
    "name": "test_pix0_vector_mm_beam_pivot[cpu]",
    "time": 0.0,
    "type": "failure",
    "message": "FileNotFoundError: [Errno 2] No such file or directory: 'reports/2025-10-cli-flags/phase_h/implementation/pix0_expected.json'",
    "detail_preview": "self = <tests.test_cli_flags.TestCLIPix0Override object at 0x750743e5fa80> device = 'cpu' @pytest.mark.parametrize(\"device\", [\"cpu\", pytest.param(\"cuda\", marks=pytest.mark.skipif( not torch.cuda.is_available(), reason=\"CUDA not available\"))]) def test_pix0_vector_mm_beam_pivot(self, device): \"\"\" Regression test for\u2026"
  },
  {
    "nodeid": "tests.test_cli_flags.TestHKLFdumpParity.test_scaled_hkl_roundtrip",
    "classname": "tests.test_cli_flags.TestHKLFdumpParity",
    "name": "test_scaled_hkl_roundtrip",
    "time": 0.0,
    "type": "failure",
    "message": "AssertionError: Missing scaled.hkl\nassert False\n +  where False = exists()\n +    where exists = PosixPath('scaled.hkl').exists\n +      where PosixPath('scaled.hkl') = <class 'pathlib._local.Path'>('scaled.hkl')",
    "detail_preview": "self = <tests.test_cli_flags.TestHKLFdumpParity object at 0x750743f056d0> def test_scaled_hkl_roundtrip(self): \"\"\" Roundtrip test: HKL text \u2192 PyTorch grid \u2192 Fdump \u2192 PyTorch grid. Expected failure (before fix): - read_fdump will fail to match HKL grid due to padding mismatch - C allocates (range+1) dimensions but\u2026"
  },
  {
    "nodeid": "tests.test_gradients.TestPropertyBasedGradients.test_property_gradient_stability",
    "classname": "tests.test_gradients.TestPropertyBasedGradients",
    "name": "test_property_gradient_stability",
    "time": 906.228,
    "type": "failure",
    "message": "Failed: Timeout (>905.0s) from pytest-timeout.",
    "detail_preview": "self = <tests.test_gradients.TestPropertyBasedGradients object at 0x750743d3aea0> @pytest.mark.slow_gradient @pytest.mark.timeout(905) def test_property_gradient_stability(self): \"\"\"Ensure gradients remain stable across parameter space.\"\"\" torch.manual_seed(44) # For reproducibility for i in range(25): # Fewer tests\u2026"
  },
  {
    "nodeid": "tests.test_tricubic_vectorized.TestTricubicGather.test_vectorized_matches_scalar",
    "classname": "tests.test_tricubic_vectorized.TestTricubicGather",
    "name": "test_vectorized_matches_scalar",
    "time": 0.016,
    "type": "failure",
    "message": "RuntimeError: Float did not match Double",
    "detail_preview": "self = <tests.test_tricubic_vectorized.TestTricubicGather object at 0x750743c925d0> crystal_with_data = <nanobrag_torch.models.crystal.Crystal object at 0x750742161310> def test_vectorized_matches_scalar(self, crystal_with_data): \"\"\" Verify that batched gather produces correct neighborhoods. Phase C1 requirement:\u2026"
  },
  {
    "nodeid": "tests.test_tricubic_vectorized.TestTricubicGather.test_oob_warning_single_fire",
    "classname": "tests.test_tricubic_vectorized.TestTricubicGather",
    "name": "test_oob_warning_single_fire",
    "time": 0.001,
    "type": "failure",
    "message": "RuntimeError: Float did not match Double",
    "detail_preview": "self = <tests.test_tricubic_vectorized.TestTricubicGather object at 0x750743e269e0> simple_crystal_config = CrystalConfig(cell_a=100.0, cell_b=100.0, cell_c=100.0, cell_alpha=90.0, cell_beta=90.0, cell_gamma=90.0, misset_deg=[...square'>, fudge=1.0, sample_x=5.0000000000000004e-08, sample_y=5.0000000000000004e-08,\u2026"
  }
]