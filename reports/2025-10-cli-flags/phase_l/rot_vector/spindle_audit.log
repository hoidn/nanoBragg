# Spindle-Axis Audit for CLI-FLAGS-003 Phase L3g
# Date: 2025-10-07
# Engineer: Ralph (loop i=91)
# Command: CLI-FLAGS-003 supervisor command (φ=0 trace)

## Spindle-Axis Evidence

### PyTorch (from trace_py_rot_vector.log)
- Raw spindle_axis: [-1.0, 0.0, 0.0]
- Normalized spindle_axis: [-1.0, 0.0, 0.0]
- Magnitude: 1.0

### C Reference (from c_trace_scaling.log)
- spindle ROTATION_AXIS: [-1, 0, 0]
- Magnitude: 1.0 (implicit unit vector)

## Analysis

### Normalization Delta
- Δ(magnitude): 0.0 (both implementations use exact unit vector)
- Tolerance threshold: ≤5e-4 (from input.md)
- **Verdict: PASS** - No normalization mismatch detected

### Hypothesis H1 Assessment: RULED OUT
The spindle-axis normalization hypothesis (H1 from analysis.md) is **RULED OUT** as the root cause of Y-component drift:
- Both C and PyTorch use identical unit vector [-1, 0, 0]
- Magnitude delta = 0.0 (well within tolerance)
- PyTorch's `unitize()` call in `rotate_axis` (geometry.py:91) is a no-op for this case

## Remaining Suspects

With H1/H2 ruled out, the Y-drift must stem from:
1. **Reciprocal→real recalculation sequencing** (Rule #13 implementation delta)
2. **Float32 accumulation in cross-products** (despite good reciprocal alignment)
3. **MOSFLM matrix loading semantics** (A.mat interpretation)

## Artifacts
- PyTorch trace: reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log (43 lines)
- C reference: reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log
- Volume analysis: reports/2025-10-cli-flags/phase_l/rot_vector/volume_probe.md
- Rotation deltas: reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md

## Next Actions (Phase L3h)
- Update analysis.md to reflect H1 ruling
- Document remaining hypotheses ranking
- Propose corrective investigation (likely MOSFLM matrix or cross-product ordering)
