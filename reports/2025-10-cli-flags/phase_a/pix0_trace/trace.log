=== pix0 Vector Trace from C Reference ===

Command executed with -pix0_vector_mm:
  -pix0_vector_mm -216.336293 215.205512 -230.200866

C code behavior (golden_suite_generator/nanoBragg.c line 740-747):
  - Uses strstr() match, so "-pix0_vector_mm" matches "-pix0_vector"
  - Sets beam_convention = CUSTOM
  - Reads three values directly: pix0_vector[1/2/3] = atof(argv[i+1/2/3])
  - NO division by 1000 occurs in the parsing code
  
C code output (line 1849):
  DETECTOR_PIX0_VECTOR -0.216475836204836 0.216343050492215 -0.230192414300537
  (Units: meters based on context)

Analysis - Input Treatment:
  Input value: -216.336293 (labeled as mm via _mm suffix)
  Expected if divided by 1000: -0.216336293 m
  Actual C output: -0.216475836 m
  Difference: ~0.00014 m

Conclusion:
  The caller (supervisor command in this case) provides values that are ALREADY
  scaled appropriately. The C code at line 744-746 reads them AS-IS without 
  unit conversion. The small differences (~0.0001-0.001 m) between input/1000
  and output are due to detector rotation transformations applied afterward.
  
  The "_mm" suffix appears to be a DOCUMENTATION hint to the caller about
  expected units, but the C code implementation does NOT enforce or convert units.
  Both -pix0_vector and -pix0_vector_mm are handled identically by strstr() matching.

Critical Finding for PyTorch Implementation:
  PyTorch MUST implement both -pix0_vector (meters) and -pix0_vector_mm (millimeters)
  as DISTINCT flags with proper unit conversion:
    - -pix0_vector: read values as meters directly
    - -pix0_vector_mm: read values as millimeters, divide by 1000 to convert to meters
  
  This differs from C code behavior where both are aliases. The PyTorch version
  should be more correct and match the semantic intent of the flag names.
