============================= test session starts ==============================
platform darwin -- Python 3.13.1, pytest-8.4.1, pluggy-1.5.0 -- /Users/ollie/miniconda3/bin/python
cachedir: .pytest_cache
rootdir: /Users/ollie/Documents/nanoBragg
configfile: pyproject.toml
testpaths: tests
plugins: anyio-4.9.0, dials_data-2.4.127
collecting ... collected 445 items / 1 skipped

tests/test_at_abs_001.py::TestAT_ABS_001::test_absorption_disabled_when_zero PASSED [  0%]
tests/test_at_abs_001.py::TestAT_ABS_001::test_capture_fraction_calculation PASSED [  0%]
tests/test_at_abs_001.py::TestAT_ABS_001::test_last_value_vs_accumulation_semantics PASSED [  0%]
tests/test_at_abs_001.py::TestAT_ABS_001::test_parallax_dependence PASSED [  0%]
tests/test_at_abs_001.py::TestAT_ABS_001::test_absorption_with_tilted_detector PASSED [  1%]
tests/test_at_bkg_001.py::TestAT_BKG_001::test_water_background_calculation PASSED [  1%]
tests/test_at_bkg_001.py::TestAT_BKG_001::test_water_background_zero PASSED [  1%]
tests/test_at_bkg_001.py::TestAT_BKG_001::test_water_background_additive PASSED [  1%]
tests/test_at_cli_001.py::TestAT_CLI_001::test_cli_help_short_flag PASSED [  2%]
tests/test_at_cli_001.py::TestAT_CLI_001::test_cli_help_long_flag PASSED [  2%]
tests/test_at_cli_001.py::TestAT_CLI_001::test_cli_invocable PASSED      [  2%]
tests/test_at_cli_001.py::TestAT_CLI_001::test_cli_help_includes_examples PASSED [  2%]
tests/test_at_cli_001.py::TestAT_CLI_001::test_cli_help_includes_wavelength_synonyms PASSED [  2%]
tests/test_at_cli_001.py::TestAT_CLI_001::test_cli_help_includes_output_synonyms PASSED [  3%]
tests/test_at_cli_002.py::TestAT_CLI_002::test_minimal_render_with_default_F PASSED [  3%]
tests/test_at_cli_002.py::TestAT_CLI_002::test_minimal_render_with_hkl_file PASSED [  3%]
tests/test_at_cli_002.py::TestAT_CLI_002::test_data_ordering_fast_major PASSED [  3%]
tests/test_at_cli_002.py::TestAT_CLI_002::test_error_without_required_inputs PASSED [  4%]
tests/test_at_cli_003.py::TestATCLI003::test_mosflm_default_pivot_beam PASSED [  4%]
tests/test_at_cli_003.py::TestATCLI003::test_xds_default_pivot_sample PASSED [  4%]
tests/test_at_cli_003.py::TestATCLI003::test_pivot_override_mosflm_to_sample PASSED [  4%]
tests/test_at_cli_003.py::TestATCLI003::test_pivot_override_xds_to_beam PASSED [  4%]
tests/test_at_cli_003.py::TestATCLI003::test_convention_header_keys_consistency PASSED [  5%]
tests/test_at_cli_004.py::test_header_precedence_img_then_mask PASSED    [  5%]
tests/test_at_cli_004.py::test_mask_zeros_are_skipped PASSED             [  5%]
tests/test_at_cli_004.py::test_mask_beam_center_y_flip PASSED            [  5%]
tests/test_at_cli_004.py::test_conflicting_detector_size PASSED          [  6%]
tests/test_at_cli_004.py::test_img_only_no_mask PASSED                   [  6%]
tests/test_at_cli_005.py::test_cli_roi_basic PASSED                      [  6%]
tests/test_at_cli_005.py::test_cli_roi_with_noise PASSED                 [  6%]
tests/test_at_cli_005.py::test_cli_roi_edge_cases PASSED                 [  6%]
tests/test_at_cli_005.py::test_cli_roi_different_conventions PASSED      [  7%]
tests/test_at_cli_006.py::test_autoscale_without_scale_flag PASSED       [  7%]
tests/test_at_cli_006.py::test_explicit_scale_flag PASSED                [  7%]
tests/test_at_cli_006.py::test_pgm_without_pgmscale PASSED               [  7%]
tests/test_at_cli_006.py::test_pgm_with_explicit_pgmscale PASSED         [  8%]
tests/test_at_cli_006.py::test_pgm_format_compliance PASSED              [  8%]
tests/test_at_cli_007.py::TestATCLI007NoiseDeterminism::test_identical_seed_produces_identical_noise PASSED [  8%]
tests/test_at_cli_007.py::TestATCLI007NoiseDeterminism::test_different_seed_produces_different_noise PASSED [  8%]
tests/test_at_cli_007.py::TestATCLI007NoiseDeterminism::test_seed_determinism_without_roi PASSED [  8%]
tests/test_at_cli_007.py::TestATCLI007NoiseDeterminism::test_negative_seed_accepted PASSED [  9%]
tests/test_at_cli_007.py::TestATCLI007NoiseDeterminism::test_overload_count_determinism PASSED [  9%]
tests/test_at_cli_008.py::TestATCLI008DminFiltering::test_dmin_filtering_reduces_intensity PASSED [  9%]
tests/test_at_cli_008.py::TestATCLI008DminFiltering::test_dmin_very_strict_removes_most_intensity PASSED [  9%]
tests/test_at_cli_008.py::TestATCLI008DminFiltering::test_dmin_zero_has_no_effect PASSED [ 10%]
tests/test_at_cli_009.py::TestATCLI009ErrorHandling::test_missing_hkl_and_fdump_with_default_f_zero PASSED [ 10%]
tests/test_at_cli_009.py::TestATCLI009ErrorHandling::test_missing_hkl_but_has_default_f PASSED [ 10%]
tests/test_at_cli_009.py::TestATCLI009ErrorHandling::test_missing_cell_parameters PASSED [ 10%]
tests/test_at_cli_009.py::TestATCLI009ErrorHandling::test_fdump_fallback PASSED [ 11%]
tests/test_at_cli_009.py::TestATCLI009ErrorHandling::test_help_message PASSED [ 11%]
tests/test_at_crystal_absolute.py::TestATCrystalAbsolute::test_triclinic_absolute_positions PASSED [ 11%]
tests/test_at_crystal_absolute.py::TestATCrystalAbsolute::test_cubic_vs_triclinic_systematic_difference PASSED [ 11%]
tests/test_at_crystal_absolute.py::TestATCrystalAbsolute::test_known_reflection_d_spacings PASSED [ 11%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_fluence_calculation_from_flux_exposure_beamsize PASSED [ 12%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_no_fluence_calculation_when_flux_zero PASSED [ 12%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_no_fluence_calculation_when_exposure_zero PASSED [ 12%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_fluence_calculation_with_beamsize_zero PASSED [ 12%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_flux_recomputation_from_fluence_and_exposure PASSED [ 13%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_sample_clipping_warning PASSED [ 13%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_no_clipping_when_beamsize_larger PASSED [ 13%]
tests/test_at_flu_001.py::TestAT_FLU_001::test_no_clipping_when_beamsize_zero PASSED [ 13%]
tests/test_at_geo_001.py::test_at_geo_001_mosflm_beam_center_mapping PASSED [ 13%]
tests/test_at_geo_002.py::test_at_geo_002_setup_a_distance_only PASSED   [ 14%]
tests/test_at_geo_002.py::test_at_geo_002_setup_b_close_distance_only PASSED [ 14%]
tests/test_at_geo_002.py::test_at_geo_002_setup_c_explicit_override PASSED [ 14%]
tests/test_at_geo_002.py::test_at_geo_002_setup_c_beam_override PASSED   [ 14%]
tests/test_at_geo_002.py::test_at_geo_002_direct_instantiation PASSED    [ 15%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_r_factor_calculation PASSED [ 15%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_distance_update_with_close_distance PASSED [ 15%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_beam_center_preservation_beam_pivot PASSED [ 15%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_beam_center_preservation_sample_pivot PASSED [ 15%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_no_rotations_r_factor_equals_one PASSED [ 16%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_beam_center_with_various_rotations[DetectorPivot.BEAM] PASSED [ 16%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_beam_center_with_various_rotations[DetectorPivot.SAMPLE] PASSED [ 16%]
tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_gradients_flow_through_r_factor PASSED [ 16%]
tests/test_at_geo_004.py::test_twotheta_axis_defaults PASSED             [ 17%]
tests/test_at_geo_004.py::test_twotheta_axis_override PASSED             [ 17%]
tests/test_at_geo_004.py::test_twotheta_rotation_applied PASSED          [ 17%]
tests/test_at_geo_004.py::test_twotheta_value_preserved PASSED           [ 17%]
tests/test_at_geo_004.py::test_mosflm_twotheta_rotation PASSED           [ 17%]
tests/test_at_geo_004.py::test_dials_twotheta_rotation PASSED            [ 18%]
tests/test_at_geo_005.py::TestATGEO005CurvedDetector::test_curved_detector_equal_distance PASSED [ 18%]
tests/test_at_geo_005.py::TestATGEO005CurvedDetector::test_curved_vs_planar_difference PASSED [ 18%]
tests/test_at_geo_005.py::TestATGEO005CurvedDetector::test_small_angle_rotation_consistency PASSED [ 18%]
tests/test_at_geo_005.py::TestATGEO005CurvedDetector::test_gradient_flow_curved_detector PASSED [ 19%]
tests/test_at_geo_005.py::TestATGEO005CurvedDetector::test_beam_center_affects_curvature PASSED [ 19%]
tests/test_at_geo_006.py::TestATGEO006PointPixelSolidAngle::test_point_pixel_solid_angle PASSED [ 19%]
tests/test_at_geo_006.py::TestATGEO006PointPixelSolidAngle::test_default_solid_angle_with_obliquity PASSED [ 19%]
tests/test_at_geo_006.py::TestATGEO006PointPixelSolidAngle::test_off_center_pixel_comparison PASSED [ 20%]
tests/test_at_geo_006.py::TestATGEO006PointPixelSolidAngle::test_gradient_flow PASSED [ 20%]
tests/test_at_geo_006.py::TestATGEO006PointPixelSolidAngle::test_corner_pixel_values PASSED [ 20%]
tests/test_at_io_001.py::TestAT_IO_001::test_smv_header_required_keys PASSED [ 20%]
tests/test_at_io_001.py::TestAT_IO_001::test_smv_data_ordering PASSED    [ 20%]
tests/test_at_io_001.py::TestAT_IO_001::test_smv_convention_specific_headers PASSED [ 21%]
tests/test_at_io_001.py::TestAT_IO_001::test_smv_torch_tensor_input PASSED [ 21%]
tests/test_at_io_001.py::TestAT_IO_001::test_smv_byte_order PASSED       [ 21%]
tests/test_at_io_002.py::TestAT_IO_002::test_pgm_header_format PASSED    [ 21%]
tests/test_at_io_002.py::TestAT_IO_002::test_pgm_pixel_scaling PASSED    [ 22%]
tests/test_at_io_002.py::TestAT_IO_002::test_pgm_with_default_scale PASSED [ 22%]
tests/test_at_io_002.py::TestAT_IO_002::test_pgm_torch_tensor_input PASSED [ 22%]
tests/test_at_io_002.py::TestAT_IO_002::test_pgm_clipping_behavior PASSED [ 22%]
tests/test_at_io_003.py::TestAT_IO_003::test_fdump_write_and_read PASSED [ 22%]
tests/test_at_io_003.py::TestAT_IO_003::test_fdump_cache_behavior PASSED [ 23%]
tests/test_at_io_003.py::TestAT_IO_003::test_fdump_no_files_with_default_F PASSED [ 23%]
tests/test_at_io_003.py::TestAT_IO_003::test_fdump_no_files_zero_default PASSED [ 23%]
tests/test_at_io_003.py::TestAT_IO_003::test_fdump_preserves_default_F PASSED [ 23%]
tests/test_at_io_003.py::TestAT_IO_003::test_fdump_header_structure PASSED [ 24%]
tests/test_at_io_004.py::TestAT_IO_004::test_minimal_hkl_format PASSED   [ 24%]
tests/test_at_io_004.py::TestAT_IO_004::test_five_column_with_phase PASSED [ 24%]
tests/test_at_io_004.py::TestAT_IO_004::test_six_column_with_sigma_and_phase PASSED [ 24%]
tests/test_at_io_004.py::TestAT_IO_004::test_negative_indices_handling PASSED [ 24%]
tests/test_at_io_004.py::TestAT_IO_004::test_all_formats_produce_same_pattern PASSED [ 25%]
tests/test_at_io_004.py::TestAT_IO_004::test_fdump_caching_for_all_formats PASSED [ 25%]
tests/test_at_io_004.py::TestAT_IO_004::test_comment_and_blank_line_handling PASSED [ 25%]
tests/test_at_noise_001.py::TestATNoise001::test_small_mean_exact_poisson PASSED [ 25%]
tests/test_at_noise_001.py::TestATNoise001::test_medium_mean_rejection_sampling PASSED [ 26%]
tests/test_at_noise_001.py::TestATNoise001::test_large_mean_gaussian_approximation PASSED [ 26%]
tests/test_at_noise_001.py::TestATNoise001::test_seed_reproducibility PASSED [ 26%]
tests/test_at_noise_001.py::TestATNoise001::test_adc_and_clipping PASSED [ 26%]
tests/test_at_noise_001.py::TestATNoise001::test_all_regimes_in_single_image PASSED [ 26%]
tests/test_at_noise_001.py::TestATNoise001::test_noise_config_integration PASSED [ 27%]
tests/test_at_parallel_001.py::TestATParallel001::test_beam_center_scales_with_detector_size[64] PASSED [ 27%]
tests/test_at_parallel_001.py::TestATParallel001::test_beam_center_scales_with_detector_size[128] PASSED [ 27%]
tests/test_at_parallel_001.py::TestATParallel001::test_beam_center_scales_with_detector_size[256] PASSED [ 27%]
tests/test_at_parallel_001.py::TestATParallel001::test_beam_center_scales_with_detector_size[512] PASSED [ 28%]
tests/test_at_parallel_001.py::TestATParallel001::test_beam_center_scales_with_detector_size[1024] PASSED [ 28%]
tests/test_at_parallel_001.py::TestATParallel001::test_peak_position_at_beam_center PASSED [ 28%]
tests/test_at_parallel_001.py::TestATParallel001::test_cli_beam_center_calculation PASSED [ 28%]
tests/test_at_parallel_001.py::TestATParallel001::test_intensity_scaling_with_solid_angle PASSED [ 28%]
tests/test_at_parallel_002.py::TestATParallel002::test_beam_center_scales_with_pixel_size PASSED [ 29%]
tests/test_at_parallel_002.py::TestATParallel002::test_peak_position_scales_inversely_with_pixel_size PASSED [ 29%]
tests/test_at_parallel_002.py::TestATParallel002::test_pattern_correlation_across_pixel_sizes PASSED [ 29%]
tests/test_at_parallel_002.py::TestATParallel002::test_beam_center_parameter_consistency PASSED [ 29%]
tests/test_at_parallel_003.py::TestATParallel003::test_detector_offset_preservation PASSED [ 30%]
tests/test_at_parallel_003.py::TestATParallel003::test_peak_position_at_offset_beam_centers PASSED [ 30%]
tests/test_at_parallel_003.py::TestATParallel003::test_offset_ratio_preservation PASSED [ 30%]
tests/test_at_parallel_004.py::TestAT_PARALLEL_004::test_mosflm_adds_half_pixel_offset PASSED [ 30%]
tests/test_at_parallel_004.py::TestAT_PARALLEL_004::test_xds_has_no_pixel_offset PASSED [ 31%]
tests/test_at_parallel_004.py::TestAT_PARALLEL_004::test_peak_position_difference PASSED [ 31%]
tests/test_at_parallel_004.py::TestAT_PARALLEL_004::test_pattern_correlation_when_aligned PASSED [ 31%]
tests/test_at_parallel_004.py::TestAT_PARALLEL_004::test_beam_center_calculation_consistency PASSED [ 31%]
tests/test_at_parallel_005.py::TestAT_PARALLEL_005_BeamCenterMapping::test_mosflm_xbeam_ybeam_mapping SKIPPED [ 31%]
tests/test_at_parallel_005.py::TestAT_PARALLEL_005_BeamCenterMapping::test_xds_orgx_orgy_mapping SKIPPED [ 32%]
tests/test_at_parallel_005.py::TestAT_PARALLEL_005_BeamCenterMapping::test_pivot_mode_consistency SKIPPED [ 32%]
tests/test_at_parallel_005.py::TestAT_PARALLEL_005_BeamCenterMapping::test_equivalent_configurations_produce_same_pattern SKIPPED [ 32%]
tests/test_at_parallel_006.py::TestATParallel006SingleReflection::test_bragg_angle_prediction_single_distance PASSED [ 32%]
tests/test_at_parallel_006.py::TestATParallel006SingleReflection::test_distance_scaling PASSED [ 33%]
tests/test_at_parallel_006.py::TestATParallel006SingleReflection::test_combined_wavelength_and_distance PASSED [ 33%]
tests/test_at_parallel_007.py::TestATParallel007PeakPositionWithRotations::test_peak_positions_with_rotations SKIPPED [ 33%]
tests/test_at_parallel_007.py::TestATParallel007PeakPositionWithRotations::test_peak_intensity_ordering SKIPPED [ 33%]
tests/test_at_parallel_007.py::TestATParallel007PeakPositionWithRotations::test_rotation_effect_on_pattern SKIPPED [ 33%]
tests/test_at_parallel_008.py::TestAT_PARALLEL_008::test_triclinic_multi_peak_pattern SKIPPED [ 34%]
tests/test_at_parallel_008.py::TestAT_PARALLEL_008::test_peak_intensity_ordering SKIPPED [ 34%]
tests/test_at_parallel_008.py::TestAT_PARALLEL_008::test_non_max_suppression SKIPPED [ 34%]
tests/test_at_parallel_010.py::TestATParallel010SolidAngleCorrections::test_point_pixel_distance_scaling SKIPPED [ 34%]
tests/test_at_parallel_010.py::TestATParallel010SolidAngleCorrections::test_obliquity_distance_scaling SKIPPED [ 35%]
tests/test_at_parallel_010.py::TestATParallel010SolidAngleCorrections::test_obliquity_with_tilts SKIPPED [ 35%]
tests/test_at_parallel_010.py::TestATParallel010SolidAngleCorrections::test_combined_distance_and_tilt SKIPPED [ 35%]
tests/test_at_parallel_011.py::TestATParallel011PolarizationFactor::test_unpolarized_theory PASSED [ 35%]
tests/test_at_parallel_011.py::TestATParallel011PolarizationFactor::test_polarized_kahn_model PASSED [ 35%]
tests/test_at_parallel_011.py::TestATParallel011PolarizationFactor::test_c_pytorch_equivalence SKIPPED [ 36%]
tests/test_at_parallel_012.py::TestATParallel012ReferencePatternCorrelation::test_simple_cubic_correlation XFAIL [ 36%]
tests/test_at_parallel_012.py::TestATParallel012ReferencePatternCorrelation::test_triclinic_P1_correlation XFAIL [ 36%]
tests/test_at_parallel_012.py::TestATParallel012ReferencePatternCorrelation::test_cubic_tilted_detector_correlation FAILED [ 36%]
tests/test_at_parallel_012.py::TestATParallel012ReferencePatternCorrelation::test_high_resolution_variant SKIPPED [ 37%]
tests/test_at_parallel_013.py::TestATParallel013CrossPlatformConsistency::test_pytorch_determinism_same_seed PASSED [ 37%]
tests/test_at_parallel_013.py::TestATParallel013CrossPlatformConsistency::test_pytorch_determinism_different_seeds PASSED [ 37%]
tests/test_at_parallel_013.py::TestATParallel013CrossPlatformConsistency::test_pytorch_consistency_across_runs PASSED [ 37%]
tests/test_at_parallel_013.py::TestATParallel013CrossPlatformConsistency::test_c_pytorch_equivalence SKIPPED [ 37%]
tests/test_at_parallel_013.py::TestATParallel013CrossPlatformConsistency::test_platform_fingerprint PASSED [ 38%]
tests/test_at_parallel_013.py::TestATParallel013CrossPlatformConsistency::test_numerical_precision_float64 PASSED [ 38%]
tests/test_at_parallel_014.py::TestATParallel014NoiseRobustness::test_mean_preservation_after_scaling PASSED [ 38%]
tests/test_at_parallel_014.py::TestATParallel014NoiseRobustness::test_peak_centroid_stability PASSED [ 38%]
tests/test_at_parallel_014.py::TestATParallel014NoiseRobustness::test_overload_count_consistency PASSED [ 39%]
tests/test_at_parallel_014.py::TestATParallel014NoiseRobustness::test_noise_statistics PASSED [ 39%]
tests/test_at_parallel_014.py::TestATParallel014NoiseRobustness::test_deterministic_noise_with_seed PASSED [ 39%]
tests/test_at_parallel_015.py::TestATParallel015MixedUnits::test_distance_units_consistency PASSED [ 39%]
tests/test_at_parallel_015.py::TestATParallel015MixedUnits::test_wavelength_units_consistency PASSED [ 40%]
tests/test_at_parallel_015.py::TestATParallel015MixedUnits::test_angle_units_consistency PASSED [ 40%]
tests/test_at_parallel_015.py::TestATParallel015MixedUnits::test_mixed_units_comprehensive PASSED [ 40%]
tests/test_at_parallel_015.py::TestATParallel015MixedUnits::test_detector_rotation_units PASSED [ 40%]
tests/test_at_parallel_016.py::TestATParallel016ExtremeScale::test_tiny_scale PASSED [ 40%]
tests/test_at_parallel_016.py::TestATParallel016ExtremeScale::test_large_cell PASSED [ 41%]
tests/test_at_parallel_016.py::TestATParallel016ExtremeScale::test_long_distance PASSED [ 41%]
tests/test_at_parallel_016.py::TestATParallel016ExtremeScale::test_extreme_scale_c_comparison SKIPPED [ 41%]
tests/test_at_parallel_016.py::TestATParallel016ExtremeScale::test_combined_extremes PASSED [ 41%]
tests/test_at_parallel_016.py::TestATParallel016ExtremeScale::test_numerical_stability_metrics PASSED [ 42%]
tests/test_at_parallel_017.py::TestATParallel017GrazingIncidence::test_large_detector_tilts PASSED [ 42%]
tests/test_at_parallel_017.py::TestATParallel017GrazingIncidence::test_large_twotheta PASSED [ 42%]
tests/test_at_parallel_017.py::TestATParallel017GrazingIncidence::test_combined_extreme_angles PASSED [ 42%]
tests/test_at_parallel_017.py::TestATParallel017GrazingIncidence::test_near_90_degree_incidence PASSED [ 42%]
tests/test_at_parallel_017.py::TestATParallel017GrazingIncidence::test_solid_angle_obliquity_corrections PASSED [ 43%]
tests/test_at_parallel_017.py::TestATParallel017GrazingIncidence::test_extreme_rotation_stability PASSED [ 43%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_cubic_crystal_aligned_axes PASSED [ 43%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_zero_angle_rotations PASSED [ 43%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_near_singular_cell_angles PASSED [ 44%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_aligned_spindle_and_beam PASSED [ 44%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_very_small_unit_cell PASSED [ 44%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_very_large_unit_cell PASSED [ 44%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_continuity_near_90_degrees PASSED [ 44%]
tests/test_at_parallel_018.py::TestATParallel018CrystalBoundaryConditions::test_identity_misset_matrix PASSED [ 45%]
tests/test_at_parallel_020.py::TestATParallel020::test_comprehensive_integration SKIPPED [ 45%]
tests/test_at_parallel_020.py::TestATParallel020::test_comprehensive_without_absorption SKIPPED [ 45%]
tests/test_at_parallel_020.py::TestATParallel020::test_phi_rotation_only SKIPPED [ 45%]
tests/test_at_parallel_020.py::TestATParallel020::test_comprehensive_minimal_features SKIPPED [ 46%]
tests/test_at_parallel_021.py::TestCrystalPhiRotation::test_single_step_phi_rotation SKIPPED [ 46%]
tests/test_at_parallel_021.py::TestCrystalPhiRotation::test_multi_step_phi_rotation SKIPPED [ 46%]
tests/test_at_parallel_022.py::TestATParallel022::test_single_step_with_detector_rotations SKIPPED [ 46%]
tests/test_at_parallel_022.py::TestATParallel022::test_multi_step_with_detector_rotations SKIPPED [ 46%]
tests/test_at_parallel_022.py::TestATParallel022::test_large_detector_rotations SKIPPED [ 47%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles0-cubic-cell_params0] SKIPPED [ 47%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles0-triclinic-cell_params1] SKIPPED [ 47%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles1-cubic-cell_params0] SKIPPED [ 47%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles1-triclinic-cell_params1] SKIPPED [ 48%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles2-cubic-cell_params0] SKIPPED [ 48%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles2-triclinic-cell_params1] SKIPPED [ 48%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles3-cubic-cell_params0] SKIPPED [ 48%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles3-triclinic-cell_params1] SKIPPED [ 48%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles4-cubic-cell_params0] SKIPPED [ 49%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_explicit_misset_equivalence[misset_angles4-triclinic-cell_params1] SKIPPED [ 49%]
tests/test_at_parallel_023.py::TestAT_PARALLEL_023_MissetAnglesEquivalence::test_misset_changes_pattern SKIPPED [ 49%]
tests/test_at_parallel_024.py::TestAT_PARALLEL_024::test_pytorch_determinism PASSED [ 49%]
tests/test_at_parallel_024.py::TestAT_PARALLEL_024::test_seed_independence PASSED [ 50%]
tests/test_at_parallel_024.py::TestAT_PARALLEL_024::test_c_pytorch_equivalence SKIPPED [ 50%]
tests/test_at_parallel_024.py::TestAT_PARALLEL_024::test_lcg_compatibility PASSED [ 50%]
tests/test_at_parallel_024.py::TestAT_PARALLEL_024::test_mosaic_rotation_umat_determinism PASSED [ 50%]
tests/test_at_parallel_024.py::TestAT_PARALLEL_024::test_umat2misset_round_trip PASSED [ 51%]
tests/test_at_parallel_025.py::test_maximum_intensity_simple_case SKIPPED [ 51%]
tests/test_at_parallel_025.py::test_maximum_intensity_with_offset SKIPPED [ 51%]
tests/test_at_parallel_025.py::test_maximum_intensity_triclinic SKIPPED  [ 51%]
tests/test_at_parallel_026.py::TestAT_PARALLEL_026_TriclinicAbsolutePosition::test_triclinic_absolute_peak_position_pytorch_only PASSED [ 51%]
tests/test_at_parallel_026.py::TestAT_PARALLEL_026_TriclinicAbsolutePosition::test_triclinic_absolute_peak_position_vs_c FAILED [ 52%]
tests/test_at_parallel_026.py::TestAT_PARALLEL_026_TriclinicAbsolutePosition::test_triclinic_vs_cubic_peak_difference PASSED [ 52%]
tests/test_at_parallel_027.py::TestAT_PARALLEL_027::test_structure_factor_loading PASSED [ 52%]
tests/test_at_parallel_027.py::TestAT_PARALLEL_027::test_intensity_ratios PASSED [ 52%]
tests/test_at_parallel_027.py::TestAT_PARALLEL_027::test_pattern_structure PASSED [ 53%]
tests/test_at_parallel_027.py::TestAT_PARALLEL_027::test_c_pytorch_equivalence SKIPPED [ 53%]
tests/test_at_parallel_027.py::TestAT_PARALLEL_027::test_f_squared_scaling PASSED [ 53%]
tests/test_at_pol_001.py::TestATPOL001KahnModel::test_polarization_factor_calculation PASSED [ 53%]
tests/test_at_pol_001.py::TestATPOL001KahnModel::test_nopolar_toggle PASSED [ 53%]
tests/test_at_pol_001.py::TestATPOL001KahnModel::test_oversample_polar_last_value_semantics PASSED [ 54%]
tests/test_at_pol_001.py::TestATPOL001KahnModel::test_polarization_with_tilted_detector PASSED [ 54%]
tests/test_at_pol_001.py::TestATPOL001KahnModel::test_polarization_factor_range PASSED [ 54%]
tests/test_at_pre_001.py::test_header_precedence_img_then_mask PASSED    [ 54%]
tests/test_at_pre_001.py::test_mask_beam_center_y_flip PASSED            [ 55%]
tests/test_at_pre_001.py::test_img_only_no_mask PASSED                   [ 55%]
tests/test_at_pre_002.py::test_xbeam_ybeam_forces_beam_pivot PASSED      [ 55%]
tests/test_at_pre_002.py::test_xclose_yclose_forces_sample_pivot PASSED  [ 55%]
tests/test_at_pre_002.py::test_orgx_orgy_forces_sample_pivot PASSED      [ 55%]
tests/test_at_pre_002.py::test_explicit_pivot_override PASSED            [ 56%]
tests/test_at_pre_002.py::test_distance_vs_close_distance_pivot_defaults PASSED [ 56%]
tests/test_at_pre_002.py::test_convention_default_pivots PASSED          [ 56%]
tests/test_at_roi_001.py::TestAT_ROI_001::test_roi_bounds_default_to_full_detector PASSED [ 56%]
tests/test_at_roi_001.py::TestAT_ROI_001::test_roi_bounds_validation PASSED [ 57%]
tests/test_at_roi_001.py::TestAT_ROI_001::test_roi_limits_rendering_area PASSED [ 57%]
tests/test_at_roi_001.py::TestAT_ROI_001::test_mask_array_filtering PASSED [ 57%]
tests/test_at_roi_001.py::TestAT_ROI_001::test_roi_and_mask_combination PASSED [ 57%]
tests/test_at_roi_001.py::TestAT_ROI_001::test_mask_array_dimension_validation PASSED [ 57%]
tests/test_at_roi_001.py::TestAT_ROI_001::test_statistics_exclude_masked_pixels PASSED [ 58%]
tests/test_at_sam_001.py::test_at_sam_001_steps_normalization PASSED     [ 58%]
tests/test_at_sam_002.py::TestAT_SAM_002_OversampleLastValue::test_oversample_omega_last_value_semantics PASSED [ 58%]
tests/test_at_sam_002.py::TestAT_SAM_002_OversampleLastValue::test_oversample_without_subpixel_flags PASSED [ 58%]
tests/test_at_sam_002.py::TestAT_SAM_002_OversampleLastValue::test_oversample_flag_precedence PASSED [ 59%]
tests/test_at_sam_003.py::test_dmin_culling_basic PASSED                 [ 59%]
tests/test_at_sam_003.py::test_dmin_culling_exact_threshold PASSED       [ 59%]
tests/test_at_sam_003.py::test_dmin_zero_no_culling PASSED               [ 59%]
tests/test_at_src_001.py::TestAT_SRC_001_SourcefileAndWeighting::test_sourcefile_with_all_columns PASSED [ 60%]
tests/test_at_src_001.py::TestAT_SRC_001_SourcefileAndWeighting::test_sourcefile_with_missing_columns PASSED [ 60%]
tests/test_at_src_001.py::TestAT_SRC_001_SourcefileAndWeighting::test_sourcefile_default_position PASSED [ 60%]
tests/test_at_src_001.py::TestAT_SRC_001_SourcefileAndWeighting::test_multiple_sources_normalization PASSED [ 60%]
tests/test_at_src_001.py::TestAT_SRC_001_SourcefileAndWeighting::test_empty_sourcefile PASSED [ 60%]
tests/test_at_src_001_simple.py::test_sourcefile_parsing PASSED          [ 61%]
tests/test_at_src_002.py::TestAT_SRC_002::test_no_parameters_provided PASSED [ 61%]
tests/test_at_src_002.py::TestAT_SRC_002::test_only_step_provided PASSED [ 61%]
tests/test_at_src_002.py::TestAT_SRC_002::test_only_range_provided PASSED [ 61%]
tests/test_at_src_002.py::TestAT_SRC_002::test_only_count_provided_angles PASSED [ 62%]
tests/test_at_src_002.py::TestAT_SRC_002::test_only_count_provided_thickness PASSED [ 62%]
tests/test_at_src_002.py::TestAT_SRC_002::test_range_and_step_provided PASSED [ 62%]
tests/test_at_src_002.py::TestAT_SRC_002::test_count_and_range_provided PASSED [ 62%]
tests/test_at_src_002.py::TestAT_SRC_002::test_divergence_auto_selection PASSED [ 62%]
tests/test_at_src_002.py::TestAT_SRC_002::test_dispersion_auto_selection PASSED [ 63%]
tests/test_at_src_002.py::TestAT_SRC_002::test_thickness_auto_selection PASSED [ 63%]
tests/test_at_src_002.py::TestAT_SRC_002::test_all_parameters_provided PASSED [ 63%]
tests/test_at_src_002.py::TestAT_SRC_002::test_conflicting_parameters PASSED [ 63%]
tests/test_at_sta_001.py::TestAT_STA_001::test_statistics_basic PASSED   [ 64%]
tests/test_at_sta_001.py::TestAT_STA_001::test_statistics_with_roi PASSED [ 64%]
tests/test_at_sta_001.py::TestAT_STA_001::test_statistics_with_mask PASSED [ 64%]
tests/test_at_sta_001.py::TestAT_STA_001::test_statistics_empty_roi PASSED [ 64%]
tests/test_at_sta_001.py::TestAT_STA_001::test_statistics_last_max_location PASSED [ 64%]
tests/test_at_str_001.py::test_at_str_001_nearest_neighbor_lookup PASSED [ 65%]
tests/test_at_str_002.py::test_tricubic_interpolation_enabled PASSED     [ 65%]
tests/test_at_str_002.py::test_tricubic_out_of_bounds_fallback PASSED    [ 65%]
tests/test_at_str_002.py::test_auto_enable_interpolation PASSED          [ 65%]
tests/test_at_str_003.py::TestAT_STR_003_LatticeShapeModels::test_square_shape_model PASSED [ 66%]
tests/test_at_str_003.py::TestAT_STR_003_LatticeShapeModels::test_round_shape_model PASSED [ 66%]
tests/test_at_str_003.py::TestAT_STR_003_LatticeShapeModels::test_gauss_shape_model PASSED [ 66%]
tests/test_at_str_003.py::TestAT_STR_003_LatticeShapeModels::test_tophat_shape_model PASSED [ 66%]
tests/test_at_str_003.py::TestAT_STR_003_LatticeShapeModels::test_shape_model_comparison PASSED [ 66%]
tests/test_at_str_003.py::TestAT_STR_003_LatticeShapeModels::test_fudge_parameter_scaling PASSED [ 67%]
tests/test_at_str_003.py::TestAT_STR_003_LatticeShapeModels::test_shape_models_at_bragg_peak PASSED [ 67%]
tests/test_at_str_004.py::TestAT_STR_004::test_sparse_hkl_loading PASSED [ 67%]
tests/test_at_str_004.py::TestAT_STR_004::test_missing_reflection_uses_default_f PASSED [ 67%]
tests/test_at_str_004.py::TestAT_STR_004::test_intensity_ratios_with_sparse_hkl PASSED [ 68%]
tests/test_at_str_004.py::TestAT_STR_004::test_fallback_with_no_hkl_uses_default_f PASSED [ 68%]
tests/test_at_str_004.py::TestAT_STR_004::test_fdump_preserves_sparse_behavior PASSED [ 68%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_find_c_binary_resolution PASSED [ 68%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_find_py_binary_resolution PASSED [ 68%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_load_float_image PASSED [ 69%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_resample_image PASSED [ 69%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_compute_metrics PASSED [ 69%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_find_peaks PASSED [ 69%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_script_integration FAILED [ 70%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_metrics_with_identical_images PASSED [ 70%]
tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_metrics_with_scaled_images PASSED [ 70%]
tests/test_configuration_consistency.py::TestConfigurationConsistency::test_explicit_defaults_equal_implicit XFAIL [ 70%]
tests/test_configuration_consistency.py::TestConfigurationConsistency::test_configuration_echo_present SKIPPED [ 71%]
tests/test_configuration_consistency.py::TestConfigurationConsistency::test_mode_detection_accuracy FAILED [ 71%]
tests/test_configuration_consistency.py::TestConfigurationConsistency::test_trigger_tracking FAILED [ 71%]
tests/test_configuration_consistency.py::TestConfigurationConsistency::test_all_vector_parameters_trigger_custom FAILED [ 71%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_cubic_regression PASSED [ 71%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_triclinic_correctness PASSED [ 72%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_metric_duality PASSED [ 72%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_volume_identity PASSED [ 72%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_resolution_shell_consistency PASSED [ 72%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_rotation_invariance PASSED [ 73%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_gradient_flow PASSED [ 73%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_angles_to_rotation_matrix_identity PASSED [ 73%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_angles_to_rotation_matrix_x_rotation PASSED [ 73%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_angles_to_rotation_matrix_y_rotation PASSED [ 73%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_angles_to_rotation_matrix_z_rotation PASSED [ 74%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_angles_to_rotation_matrix_order PASSED [ 74%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_angles_to_rotation_matrix_properties PASSED [ 74%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_angles_to_rotation_matrix_tensor_types PASSED [ 74%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_misset_orientation PASSED [ 75%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_misset_zero_rotation PASSED [ 75%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_misset_tensor_inputs PASSED [ 75%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_misset_rotation_order PASSED [ 75%]
tests/test_crystal_geometry.py::TestCrystalGeometry::test_misset_gradient_flow PASSED [ 75%]
tests/test_detector_basis_vectors.py::TestDetectorBasisVectors::test_default_mosflm_convention PASSED [ 76%]
tests/test_detector_basis_vectors.py::TestDetectorBasisVectors::test_default_xds_convention PASSED [ 76%]
tests/test_detector_basis_vectors.py::TestDetectorBasisVectors::test_single_axis_rotations PASSED [ 76%]
tests/test_detector_basis_vectors.py::TestDetectorBasisVectors::test_combined_rotations PASSED [ 76%]
tests/test_detector_basis_vectors.py::TestDetectorBasisVectors::test_twotheta_rotation PASSED [ 77%]
tests/test_detector_basis_vectors.py::TestDetectorBasisVectors::test_all_rotations_combined PASSED [ 77%]
tests/test_detector_basis_vectors.py::TestDetectorBasisVectors::test_tensor_rotation_parameters PASSED [ 77%]
tests/test_detector_config.py::TestDetectorConfig::test_default_values PASSED [ 77%]
tests/test_detector_config.py::TestDetectorConfig::test_post_init_defaults PASSED [ 77%]
tests/test_detector_config.py::TestDetectorConfig::test_custom_twotheta_axis PASSED [ 78%]
tests/test_detector_config.py::TestDetectorConfig::test_xds_convention_defaults PASSED [ 78%]
tests/test_detector_config.py::TestDetectorConfig::test_invalid_pixel_counts PASSED [ 78%]
tests/test_detector_config.py::TestDetectorConfig::test_invalid_distance PASSED [ 78%]
tests/test_detector_config.py::TestDetectorConfig::test_invalid_pixel_size PASSED [ 79%]
tests/test_detector_config.py::TestDetectorConfig::test_invalid_oversample PASSED [ 79%]
tests/test_detector_config.py::TestDetectorConfig::test_tensor_parameters PASSED [ 79%]
tests/test_detector_config.py::TestDetectorInitialization::test_default_initialization PASSED [ 79%]
tests/test_detector_config.py::TestDetectorInitialization::test_custom_config_initialization PASSED [ 80%]
tests/test_detector_config.py::TestDetectorInitialization::test_backward_compatibility_check PASSED [ 80%]
tests/test_detector_config.py::TestDetectorInitialization::test_custom_config_not_default PASSED [ 80%]
tests/test_detector_config.py::TestDetectorInitialization::test_basis_vectors_initialization PASSED [ 80%]
tests/test_detector_config.py::TestDetectorInitialization::test_device_and_dtype PASSED [ 80%]
tests/test_detector_geometry.py::TestDetectorGeometryRegressions::test_rotated_basis_vectors_match_c_reference PASSED [ 81%]
tests/test_detector_geometry.py::TestDetectorGeometryRegressions::test_pix0_vector_matches_c_reference_in_beam_pivot PASSED [ 81%]
tests/test_detector_geometry.py::TestDetectorGeometryRegressions::test_mosflm_axis_mapping_correctness PASSED [ 81%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_detector_parameter_gradients PASSED [ 81%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_basis_vector_gradients PASSED [ 82%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_pixel_coords_basis_vector_gradients PASSED [ 82%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_comprehensive_gradcheck PASSED [ 82%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_beam_strike_invariant_in_beam_pivot_mode PASSED [ 82%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_xds_convention_basic_geometry PASSED [ 82%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_detector_real_valued_gradients PASSED [ 83%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_detector_complex_gradient_edge_cases PASSED [ 83%]
tests/test_detector_geometry.py::TestDetectorDifferentiability::test_simulator_real_valued_gradients PASSED [ 83%]
tests/test_detector_pivots.py::test_beam_pivot_keeps_beam_indices_and_alignment PASSED [ 83%]
tests/test_detector_pivots.py::test_sample_pivot_moves_beam_indices_with_twotheta PASSED [ 84%]
tests/test_gradients.py::TestCellParameterGradients::test_gradcheck_cell_a PASSED [ 84%]
tests/test_gradients.py::TestCellParameterGradients::test_gradcheck_cell_b PASSED [ 84%]
tests/test_gradients.py::TestCellParameterGradients::test_gradcheck_cell_c PASSED [ 84%]
tests/test_gradients.py::TestCellParameterGradients::test_gradcheck_cell_alpha PASSED [ 84%]
tests/test_gradients.py::TestCellParameterGradients::test_gradcheck_cell_beta PASSED [ 85%]
tests/test_gradients.py::TestCellParameterGradients::test_gradcheck_cell_gamma PASSED [ 85%]
tests/test_gradients.py::TestAdvancedGradients::test_joint_gradcheck PASSED [ 85%]
tests/test_gradients.py::TestAdvancedGradients::test_gradgradcheck_cell_params PASSED [ 85%]
tests/test_gradients.py::TestAdvancedGradients::test_gradient_flow_simulation PASSED [ 86%]
tests/test_gradients.py::TestPropertyBasedGradients::test_property_metric_duality PASSED [ 86%]
tests/test_gradients.py::TestPropertyBasedGradients::test_property_volume_consistency PASSED [ 86%]
tests/test_gradients.py::TestPropertyBasedGradients::test_property_gradient_stability PASSED [ 86%]
tests/test_gradients.py::TestOptimizationRecovery::test_optimization_recovers_cell PASSED [ 86%]
tests/test_gradients.py::TestOptimizationRecovery::test_multiple_optimization_scenarios PASSED [ 87%]
tests/test_mosflm_matrix.py::TestMOSFLMMatrixLoading::test_read_identity_matrix PASSED [ 87%]
tests/test_mosflm_matrix.py::TestMOSFLMMatrixLoading::test_read_cubic_matrix PASSED [ 87%]
tests/test_mosflm_matrix.py::TestMOSFLMMatrixLoading::test_wavelength_scaling PASSED [ 87%]
tests/test_mosflm_matrix.py::TestMOSFLMMatrixLoading::test_triclinic_matrix PASSED [ 88%]
tests/test_mosflm_matrix.py::TestMOSFLMMatrixLoading::test_missing_file PASSED [ 88%]
tests/test_mosflm_matrix.py::TestMOSFLMMatrixLoading::test_invalid_format PASSED [ 88%]
tests/test_mosflm_matrix.py::TestMOSFLMMatrixLoading::test_comments_and_whitespace PASSED [ 88%]
tests/test_physics.py::TestPhysicsFunctions::test_sincg_against_c_value PASSED [ 88%]
tests/test_physics.py::TestPhysicsFunctions::test_sincg_fractional_miller_index PASSED [ 89%]
tests/test_physics.py::TestPhysicsFunctions::test_sincg_at_zero PASSED   [ 89%]
tests/test_physics.py::TestPhysicsFunctions::test_sincg_vectorized PASSED [ 89%]
tests/test_physics.py::TestPhysicsFunctions::test_sincg_broadcast_N PASSED [ 89%]
tests/test_pivot_mode_selection.py::TestPivotModeSelection::test_twotheta_zero_uses_config_pivot PASSED [ 90%]
tests/test_pivot_mode_selection.py::TestPivotModeSelection::test_twotheta_nonzero_forces_sample_pivot PASSED [ 90%]
tests/test_pivot_mode_selection.py::TestPivotModeSelection::test_small_twotheta_values PASSED [ 90%]
tests/test_pivot_mode_selection.py::TestPivotModeSelection::test_negative_twotheta_forces_sample_pivot PASSED [ 90%]
tests/test_pivot_mode_selection.py::TestPivotModeSelection::test_pivot_fix_integration PASSED [ 91%]
tests/test_suite.py::TestGeometryFunctions::test_dot_product PASSED      [ 91%]
tests/test_suite.py::TestGeometryFunctions::test_cross_product PASSED    [ 91%]
tests/test_suite.py::TestGeometryFunctions::test_magnitude PASSED        [ 91%]
tests/test_suite.py::TestGeometryFunctions::test_unitize PASSED          [ 91%]
tests/test_suite.py::TestGeometryFunctions::test_rotate_axis PASSED      [ 92%]
tests/test_suite.py::TestGeometryFunctions::test_rotate_umat PASSED      [ 92%]
tests/test_suite.py::TestCrystalModel::test_zero_rotation PASSED         [ 92%]
tests/test_suite.py::TestCrystalModel::test_phi_rotation_90_deg PASSED   [ 92%]
tests/test_suite.py::TestCrystalModel::test_rotation_gradients PASSED    [ 93%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_golden_data_exists PASSED [ 93%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_simple_cubic_reproduction XFAIL [ 93%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_cubic_tilted_detector_reproduction PASSED [ 93%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_triclinic_P1_reproduction PASSED [ 93%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_peak_position_validation PASSED [ 94%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_sensitivity_to_cell_params PASSED [ 94%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_performance_simple_cubic PASSED [ 94%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_performance_triclinic PASSED [ 94%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_memory_usage_analysis PASSED [ 95%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_extreme_cell_parameters PASSED [ 95%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_rotation_compatibility PASSED [ 95%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_simple_cubic_mosaic_reproduction PASSED [ 95%]
tests/test_suite.py::TestTier1TranslationCorrectness::test_simulator_phi_rotation PASSED [ 95%]
tests/test_suite.py::TestTier2GradientCorrectness::test_gradcheck_crystal_params SKIPPED [ 96%]
tests/test_suite.py::TestTier2GradientCorrectness::test_gradcheck_detector_params SKIPPED [ 96%]
tests/test_suite.py::TestTier2GradientCorrectness::test_gradcheck_phi_rotation SKIPPED [ 96%]
tests/test_suite.py::TestTier2GradientCorrectness::test_gradcheck_mosaic_spread SKIPPED [ 96%]
tests/test_suite.py::TestTier2GradientCorrectness::test_gradient_numerical_stability SKIPPED [ 97%]
tests/test_suite.py::TestTier3ScientificValidation::test_bragg_spot_position SKIPPED [ 97%]
tests/test_suite.py::TestTier3ScientificValidation::test_polarization_limits SKIPPED [ 97%]
tests/test_suite.py::test_import PASSED                                  [ 97%]
tests/test_units.py::TestUnitConversions::test_mm_to_angstroms_scalar PASSED [ 97%]
tests/test_units.py::TestUnitConversions::test_mm_to_angstroms_tensor PASSED [ 98%]
tests/test_units.py::TestUnitConversions::test_mm_to_angstroms_gradient PASSED [ 98%]
tests/test_units.py::TestUnitConversions::test_meters_to_angstroms_scalar PASSED [ 98%]
tests/test_units.py::TestUnitConversions::test_meters_to_angstroms_tensor PASSED [ 98%]
tests/test_units.py::TestUnitConversions::test_degrees_to_radians_scalar PASSED [ 99%]
tests/test_units.py::TestUnitConversions::test_degrees_to_radians_tensor PASSED [ 99%]
tests/test_units.py::TestUnitConversions::test_degrees_to_radians_gradient PASSED [ 99%]
tests/test_units.py::TestUnitConversions::test_inverse_conversions PASSED [ 99%]
tests/test_units.py::TestUnitConversions::test_batch_tensor_conversions PASSED [100%]

=================================== FAILURES ===================================
_ TestATParallel012ReferencePatternCorrelation.test_cubic_tilted_detector_correlation _

self = <tests.test_at_parallel_012.TestATParallel012ReferencePatternCorrelation object at 0x13aaaed70>

    def test_cubic_tilted_detector_correlation(self):
        """Test tilted detector pattern correlation (≥0.98 correlation, ≤1.0px peaks)."""
        # Load golden data (1024x1024)
        golden_file = "tests/golden_data/cubic_tilted_detector/image.bin"
>       golden_image = load_golden_float_image(golden_file, (1024, 1024))
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/Users/ollie/Documents/nanoBragg/tests/test_at_parallel_012.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

filename = 'tests/golden_data/cubic_tilted_detector/image.bin'
shape = (1024, 1024)

    def load_golden_float_image(filename: str, shape: Tuple[int, int]) -> np.ndarray:
        """Load a binary float image from golden data."""
>       with open(filename, 'rb') as f:
             ^^^^^^^^^^^^^^^^^^^^
E       FileNotFoundError: [Errno 2] No such file or directory: 'tests/golden_data/cubic_tilted_detector/image.bin'

/Users/ollie/Documents/nanoBragg/tests/test_at_parallel_012.py:43: FileNotFoundError
_ TestAT_PARALLEL_026_TriclinicAbsolutePosition.test_triclinic_absolute_peak_position_vs_c _

self = <tests.test_at_parallel_026.TestAT_PARALLEL_026_TriclinicAbsolutePosition object at 0x13acf0190>

    @pytest.mark.requires_c_binary
    def test_triclinic_absolute_peak_position_vs_c(self):
        """Test that PyTorch and C produce peaks at the same absolute position"""
    
        from scripts.c_reference_runner import CReferenceRunner
    
        # Setup configuration
        crystal_config, detector_config, beam_config = self.setup_triclinic_config()
    
        # Create models
        crystal = Crystal(crystal_config)
        detector = Detector(detector_config)
    
        # Create PyTorch simulator
        simulator = Simulator(crystal, detector, crystal_config, beam_config)
    
        # Run PyTorch simulation
        pytorch_image = simulator.run()
        pytorch_slow, pytorch_fast, pytorch_intensity = self.find_peak_position(pytorch_image)
    
        # Setup C runner
        runner = CReferenceRunner()
    
        # Run C simulation with same configs
        c_image = runner.run_simulation(
            detector_config,
            crystal_config,
            beam_config,
            label="Triclinic absolute position test"
        )
    
>       assert c_image is not None, "C reference run failed"
E       AssertionError: C reference run failed
E       assert None is not None

/Users/ollie/Documents/nanoBragg/tests/test_at_parallel_026.py:147: AssertionError
----------------------------- Captured stdout call -----------------------------
❌ nanoBragg executable not available: golden_suite_generator/nanoBragg
________ TestAT_TOOLS_001_DualRunnerComparison.test_script_integration _________

self = <tests.test_at_tools_001.TestAT_TOOLS_001_DualRunnerComparison object at 0x13ace2140>

    @pytest.mark.skipif(
        not Path("./nanoBragg").exists() and not Path("./golden_suite_generator/nanoBragg").exists(),
        reason="Requires C binary for integration test"
    )
    def test_script_integration(self):
        """Test the full script execution."""
        # Run with minimal arguments
        cmd = [
            'python', 'scripts/nb_compare.py',
            '--outdir', 'test_comparison',
            '--',
            '-default_F', '100',
            '-cell', '100', '100', '100', '90', '90', '90',
            '-lambda', '1.0',
            '-distance', '100',
            '-detpixels', '64',
            '-floatfile', 'test.bin'
        ]
    
        # Run the script
        result = subprocess.run(cmd, capture_output=True, text=True)
    
        # Check that it ran without critical errors
        # (May still fail comparison if implementations differ)
>       assert result.returncode in [0, 1]  # 0=pass, 1=fail comparison
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       assert 2 in [0, 1]
E        +  where 2 = CompletedProcess(args=['python', 'scripts/nb_compare.py', '--outdir', 'test_comparison', '--', '-default_F', '100', '-cell', '100', '100', '100', '90', '90', '90', '-lambda', '1.0', '-distance', '100', '-detpixels', '64', '-floatfile', 'test.bin'], returncode=2, stdout='', stderr="python: can't open file '/private/var/folders/8y/vnl75xb954j0wd09cm8zrrx40000gp/T/pytest-of-ollie/pytest-514/test_fdump_preserves_sparse_be0/scripts/nb_compare.py': [Errno 2] No such file or directory\n").returncode

/Users/ollie/Documents/nanoBragg/tests/test_at_tools_001.py:191: AssertionError
__________ TestConfigurationConsistency.test_mode_detection_accuracy ___________

self = <tests.test_configuration_consistency.TestConfigurationConsistency object at 0x13acb3490>

    def test_mode_detection_accuracy(self):
        """Verify we correctly identify active mode from output."""
        # Test MOSFLM mode
>       mosflm_config = run_c_nanoBragg([])
                        ^^^^^^^^^^^^^^^^^^^

/Users/ollie/Documents/nanoBragg/tests/test_configuration_consistency.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/ollie/Documents/nanoBragg/tests/test_configuration_consistency.py:72: in run_c_nanoBragg
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Users/ollie/miniconda3/lib/python3.13/subprocess.py:554: in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Users/ollie/miniconda3/lib/python3.13/subprocess.py:1036: in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Popen: returncode: 255 args: ['./nanoBragg_config', '-lambda', '6.2', '-N',...>
args = ['./nanoBragg_config', '-lambda', '6.2', '-N', '1', '-cell', ...]
executable = b'./nanoBragg_config', preexec_fn = None, close_fds = True
pass_fds = (), cwd = None, env = None, startupinfo = None, creationflags = 0
shell = False, p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12
errread = 13, errwrite = 14, restore_signals = True, gid = None, gids = None
uid = None, umask = -1, start_new_session = False, process_group = -1

    def _execute_child(self, args, executable, preexec_fn, close_fds,
                       pass_fds, cwd, env,
                       startupinfo, creationflags, shell,
                       p2cread, p2cwrite,
                       c2pread, c2pwrite,
                       errread, errwrite,
                       restore_signals,
                       gid, gids, uid, umask,
                       start_new_session, process_group):
        """Execute program (POSIX version)"""
    
        if isinstance(args, (str, bytes)):
            args = [args]
        elif isinstance(args, os.PathLike):
            if shell:
                raise TypeError('path-like args is not allowed when '
                                'shell is true')
            args = [args]
        else:
            args = list(args)
    
        if shell:
            # On Android the default shell is at '/system/bin/sh'.
            unix_shell = ('/system/bin/sh' if
                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')
            args = [unix_shell, "-c"] + args
            if executable:
                args[0] = executable
    
        if executable is None:
            executable = args[0]
    
        sys.audit("subprocess.Popen", executable, args, cwd, env)
    
        if (_USE_POSIX_SPAWN
                and os.path.dirname(executable)
                and preexec_fn is None
                and (not close_fds or _HAVE_POSIX_SPAWN_CLOSEFROM)
                and not pass_fds
                and cwd is None
                and (p2cread == -1 or p2cread > 2)
                and (c2pwrite == -1 or c2pwrite > 2)
                and (errwrite == -1 or errwrite > 2)
                and not start_new_session
                and process_group == -1
                and gid is None
                and gids is None
                and uid is None
                and umask < 0):
            self._posix_spawn(args, executable, env, restore_signals, close_fds,
                              p2cread, p2cwrite,
                              c2pread, c2pwrite,
                              errread, errwrite)
            return
    
        orig_executable = executable
    
        # For transferring possible exec failure from child to parent.
        # Data format: "exception name:hex errno:description"
        # Pickle is not used; it is complex and involves memory allocation.
        errpipe_read, errpipe_write = os.pipe()
        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.
        low_fds_to_close = []
        while errpipe_write < 3:
            low_fds_to_close.append(errpipe_write)
            errpipe_write = os.dup(errpipe_write)
        for low_fd in low_fds_to_close:
            os.close(low_fd)
        try:
            try:
                # We must avoid complex work that could involve
                # malloc or free in the child process to avoid
                # potential deadlocks, thus we do all this here.
                # and pass it to fork_exec()
    
                if env is not None:
                    env_list = []
                    for k, v in env.items():
                        k = os.fsencode(k)
                        if b'=' in k:
                            raise ValueError("illegal environment variable name")
                        env_list.append(k + b'=' + os.fsencode(v))
                else:
                    env_list = None  # Use execv instead of execve.
                executable = os.fsencode(executable)
                if os.path.dirname(executable):
                    executable_list = (executable,)
                else:
                    # This matches the behavior of os._execvpe().
                    executable_list = tuple(
                        os.path.join(os.fsencode(dir), executable)
                        for dir in os.get_exec_path(env))
                fds_to_keep = set(pass_fds)
                fds_to_keep.add(errpipe_write)
                self.pid = _fork_exec(
                        args, executable_list,
                        close_fds, tuple(sorted(map(int, fds_to_keep))),
                        cwd, env_list,
                        p2cread, p2cwrite, c2pread, c2pwrite,
                        errread, errwrite,
                        errpipe_read, errpipe_write,
                        restore_signals, start_new_session,
                        process_group, gid, gids, uid, umask,
                        preexec_fn, _USE_VFORK)
                self._child_created = True
            finally:
                # be sure the FD is closed no matter what
                os.close(errpipe_write)
    
            self._close_pipe_fds(p2cread, p2cwrite,
                                 c2pread, c2pwrite,
                                 errread, errwrite)
    
            # Wait for exec to fail or succeed; possibly raising an
            # exception (limited in size)
            errpipe_data = bytearray()
            while True:
                part = os.read(errpipe_read, 50000)
                errpipe_data += part
                if not part or len(errpipe_data) > 50000:
                    break
        finally:
            # be sure the FD is closed no matter what
            os.close(errpipe_read)
    
        if errpipe_data:
            try:
                pid, sts = os.waitpid(self.pid, 0)
                if pid == self.pid:
                    self._handle_exitstatus(sts)
                else:
                    self.returncode = sys.maxsize
            except ChildProcessError:
                pass
    
            try:
                exception_name, hex_errno, err_msg = (
                        errpipe_data.split(b':', 2))
                # The encoding here should match the encoding
                # written in by the subprocess implementations
                # like _posixsubprocess
                err_msg = err_msg.decode()
            except ValueError:
                exception_name = b'SubprocessError'
                hex_errno = b'0'
                err_msg = 'Bad exception data from child: {!r}'.format(
                              bytes(errpipe_data))
            child_exception_type = getattr(
                    builtins, exception_name.decode('ascii'),
                    SubprocessError)
            if issubclass(child_exception_type, OSError) and hex_errno:
                errno_num = int(hex_errno, 16)
                if err_msg == "noexec:chdir":
                    err_msg = ""
                    # The error must be from chdir(cwd).
                    err_filename = cwd
                elif err_msg == "noexec":
                    err_msg = ""
                    err_filename = None
                else:
                    err_filename = orig_executable
                if errno_num != 0:
                    err_msg = os.strerror(errno_num)
                if err_filename is not None:
>                   raise child_exception_type(errno_num, err_msg, err_filename)
E                   FileNotFoundError: [Errno 2] No such file or directory: './nanoBragg_config'

/Users/ollie/miniconda3/lib/python3.13/subprocess.py:1966: FileNotFoundError
______________ TestConfigurationConsistency.test_trigger_tracking ______________

self = <tests.test_configuration_consistency.TestConfigurationConsistency object at 0x13acb35c0>

    def test_trigger_tracking(self):
        """Verify we track what triggered the configuration."""
        # Default trigger
>       default_config = run_c_nanoBragg([])
                         ^^^^^^^^^^^^^^^^^^^

/Users/ollie/Documents/nanoBragg/tests/test_configuration_consistency.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/ollie/Documents/nanoBragg/tests/test_configuration_consistency.py:72: in run_c_nanoBragg
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Users/ollie/miniconda3/lib/python3.13/subprocess.py:554: in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Users/ollie/miniconda3/lib/python3.13/subprocess.py:1036: in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Popen: returncode: 255 args: ['./nanoBragg_config', '-lambda', '6.2', '-N',...>
args = ['./nanoBragg_config', '-lambda', '6.2', '-N', '1', '-cell', ...]
executable = b'./nanoBragg_config', preexec_fn = None, close_fds = True
pass_fds = (), cwd = None, env = None, startupinfo = None, creationflags = 0
shell = False, p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12
errread = 13, errwrite = 14, restore_signals = True, gid = None, gids = None
uid = None, umask = -1, start_new_session = False, process_group = -1

    def _execute_child(self, args, executable, preexec_fn, close_fds,
                       pass_fds, cwd, env,
                       startupinfo, creationflags, shell,
                       p2cread, p2cwrite,
                       c2pread, c2pwrite,
                       errread, errwrite,
                       restore_signals,
                       gid, gids, uid, umask,
                       start_new_session, process_group):
        """Execute program (POSIX version)"""
    
        if isinstance(args, (str, bytes)):
            args = [args]
        elif isinstance(args, os.PathLike):
            if shell:
                raise TypeError('path-like args is not allowed when '
                                'shell is true')
            args = [args]
        else:
            args = list(args)
    
        if shell:
            # On Android the default shell is at '/system/bin/sh'.
            unix_shell = ('/system/bin/sh' if
                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')
            args = [unix_shell, "-c"] + args
            if executable:
                args[0] = executable
    
        if executable is None:
            executable = args[0]
    
        sys.audit("subprocess.Popen", executable, args, cwd, env)
    
        if (_USE_POSIX_SPAWN
                and os.path.dirname(executable)
                and preexec_fn is None
                and (not close_fds or _HAVE_POSIX_SPAWN_CLOSEFROM)
                and not pass_fds
                and cwd is None
                and (p2cread == -1 or p2cread > 2)
                and (c2pwrite == -1 or c2pwrite > 2)
                and (errwrite == -1 or errwrite > 2)
                and not start_new_session
                and process_group == -1
                and gid is None
                and gids is None
                and uid is None
                and umask < 0):
            self._posix_spawn(args, executable, env, restore_signals, close_fds,
                              p2cread, p2cwrite,
                              c2pread, c2pwrite,
                              errread, errwrite)
            return
    
        orig_executable = executable
    
        # For transferring possible exec failure from child to parent.
        # Data format: "exception name:hex errno:description"
        # Pickle is not used; it is complex and involves memory allocation.
        errpipe_read, errpipe_write = os.pipe()
        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.
        low_fds_to_close = []
        while errpipe_write < 3:
            low_fds_to_close.append(errpipe_write)
            errpipe_write = os.dup(errpipe_write)
        for low_fd in low_fds_to_close:
            os.close(low_fd)
        try:
            try:
                # We must avoid complex work that could involve
                # malloc or free in the child process to avoid
                # potential deadlocks, thus we do all this here.
                # and pass it to fork_exec()
    
                if env is not None:
                    env_list = []
                    for k, v in env.items():
                        k = os.fsencode(k)
                        if b'=' in k:
                            raise ValueError("illegal environment variable name")
                        env_list.append(k + b'=' + os.fsencode(v))
                else:
                    env_list = None  # Use execv instead of execve.
                executable = os.fsencode(executable)
                if os.path.dirname(executable):
                    executable_list = (executable,)
                else:
                    # This matches the behavior of os._execvpe().
                    executable_list = tuple(
                        os.path.join(os.fsencode(dir), executable)
                        for dir in os.get_exec_path(env))
                fds_to_keep = set(pass_fds)
                fds_to_keep.add(errpipe_write)
                self.pid = _fork_exec(
                        args, executable_list,
                        close_fds, tuple(sorted(map(int, fds_to_keep))),
                        cwd, env_list,
                        p2cread, p2cwrite, c2pread, c2pwrite,
                        errread, errwrite,
                        errpipe_read, errpipe_write,
                        restore_signals, start_new_session,
                        process_group, gid, gids, uid, umask,
                        preexec_fn, _USE_VFORK)
                self._child_created = True
            finally:
                # be sure the FD is closed no matter what
                os.close(errpipe_write)
    
            self._close_pipe_fds(p2cread, p2cwrite,
                                 c2pread, c2pwrite,
                                 errread, errwrite)
    
            # Wait for exec to fail or succeed; possibly raising an
            # exception (limited in size)
            errpipe_data = bytearray()
            while True:
                part = os.read(errpipe_read, 50000)
                errpipe_data += part
                if not part or len(errpipe_data) > 50000:
                    break
        finally:
            # be sure the FD is closed no matter what
            os.close(errpipe_read)
    
        if errpipe_data:
            try:
                pid, sts = os.waitpid(self.pid, 0)
                if pid == self.pid:
                    self._handle_exitstatus(sts)
                else:
                    self.returncode = sys.maxsize
            except ChildProcessError:
                pass
    
            try:
                exception_name, hex_errno, err_msg = (
                        errpipe_data.split(b':', 2))
                # The encoding here should match the encoding
                # written in by the subprocess implementations
                # like _posixsubprocess
                err_msg = err_msg.decode()
            except ValueError:
                exception_name = b'SubprocessError'
                hex_errno = b'0'
                err_msg = 'Bad exception data from child: {!r}'.format(
                              bytes(errpipe_data))
            child_exception_type = getattr(
                    builtins, exception_name.decode('ascii'),
                    SubprocessError)
            if issubclass(child_exception_type, OSError) and hex_errno:
                errno_num = int(hex_errno, 16)
                if err_msg == "noexec:chdir":
                    err_msg = ""
                    # The error must be from chdir(cwd).
                    err_filename = cwd
                elif err_msg == "noexec":
                    err_msg = ""
                    err_filename = None
                else:
                    err_filename = orig_executable
                if errno_num != 0:
                    err_msg = os.strerror(errno_num)
                if err_filename is not None:
>                   raise child_exception_type(errno_num, err_msg, err_filename)
E                   FileNotFoundError: [Errno 2] No such file or directory: './nanoBragg_config'

/Users/ollie/miniconda3/lib/python3.13/subprocess.py:1966: FileNotFoundError
____ TestConfigurationConsistency.test_all_vector_parameters_trigger_custom ____

self = <tests.test_configuration_consistency.TestConfigurationConsistency object at 0x13af31c70>

    def test_all_vector_parameters_trigger_custom(self):
        """Test that all vector parameters trigger CUSTOM mode."""
        vector_params = [
            (["-fdet_vector", "0", "0", "1"], "fdet_vector"),
            (["-sdet_vector", "0", "-1", "0"], "sdet_vector"),
            (["-odet_vector", "1", "0", "0"], "odet_vector"),
            (["-beam_vector", "1", "0", "0"], "beam_vector"),
            (["-polar_vector", "0", "0", "1"], "polar_vector"),
            (["-spindle_axis", "0", "0", "1"], "spindle_axis"),
            (["-twotheta_axis", "0", "0", "-1"], "twotheta_axis"),
            (["-pix0_vector", "0", "0", "0"], "pix0_vector"),
        ]
    
        for params, param_name in vector_params:
>           config = run_c_nanoBragg(params)
                     ^^^^^^^^^^^^^^^^^^^^^^^

/Users/ollie/Documents/nanoBragg/tests/test_configuration_consistency.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/ollie/Documents/nanoBragg/tests/test_configuration_consistency.py:72: in run_c_nanoBragg
    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Users/ollie/miniconda3/lib/python3.13/subprocess.py:554: in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
/Users/ollie/miniconda3/lib/python3.13/subprocess.py:1036: in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Popen: returncode: 255 args: ['./nanoBragg_config', '-lambda', '6.2', '-N',...>
args = ['./nanoBragg_config', '-lambda', '6.2', '-N', '1', '-cell', ...]
executable = b'./nanoBragg_config', preexec_fn = None, close_fds = True
pass_fds = (), cwd = None, env = None, startupinfo = None, creationflags = 0
shell = False, p2cread = -1, p2cwrite = -1, c2pread = 11, c2pwrite = 12
errread = 13, errwrite = 14, restore_signals = True, gid = None, gids = None
uid = None, umask = -1, start_new_session = False, process_group = -1

    def _execute_child(self, args, executable, preexec_fn, close_fds,
                       pass_fds, cwd, env,
                       startupinfo, creationflags, shell,
                       p2cread, p2cwrite,
                       c2pread, c2pwrite,
                       errread, errwrite,
                       restore_signals,
                       gid, gids, uid, umask,
                       start_new_session, process_group):
        """Execute program (POSIX version)"""
    
        if isinstance(args, (str, bytes)):
            args = [args]
        elif isinstance(args, os.PathLike):
            if shell:
                raise TypeError('path-like args is not allowed when '
                                'shell is true')
            args = [args]
        else:
            args = list(args)
    
        if shell:
            # On Android the default shell is at '/system/bin/sh'.
            unix_shell = ('/system/bin/sh' if
                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')
            args = [unix_shell, "-c"] + args
            if executable:
                args[0] = executable
    
        if executable is None:
            executable = args[0]
    
        sys.audit("subprocess.Popen", executable, args, cwd, env)
    
        if (_USE_POSIX_SPAWN
                and os.path.dirname(executable)
                and preexec_fn is None
                and (not close_fds or _HAVE_POSIX_SPAWN_CLOSEFROM)
                and not pass_fds
                and cwd is None
                and (p2cread == -1 or p2cread > 2)
                and (c2pwrite == -1 or c2pwrite > 2)
                and (errwrite == -1 or errwrite > 2)
                and not start_new_session
                and process_group == -1
                and gid is None
                and gids is None
                and uid is None
                and umask < 0):
            self._posix_spawn(args, executable, env, restore_signals, close_fds,
                              p2cread, p2cwrite,
                              c2pread, c2pwrite,
                              errread, errwrite)
            return
    
        orig_executable = executable
    
        # For transferring possible exec failure from child to parent.
        # Data format: "exception name:hex errno:description"
        # Pickle is not used; it is complex and involves memory allocation.
        errpipe_read, errpipe_write = os.pipe()
        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.
        low_fds_to_close = []
        while errpipe_write < 3:
            low_fds_to_close.append(errpipe_write)
            errpipe_write = os.dup(errpipe_write)
        for low_fd in low_fds_to_close:
            os.close(low_fd)
        try:
            try:
                # We must avoid complex work that could involve
                # malloc or free in the child process to avoid
                # potential deadlocks, thus we do all this here.
                # and pass it to fork_exec()
    
                if env is not None:
                    env_list = []
                    for k, v in env.items():
                        k = os.fsencode(k)
                        if b'=' in k:
                            raise ValueError("illegal environment variable name")
                        env_list.append(k + b'=' + os.fsencode(v))
                else:
                    env_list = None  # Use execv instead of execve.
                executable = os.fsencode(executable)
                if os.path.dirname(executable):
                    executable_list = (executable,)
                else:
                    # This matches the behavior of os._execvpe().
                    executable_list = tuple(
                        os.path.join(os.fsencode(dir), executable)
                        for dir in os.get_exec_path(env))
                fds_to_keep = set(pass_fds)
                fds_to_keep.add(errpipe_write)
                self.pid = _fork_exec(
                        args, executable_list,
                        close_fds, tuple(sorted(map(int, fds_to_keep))),
                        cwd, env_list,
                        p2cread, p2cwrite, c2pread, c2pwrite,
                        errread, errwrite,
                        errpipe_read, errpipe_write,
                        restore_signals, start_new_session,
                        process_group, gid, gids, uid, umask,
                        preexec_fn, _USE_VFORK)
                self._child_created = True
            finally:
                # be sure the FD is closed no matter what
                os.close(errpipe_write)
    
            self._close_pipe_fds(p2cread, p2cwrite,
                                 c2pread, c2pwrite,
                                 errread, errwrite)
    
            # Wait for exec to fail or succeed; possibly raising an
            # exception (limited in size)
            errpipe_data = bytearray()
            while True:
                part = os.read(errpipe_read, 50000)
                errpipe_data += part
                if not part or len(errpipe_data) > 50000:
                    break
        finally:
            # be sure the FD is closed no matter what
            os.close(errpipe_read)
    
        if errpipe_data:
            try:
                pid, sts = os.waitpid(self.pid, 0)
                if pid == self.pid:
                    self._handle_exitstatus(sts)
                else:
                    self.returncode = sys.maxsize
            except ChildProcessError:
                pass
    
            try:
                exception_name, hex_errno, err_msg = (
                        errpipe_data.split(b':', 2))
                # The encoding here should match the encoding
                # written in by the subprocess implementations
                # like _posixsubprocess
                err_msg = err_msg.decode()
            except ValueError:
                exception_name = b'SubprocessError'
                hex_errno = b'0'
                err_msg = 'Bad exception data from child: {!r}'.format(
                              bytes(errpipe_data))
            child_exception_type = getattr(
                    builtins, exception_name.decode('ascii'),
                    SubprocessError)
            if issubclass(child_exception_type, OSError) and hex_errno:
                errno_num = int(hex_errno, 16)
                if err_msg == "noexec:chdir":
                    err_msg = ""
                    # The error must be from chdir(cwd).
                    err_filename = cwd
                elif err_msg == "noexec":
                    err_msg = ""
                    err_filename = None
                else:
                    err_filename = orig_executable
                if errno_num != 0:
                    err_msg = os.strerror(errno_num)
                if err_filename is not None:
>                   raise child_exception_type(errno_num, err_msg, err_filename)
E                   FileNotFoundError: [Errno 2] No such file or directory: './nanoBragg_config'

/Users/ollie/miniconda3/lib/python3.13/subprocess.py:1966: FileNotFoundError
=============================== warnings summary ===============================
tests/test_at_parallel_026.py:23
  /Users/ollie/Documents/nanoBragg/tests/test_at_parallel_026.py:23: PytestUnknownMarkWarning: Unknown pytest.mark.parallel_validation - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    pytest.mark.parallel_validation

tests/test_at_parallel_026.py:116
  /Users/ollie/Documents/nanoBragg/tests/test_at_parallel_026.py:116: PytestUnknownMarkWarning: Unknown pytest.mark.requires_c_binary - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.requires_c_binary

tests/test_at_crystal_absolute.py::TestATCrystalAbsolute::test_triclinic_absolute_positions
  /Users/ollie/Documents/nanoBragg/tests/test_at_crystal_absolute.py:205: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)
    triclinic_error = np.sqrt(

tests/test_at_crystal_absolute.py::TestATCrystalAbsolute::test_triclinic_absolute_positions
  /Users/ollie/Documents/nanoBragg/tests/test_at_crystal_absolute.py:228: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)
    cubic_dist_from_center = np.sqrt(

tests/test_at_crystal_absolute.py::TestATCrystalAbsolute::test_cubic_vs_triclinic_systematic_difference
  /Users/ollie/Documents/nanoBragg/tests/test_at_crystal_absolute.py:292: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)
    position_diff = np.sqrt(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_at_parallel_012.py::TestATParallel012ReferencePatternCorrelation::test_cubic_tilted_detector_correlation
FAILED tests/test_at_parallel_026.py::TestAT_PARALLEL_026_TriclinicAbsolutePosition::test_triclinic_absolute_peak_position_vs_c
FAILED tests/test_at_tools_001.py::TestAT_TOOLS_001_DualRunnerComparison::test_script_integration
FAILED tests/test_configuration_consistency.py::TestConfigurationConsistency::test_mode_detection_accuracy
FAILED tests/test_configuration_consistency.py::TestConfigurationConsistency::test_trigger_tracking
FAILED tests/test_configuration_consistency.py::TestConfigurationConsistency::test_all_vector_parameters_trigger_custom
= 6 failed, 384 passed, 52 skipped, 4 xfailed, 5 warnings in 143.56s (0:02:23) =
