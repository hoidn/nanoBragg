[SYNC] Waiting for expected_actor=ralph...
Already up to date.
Updating 7c6dfef..fedb25f
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   7c6dfef..fedb25f  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating fedb25f..f245738
Fast-forward
 docs/fix_plan.md              |  10 ++--
 galph_memory.md               |   7 +++
 input.md                      | 131 +++++++++++++++++++++++++++++++-----------
 plans/active/vectorization.md | 117 ++++++++++++++++++-------------------
 4 files changed, 170 insertions(+), 95 deletions(-)
From github.com:hoidn/nanoBragg
   fedb25f..f245738  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Updating f245738..2b69f66
Fast-forward
 sync/state.json | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)
From github.com:hoidn/nanoBragg
   f245738..2b69f66  feature/spec-based-2 -> origin/feature/spec-based-2
To github.com:hoidn/nanoBragg.git
   2b69f66..556de97  HEAD -> feature/spec-based-2
$ /home/ollie/.claude/local/claude -p --dangerously-skip-permissions --verbose --output-format stream-json
{"type":"system","subtype":"init","cwd":"/home/ollie/Documents/tmp/nanoBragg","session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","tools":["Task","Bash","Glob","Grep","ExitPlanMode","Read","Edit","Write","NotebookEdit","WebFetch","TodoWrite","WebSearch","BashOutput","KillShell","SlashCommand"],"mcp_servers":[],"model":"claude-sonnet-4-5-20250929","permissionMode":"bypassPermissions","slash_commands":["compact","context","cost","init","output-style:new","pr-comments","release-notes","todos","review","security-review"],"apiKeySource":"none","output_style":"default","agents":["general-purpose","statusline-setup","output-style-setup"],"uuid":"05b591dc-4277-4580-a058-df021537d581"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01NiynXecM7acxi9cY8HuWxC","type":"message","role":"assistant","content":[{"type":"text","text":"I'll start by syncing with the remote repository and then reading the required files to understand the current state of the project."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":23062,"cache_read_input_tokens":5432,"cache_creation":{"ephemeral_5m_input_tokens":23062,"ephemeral_1h_input_tokens":0},"output_tokens":5,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"a925519d-f9a3-462b-87f0-dff77044a78a"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01NiynXecM7acxi9cY8HuWxC","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_018mWRL5t5EzBgPanyGAYZvG","name":"Bash","input":{"command":"git pull --rebase","description":"Sync with remote repository"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":23062,"cache_read_input_tokens":5432,"cache_creation":{"ephemeral_5m_input_tokens":23062,"ephemeral_1h_input_tokens":0},"output_tokens":5,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"04d63d4f-adb5-460e-a6dc-cddd5b226395"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018mWRL5t5EzBgPanyGAYZvG","type":"tool_result","content":"Already up to date.\n/home/ollie/.bash_profile: line 5: /home/ollie/.cargo/env: No such file or directory","is_error":false}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"ef699605-67d3-4432-b427-3f34386dee67"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"text","text":"Good, repository is up to date. Now let me read the required files:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"49876886-24e3-4af0-b064-9292800d5128"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01P4rmux7SFi3SmmqKVVFzts","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/index.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"79749c25-6f85-4773-bfd7-e7a135f4003c"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01HRYWn8DCpSvoJFHwvse1qU","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/input.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"d88e6730-25a9-4f1f-b9f1-831fa5f54095"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01NKtpZ1cU7EiJM7mCsGTexr","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/specs/spec-a.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"ada8478a-d1b5-4141-8e89-c2ec926822f5"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_014MB8aoLf1T6voVVqoEmSqP","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/arch.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"19003f7f-31d7-4e8c-98bb-6afa874d6f8f"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_019EYeUQ8MX93HXeiWR1vZyH","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/development/c_to_pytorch_config_map.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"b1fb18ab-3fab-44b4-85ab-305dcbbe8a33"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01GWgtFFjS33n79HhrPpyn6T","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/debugging/debugging.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"69643b6d-d8eb-4317-963c-ded14bc38b88"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01UefpxzLXorEziyVRyumiWc","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"f41350e4-d35f-4801-a680-ddd435585eab"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_013WmpVUcCHQxVk5AwWoMLUs","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/CLAUDE.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3a11713e-d326-4d97-9e2e-0ac191f844a9"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DY81swjNrxbB3Gu1m4AGc2","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01VfKaLE2bb65P6zzgks1WCf","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/development/testing_strategy.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":147,"cache_read_input_tokens":28494,"cache_creation":{"ephemeral_5m_input_tokens":147,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"ae3a696b-e178-4d27-8777-bf4e766aa289"}
{"type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"<tool_use_error>File content (342.9KB) exceeds maximum allowed size (256KB). Please use offset and limit parameters to read specific portions of the file, or use the GrepTool to search for specific content.</tool_use_error>","is_error":true,"tool_use_id":"toolu_01UefpxzLXorEziyVRyumiWc"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"32f6d558-66b2-4e73-bcff-80f4d3085cc2"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01P4rmux7SFi3SmmqKVVFzts","type":"tool_result","content":"     1→# Project Documentation Index\n     2→\n     3→Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.\n     4→\n     5→---\n     6→\n     7→## 🏛️ Permanent Documentation\n     8→\n     9→These are the core, living documents that guide the project.\n    10→\n    11→### Core Project Guides\n    12→### PyTorch Guardrails\n    13→* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.\n    14→* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.\n    15→* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.\n    16→\n    17→* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.\n    18→* **[README.md](../README.md)** - The main project entry point.\n    19→* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.\n    20→* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.\n    21→* **[loop.sh](../loop.sh)** - Supervisory automation harness for Claude loops; treat as a protected asset (do **not** delete during hygiene passes).\n    22→* **[supervisor.sh](../supervisor.sh)** - Supervisor (galph) runner. Supports `--sync-via-git` for cross-machine turn taking; treat as a protected asset.\n    23→* **[input.md](../input.md)** - Supervisor→Engineer steering memo. Rewritten and committed each supervisor run; treat as a protected asset.\n    24→\n    25→### Architecture & Design (`docs/architecture/`)\n    26→* **[Architecture Hub](./architecture/README.md)** - The central navigation point for all architectural documentation.\n    27→* **[C Code Overview](./architecture/c_code_overview.md)** - Original C codebase structure and design patterns.\n    28→* **[C Function Reference](./architecture/c_function_reference.md)** - Function-by-function porting guide.\n    29→* **[C Parameter Dictionary](./architecture/c_parameter_dictionary.md)** - Complete mapping of C command-line parameters.\n    30→* **[Conventions](./architecture/conventions.md)** - Coding and design conventions.\n    31→* **[Detector Component](./architecture/detector.md)** - Detailed detector component specification with hybrid unit system.\n    32→* **[Parameter Trace Analysis](./architecture/parameter_trace_analysis.md)** - End-to-end parameter flow for gradient interpretation.\n    33→* **[PyTorch Design](./architecture/pytorch_design.md)** - Core PyTorch implementation architecture.\n    34→* **[Undocumented Conventions](./architecture/undocumented_conventions.md)** - Living document of implicit C-code behaviors.\n    35→\n    36→### Development Process (`docs/development/`)\n    37→* **[C to PyTorch Config Map](./development/c_to_pytorch_config_map.md)** - Critical configuration mapping between C and PyTorch.\n    38→* **[Contributing Guidelines](./development/CONTRIBUTING.md)** - How to contribute to the project.\n    39→* **[Debugging Guide](./debugging/debugging.md)** - General debugging workflows and strategies.\n    40→* **[Documentation Sync SOP (Template)](../prompts/doc_sync_sop.md)** - Repeatable process to find/fix doc drift and keep SOPs aligned with tests.\n    41→* **[Detector Fix Phase 2 Session](./development/detector_fix_phase2_session.md)** - Detailed debugging session log.\n    42→* **[Detector Geometry Debugging](./debugging/detector_geometry_debugging.md)** - Specific detector geometry debugging guide.\n    43→* **[Detector Rotation Debugging Session](./development/detector_rotation_debugging_session.md)** - Rotation-specific debugging session.\n    44→* **[Implementation Plan](./development/implementation_plan.md)** - Phased development roadmap.\n    45→* **[Lessons in Differentiability](./development/lessons_in_differentiability.md)** - Key learnings about maintaining gradient flow.\n    46→* **[Project Status](./development/PROJECT_STATUS.md)** - Current development status (duplicate link).\n    47→* **[Testing Strategy](./development/testing_strategy.md)** - Three-tier validation approach.\n    48→* **[Validation Scripts](../scripts/validation/README.md)** - Reusable parity/validation helpers referenced by prompts and supervisor input; prefer these over ad‑hoc snippets when available.\n    49→\n    50→### Debugging Resources (`docs/debugging/`)\n    51→* **[Detector Geometry Checklist](./debugging/detector_geometry_checklist.md)** - ⚠️ **MANDATORY** checklist before debugging detector issues.\n    52→\n    53→### User Guides (`docs/user/`)\n    54→* **[CLI Quickstart](./user/cli_quickstart.md)** - Installing and running the PyTorch CLI.\n    55→* **[Known Limitations](./user/known_limitations.md)** - Current limitations and workarounds, including triclinic misset issues.\n    56→* **[Migration Guide](./user/migration_guide.md)** - Guide for migrating from C to PyTorch version.\n    57→* **[Performance Guide](./user/performance.md)** - Performance optimization and benchmarking.\n    58→* **[Rotation Usage](./user/rotation_usage.md)** - How to use rotation features correctly.\n    59→\n    60→### Development Checklists (`docs/development/checklists/`)\n    61→* **[Checklist 1](./development/checklists/checklist1.md)** - Development checklist.\n    62→\n    63→---\n    64→\n    65→## 🗄️ Archival Documentation\n    66→\n    67→This collection provides the historical context of the project's development.\n    68→\n    69→* **[Historical Debugging Sessions](../history/)** - Detailed logs of past debugging sessions and their resolutions.\n    70→* **[Initiatives & Feature Plans](../initiatives/)** - Plans, checklists, and findings for major development efforts.\n    71→* **[Reports & Analysis](../reports/)** - Milestone summaries, performance reports, and investigation findings.\n    72→\n    73→---\n    74→\n    75→## 🔍 Quick Navigation\n    76→\n    77→### By Priority\n    78→1. **[Detector Geometry Debugging Checklist](./debugging/detector_geometry_checklist.md)** - Start here for detector issues\n    79→2. **[C to PyTorch Config Map](./development/c_to_pytorch_config_map.md)** - Essential for configuration parity\n    80→3. **[Undocumented Conventions](./architecture/undocumented_conventions.md)** - Critical implicit behaviors\n    81→\n    82→### By Task\n    83→- **Debugging detector issues?** → [Detector Geometry Checklist](./debugging/detector_geometry_checklist.md)\n    84→- **Porting C code?** → [C Function Reference](./architecture/c_function_reference.md)\n    85→- **Understanding architecture?** → [Architecture Hub](./architecture/README.md)\n    86→- **Setting up development?** → [Implementation Plan](./development/implementation_plan.md)\n    87→\n    88→---\n    89→\n    90→*Last updated: Generated on demand by `/update-docs` command*\n    91→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"0b2d12a1-77ee-41a3-bbf4-10e18474edff"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01HRYWn8DCpSvoJFHwvse1qU","type":"tool_result","content":"     1→Summary: Capture detailed Phase D1 blueprint so polynomial vectorization can proceed without surprises\n     2→Mode: Docs\n     3→Focus: VECTOR-TRICUBIC-001 / Phase D1\n     4→Branch: feature/spec-based-2\n     5→Mapped tests: pytest --collect-only -q tests/test_tricubic_vectorized.py\n     6→Artifacts: reports/2025-10-vectorization/phase_d/polynomial_validation.md; reports/2025-10-vectorization/phase_d/collect.log; reports/2025-10-vectorization/phase_d/tap_points.md (if tap inventory grows)\n     7→Do Now: VECTOR-TRICUBIC-001 Phase D1 — draft reports/2025-10-vectorization/phase_d/polynomial_validation.md with tensor-shape + C-reference plan; run `pytest --collect-only -q tests/test_tricubic_vectorized.py` and tee stdout to reports/2025-10-vectorization/phase_d/collect.log\n     8→If Blocked: Capture blockers + hypotheses in polynomial_validation.md, rerun the collect-only command to confirm selectors still resolve, and park raw stderr/stdout in collect.log for supervisor triage\n     9→\n    10→Background Notes:\n    11→- Current gather path (Phase C) produces (B,4,4,4) neighbourhood tensors but still falls back to scalar polynomial helpers when B>1\n    12→- Vectorizing polynomials unblocks the long-term goal of running the supervisor command with PyTorch CLI parity without fallbacks\n    13→- Detector absorption work (Phase F) depends on the lessons from Phase D — thorough documentation now prevents duplicated effort later\n    14→- Prior perf studies (reports/benchmarks/20250930-165726-compile-cache/analysis.md) highlight polin3 as a hotspot once batching activates; note this in the worksheet\n    15→\n    16→Context Reminders:\n    17→- Supervisor initiative currently prioritises CLI parity and vectorization; keep D1 scoped to enabling code work without actually modifying code\n    18→- Protected Assets rule applies; any new helper scripts must live beneath scripts/ and be referenced in docs/index.md if persistent\n    19→- The PyTorch runtime checklist mandates CPU + CUDA smoke for any new tensor path; plan for both devices even if CUDA unavailable locally\n    20→- Document how D1 interacts with future parity gating (nb-compare/Phase E) so we have a straight hand-off once implementation lands\n    21→\n    22→Priorities & Rationale:\n    23→- plans/active/vectorization.md:1 — Context + dependency list; cite relevant docs inside worksheet to show full awareness\n    24→- plans/active/vectorization.md:48 — Phase D is labelled the active gate; D1 documentation is prerequisite for every subsequent task\n    25→- plans/active/vectorization.md:49 — Highlights need to avoid nearest-neighbour fallback by batching polynomials; reiterate the broadcast math\n    26→- plans/active/vectorization.md:54 — Table lists D4 test sweep requirements; note them in exit criteria\n    27→- docs/fix_plan.md:2194 — Fix-plan entry reiterates D1–D4 ordering and mandates artefact linkage\n    28→- docs/development/testing_strategy.md:70 — Supervisor loops require collect-only proof before running targeted tests; capture log once\n    29→- docs/development/pytorch_runtime_checklist.md:1 — Guardrails around vectorization + device neutrality must be called out in the new worksheet\n    30→- reports/2025-10-vectorization/phase_b/design_notes.md:12 — Contains the broadcast equations D1 must extend\n    31→- reports/2025-10-vectorization/phase_c/implementation_notes.md:14 — Documents gather output shapes and constraints that the polynomial layer must accept\n    32→- reports/2025-10-vectorization/phase_c/gradient_smoke.log — Shows existing regression harness to reuse post-implementation\n    33→- nanoBragg.c:4021 — Reference implementation for polin3 coefficients; D1 should quote this per CLAUDE Rule #11\n    34→- docs/architecture/pytorch_design.md:15 — Differentiability guidance to restate when planning gradcheck coverage\n    35→- docs/index.md — Protected asset list; ensure any new script references live under scripts/validation or scripts/benchmarks per policy\n    36→\n    37→Diagnostic Questions To Answer:\n    38→- What tensor shapes enter each polynomial helper when batching B>1, and how do they reshape back to detector grids?\n    39→- How will out-of-range neighbourhoods propagate through batched polynomials, and what masking strategy will prevent NaNs?\n    40→- Which gradients must be preserved (w.r.t. Fhkl? lattice offsets?) and what gradcheck tolerances will we require in float64?\n    41→- Do we anticipate torch.compile graph breaks when swapping in batched helpers, and how will we detect/report them?\n    42→- What tap points are necessary to debug batched polynomial values if parity drifts (e.g., before/after each interpolation axis)?\n    43→\n    44→Deliverable Checklist:\n    45→- [ ] Outline scalar vs batched input/output shapes for polint/polin2/polin3, including named axes and reshape rules\n    46→- [ ] Provide at least one worked example showing indices mapping from detector grid → flattened B → restored grid\n    47→- [ ] Identify tap points for instrumentation (pre/post polynomial evaluation, mask applications) and record them in tap_points.md if needed\n    48→- [ ] Cite exact C code ranges for each helper and mark intended docstring insertion points per CLAUDE Rule #11\n    49→- [ ] Define gradient validation strategy (float64 gradcheck + float32 smoke) and record target tolerances + command selectors\n    50→- [ ] Plan device coverage (cpu and cuda) noting fallback if CUDA unavailable; mention requirement to record `torch.cuda.is_available()` status\n    51→- [ ] Note performance measurement hooks (reuse scripts/benchmarks/tricubic_baseline.py with new flags) and expected metrics to compare\n    52→- [ ] Summarise expected failure modes (OOB neighbourhoods, NaN handling, dtype promotion) and mitigation strategies\n    53→- [ ] Enumerate configuration knobs (dtype overrides, torch.compile caching, environment flags) that need doc updates later\n    54→- [ ] Capture open questions for supervisor sign-off before D2 (e.g., handling complex HKL interpolation or caching of coefficients)\n    55→\n    56→Quality Gates To Record:\n    57→- Explicit exit criteria for D1 completion (worksheet reviewed, tap list agreed, collect-only log captured)\n    58→- Blocking conditions that would prevent D2 start (missing C references, incomplete gradient plan, device ambiguity)\n    59→- Artefact directory hygiene expectations (only phase_d/ contains new files for this loop)\n    60→- Confirmation that future D2 commits must bundle docstring updates alongside code edits\n    61→\n    62→How-To Map:\n    63→- export KMP_DUPLICATE_LIB_OK=TRUE before invoking pytest or scripts (avoid MKL duplicate-lib crash)\n    64→- mkdir -p reports/2025-10-vectorization/phase_d to keep artefacts organised alongside earlier phases\n    65→- pytest --collect-only -q tests/test_tricubic_vectorized.py | tee reports/2025-10-vectorization/phase_d/collect.log (aggregate proof for supervisor log)\n    66→- After collect-only, open reports/2025-10-vectorization/phase_b/design_notes.md and copy relevant equations into the new worksheet with updated batching commentary\n    67→- Structure polynomial_validation.md sections as: Context, C references, Tensor shapes, Broadcast diagrams, Masking & OOB plan, Gradient plan, Device plan, Tap points, Performance hooks, Open questions, Exit criteria\n    68→- If tap points become numerous, create reports/2025-10-vectorization/phase_d/tap_points.md summarising desired traces for future debugging scripts\n    69→- Reference docs/development/testing_strategy.md:70 within the worksheet to show compliance with testing SOPs\n    70→- Close the worksheet with clear exit criteria mapping directly to plan tasks D2–D4 so future loops know when D1 is satisfied\n    71→- Mention in the worksheet that Phase E will rerun benchmarks under scripts/benchmarks/tricubic_baseline.py and compare before/after metrics\n    72→- Annotate any assumptions about HKL tensor layout (contiguous/Fortran order) so implementation can validate them later\n    73→\n    74→Pitfalls To Avoid:\n    75→- Do not edit production code or tests during this documentation loop; leave implementation for D2+\n    76→- Avoid vague shape descriptions — specify exact tensor dimensions with named axes and flattening order\n    77→- Do not forget CLAUDE Rule #11: the worksheet must note the exact C snippet to paste into docstrings before implementation\n    78→- Keep device/dtype neutrality explicit; note how tensors stay on caller device without `.to()` churn\n    79→- Do not schedule benchmarks yet; Phase E will own quantitative comparisons\n    80→- Guard against slipping into implementation details without documenting validation strategy first\n    81→- Remember Protected Assets: no deletions or renames of docs/index.md entries or scripts referenced there\n    82→- Do not expand the plan into multiple files; all design notes stay under reports/2025-10-vectorization/phase_d/\n    83→- Avoid promising timelines; focus on requirements and exit criteria only\n    84→- Refrain from editing docs outside the scoped artefacts unless absolutely necessary; changes to specs/arch docs come in Phase G\n    85→- Do not assume CUDA availability; explicitly document fallback steps if only CPU is reachable\n    86→- Avoid mixing float32/float64 inadvertently in examples—call out dtype expectations clearly\n    87→\n    88→Pointers:\n    89→- plans/active/vectorization.md:1 — Context + dependency list; cite relevant docs inside worksheet\n    90→- plans/active/vectorization.md:48 — Phase D table for task sequencing and required artefacts\n    91→- docs/fix_plan.md:2194 — Active fix-plan entry providing supervisor expectations and reproduction commands\n    92→- docs/development/testing_strategy.md:70 — Collect-only guidance for documentation loops\n    93→- docs/development/pytorch_runtime_checklist.md:1 — Runtime guardrails to quote in validation plan\n    94→- reports/2025-10-vectorization/phase_b/design_notes.md — Prior broadcast design to extend\n    95→- reports/2025-10-vectorization/phase_c/gradient_smoke.log — Evidence of current regression harness to reuse\n    96→- reports/2025-10-vectorization/phase_c/implementation_notes.md — Gather implementation summary for reference\n    97→- docs/architecture/pytorch_design.md:1 — Differentiability + performance trade-offs to restate\n    98→\n    99→Coordination Notes:\n   100→- Flag any discovered doc drift (spec vs arch) within polynomial_validation.md so Phase G can schedule updates\n   101→- If new scripts are required later, list them as TODOs rather than creating them now; supervisor will author follow-up plan entries\n   102→- Record any open questions for performance initiative owners (PERF-PYTORCH-004) regarding benchmark thresholds\n   103→\n   104→Next Up: Phase D2 — implement batched polint/polin2/polin3 once the worksheet (D1) is reviewed and accepted; ensure docstrings include the quoted C code before coding\n   105→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"af3519ce-a649-4131-972b-5a2d9e63935f"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01NKtpZ1cU7EiJM7mCsGTexr","type":"tool_result","content":"     1→# nanoBragg Spec A — Sharded Specification\n     2→\n     3→Spec A is now organized across multiple shards. Read them together for the full normative contract.\n     4→\n     5→- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.\n     6→- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.\n     7→- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.\n     8→\n     9→Each shard cross-references the others; updates must keep them consistent.\n    10→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"9f5082b6-6b21-460c-b883-c6fd5b07d659"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_019EYeUQ8MX93HXeiWR1vZyH","type":"tool_result","content":"     1→# C-CLI to PyTorch Configuration Map\n     2→\n     3→## Critical Importance Notice\n     4→\n     5→**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**\n     6→\n     7→Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:\n     8→- Implicit pivot mode logic\n     9→- Convention-dependent beam center calculations\n    10→- Rotation axis defaults\n    11→- Unit conversions\n    12→\n    13→## Quick Reference Table\n    14→\n    15→### Crystal Parameters\n    16→\n    17→| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |\n    18→|------------|---------------------|------------|------------------|----------------|\n    19→| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |\n    20→| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |\n    21→| `-Na/-Nb/-Nc <val>` | `CrystalConfig.N_cells[0/1/2]` | `Na, Nb, Nc` | Number of unit cells | Individual axis control |\n    22→| `-misset dx dy dz` | `CrystalConfig.misset_deg` | `misset[1], [2], [3]` | Degrees → radians | Applied as XYZ rotations to reciprocal vectors |\n    23→| `-mosaic <val>` | `CrystalConfig.mosaic_spread_deg` | `mosaic_spread` | Degrees → radians | Isotropic mosaic spread |\n    24→| `-mosaic_domains <val>` | `CrystalConfig.mosaic_domains` | `mosaic_domains` | Count | Number of discrete domains |\n    25→| `-mosaic_seed <val>` | `CrystalConfig.mosaic_seed` | `mosaic_seed` | Integer | RNG seed for mosaic orientations |\n    26→| `-default_F <val>` | `CrystalConfig.default_F` | `default_F` | Electrons | Structure factor for missing reflections |\n    27→| `-phi <val>` | `CrystalConfig.phi_start_deg` | `phi0` | Degrees → radians | Starting spindle angle |\n    28→| `-osc <val>` | `CrystalConfig.osc_range_deg` | `osc` | Degrees → radians | Oscillation range |\n    29→| `-phisteps <val>` | `CrystalConfig.phi_steps` | `phisteps` | Count | Steps across oscillation |\n    30→\n    31→### Beam Parameters\n    32→\n    33→| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |\n    34→|------------|---------------------|------------|------------------|----------------|\n    35→| `-lambda <val>` | `BeamConfig.wavelength_A` | `lambda0` | Å → meters | Convert to meters internally |\n    36→| `-energy <val>` | `BeamConfig.wavelength_A` | `lambda0` | eV → Å via 12398.42/E | Alternative to `-lambda` |\n    37→| `-fluence <val>` | `BeamConfig.fluence` | `fluence` | photons/m² | Total integrated intensity |\n    38→| `-flux <val>` | `BeamConfig.flux` | `flux` | photons/s | Used with exposure & beamsize |\n    39→| `-exposure <val>` | `BeamConfig.exposure_s` | `exposure` | seconds | Duration for flux calculation |\n    40→| `-beamsize <val>` | `BeamConfig.beam_size_mm` | `beamsize` | mm → meters | Beam diameter |\n    41→| `-dispersion <val>` | `BeamConfig.dispersion_pct` | `dispersion` | Percent → fraction | Spectral width Δλ/λ |\n    42→| `-dispsteps <val>` | `BeamConfig.dispersion_steps` | `dispsteps` | Count | Wavelength sampling |\n    43→| `-hdivrange <val>` | `BeamConfig.hdiv_range_mrad` | `hdivrange` | mrad → radians | Horizontal divergence |\n    44→| `-vdivrange <val>` | `BeamConfig.vdiv_range_mrad` | `vdivrange` | mrad → radians | Vertical divergence |\n    45→| `-hdivsteps <val>` | `BeamConfig.hdiv_steps` | `hdivsteps` | Count | Horizontal divergence samples |\n    46→| `-vdivsteps <val>` | `BeamConfig.vdiv_steps` | `vdivsteps` | Count | Vertical divergence samples |\n    47→| `-polar <val>` | `BeamConfig.polarization` | `polarization` | Kahn factor [0,1] | 1.0=fully polarized, 0.0=unpolarized |\n    48→\n    49→### Detector Parameters\n    50→\n    51→| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |\n    52→|------------|---------------------|------------|------------------|----------------|\n    53→| `-distance <val>` | `DetectorConfig.distance_mm` | `distance` | mm → meters | **Sets pivot=BEAM implicitly** |\n    54→| `-detsize <val>` | Derived from pixels × pixel_size | `detsize_f, detsize_s` | mm → meters | Sets both dimensions |\n    55→| `-pixel <val>` | `DetectorConfig.pixel_size_mm` | `pixel_size` | mm → meters | Square pixels |\n    56→| `-detpixels <val>` | `DetectorConfig.spixels/fpixels` | `fpixels, spixels` | Count | Sets both dimensions |\n    57→| `-Xbeam <val>` | `DetectorConfig.beam_center_f` | `Xbeam` | mm → meters | **MOSFLM: → Fbeam directly** |\n    58→| `-Ybeam <val>` | `DetectorConfig.beam_center_s` | `Ybeam` | mm → meters | **MOSFLM: → Sbeam = detsize_s - Ybeam** |\n    59→| `-twotheta <val>` | `DetectorConfig.detector_twotheta_deg` | `detector_twotheta` | Degrees → radians | **Sets pivot=SAMPLE implicitly** |\n    60→| `-detector_rotx <val>` | `DetectorConfig.detector_rotx_deg` | `detector_rotx` | Degrees → radians | Rotation around X axis |\n    61→| `-detector_roty <val>` | `DetectorConfig.detector_roty_deg` | `detector_roty` | Degrees → radians | Rotation around Y axis |\n    62→| `-detector_rotz <val>` | `DetectorConfig.detector_rotz_deg` | `detector_rotz` | Degrees → radians | Rotation around Z axis |\n    63→| `-oversample <val>` | `SimulatorConfig.oversample` | `oversample` | Count | Sub-pixel sampling |\n    64→| `-adc <val>` | `SimulatorConfig.adc_offset` | `adc_offset` | ADU | Integer output offset |\n    65→\n    66→## Critical Implicit Logic (pointer)\n    67→\n    68→Implicit pivot rules, beam-center mappings (including MOSFLM +0.5 pixel adjustment), default twotheta axes per convention, and coordinate transforms are defined in `specs/spec-a.md` (Geometry Model & Conventions). Refer there for canonical behavior. For practical debugging/validation checklists, use `docs/debugging/detector_geometry_checklist.md`.\n    69→\n    70→## References\n    71→\n    72→- Source: `nanoBragg.c` lines 506-1850 (configuration parsing and setup)\n    73→- Parameter Dictionary: [`docs/architecture/c_parameter_dictionary.md`](../architecture/c_parameter_dictionary.md)\n    74→- PyTorch Config: [`src/nanobrag_torch/config.py`](../../src/nanobrag_torch/config.py)\n    75→- Detector Architecture: [`docs/architecture/detector.md`](../architecture/detector.md)\n    76→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"fd96e4ee-c8be-4b34-a322-4b63f46b6e85"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01GWgtFFjS33n79HhrPpyn6T","type":"tool_result","content":"     1→# nanoBragg PyTorch Debugging Guidelines\n     2→\n     3→**Version:** 1.1  \n     4→**Date:** 2024-07-25  \n     5→**Owner:** PyTorch Development Team\n     6→\n     7→## Overview\n     8→\n     9→This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.\n    10→\n    11→## Core Debugging Philosophy\n    12→\n    13→### Parallel Trace Comparison Rule\n    14→\n    15→**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:\n    16→1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the \"Golden Trace\").\n    17→2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.\n    18→3. Comparing these two logs line-by-line to find the first point of divergence.\n    19→\n    20→This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.\n    21→\n    22→## Debugging Workflow (SOP-4.1)\n    23→\n    24→Follow the specialized PyTorch physics debugging process documented in `docs/development/testing_strategy.md` (see the Parallel Validation Matrix section):\n    25→\n    26→1. **Identify an On-Peak Pixel:** Run the PyTorch simulation and visually inspect the output image to find the coordinates of a bright pixel on a Bragg peak.\n    27→2. **Generate Golden C Trace:** Add trace printf statements to `nanoBragg.c` around the calculation of interest (e.g., detector geometry, scattering vectors). Recompile with `make -C golden_suite_generator` and run with your test parameters, redirecting stderr to capture the trace log.\n    28→3. **Generate PyTorch Trace:** Create a debug script (e.g., `scripts/debug_beam_pivot_trace.py`) that replicates the exact calculation with matching trace output format.\n    29→4. **Compare Traces:** Use a diff tool (`diff`, `vimdiff`, etc.) to compare the C trace and the PyTorch trace.\n    30→5. **Identify Divergence Point:** Find the first variable where the numerical values differ significantly. This is the location of the bug.\n    31→6. **Isolate and Fix:** Examine the PyTorch code responsible for calculating the divergent variable. Check for common issues:\n    32→   - Unit conversion errors (e.g., meters vs. Angstroms).\n    33→   - Incorrect physical constants.\n    34→   - Mismatched mathematical formulas or conventions.\n    35→7. **Apply Fix and Re-validate:** Apply the fix and re-run the PyTorch trace. Repeat the comparison until the logs match.\n    36→\n    37→## Debug Script and Trace Management\n    38→\n    39→### Active PyTorch Debug Script\n    40→\n    41→**Script:** `scripts/debug_pixel_trace.py`  \n    42→**Purpose:** Generates the PyTorch side of the parallel trace comparison.\n    43→\n    44→### Golden C-Code Trace\n    45→\n    46→**Source:** Generated by adding printf statements to `nanoBragg.c` in `golden_suite_generator/`.  \n    47→**Example instrumentation:**\n    48→```c\n    49→/* Add trace output for detector geometry */\n    50→printf(\"TRACE_C: fdet_vector %.15g %.15g %.15g\\n\", fdet_vector[1], fdet_vector[2], fdet_vector[3]);\n    51→printf(\"TRACE_C: pix0_vector %.15g %.15g %.15g\\n\", pix0_vector[1], pix0_vector[2], pix0_vector[3]);\n    52→```\n    53→**Purpose:** Provides the \"ground truth\" intermediate values for the physics calculation.  \n    54→**Management:** Remove trace statements after debugging is complete to avoid cluttering output.\n    55→\n    56→### Trace Schema (names, units, precision)\n    57→\n    58→To ensure deterministic comparison between C and PyTorch traces, use the following conventions:\n    59→\n    60→- Prefixes: `TRACE_C:` for C-code; `TRACE_PY:` for PyTorch.\n    61→- Variable names: keep identical tokens across implementations (e.g., `pix0_vector`, `fdet_vector`, `sdet_vector`, `odet_vector`, `Fbeam`, `Sbeam`, `pixel_pos_meters`, `diffracted_vec`, `scattering_vec_A_inv`, `hkl_frac`, `F_cell`, `F_latt`, `omega_pixel`).\n    62→- Units:\n    63→  - Detector geometry and positions: meters (e.g., `pixel_pos_meters`, `pix0_vector`).\n    64→  - Physics quantities: Angstroms/Angstrom⁻¹ as appropriate (e.g., wavelength in Å; scattering vector in Å⁻¹).\n    65→- Precision: print with ~12–15 significant digits for numeric lines.\n    66→- One variable per line; consistent ordering between C and Py traces.\n    67→\n    68→## Key Variables to Compare\n    69→\n    70→When comparing traces, pay close attention to:\n    71→- **Scattering Vector q (or S):** The most common source of geometry errors.\n    72→- **Fractional Miller Index h,k,l:** Should be nearly identical.\n    73→- **F_latt:** Mismatches indicate errors in the crystal shape factor (sincg).\n    74→- **omega_pixel / polar:** Mismatches indicate errors in scaling factor calculations.\n    75→- **Final Intensity:** The final check for overall correctness.\n    76→\n    77→## Common Debugging Scenarios\n    78→\n    79→### Physics Calculation Issues\n    80→\n    81→**Symptoms:** Wrong intensity values, flat images, scale mismatches  \n    82→**First step:** Run pixel trace and compare scattering vector calculations  \n    83→**Common causes:** Missing 2π factors, unit conversion errors, coordinate transforms  \n    84→\n    85→### Unit System Problems\n    86→\n    87→**Symptoms:** Values off by powers of 10, dimension errors  \n    88→**First step:** Check pixel trace \"Additional Debugging Information\" section  \n    89→**Common causes:** Mixing Angstroms/meters, incorrect scaling factors  \n    90→\n    91→### Gradient Issues\n    92→\n    93→**Symptoms:** `torch.autograd.gradcheck` failures, \"modified in-place\" errors  \n    94→**First step:** Verify computation graph connectivity in trace  \n    95→**Common causes:** Manual tensor reassignment, detached operations\n    96→\n    97→### Gradient Flow Debugging\n    98→\n    99→**Symptoms:** `RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn`  \n   100→**Methodology:** Use systematic isolation to find computation graph breaks:\n   101→\n   102→1. **Isolate the Problem:** Create minimal test case with `requires_grad=True` input\n   103→2. **Trace Through Computation:** Check `requires_grad` at each step\n   104→3. **Identify Break Point:** Find where `requires_grad` becomes `False`\n   105→4. **Common Causes:**\n   106→   - `.item()` calls on differentiable tensors (detaches from graph)\n   107→   - `torch.linspace` with tensor endpoints (known PyTorch limitation)\n   108→   - Manual tensor overwriting instead of functional computation\n   109→   - Using `.detach()` or `.numpy()` on tensors requiring gradients\n   110→\n   111→**Example Debug Pattern:**\n   112→```python\n   113→# Step 1: Isolate\n   114→phi_start = torch.tensor(10.0, requires_grad=True)\n   115→print(f\"phi_start requires_grad: {phi_start.requires_grad}\")\n   116→\n   117→# Step 2: Trace\n   118→config = CrystalConfig(phi_start_deg=phi_start)\n   119→print(f\"config.phi_start_deg requires_grad: {config.phi_start_deg.requires_grad}\")\n   120→\n   121→# Step 3: Identify break\n   122→if isinstance(config.phi_start_deg, float):\n   123→    print(\"ERROR: Gradient lost - tensor converted to float\")\n   124→```\n   125→\n   126→**Solutions:**\n   127→- Replace `.item()` with direct tensor passing\n   128→- Use manual tensor arithmetic instead of `torch.linspace`\n   129→- Enforce tensor inputs at architectural boundaries  \n   130→\n   131→### Coordinate System Issues\n   132→\n   133→**Symptoms:** 90-degree rotated images, incorrect peak positions  \n   134→**First step:** Verify pixel coordinate calculations in trace  \n   135→**Common causes:** `torch.meshgrid` indexing, axis orientation  \n   136→\n   137→## Debug Output Interpretation\n   138→\n   139→### Pixel Trace Log Structure\n   140→\n   141→```\n   142→================================================================================\n   143→Single Pixel Trace Debugging Log\n   144→nanoBragg PyTorch Implementation\n   145→================================================================================\n   146→\n   147→Target Pixel: (slow=100, fast=800)\n   148→Test Case: simple_cubic\n   149→Wavelength: 6.2 Angstroms\n   150→Precision: torch.float64\n   151→\n   152→[Step-by-step calculations with 12-digit precision]\n   153→\n   154→================================================================================\n   155→Additional Debugging Information\n   156→================================================================================\n   157→[Complete parameter dump]\n   158→```\n   159→\n   160→### Key Variables to Monitor\n   161→\n   162→- **Pixel Coordinate (Å):** Must be in Angstroms for physics calculations\n   163→- **Scattering Vector q (Å⁻¹):** Critical for Miller index calculation\n   164→- **Fractional Miller Index h,k,l:** Should show spatial variation across detector\n   165→- **F_latt:** Shape factor - should vary significantly near Bragg peaks\n   166→- **Final Intensity:** Should match golden reference order of magnitude\n   167→\n   168→## Advanced Debugging\n   169→\n   170→### Memory and Performance Issues\n   171→\n   172→Use the existing debug scripts with smaller detector sizes:\n   173→```python\n   174→# Override detector size for debugging\n   175→detector_test.spixels = 3\n   176→detector_test.fpixels = 3\n   177→detector_test.invalidate_cache()\n   178→```\n   179→\n   180→### GPU vs CPU Differences\n   181→\n   182→Run identical calculations on both devices and compare intermediate values:\n   183→```python\n   184→# Compare device outputs\n   185→pytorch_image_cpu = simulator_cpu.run()\n   186→pytorch_image_gpu = simulator_gpu.run()\n   187→diff = torch.abs(pytorch_image_cpu - pytorch_image_gpu.cpu())\n   188→```\n   189→\n   190→### Precision Issues\n   191→\n   192→Use double precision for debugging:\n   193→```python\n   194→dtype = torch.float64  # Always use for debugging\n   195→# Check for precision loss in long calculation chains\n   196→```\n   197→\n   198→## Debug Script Maintenance\n   199→\n   200→### Updating the Active Script\n   201→\n   202→When modifying `scripts/debug_pixel_trace.py`:\n   203→1. Maintain backward compatibility with existing golden reference\n   204→2. Add new trace variables at the end to preserve log structure\n   205→3. Update variable descriptions if calculation methods change\n   206→4. Regenerate golden reference only when absolutely necessary\n   207→\n   208→### Golden Reference Management\n   209→\n   210→**Current Golden Reference:** `tests/golden_data/simple_cubic_pixel_trace.log`\n   211→- Generated from: simple_cubic test case, pixel (100,800)\n   212→- Contains: Complete physics calculation trace\n   213→- Precision: torch.float64\n   214→- Trace format: follow the Trace Schema above (names/units/precision)\n   215→- **Do not modify without team approval**\n   216→\n   217→### Creating New Debug Scripts\n   218→\n   219→If a new debug script is absolutely necessary:\n   220→1. Archive current script: `mv scripts/debug_pixel_trace.py scripts/archive/`\n   221→2. Create new script following naming convention: `scripts/debug_[purpose].py`\n   222→3. Update this document with new active script information\n   223→4. Generate new golden reference\n   224→5. Update all documentation references\n   225→\n   226→## Troubleshooting\n   227→\n   228→### Script Fails to Run\n   229→\n   230→1. Check PYTHONPATH: `PYTHONPATH=/Users/ollie/Documents/nanoBragg/src`\n   231→2. Check OpenMP: Set `KMP_DUPLICATE_LIB_OK=TRUE`\n   232→3. Verify torch installation and device availability\n   233→\n   234→### Unexpected Trace Values\n   235→\n   236→1. Compare with previous known-good trace\n   237→2. Check for recent code changes in physics calculations\n   238→3. Verify input parameters match expected test case\n   239→4. Check for precision loss or numerical instability\n   240→\n   241→### Performance Issues\n   242→\n   243→1. Reduce detector size for debugging\n   244→2. Use CPU for initial debugging, GPU for performance testing\n   245→3. Profile memory usage during trace generation\n   246→\n   247→## End-to-End Verification (verify_detector_geometry.py)\n   248→\n   249→For high-level, end-to-end validation, the `scripts/verify_detector_geometry.py` script is the primary tool. It runs both the PyTorch and C-code simulations for a given configuration and produces a detailed visual comparison and a JSON file with correlation metrics. This should be used to confirm that a fix is complete and has not introduced regressions.\n   250→\n   251→**Key Features:**\n   252→- Automatically executes both PyTorch and C implementations\n   253→- Generates side-by-side comparison plots\n   254→- Computes quantitative correlation metrics\n   255→- Uses `scripts/c_reference_runner.py` for C-code execution\n   256→- Uses `scripts/smv_parser.py` for reading C-code output images\n   257→\n   258→**Usage:**\n   259→```bash\n   260→KMP_DUPLICATE_LIB_OK=TRUE python scripts/verify_detector_geometry.py\n   261→```\n   262→\n   263→**Output:**\n   264→- Visual comparison plot: `reports/detector_verification/detector_geometry_comparison.png`\n   265→- Metrics JSON: `reports/detector_verification/correlation_metrics.json`\n   266→\n   267→## Integration with Testing\n   268→\n   269→The debug script integrates with the three-tier testing strategy:\n   270→\n   271→- **Tier 1:** Provides golden reference for translation correctness\n   272→- **Tier 2:** Validates gradient flow through computation graph\n   273→- **Tier 3:** Supplies intermediate values for scientific validation\n   274→\n   275→See `Testing_Strategy.md` Section 4.3 for complete integration details.\n   276→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"045b0c6f-369c-4a88-903e-8b921e7c6731"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014MB8aoLf1T6voVVqoEmSqP","type":"tool_result","content":"     1→# nanoBragg PyTorch — Implementation Architecture\n     2→\n     3→Document version: 1.0 (aligned with specs/spec-a.md)\n     4→Target spec: specs/spec-a.md (single-file normative spec)\n     5→Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.\n     6→\n     7→## Running The CLI\n     8→\n     9→- Install (recommended):\n    10→  - `pip install -e .` from repo root (provides `nanoBragg` console script).\n    11→- Run (installed):\n    12→  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`\n    13→- Run (without install):\n    14→  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`\n    15→- Minimal quick test (no HKL):\n    16→  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`\n    17→\n    18→Notes\n    19→- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).\n    20→- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.\n    21→- Useful speedups: use `-roi xmin xmax ymin ymax` for small windows; reduce `-detpixels` during tests.\n    22→- SMV/PGM outputs: `-intfile` (with optional `-scale`, `-adc`), `-noisefile` (Poisson), `-pgmfile` (8‑bit preview).\n    23→\n    24→\n    25→## Spec vs Architecture Precedence\n    26→\n    27→- Normative contract: The specs/spec-a.md file defines the external contract (CLI flags, units, geometry/physics equations, file formats, and Acceptance Tests). It takes precedence for externally visible behavior.\n    28→- Implementation guidance: This arch.md documents ADRs, module layout, and concrete decisions used to realize the spec with PyTorch. It is subordinate to the spec.\n    29→- Conflict resolution: If arch.md and specs/spec-a.md disagree, implement to the spec and open a PR to realign arch.md.\n    30→- Underspecification: When the spec is silent, follow the ADRs here. If experience shows the spec needs additions, propose a spec change in specs/spec-b.md and update acceptance tests accordingly.\n    31→\n    32→## 1) Goals & Non‑Goals\n    33→\n    34→- Goals\n    35→  - Render far-field diffraction from perfect-lattice nanocrystals per spec, matching nanoBragg C semantics.\n    36→  - Honor detector/beam conventions (MOSFLM, XDS; ADXV/DENZO/DIALS to be added) including pivots and two-theta.\n    37→  - Vectorize core loops in PyTorch (pixels × phi × mosaic × sources × subpixels) with GPU support.\n    38→  - Maintain differentiability (end-to-end gradients) for cell and geometry parameters — **critical for optimization capabilities** (see Section 15).\n    39→  - Support spec’d I/O: raw float image, SMV with/without noise, optional PGM, HKL read + Fdump cache.\n    40→  - Deterministic/reproducible runs via explicit seeds per RNG domains.\n    41→\n    42→- Non-goals (from spec Overview and scope)\n    43→  - No near-field propagation and no detector PSF beyond pixel solid-angle/obliquity.\n    44→  - No symmetry (P1 only, no Friedel pairing).\n    45→  - Out-of-scope flags in examples (e.g., -dispstep, -hdiv/-vdiv) remain unsupported.\n    46→\n    47→## 2) Workspace & Runtime Layout\n    48→\n    49→- Source:\n    50→  - `src/nanobrag_torch/`\n    51→    - `config.py` — dataclasses for Crystal/Detector/Beam configs\n    52→    - `models/`\n    53→      - `detector.py` — detector geometry, conventions, pix0, pixel coordinates (meters)\n    54→      - `crystal.py` — cell tensors, misset, phi/mosaic rotations, HKL access\n    55→    - `simulator.py` — vectorized physics loop, scaling, solid angle\n    56→    - `utils/` — geometry (rotations, dot/cross), physics kernels, unit conversions\n    57→  - `scripts/` — debug and comparison scripts (C vs PyTorch traces)\n    58→  - `specs/` — spec-a.md (normative); tests appended under Acceptance Tests\n    59→  - `tests/` — project tests (Python-level, when present)\n    60→\n    61→- Run-time artifacts (as spec evolves)\n    62→  - `Fdump.bin` — binary HKL cache\n    63→  - `*.img` — SMV images (int and noise)\n    64→  - `*.pgm` — optional preview image\n    65→  - `*.bin` — raw float image\n    66→\n    67→## 2a) Architectural Decisions (ADRs)\n    68→\n    69→- ADR-01 Hybrid Unit System (Detector in meters)\n    70→  - Detector geometry (distance, pixel size, pix0_vector, pixel coordinates) uses meters internally to match C semantics and avoid Å-scale precision issues.\n    71→  - Physics computations (q, stol, shape factors) operate in Angstroms.\n    72→  - Conversion at the interface: pixel coords [m] × 1e10 → [Å].\n    73→  - Alignment with spec: specs/spec-a.md states q is expressed in m⁻¹ in the spec; this implementation uses Å for physics while keeping geometry in meters, with explicit conversions at the interface.\n    74→\n    75→- ADR-02 Rotation Order and Conventions\n    76→  - Basis initialization per convention (MOSFLM, XDS). Apply rotations in order: rotx → roty → rotz → rotate around `twotheta_axis` by `detector_twotheta`.\n    77→  - Pivots: BEAM and SAMPLE formulas per spec.\n    78→\n    79→- ADR-03 Beam-center Mapping (MOSFLM) and +0.5 pixel Offsets\n    80→  - MOSFLM: Fbeam = Ybeam + 0.5·pixel; Sbeam = Xbeam + 0.5·pixel (after mm→pixels). CUSTOM (when active): spec is silent; ADR decision is to not apply implicit +0.5 offsets unless provided by user inputs.\n    81→\n    82→- ADR-04 Pixel Coordinate Caching\n    83→  - Cache `get_pixel_coords()` outputs keyed implicitly by geometry version. Invalidate cache on geometry change (basis vector or pix0 change).\n    84→\n    85→- ADR-05 Deterministic Sampling & Seeds\n    86→  - Distinct RNG domains: noise, mosaic, misset. Spec requires fixed defaults and -seed overrides. Implement the spec's LCG+shuffle PRNG for determinism; torch.Generator may be used only if it reproduces the exact bitstream.\n    87→\n    88→- ADR-08 Differentiability Preservation [CRITICAL]\n    89→  - All operations on differentiable parameters must maintain computation graph connectivity. See Section 15 for comprehensive guidelines.\n    90→  - Use @property methods for derived tensors, never overwrite with `.item()` or detached values.\n    91→  - Implement boundary enforcement: type conversions at call sites, tensor assumptions in core methods.\n    92→\n    93→- ADR-06 Interpolation Fallback [IMPLEMENTED]\n    94→  - Tricubic interpolation is enabled/disabled per spec. On out-of-range neighborhood, emit one-time warning, use default_F for that eval, and disable interpolation for the remainder of the run.\n    95→  - Implementation complete: `polint`/`polin2`/`polin3` in `utils/physics.py`, `_tricubic_interpolation` in `models/crystal.py`\n    96→  - Auto-enables for crystals with any dimension ≤ 2 cells\n    97→\n    98→- ADR-07 Oversample_* \"Last-value\" Semantics\n    99→  - When oversample_thick/polar/omega are NOT set, apply final capture/polarization/Ω once using the last computed value (loop-order dependent), matching the spec's caveat.\n   100→\n   101→- ADR-09 Detector Absorption Implementation [IMPLEMENTED]\n   102→  - Absorption parameters stored in DetectorConfig: `detector_abs_um` (attenuation depth), `detector_thick_um` (thickness), `detector_thicksteps` (layers)\n   103→  - Parallax factor ρ = d·o computed per-pixel using detector normal and observation direction\n   104→  - Layer capture fractions: exp(−t·Δz·μ/ρ) − exp(−(t+1)·Δz·μ/ρ) where μ = 1/attenuation_depth\n   105→\n   106→- ADR-10 Convention-Aware Incident Beam Direction [IMPLEMENTED]\n   107→  - Simulator incident beam direction must match detector convention for consistency (AT-PARALLEL-004)\n   108→  - MOSFLM convention: beam along [1,0,0] (+X axis)\n   109→  - XDS/DIALS conventions: beam along [0,0,1] (+Z axis)\n   110→  - Default to MOSFLM direction when no detector provided (for backward compatibility)\n   111→\n   112→- ADR-11 Full Tensor Vectorization [IMPLEMENTED 2025-09-24]\n   113→  - Eliminated all Python loops in core computation path for >10x performance gain\n   114→  - Subpixel sampling: Process all oversample×oversample subpixels as batch dimension (S, F, oversample²)\n   115→  - Thickness layers: Process all detector layers in parallel using broadcasting (thicksteps, S, F)\n   116→  - Maintains exact numerical equivalence with loop-based implementation\n   117→  - Enables efficient GPU acceleration through pure tensor operations\n   118→\n   119→- ADR-12 Golden Data Generation Strategy [2025-09-24]\n   120→  - Golden reference data for tests should use self-contained commands without external file dependencies\n   121→  - Use `-cell` parameters directly instead of requiring P1.hkl/A.mat files\n   122→  - Accept minor numerical tolerance differences (≤0.001 correlation) between C and PyTorch implementations\n   123→  - Document exact generation commands in tests/golden_data/README.md for reproducibility\n   124→\n   125→## 3) High‑Level System Architecture\n   126→\n   127→- CLI & Config Layer [IMPLEMENTED]\n   128→  - `__main__.py` - Entry point with argparse, maps CLI flags to engine parameters per spec\n   129→  - Parses spec-defined flags and image/mask headers, resolves precedence, and instantiates config dataclasses\n   130→\n   131→- Geometry Engine\n   132→  - Detector: conventions, rotations, pix0 computation, meters→Å conversion, solid angle factors.\n   133→  - Crystal: triclinic cell tensors, misset, phi, mosaic rotations; reciprocal/real-space duality.\n   134→\n   135→- Physics Engine\n   136→  - Computes scattering vectors; dmin culling; structure factor lookup/interpolation; lattice shape factors (SQUARE/ROUND/GAUSS/TOPHAT); polarization; absorption; background; steps normalization; final scaling.\n   137→\n   138→- I/O Engine [IMPLEMENTED]\n   139→  - HKL text & Fdump read/write; SMV/PGM writers; noise image; statistics reporter.\n   140→\n   141→- Observability & Validation\n   142→  - Deterministic traces (debug scripts), acceptance-test-driven behavior.\n   143→\n   144→## 4) Module Structure [IMPLEMENTED]\n   145→\n   146→```\n   147→nanobrag_torch/\n   148→  config.py                # DetectorConfig, CrystalConfig, BeamConfig (+ enums)\n   149→  simulator.py             # Vectorized physics core (pixels × phi × mosaic)\n   150→  __main__.py             # CLI entry point with full argparse implementation\n   151→  models/\n   152→    detector.py            # Basis vectors, pivots, twotheta, pix0, pixel coords\n   153→    crystal.py             # Cell tensors, misset, phi/mosaic rotations, HKL I/O\n   154→  utils/\n   155→    geometry.py            # dot/cross, rotations (axis/matrix)\n   156→    physics.py             # sincg, sinc3, polarization_factor [ALL IMPLEMENTED]\n   157→    units.py               # mm↔Å/m, deg↔rad, etc.\n   158→    c_random.py           # C-compatible RNG for reproducibility\n   159→  io/\n   160→    hkl.py                # HKL file reading and Fdump.bin caching\n   161→    smv.py                # SMV format reader/writer with header parsing\n   162→    pgm.py                # PGM image writer\n   163→    mask.py               # Mask file reading and application\n   164→    source.py             # Source file parsing for beam divergence\n   165→    mosflm.py             # MOSFLM matrix file support\n   166→```\n   167→\n   168→## 5) Data Models (TypeScript-style; implement via dataclasses)\n   169→\n   170→```ts\n   171→enum DetectorConvention { MOSFLM, XDS, ADXV, DENZO, DIALS, CUSTOM }\n   172→enum DetectorPivot { BEAM, SAMPLE }\n   173→\n   174→interface CrystalConfig {\n   175→  cell_a: number; cell_b: number; cell_c: number;          // Å\n   176→  cell_alpha: number; cell_beta: number; cell_gamma: number;// deg\n   177→  misset_deg: [number, number, number];                    // deg (XYZ)\n   178→  phi_start_deg: number; osc_range_deg: number; phi_steps: number;\n   179→  spindle_axis: [number, number, number];                  // unit vector\n   180→  mosaic_spread_deg: number; mosaic_domains: number; mosaic_seed?: number;\n   181→  N_cells: [number, number, number];                       // Na,Nb,Nc (≥1)\n   182→  default_F: number;                                       // fallback F\n   183→}\n   184→\n   185→interface DetectorConfig {\n   186→  distance_mm: number; pixel_size_mm: number;\n   187→  spixels: number; fpixels: number;\n   188→  beam_center_s: number; beam_center_f: number;            // mm\n   189→  detector_rotx_deg: number; detector_roty_deg: number; detector_rotz_deg: number;\n   190→  detector_twotheta_deg: number; twotheta_axis?: [number, number, number];\n   191→  detector_convention: DetectorConvention; detector_pivot: DetectorPivot;\n   192→  oversample: number;                                      // subpixel grid per axis\n   193→}\n   194→\n   195→interface BeamConfig {\n   196→  wavelength_A: number;                                    // Å\n   197→  polarization_factor: number;                             // Kahn K (0..1)\n   198→  flux?: number; exposure?: number; beamsize?: number;     // for fluence calc\n   199→}\n   200→```\n   201→\n   202→## 6) Execution Flow (pseudocode)\n   203→\n   204→1. Parse CLI and headers [IMPLEMENTED], resolve precedence; build CrystalConfig, DetectorConfig, BeamConfig.\n   205→2. Instantiate Detector (meters) and Crystal (Å). Optionally load HKL or Fdump.\n   206→3. Compute `pix0_vector` per pivot and convention; compute basis rotations; cache pixel coords in meters, convert to Å for physics.\n   207→4. Build sampling sets: phi (phi_steps), mosaic (mosaic_domains), sources (divergence/dispersion), subpixels (oversample^2), thickness steps.\n   208→5. For each pixel/subpixel/thickness/source/phi/mosaic:\n   209→   - pos = D0 + Fdet·f + Sdet·s (+ Odet·o if thick); d = unit(pos); R=|pos|; Ω = pixel^2/R^2·(close_distance/R) or 1/R^2 if point-pixel.\n   210→   - i = −source_dir; λ from source; q = (d−i)/λ; stol=0.5·|q|; cull if dmin>0 and stol>0 and dmin>0.5/stol.\n   211→   - Rotate (a,b,c) by phi about spindle; apply mosaic rotation; compute h=a·q, k=b·q, l=c·q.\n   212→   - h0,k0,l0 = ceil(x−0.5) (nearest int); F_latt via selected lattice model.\n   213→   - F_cell via tricubic (if enabled and in-bounds) else nearest or default_F per spec fallback.\n   214→   - Polarization per Kahn model unless -nopolar.\n   215→   - Accumulate I_term = (F_cell^2)·(F_latt^2) with oversample_* caveats (last-value vs per-term multiply).\n   216→6. Final scaling per pixel: S = r_e^2 · fluence · I / steps; if oversample_* toggles are off, multiply S once by the last computed capture/polarization/Ω per spec. Add background I_bg if enabled. Write outputs.\n   217→\n   218→## 7) Geometry Model & Conventions\n   219→\n   220→- Basis vectors and defaults (initial, before rotations):\n   221→  - ADXV:   f=[1,0,0], s=[0,−1,0], o=[0,0,1],  beam=[0,0,1], default twotheta_axis=[−1,0,0]; pivot=BEAM. Default beam centers: Xbeam=(detsize_f+pixel)/2, Ybeam=(detsize_s−pixel)/2; mapping Fbeam=Xbeam, Sbeam=detsize_s−Ybeam.\n   222→  - MOSFLM: f=[0,0,1], s=[0,−1,0], o=[1,0,0],  beam=[1,0,0], default twotheta_axis=[0,0,−1]; pivot=BEAM. Beam-center mapping: Fbeam=Ybeam+0.5·pixel; Sbeam=Xbeam+0.5·pixel.\n   223→  - DENZO:  f=[0,0,1], s=[0,−1,0], o=[1,0,0],  beam=[1,0,0], default twotheta_axis=[0,0,−1]; pivot=BEAM. Beam-center mapping: Fbeam=Ybeam; Sbeam=Xbeam.\n   224→  - XDS:    f=[1,0,0], s=[0,1,0],  o=[0,0,1],  beam=[0,0,1], default twotheta_axis=[1,0,0];  pivot=SAMPLE. Beam-center mapping: Fbeam=Xbeam; Sbeam=Ybeam (defaults Xbeam=Xclose, Ybeam=Yclose).\n   225→  - DIALS:  f=[1,0,0], s=[0,1,0],  o=[0,0,1],  beam=[0,0,1], default twotheta_axis=[0,1,0];  pivot=SAMPLE. Beam-center mapping: Fbeam=Xbeam; Sbeam=Ybeam.\n   226→- Rotations: apply XYZ small-angle rotations to f/s/o, then rotate around twotheta_axis by two-theta.\n   227→- r-factor update: r = b·o_after; if close_distance unspecified: close_distance = |r·distance|; then set distance = close_distance / r. Direct-beam Fbeam/Sbeam recomputed from R = close_distance/r·b − D0.\n   228→- Pivots:\n   229→  - SAMPLE: D0 = −Fclose·f − Sclose·s + close_distance·o, then rotate D0 (pix0) with detector rotations and two-theta.\n   230→  - BEAM: D0 = −Fbeam·f − Sbeam·s + distance·beam (after rotations); preserves beam center.\n   231→  - CLI forcing and precedence (per spec-a):\n   232→    - Providing `-distance` (without `-close_distance`) forces BEAM pivot; providing `-close_distance` forces SAMPLE pivot.\n   233→    - Providing beam-center style inputs forces pivot: `-Xbeam`/`-Ybeam` → BEAM; `-Xclose`/`-Yclose` or `-ORGX`/`-ORGY` → SAMPLE.\n   234→    - Explicit `-pivot` overrides either.\n   235→- Beam center mapping:\n   236→  - ADXV:   Fbeam = Xbeam; Sbeam = detsize_s − Ybeam.\n   237→  - MOSFLM: Fbeam = Ybeam + 0.5·pixel; Sbeam = Xbeam + 0.5·pixel (mm→pixels→meters).\n   238→  - DENZO:  Fbeam = Ybeam; Sbeam = Xbeam.\n   239→  - XDS/DIALS: Fbeam = Xbeam; Sbeam = Ybeam.\n   240→  - CUSTOM: spec is silent; ADR decision is to not apply implicit +0.5 offsets unless provided by user inputs.\n   241→- Curved detector [IMPLEMENTED]: spherical mapping via small-angle rotations Sdet/distance and Fdet/distance.\n   242→\n   243→## 8) Physics Model & Scaling\n   244→\n   245→- Scattering vector and stol: i = −source_dir (unit), d=unit(pos), q=(d−i)/λ [m−1 in spec; Angstroms in implementation], stol=0.5·|q|.\n   246→- Lattice shape models:\n   247→  - SQUARE: F_latt = sincg(π·h,Na) · sincg(π·k,Nb) · sincg(π·l,Nc).\n   248→  - ROUND:  F_latt = Na·Nb·Nc·0.723601254558268 · sinc3(π·sqrt(fudge·hrad^2)).\n   249→  - GAUSS/TOPHAT: per spec formulas using Δr*^2 and cutoff.\n   250→- Structure factors: tricubic 4×4×4 interpolation with fallback; nearest-neighbor otherwise; default_F out-of-range.\n   251→- Polarization (Kahn): factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), ψ from EB-plane projection.\n   252→- Absorption & parallax: per-layer capture fraction = exp(−t·Δz·μ/ρ) − exp(−(t+1)·Δz·μ/ρ), ρ=d·o.\n   253→- Solid angle: Ω = pixel^2/R^2 · (close_distance/R); point-pixel: Ω = 1/R^2.\n   254→- Background: I_bg = (F_bg^2)·r_e^2·fluence·(water_size^3)·1e6·Avogadro/18.\n   255→- Steps normalization: steps = sources·mosaic_domains·phisteps·oversample^2; S = r_e^2·fluence·I/steps; apply last-value factors if oversample_* toggles are off.\n   256→\n   257→## 9) HKL Data & Interpolation\n   258→\n   259→- Text HKL read: two-pass min/max then grid allocations; non-integer warnings; unspecified points initialized to default_F when requested.\n   260→- Binary Fdump: header of six ints, form-feed separator, then (h_range+1)×(k_range+1)×(l_range+1) doubles in native endianness (fastest-varying l).\n   261→- Interpolation: enable/disable via flags; auto-enable if any of Na/Nb/Nc ≤ 2 (per spec defaults) unless user forces off.\n   262→\n   263→## 10) I/O — Headers & Image Files [IMPLEMENTED]\n   264→\n   265→- SMV integer images:\n   266→  - Header keys exactly as spec; close with `}\\f`; pad to 512 bytes; data unsigned short, slow-major ordering (fast index contiguous; pixel index = slow*fpixels + fast).\n   267→  - Scale factor: if ≤0 or missing, set to 55000/max(float) else 1.0; add ADC offset (default 40), clip [0,65535].\n   268→- Noise images:\n   269→  - Poisson (exact <12, rejection up to 1e6, Gaussian approx >1e6), then ADC and clipping; overload count tracked.\n   270→- PGM:\n   271→  - P5 with comment line `# pixels scaled by <pgm_scale>`; values floor(min(255, float_pixel * pgm_scale)).\n   272→- Header ingestion from -img/-mask: recognized keys applied; last file read wins; for -mask, Y beam center interpreted as detsize_s − value_mm.\n   273→\n   274→## 11) RNG & Seeds [IMPLEMENTED]\n   275→\n   276→- Domains and defaults:\n   277→  - noise_seed = negative wall-clock time (spec default), override via -seed.\n   278→  - mosaic_seed = −12345678 (spec default) unless set.\n   279→  - misset_seed = noise_seed unless set.\n   280→- PRNG: Implement the spec’s linear congruential generator with shuffle table for all RNG domains to guarantee deterministic, cross-device reproducibility. Torch generators may be used for performance only if they reproduce the identical bitstream; otherwise, use the custom PRNG directly.\n   281→\n   282→## 12) Testing Strategy (maps to spec Acceptance Tests)\n   283→\n   284→- Unit tests\n   285→  - geometry: basis vectors per convention, pix0, r-factor distance update, Ω calculation, point-pixel.\n   286→  - crystal: triclinic tensors, misset rotation, phi/mosaic rotations.\n   287→  - physics: sincg numerical stability, polarization factor, absorption layers, steps normalization.\n   288→  - io: SMV header serialization, Fdump read/write, PGM writer.\n   289→\n   290→- Integration tests\n   291→  - Acceptance Tests from specs/spec-a.md (“Acceptance Tests (Normative)”), including AT-GEO-001..AT-STA-001.\n   292→  - C-vs-PyTorch trace parity for selected pixels (debug scripts).\n   293→\n   294→## 13) Implementation Plan (incremental)\n   295→\n   296→1) Geometry correctness\n   297→  - Fix MOSFLM BEAM-pivot beam-center mapping; add r-factor distance update; align default pivots per spec.\n   298→2) Steps normalization & Ω last-value caveat\n   299→  - Implement steps division; wire oversample_* toggles with last-value behavior.\n   300→3) Absorption & thickness\n   301→  - Implement per-layer capture fractions and -oversample_thick semantics.\n   302→4) Polarization\n   303→  - Implement Kahn model; -nopolar and -oversample_polar behaviors.\n   304→5) Structure factors & interpolation\n   305→  - Wire HKL grid into `get_structure_factor`; implement tricubic with fallback.\n   306→6) I/O engine\n   307→  - SMV/PGM/Raw writers; Fdump cache; header ingestion; stats.\n   308→7) Sources/divergence/dispersion & dmin\n   309→  - Add multi-source sampling and auto count/range/step resolution; implement dmin culling.\n   310→\n   311→## 14) Implementation‑Defined Defaults (explicit)\n   312→\n   313→- dtype: float32 tensors for performance and memory efficiency. Precision-critical operations (gradient checks, metric duality validation) override to float64 explicitly where required.\n   314→- device: CPU default; opt-in CUDA via `.to(device)`.\n   315→- Tolerances: geometry comparisons use atol ~1e-15 for cached basis checks (with float64); acceptance checks use explicit tolerances per test appropriate for float32 precision.\n   316→- When spec and C disagree subtly on rounding, use spec's rounding: nearest integer via `ceil(x − 0.5)`.\n   317→\n   318→## 15) Differentiability Guidelines (Critical for PyTorch Implementation)\n   319→\n   320→### Core Principles\n   321→\n   322→The PyTorch implementation **MUST** maintain end-to-end differentiability to enable gradient-based optimization. This is a fundamental architectural requirement that affects every design decision.\n   323→\n   324→### Mandatory Rules\n   325→\n   326→1. **Never Use `.item()` on Differentiable Tensors**\n   327→   - **Forbidden:** `config = Config(param=tensor.item())` — permanently severs computation graph\n   328→   - **Correct:** `config = Config(param=tensor)` — preserves gradient flow\n   329→   - **Rationale:** `.item()` extracts a Python scalar, completely detaching from autograd\n   330→\n   331→2. **Avoid `torch.linspace` for Gradient-Critical Code**\n   332→   - **Problem:** `torch.linspace` doesn't preserve gradients from tensor endpoints\n   333→   - **Forbidden:** `torch.linspace(start_tensor, end_tensor, steps)` where tensors require gradients\n   334→   - **Correct:** `start_tensor + (end_tensor - start_tensor) * torch.arange(steps) / (steps - 1)`\n   335→   - **Alternative:** Use manual tensor arithmetic for all range generation needing gradients\n   336→\n   337→3. **Implement Derived Properties as Functions**\n   338→   - **Forbidden:** Overwriting class attributes with computed values (e.g., `self.a_star = calculate_reciprocal()`)\n   339→   - **Correct:** Use `@property` decorators that recalculate from base parameters each access\n   340→   - **Example:** Crystal reciprocal vectors must be computed from cell parameters on-demand\n   341→\n   342→4. **Boundary Enforcement for Type Safety**\n   343→   - **Pattern:** Core methods assume tensor inputs; handle type conversions at call sites only\n   344→   - **Forbidden:** `isinstance(param, torch.Tensor)` checks inside computational methods\n   345→   - **Correct:** Convert scalars to tensors at API boundaries, maintain tensors throughout core\n   346→   - **Benefit:** Clean architecture while preserving gradient flow\n   347→\n   348→5. **Avoid Gradient-Breaking Operations**\n   349→   - **Forbidden in gradient paths:**\n   350→     - `.detach()` — explicitly breaks gradient connection\n   351→     - `.numpy()` — converts to NumPy array, losing autograd\n   352→     - `.cpu()` without maintaining graph — can break device consistency\n   353→   - **Allowed:** These operations are safe in non-differentiable contexts (logging, visualization)\n   354→\n   355→### Testing Requirements\n   356→\n   357→**Every differentiable parameter MUST have:**\n   358→1. **Unit-level gradient test:** Verify gradients flow through isolated functions\n   359→2. **Integration gradient test:** Verify end-to-end gradient flow through complete simulation\n   360→3. **Stability test:** Verify gradients remain stable across parameter variations\n   361→4. **Use `torch.autograd.gradcheck`:** With `dtype=torch.float64` for numerical precision (note: gradient tests explicitly override to float64 for accuracy, even though default dtype is float32)\n   362→\n   363→### Common Pitfalls and Solutions\n   364→\n   365→| Pitfall | Symptom | Solution |\n   366→|---------|---------|----------|\n   367→| Using `.item()` in config | Gradients are None | Pass tensors directly |\n   368→| `torch.linspace` with tensor bounds | No gradient on start/end | Manual arithmetic |\n   369→| Overwriting derived attributes | Stale gradients | Use @property methods |\n   370→| Type checks in core methods | Complex branching | Boundary enforcement |\n   371→| In-place operations | Runtime errors | Use out-of-place ops |\n   372→\n   373→### Architecture Implications\n   374→\n   375→- **Config objects:** Must accept both scalars and tensors, preserving tensor types\n   376→- **Model classes:** Use @property for all derived geometric/crystallographic quantities\n   377→- **Simulator:** Maintain tensor operations throughout; batch operations for efficiency\n   378→- **Utils:** Implement gradient-safe versions of standard operations (ranges, interpolation)\n   379→\n   380→### Debugging Gradient Issues\n   381→\n   382→1. **Check requires_grad:** Verify input tensors have `requires_grad=True`\n   383→2. **Print computation graph:** Use `torchviz` or `tensorboard` to visualize graph\n   384→3. **Isolate breaks:** Binary search through operations to find where gradients stop\n   385→4. **Use retain_graph:** For debugging multiple backward passes\n   386→5. **Check autograd.grad:** Manually compute gradients for specific tensors\n   387→\n   388→### Reference Documentation\n   389→\n   390→For comprehensive details and examples:\n   391→- **Lessons learned:** `docs/development/lessons_in_differentiability.md` — real debugging cases and solutions\n   392→- **Design principles:** `docs/architecture/pytorch_design.md` — architectural patterns for differentiability\n   393→- **Testing strategy:** `docs/development/testing_strategy.md` — Tier 2 gradient correctness methodology\n   394→- **Parameter trace:** `docs/architecture/parameter_trace_analysis.md` — understanding gradient flow paths\n   395→\n   396→### Verification Checklist\n   397→\n   398→- [ ] All `.item()` calls verified as non-differentiable paths\n   399→- [ ] No `torch.linspace` with gradient-requiring endpoints\n   400→- [ ] All derived properties use @property or functional patterns\n   401→- [ ] Type conversions happen only at boundaries\n   402→- [ ] `torch.autograd.gradcheck` passes for all parameters\n   403→- [ ] Integration tests verify end-to-end gradient flow\n   404→\n   405→**Remember:** Breaking differentiability breaks the fundamental value proposition of the PyTorch port — the ability to optimize physical parameters via gradient descent.\n   406→\n   407→## 16) Developer Notes\n   408→\n   409→- Maintain strict separation between geometry (meters) and physics (Å). Convert once at the interface.\n   410→- **Preserve differentiability at all costs:** Follow Section 15 guidelines religiously. This is non-negotiable for optimization capabilities.\n   411→- Cache only pure-geometry outputs; invalidate on config changes; keep unit tests focused and vectorized.\n   412→- Keep acceptance tests in specs/spec-b.md up-to-date with behavior; use them as the primary source of truth.\n   413→- **Before implementing any differentiable feature:** Review `docs/development/lessons_in_differentiability.md` to avoid known pitfalls.\n   414→- **Use @property pattern:** For all derived quantities (reciprocal vectors, rotated bases, etc.) to maintain gradient flow.\n   415→- **Test gradients early and often:** Don't wait until integration; verify gradients at the unit level first.\n   416→- **SAMPLE vs BEAM pivot tolerances:** BEAM pivot preserves beam center exactly (1e-6 tolerance), SAMPLE pivot has geometric constraints leading to ~3.5e-2 tolerance with large rotations. This matches C-code behavior.\n   417→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"0639b4d8-e915-4b9c-9292-23d3dd4551dc"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VfKaLE2bb65P6zzgks1WCf","type":"tool_result","content":"     1→# nanoBragg PyTorch Testing Strategy\n     2→\n     3→**Version:** 1.1  \n     4→**Date:** 2024-07-25  \n     5→**Owner:** [Your Name/Team]\n     6→\n     7→## 1. Introduction & Philosophy\n     8→\n     9→This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.\n    10→Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:\n    11→\n    12→1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the \"ground truth\" specification.\n    13→2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.\n    14→3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.\n    15→\n    16→All tests will be implemented using the PyTest framework.\n    17→\n    18→### 1.4 PyTorch Device & Dtype Discipline\n    19→\n    20→- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.\n    21→- **Authoritative smoke runs:** When a change touches tensor math, run the authoritative reproduction command once on CPU and once on CUDA (when available). Capture both logs/metrics and attach them to the fix plan. Treat any `torch.compile` or Dynamo warning about mixed devices as blocking.\n    22→- **Targeted tests:** Prefer parametrised tests that iterate over `device in {\"cpu\", \"cuda\"}` (guarded by `torch.cuda.is_available()`). At minimum, ensure a `gpu_smoke` marker or equivalent pytest node exercises the new logic on CUDA before declaring success.\n    23→- **Helper utilities:** Encapsulate device/dtype harmonisation in small helpers (e.g., `tensor.to(other_tensor)` or `type_as`). Centralise these helpers in reusable modules to keep the rule enforceable across future PyTorch projects.\n    24→- **CI gate:** If CI offers GPU runners, add a fast smoke job that runs the `gpu_smoke` marker (or agreed command) so regressions like CPU↔GPU tensor mixing fail quickly.\n    25→- **Vectorization check:** Confirm `_compute_physics_for_position` and related helpers remain batched across sources/phi/mosaic/oversample; extend broadcast dimensions instead of adding Python loops.\n    26→- **Runtime checklist:** Consult `docs/development/pytorch_runtime_checklist.md` during development and cite it in fix-plan notes for PyTorch changes.\n    27→\n    28→### 1.5 Loop Execution Notes (Do Now + Validation Scripts)\n    29→\n    30→- Do Now must include an exact pytest command: In the supervisor→engineer handoff (`input.md`), include the precise `pytest` node(s) that reproduce the active item. If no test exists, first author the minimal targeted test and then run it.\n    31→- Prefer reusable validation scripts: Place ad‑hoc validations under `scripts/validation/` and reference them from `input.md` rather than embedding Python snippets inline. Keep them portable and invoke via the project’s standard CLI/env.\n    32→- Test cadence per loop: Run targeted tests first; execute the full `pytest` suite at most once per engineer turn (end of loop) when code changed. For prompt/docs‑only loops, use `pytest --collect-only -q` to verify import/collection.\n    33→\n    34→## 2. Configuration Parity\n    35→\n    36→**CRITICAL REQUIREMENT:** Before implementing any test that compares against C-code output, you **MUST** ensure exact configuration parity. All golden test cases must be generated with commands that are verifiably equivalent to the PyTorch test configurations.\n    37→\n    38→**Authoritative Reference:** See the **[C-CLI to PyTorch Configuration Map](./c_to_pytorch_config_map.md)** for:\n    39→- Complete parameter mappings\n    40→- Implicit conventions (pivot modes, beam adjustments, rotation axes)\n    41→- Common configuration bugs and prevention strategies\n    42→\n    43→Configuration mismatches are the most common source of test failures. Always verify:\n    44→- Pivot mode (BEAM vs SAMPLE) based on parameter implications\n    45→- Convention-specific adjustments (e.g., MOSFLM's 0.5 pixel offset)\n    46→- Default rotation axes for each convention\n    47→- Proper unit conversions at boundaries\n    48→ - Explicit convention selection: tests and harnesses MUST pass `-convention` (or equivalent API flag) to avoid implicit CUSTOM switching when vector parameters are present\n    49→\n    50→\n    51→## 2.1 Ground Truth: Parallel Trace-Driven Validation\n    52→\n    53→The foundation of our testing strategy is a \"Golden Suite\" of test data. Crucially, final-output comparison is insufficient for effective debugging. Our strategy is therefore centered on **Parallel Trace-Driven Validation**.\n    54→\n    55→For each test case, the Golden Suite must contain three components:\n    56→1. **Golden Output Image:** The final .bin file from the C code.\n    57→2. **Golden C-Code Trace Log:** A detailed, step-by-step log of intermediate variables from the C code for a specific on-peak pixel.\n    58→3. **PyTorch Trace Log:** An identical, step-by-step log from the PyTorch implementation for the same pixel.\n    59→\n    60→This allows for direct, line-by-line comparison of the entire physics calculation, making it possible to pinpoint the exact line of code where a divergence occurs.\n    61→### 2.2 Instrumenting the C Code\n    62→\n    63→The `nanoBragg.c` source in `golden_suite_generator/` must be instrumented with a `-dump_pixel <slow> <fast>` command-line flag. When run with this flag, the program must write a detailed log file (`<test_case_name>_C_trace.log`) containing key intermediate variables (e.g., `scattering_vector`, `h`, `k`, `l`, `F_cell`, `F_latt`, `omega_pixel`, `polar`) for the specified pixel. This provides the ground truth for component-level testing.\n    64→\n    65→### 2.3 Golden Test Cases\n    66→\n    67→The following test cases will be defined, and all three artifacts (image, C trace, PyTorch trace) will be generated and stored in `tests/golden_data/`.\n    68→\n    69→| Test Case Name | Description | Purpose |\n    70→| :--- | :--- | :--- |\n    71→| `simple_cubic` | A 100Å cubic cell, single wavelength, no mosaicity, no oscillation. | The \"hello world\" test for basic geometry and spot calculation. |\n    72→| `triclinic_P1` | A low-symmetry triclinic cell with misset orientation. | To stress-test the reciprocal space and geometry calculations. |\n    73→| `simple_cubic_mosaic` | The `simple_cubic` case with mosaic spread. | To test the mosaic domain implementation. |\n    74→| `cubic_tilted_detector` | Cubic cell with rotated and tilted detector. | To test general detector geometry implementation. |\n    75→\n    76→### 2.4 Canonical Generation Commands\n    77→\n    78→**⚠️ CRITICAL:** The following commands are the **single source of truth** for reproducing the golden data. All parallel verification MUST use these exact parameters. These commands must be run from within the `golden_suite_generator/` directory.\n    79→\n    80→#### 2.4.1 `simple_cubic`\n    81→**Purpose:** Basic validation of geometry and physics calculations.\n    82→\n    83→**Canonical Command:**\n    84→```bash\n    85→./nanoBragg -hkl P1.hkl -matrix A.mat \\\n    86→  -lambda 6.2 \\\n    87→  -N 5 \\\n    88→  -default_F 100 \\\n    89→  -distance 100 \\\n    90→  -detsize 102.4 \\\n    91→  -pixel 0.1 \\\n    92→  -floatfile ../tests/golden_data/simple_cubic.bin \\\n    93→  -intfile ../tests/golden_data/simple_cubic.img\n    94→```\n    95→\n    96→**Key Parameters:**\n    97→- Crystal: 100Å cubic cell, 5×5×5 unit cells\n    98→- Detector: 100mm distance, 1024×1024 pixels (via `-detsize 102.4`)\n    99→- Beam: λ=6.2Å, uniform F=100\n   100→\n   101→#### 2.4.2 `triclinic_P1`\n   102→**Purpose:** Validates general triclinic geometry and misset rotations.\n   103→\n   104→**Canonical Command:**\n   105→```bash\n   106→./nanoBragg -misset -89.968546 -31.328953 177.753396 \\\n   107→  -cell 70 80 90 75 85 95 \\\n   108→  -default_F 100 \\\n   109→  -N 5 \\\n   110→  -lambda 1.0 \\\n   111→  -detpixels 512 \\\n   112→  -floatfile tests/golden_data/triclinic_P1/image.bin\n   113→```\n   114→\n   115→**Key Parameters:**\n   116→- Crystal: Triclinic (70,80,90,75°,85°,95°), 5×5×5 unit cells\n   117→- Detector: 100mm distance, 512×512 pixels (via `-detpixels 512`)\n   118→- Pivot: BEAM mode (\"pivoting detector around direct beam spot\")\n   119→\n   120→**⚠️ CRITICAL DIFFERENCE:** Uses `-detpixels 512` NOT `-detsize`!\n   121→\n   122→#### 2.4.3 `simple_cubic_mosaic`\n   123→**Purpose:** Validates mosaicity implementation.\n   124→\n   125→**Canonical Command:**\n   126→```bash\n   127→./nanoBragg -hkl P1.hkl -matrix A.mat \\\n   128→  -lambda 6.2 \\\n   129→  -N 5 \\\n   130→  -default_F 100 \\\n   131→  -distance 100 \\\n   132→  -detsize 100 \\\n   133→  -pixel 0.1 \\\n   134→  -mosaic_spread 1.0 \\\n   135→  -mosaic_domains 10 \\\n   136→  -floatfile ../tests/golden_data/simple_cubic_mosaic.bin \\\n   137→  -intfile ../tests/golden_data/simple_cubic_mosaic.img\n   138→```\n   139→\n   140→**Key Parameters:**\n   141→- Same as simple_cubic but with 1.0° mosaic spread, 10 domains\n   142→- Detector: 1000×1000 pixels (via `-detsize 100`)\n   143→\n   144→#### 2.3.4 `cubic_tilted_detector`\n   145→**Purpose:** Validates general detector geometry with rotations.\n   146→\n   147→**Canonical Command:**\n   148→```bash\n   149→./nanoBragg -lambda 6.2 \\\n   150→  -N 5 \\\n   151→  -cell 100 100 100 90 90 90 \\\n   152→  -default_F 100 \\\n   153→  -distance 100 \\\n   154→  -detsize 102.4 \\\n   155→  -detpixels 1024 \\\n   156→  -Xbeam 61.2 -Ybeam 61.2 \\\n   157→  -detector_rotx 5 -detector_roty 3 -detector_rotz 2 \\\n   158→  -twotheta 15 \\\n   159→  -oversample 1 \\\n   160→  -floatfile tests/golden_data/cubic_tilted_detector/image.bin\n   161→```\n   162→\n   163→**Key Parameters:**\n   164→- Detector rotations: rotx=5°, roty=3°, rotz=2°, twotheta=15°\n   165→- Beam center offset: (61.2, 61.2) mm\n   166→- Pivot: SAMPLE mode with explicit beam center\n   167→\n   168→## 2.5 Parallel Validation Matrix (AT ↔ tests ↔ env/commands)\n   169→\n   170→This matrix maps each Acceptance Test in the AT‑PARALLEL suite to its concrete test file(s), required environment variables, and canonical commands to execute them. Use this section to run the exact parity checks that gate C↔PyTorch equivalence.\n   171→\n   172→General environment for live C parity tests:\n   173→\n   174→- `KMP_DUPLICATE_LIB_OK=TRUE` (avoid MKL conflicts on some systems)\n   175→- `NB_RUN_PARALLEL=1` (enables live C↔PyTorch tests)\n   176→- `NB_C_BIN=./golden_suite_generator/nanoBragg` (path to C reference binary)\n   177→  - Fallback: if `golden_suite_generator/nanoBragg` does not exist in this repo, use `NB_C_BIN=./nanoBragg` (root‑level C binary)\n   178→\n   179→Quick invocation patterns (authoritative harness = pytest):\n   180→\n   181→- Shared parity matrix: `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py`\n   182→- Single parity case (example): `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py -k \"AT-PARALLEL-002\"`\n   183→- PyTorch-only invariance (when applicable): `pytest -v tests/test_at_parallel_0XX.py`\n   184→- Golden-data parity (no C binary required): `pytest -v tests/test_at_parallel_012.py`\n   185→\n   186→Reference mapping:\n   187→\n   188→- AT‑PARALLEL‑001 — Beam Center Scaling\n   189→  - Parity harness: `tests/test_parity_matrix.py -k \"AT-PARALLEL-001\"`\n   190→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set (parity)\n   191→  - Command (canonical): `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py -k \"AT-PARALLEL-001\"`\n   192→  - Supplemental PyTorch-only regression: `pytest -v tests/test_at_parallel_001.py`\n   193→  - Notes: Verifies detector-size scaling and MOSFLM +0.5 offset parity.\n   194→\n   195→- AT‑PARALLEL‑002 — Pixel Size Independence\n   196→  - Parity harness: `tests/test_parity_matrix.py -k \"AT-PARALLEL-002\"`\n   197→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set (parity)\n   198→  - Command (canonical): `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py -k \"AT-PARALLEL-002\"`\n   199→  - Supplemental PyTorch-only regression: `pytest -v tests/test_at_parallel_002.py`\n   200→  - Notes: Enforces correlation ≥0.9999 across pixel sizes under MOSFLM convention.\n   201→\n   202→- AT‑PARALLEL‑004 — MOSFLM 0.5 Pixel Offset\n   203→  - Parity harness: `tests/test_parity_matrix.py -k \"AT-PARALLEL-004\"`\n   204→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set (parity)\n   205→  - Command (canonical): `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py -k \"AT-PARALLEL-004\"`\n   206→  - Supplemental PyTorch-only regression: `pytest -v tests/test_at_parallel_004.py`\n   207→  - Notes: Verifies MOSFLM +0.5 pixel offset vs. XDS convention with correlation >0.99.\n   208→\n   209→- AT‑PARALLEL‑006 — Single Reflection Position\n   210→  - Parity harness: `tests/test_parity_matrix.py -k \"AT-PARALLEL-006\"`\n   211→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set (parity)\n   212→  - Command (canonical): `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py -k \"AT-PARALLEL-006\"`\n   213→  - Supplemental checks: `pytest -v tests/test_at_parallel_006.py`\n   214→  - Notes: Enforces parity across distance/wavelength sweeps.\n   215→\n   216→- AT‑PARALLEL‑007 — Peak Position with Rotations\n   217→  - Parity harness: `tests/test_parity_matrix.py -k \"AT-PARALLEL-007\"`\n   218→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set (parity)\n   219→  - Command (canonical): `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py -k \"AT-PARALLEL-007\"`\n   220→  - Supplemental checks: `pytest -v tests/test_at_parallel_007.py`\n   221→  - Notes: Validates rotated detector parity with correlation ≥0.9995 and consistent intensity sums.\n   222→\n   223→- AT‑PARALLEL‑003/005/008/009/010/013/014/015/016/017/018/021/022/023/024/025/026/028/029\n   224→  - Test files: `tests/test_at_parallel_0XX.py`\n   225→  - Env: varies; most invariance tests run without C; rotation/combined/tilted cases may include live parity variants (see file headers)\n   226→\n   227→- AT‑PARALLEL‑011 — Polarization Factor Verification (C↔PyTorch live parity)\n   228→  - Test file: `tests/test_at_parallel_011.py`\n   229→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set\n   230→  - Command: `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_at_parallel_011.py`\n   231→\n   232→- AT‑PARALLEL‑012 — Reference Pattern Correlation (golden data)\n   233→  - Test file: `tests/test_at_parallel_012.py`\n   234→  - Env: none (uses `tests/golden_data/*`)\n   235→  - Command: `pytest -v tests/test_at_parallel_012.py`\n   236→\n   237→- AT‑PARALLEL‑020 — Comprehensive Integration (C↔PyTorch live parity)\n   238→  - Test file: `tests/test_at_parallel_020.py`\n   239→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set\n   240→  - Command: `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_at_parallel_020.py`\n   241→\n   242→- AT‑PARALLEL‑022 — Combined Detector+Crystal Rotation Equivalence (C↔PyTorch live parity)\n   243→  - Test file: `tests/test_at_parallel_022.py`\n   244→  - Env: `NB_RUN_PARALLEL=1`, `NB_C_BIN` set\n   245→  - Command: `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_at_parallel_022.py`\n   246→\n   247→- Parity case definitions: `tests/parity_cases.yaml` is the machine-readable companion to this matrix. It enumerates canonical commands, sweeps, thresholds, and options for the shared parity runner (`tests/test_parity_matrix.py`). Every parity-threshold AT SHALL appear in both the matrix and the YAML file.\n   248→\n   249→### 2.5.0 Bootstrap Parity Harness (blocking)\n   250→\n   251→- If either `tests/parity_cases.yaml` or `tests/test_parity_matrix.py` is missing, the matrix is incomplete. Stop before running any parity loop.\n   252→- Add a fix_plan item (“Bootstrap parity harness for AT-…”) and create both files before proceeding:\n   253→  - `tests/test_parity_matrix.py`: parameterised pytest harness that runs the C reference (`NB_C_BIN`) and the PyTorch CLI (`sys.executable -m nanobrag_torch`), writes temporary floatfiles, loads them into NumPy, computes correlation/MSE/RMSE/max |Δ|/sum ratio (optional SSIM), saves `metrics.json` (plus diff artifacts) on failure, and enforces thresholds specified in the YAML.\n   254→  - `tests/parity_cases.yaml`: a top-level `cases:` list with entries containing `id`, `description`, `base_args`, `thresholds`, optional `options`, and `runs` (array of `{name, extra_args, thresholds?}`). Include seeds and device settings when determinism demands it.\n   255→- After the bootstrap, rerun Step 0 so the matrix and YAML stay in sync. Parity work MUST NOT continue until both files exist and the target AT has an entry.\n   256→\n   257→### 2.5.1 Trace Recipe (per AT)\n   258→\n   259→For equivalence debugging (AT‑PARALLEL failures, correlation below thresholds, structured diffs), generate aligned traces:\n   260→\n   261→- Pixel selection: choose a strong on‑peak pixel close to the beam center or a specified coordinate in the test; record the exact `(s,f)` indices used.\n   262→- PyTorch trace: emit a structured log containing, at minimum, `pix0_vector`, basis vectors, `R` (distance), solid angle (both point‑pixel and obliquity‑corrected), close_distance and obliquity factor, `k_in`, `k_out`, `S`, Miller indices (float and rounded), `F`, lattice factors (`F_latt_a/b/c`, product), `F^2`, `F_latt^2`, `omega/solid_angle`, pixel area, fluence and final intensity.\n   263→- C trace: run the C binary with identical parameters and print the same variables for the same pixel. If needed, add temporary printf instrumentation; keep units consistent with the PyTorch trace (meters, steradians, Å where noted).\n   264→- Dtype/device: debug in float64 on CPU for determinism unless the AT explicitly requires GPU.\n   265→- Artifacts: save as `reports/debug/<DATE>/AT-<ID>/{c_trace.log, py_trace.log, metrics.json, diff_heatmap.png}` and cite paths in the plan.\n   266→\n   267→### 2.5.2 Matrix Gate (hard preflight)\n   268→\n   269→Before any parity run in a debugging loop:\n   270→\n   271→- Resolve the AT in this matrix to the exact pytest node(s) and required environment.\n   272→- Verify `NB_C_BIN` exists and is executable; if the project uses a root‑level `./nanoBragg`, set `NB_C_BIN=./nanoBragg`.\n   273→- Prohibition: Do not run PyTorch‑only tests first for equivalence loops. The first command MUST be the canonical C‑parity pytest invocation mapped here. PyTorch‑only checks are allowed only as secondary, supportive diagnostics.\n   274→- If an AT mapping is missing or incomplete, add a minimal entry here (test file, env, canonical command) and append a TODO in `docs/fix_plan.md` referencing the addition.\n   275→ - Friction rule: If the same parity steps (env export, pytest node, trace generation) are repeated across two loops, factor them into a minimal helper (e.g., a one‑liner shell alias or small script) and reference it in this matrix. Record the addition briefly in `docs/fix_plan.md` Attempts History. Do not bypass pytest; helpers should only wrap the mapped canonical commands.\n   276→\n   277→### 2.5.3 Normative Parity Coverage (SHALL)\n   278→\n   279→- Every acceptance test in `specs/spec-a-parallel.md` with a C↔Py numerical threshold MUST have:\n   280→  - A human-readable entry in this matrix (test path, environment, canonical command), and\n   281→  - A corresponding machine-readable case in `tests/parity_cases.yaml` powering `tests/test_parity_matrix.py`.\n   282→- Missing coverage in either location is blocking. The fix plan cannot mark the AT done until the mapping exists or an explicit harness entry (with pass/fail logic) is added.\n   283→- Documentation updates MUST keep the matrix and YAML file in sync with the canonical command line (arguments, sweeps, thresholds).\n   284→\n   285→#### 2.5.3a Parity Case Classification Criteria (SHALL)\n   286→\n   287→**Purpose:** Clarify which AT-PARALLEL tests belong in `parity_cases.yaml` (parameterized harness) vs standalone test files (custom logic).\n   288→\n   289→**Classification Rules:**\n   290→- **parity_cases.yaml ONLY:** Simple parameter sweeps with standard correlation/sum metrics, no custom post-processing\n   291→  - Examples: AT-001 (beam center scaling), AT-002 (pixel size sweeps), AT-006 (distance/wavelength sweeps)\n   292→- **parity_cases.yaml + Standalone (BOTH):** Basic image generation via YAML; standalone adds custom validation logic\n   293→  - Examples: AT-010 (adds 1/R² scaling physics checks), AT-016 (adds NaN/Inf robustness checks)\n   294→  - Pattern: YAML generates images for correlation checks; standalone test loads those images and applies domain-specific validation\n   295→- **Standalone ONLY:** Custom algorithms, special infrastructure, or complex validation that cannot be expressed in YAML\n   296→  - Examples:\n   297→    - AT-008 (Hungarian peak matching algorithm)\n   298→    - AT-013 (deterministic mode setup, platform fingerprinting)\n   299→    - AT-027 (HKL file loading, F² scaling validation)\n   300→    - AT-029 (FFT spectral analysis, aliasing measurement)\n   301→\n   302→**Linter Expectations:**\n   303→- The linter (`scripts/lint_parity_coverage.py`) flags all ATs with C↔Py correlation thresholds as potentially missing from `parity_cases.yaml`\n   304→- Standalone-only ATs (008, 013, 027, 029) produce warnings that should be ignored\n   305→- BOTH-type ATs (010, 016) should appear in parity_cases.yaml to suppress warnings; their standalone tests add extra validation\n   306→\n   307→**Decision Flowchart:**\n   308→1. Does the AT have a C↔Py correlation threshold? → If NO, skip (not a parity test)\n   309→2. Does validation require custom Python logic (algorithms, FFT, file I/O, special checks)? → If YES:\n   310→   - Can basic image generation use parameter sweeps? → If YES, use BOTH (YAML + standalone); if NO, standalone only\n   311→3. Is it a pure parameter sweep with standard metrics? → YES, use parity_cases.yaml only\n   312→\n   313→### 2.5.4 Artifact-Backed Closure (SHALL)\n   314→\n   315→- Success claims for parity-threshold ATs MUST cite artifacts from a mapped parity path meeting thresholds:\n   316→  - Metrics: correlation, MSE, RMSE, max |Δ|, C_sum, Py_sum, sum_ratio (optional SSIM when helpful).\n   317→  - Storage: under `reports/<date>-AT-<ID>/metrics.json` (or equivalent) plus supporting visuals (diff heatmaps/overlays) when failures occur.\n   318→  - fix_plan Attempts History MUST reference these paths (look for `Metrics:` / `Artifacts:` entries).\n   319→- No artifacts → no closure; reopen the fix plan item instead.\n   320→\n   321→### 2.5.5 Environment Canonicalization Preflight (SHALL)\n   322→\n   323→- Resolve `NB_C_BIN` before running parity commands. Preferred order: environment value → `./golden_suite_generator/nanoBragg` → `./nanoBragg`. Abort if none exist.\n   324→- Invoke PyTorch parity via `sys.executable` to ensure the active virtual environment executes the run.\n   325→- Treat missing binaries/interpreters as blocking errors (fail fast rather than skipping parity).\n   326→\n   327→### 2.5.6 CI Meta-Check (Docs-as-Data)\n   328→\n   329→- CI MUST lint for:\n   330→  - Spec → matrix → YAML coverage for all parity-threshold ATs.\n   331→  - Existence of mapped commands/binaries referenced in the YAML.\n   332→  - Presence of artifact paths when fix_plan marks parity items complete.\n   333→- CI SHOULD fail when any invariant above is violated; parity documentation is normative.\n   334→\n   335→## 2.6 CI Gates (Parity & Traces)\n   336→\n   337→To prevent drift, CI should enforce the following fast gates on CPU:\n   338→\n   339→- Detector geometry visual parity: run `scripts/verify_detector_geometry.py` and fail if any reported correlation drops below the documented thresholds (e.g., ≥0.999 for baseline/tilted unless otherwise specified). Save PNG and metrics JSON as artifacts.\n   340→- Trace parity check: generate one C trace and one PyTorch trace for the canonical pixel (`tests/golden_data/simple_cubic_pixel_trace.log` spec) and assert no first‑difference at the named checkpoints (e.g., pix0_vector, basis vectors, q, h,k,l, omega_pixel). Attach c_trace.log/py_trace.log on failure.\n   341→\n   342→Optional visual parity harness (sanity check):\n   343→\n   344→- Script: `scripts/comparison/run_parallel_visual.py`\n   345→- Env: `NB_C_BIN` should point to C binary\n   346→- Run: `python scripts/comparison/run_parallel_visual.py`\n   347→- Output: PNGs and `metrics.json` under `parallel_test_visuals/AT-PARALLEL-XXX/`\n   348→\n   349→When the visual harness and the AT tests disagree, treat the AT tests as the primary gate (authoritative) and use parallel trace‑driven debugging (Section 2.1) to identify the first divergence. Scripts are supportive tools; conformance is determined by the pytest suite.\n   350→\n   351→## 3. Tier 1: Translation Correctness Testing\n   352→\n   353→**Goal:** To prove the PyTorch code is a faithful port of the C code.\n   354→\n   355→### 3.1 The Foundational Test: Parallel Trace Validation\n   356→\n   357→All debugging of physics discrepancies **must** begin with a parallel trace comparison. Comparing only the final output images is insufficient and can be misleading. The line-by-line comparison of intermediate variables between the C-code trace and the PyTorch trace is the only deterministic method for locating the source of an error and is the mandatory first step before attempting to debug with any other method.\n   358→\n   359→### 3.2 Unit Tests (`tests/test_utils.py`)\n   360→\n   361→**Target:** Functions in `utils/geometry.py` and `utils/physics.py`.  \n   362→**Methodology:** For each function, create a PyTest test using hard-coded inputs. The expected output will be taken directly from the Golden C-Code Trace Log.\n   363→\n   364→### 3.3 Component Tests (`tests/test_models.py`)\n   365→\n   366→**Target:** The `Detector` and `Crystal` classes.  \n   367→**Methodology:** The primary component test is the **Parallel Trace Comparison**.\n   368→\n   369→- `test_trace_equivalence`: A test that runs `scripts/debug_pixel_trace.py` to generate a new PyTorch trace and compares it numerically, line-by-line, against the corresponding Golden C-Code Trace Log. This single test validates the entire chain of component calculations.\n   370→\n   371→### 3.4 Integration Tests (`tests/test_simulator.py`)\n   372→\n   373→**Target:** The end-to-end `Simulator.run()` method.  \n   374→**Methodology:** For each test case, create a test that compares the final PyTorch image tensor against the golden `.bin` file using `torch.allclose`. This test should only be expected to pass after the Parallel Trace Comparison test passes.\n   375→\n   376→**Primary Validation Tool:** The main script for running end-to-end parallel validation against the C-code reference is `scripts/verify_detector_geometry.py`. This script automates the execution of both the PyTorch and C implementations, generates comparison plots, and computes quantitative correlation metrics. It relies on `scripts/c_reference_runner.py` to manage the C-code execution.\n   377→\n   378→## 4. Tier 2: Gradient Correctness Testing\n   379→\n   380→**Goal:** To prove that the automatic differentiation capabilities are mathematically correct.\n   381→\n   382→### 4.1 Gradient Checks (`tests/test_gradients.py`)\n   383→\n   384→*   **Target:** All parameters intended for refinement.\n   385→*   **Methodology:** We will use PyTorch's built-in numerical gradient checker, `torch.autograd.gradcheck`. For each parameter, a test will be created that:\n   386→    1.  Sets up a minimal, fast-to-run simulation scenario.\n   387→    2.  Defines a function that takes the parameter tensor as input and returns a scalar loss.\n   388→    3.  Calls `gradcheck` on this function and its input.\n   389→*   **Requirement:** The following parameters (at a minimum) must pass `gradcheck`:\n   390→    *   **Crystal:** `cell_a`, `cell_gamma`, `misset_rot_x`\n   391→    *   **Detector:** `distance_mm`, `Fbeam_mm`\n   392→    *   **Beam:** `lambda_A`\n   393→    *   **Model:** `mosaic_spread_rad`, `fluence`\n   394→\n   395→### 4.2 Multi-Tier Gradient Testing\n   396→\n   397→**Comprehensive gradient testing requires multiple levels of verification:**\n   398→\n   399→#### 4.2.1 Unit-Level Gradient Tests\n   400→- **Target:** Individual components like `get_rotated_real_vectors`\n   401→- **Purpose:** Verify gradients flow correctly through isolated functions\n   402→- **Example:**\n   403→  ```python\n   404→  def test_rotation_gradients():\n   405→      phi_start = torch.tensor(10.0, requires_grad=True, dtype=torch.float64)\n   406→      config = CrystalConfig(phi_start_deg=phi_start)\n   407→      rotated_vectors = crystal.get_rotated_real_vectors(config)\n   408→      assert rotated_vectors[0].requires_grad\n   409→      assert torch.autograd.gradcheck(lambda x: crystal.get_rotated_real_vectors(\n   410→          CrystalConfig(phi_start_deg=x))[0].sum(), phi_start)\n   411→  ```\n   412→\n   413→#### 4.2.2 Integration-Level Gradient Tests\n   414→- **Target:** End-to-end `Simulator.run()` method\n   415→- **Purpose:** Verify gradients flow through complete simulation chain\n   416→- **Critical:** All configuration parameters must be tensors to preserve gradient flow\n   417→\n   418→#### 4.2.3 Gradient Stability Tests\n   419→- **Target:** Parameter ranges and edge cases\n   420→- **Purpose:** Verify gradients remain stable across realistic parameter variations\n   421→- **Example:**\n   422→  ```python\n   423→  def test_gradient_stability():\n   424→      for phi_val in [0.0, 45.0, 90.0, 180.0]:\n   425→          phi_start = torch.tensor(phi_val, requires_grad=True, dtype=torch.float64)\n   426→          config = CrystalConfig(phi_start_deg=phi_start)\n   427→          result = simulator.run_with_config(config)\n   428→          assert result.requires_grad\n   429→  ```\n   430→\n   431→#### 4.2.4 Gradient Flow Debugging\n   432→- **Purpose:** Systematic approach to diagnose gradient breaks\n   433→- **Methodology:**\n   434→  1. **Isolation:** Create minimal test case with `requires_grad=True`\n   435→  2. **Tracing:** Check `requires_grad` at each computation step\n   436→  3. **Break Point Identification:** Find where gradients are lost\n   437→  4. **Common Causes:**\n   438→     - `.item()` calls on differentiable tensors (detaches from computation graph)\n   439→     - `torch.linspace` with tensor endpoints (known PyTorch limitation)\n   440→     - Manual tensor overwriting instead of functional computation\n   441→     - Using `.detach()` or `.numpy()` on tensors that need gradients\n   442→\n   443→## 5. Tier 3: Scientific Validation Testing\n   444→\n   445→**Goal:** To validate the model against objective physical principles, independent of the original C code.\n   446→\n   447→### 5.1 First Principles Tests (`tests/test_validation.py`)\n   448→\n   449→*   **Target:** The fundamental geometry and physics of the simulation.\n   450→*   **Methodology:**\n   451→    *   **`test_bragg_spot_position`:**\n   452→        1.  Configure a simple case: cubic cell, beam along Z, detector on XY plane, no rotations.\n   453→        2.  Analytically calculate the exact (x,y) position of a low-index reflection (e.g., (1,0,0)) using the Bragg equation and simple trigonometry.\n   454→        3.  Run the simulation.\n   455→        4.  Find the coordinates of the brightest pixel in the output image using `torch.argmax`.\n   456→        5.  Assert that the simulated spot position is within one pixel of the analytically calculated position.\n   457→    *   **`test_polarization_limits`:**\n   458→        1.  Configure a reflection to be at exactly 90 degrees 2-theta.\n   459→        2.  Run the simulation with polarization set to horizontal. Assert the spot intensity is near maximum.\n   460→        3.  Run again with polarization set to vertical. Assert the spot intensity is near zero.\n   461→\n   462→## 6. Tooling & Benchmark Hygiene\n   463→\n   464→- **Directory layout:** Place benchmarks, profilers, and ad-hoc tooling under `scripts/` (e.g., `scripts/benchmarks/benchmark_detailed.py`). Do not add standalone executables to the repo root.\n   465→- **Environment parity:** All tooling must honour the same environment contract as the tests (`KMP_DUPLICATE_LIB_OK=TRUE`, `NB_C_BIN` precedence, editable install). Scripts SHOULD exit with a non-zero status if prerequisites are missing.\n   466→- **Plan integration:** When a benchmark exposes a regression, log the command, metrics, and artifact path under `docs/fix_plan.md` › `## Suite Failures` or the relevant tracking section.\n   467→- **Generalisation:** These expectations apply to any PyTorch project you touch—structure tooling predictably, rely on documented env vars, and keep benchmark commands discoverable through project docs.\n   468→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"757f2eb3-7ec4-47f4-811a-a8ba71c26aec"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013WmpVUcCHQxVk5AwWoMLUs","type":"tool_result","content":"     1→# CLAUDE.md\n     2→This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n     3→\n     4→IMPORTANT INSTRUCTIONS \n     5→When using subagents:\n     6→1. - Create detailed, self-contained prompts for each agent. \n     7→- Include a list of all relevant files the agent will need to understand the context of the tas\n     8→- Include specific instructions on what to accomplish\n     9→- Define clear output expectations\n    10→- Remember agents are stateless and need complete context\n    11→2. If appropriate, spawn parallel subagents, ensuring all agents launch in a single parallel batch\n    12→3. Collect & Summarize Results\n    13→- Gather outputs from all completed agents\n    14→- Synthesize findings into cohesive response\n    15→<example>\n    16→<subagent you might want to use>\n    17→name: debugger\n    18→description: Debugging specialist for errors, test failures, and unexpected behavior. Use proactively when encountering any issues.\n    19→model: sonnet\n    20→</subagent you might want to use>\n    21→this agent needs context on the spec, architecture, development practices,\n    22→and project documentation relevant to the failing tests / feature / behavior / component(s)\n    23→</example\n    24→IMPORTANT\n    25→\n    26→### Protected Assets Rule\n    27→- **Never delete or rename files referenced in `docs/index.md`.** Treat that index as the canonical allowlist of required artifacts (e.g., `loop.sh`). If removal or relocation is unavoidable, update `docs/index.md` in the same change and clearly document the rationale in the commit message and relevant plan entry.\n    28→- Before any repository hygiene or cleanup sweep, refresh `docs/index.md` and verify that none of the targeted files appear there.\n    29→\n    30→## 🚀 Current Initiative: None\n    31→\n    32→## ⚙️ PyTorch Runtime Guardrails\n    33→\n    34→- **Vectorization is mandatory:** Any simulator change must preserve the batched tensor flows described in `docs/architecture/pytorch_design.md` (no re-introduced Python loops when a batched helper exists).\n    35→- **Device/dtype neutrality:** Do not introduce `.cpu()`/`.cuda()` or per-call `.to()` shims inside compiled paths; ensure tensors live on the caller’s device/dtype up front and run CPU + CUDA smoke checks when available.\n    36→- **Quick reference:** See `docs/development/pytorch_runtime_checklist.md` (create/update as part of this change) for the actionable checklist before and after every PyTorch edit.\n    37→\n    38→---\n    39→\n    40→**For a complete overview of the project's documentation, start with the [Project Documentation Index](./docs/index.md).**\n    41→\n    42→Key starting points include:\n    43→- **[Architecture Hub](./docs/architecture/README.md)** for all technical specifications.\n    44→- **[Testing Strategy](./docs/development/testing_strategy.md)** for validation procedures.\n    45→\n    46→## 📋 Quick Reference: Comparison Tool\n    47→\n    48→The `nb-compare` tool compares C and PyTorch implementations side-by-side:\n    49→\n    50→```bash\n    51→# Basic comparison\n    52→nb-compare -- -default_F 100 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 256\n    53→\n    54→# With custom binaries and ROI\n    55→nb-compare --c-bin ./golden_suite_generator/nanoBragg --roi 100 156 100 156 -- [args...]\n    56→\n    57→# With resampling for shape mismatch and custom output\n    58→nb-compare --resample --outdir my_comparison --threshold 0.98 -- [args...]\n    59→```\n    60→\n    61→Outputs comparison metrics (correlation, RMSE, peak alignment) and PNG previews to `comparison_artifacts/`.\n    62→\n    63→## 📋 Quick Reference: nanoBragg C Commands\n    64→\n    65→For exact golden-data commands, see [`tests/golden_data/README.md`](./tests/golden_data/README.md). Use the NB_C_BIN env var to select the C binary:\n    66→\n    67→```bash\n    68→# Recommended: instrumented binary under golden_suite_generator/\n    69→export NB_C_BIN=./golden_suite_generator/nanoBragg\n    70→# Alternative (frozen binary at repo root):\n    71→# export NB_C_BIN=./nanoBragg\n    72→\n    73→# Simple cubic test case\n    74→\"$NB_C_BIN\" -lambda 6.2 -N 5 -cell 100 100 100 90 90 90 -default_F 100 \\\n    75→  -distance 100 -detpixels 1024 -floatfile output.bin\n    76→\n    77→# Tilted detector with MOSFLM convention\n    78→\"$NB_C_BIN\" -lambda 6.2 -N 5 -cell 100 100 100 90 90 90 -default_F 100 \\\n    79→  -distance 100 -detpixels 1024 -Xbeam 61.2 -Ybeam 61.2 \\\n    80→  -detector_rotx 5 -detector_roty 3 -detector_rotz 2 -twotheta 15 \\\n    81→  -floatfile output.bin\n    82→```\n    83→\n    84→For all parameters, see [`docs/architecture/c_parameter_dictionary.md`](./docs/architecture/c_parameter_dictionary.md).\n    85→\n    86→## 🛑 Core Implementation Rules (IMPORTANT)\n    87→\n    88→**YOU MUST ADHERE TO THESE RULES TO AVOID COMMON BUGS:**\n    89→\n    90→0.  **🚨 DETECTOR DEBUGGING PREREQUISITE:** Before debugging ANY detector geometry correlation issue, you **MUST** read the [Detector Geometry Debugging Checklist](./docs/debugging/detector_geometry_checklist.md). This document will save you 4-8 hours by identifying common issues:\n    91→    - Unit system confusion (Detector uses meters internally, not Angstroms)\n    92→    - MOSFLM convention axis swap and +0.5 pixel offset\n    93→    - Undocumented CUSTOM convention switching\n    94→    - Known C code logging bugs\n    95→    - **Failure to read this checklist will result in DAYS of unnecessary debugging!**\n    96→\n    97→0.  **Configuration Parity is Mandatory:** Before writing any test or implementation that involves C-code validation, you **MUST** consult the [C-CLI to PyTorch Configuration Map](./docs/development/c_to_pytorch_config_map.md). This document is the single source of truth for all parameter mappings and implicit C-code conventions. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:\n    98→    - Implicit pivot mode logic (e.g., `-twotheta` implies SAMPLE pivot)\n    99→    - Convention-dependent beam center calculations (MOSFLM adds 0.5 pixel adjustment)\n   100→    - Rotation axis defaults (MOSFLM uses Y-axis, XDS uses X-axis for twotheta)\n   101→    - Unit conversions (mm→m, degrees→radians)\n   102→\n   103→0.  **Instrumentation / Tracing Discipline:** Never re-derive physics or duplicate algorithms in trace/debug code. Instrumentation must reuse the production helpers or cached intermediates so traces reflect the exact values the main path computed (see [Architecture Hub](./docs/architecture/README.md#⚠️-trace-instrumentation-rule)). Parallel \"trace-only\" implementations inevitably drift and make parity debugging unreliable.\n   104→\n   105→1.  **Units (canonical in spec/arch):** Use the conversions and detector hybrid exception exactly as defined in `specs/spec-a.md` (Units & Geometry) and summarized in `arch.md` and `docs/architecture/detector.md`.\n   106→\n   107→2.  **Crystallographic Convention (by design):** Compute h,k,l via real‑space dot (see `specs/spec-a.md` Physics for the authoritative statement).\n   108→\n   109→3.  **Differentiability:** Follow `arch.md` Differentiability Guidelines (no `.item()` on grad tensors, avoid `torch.linspace` with tensor endpoints, derive via functions/properties) and require `torch.autograd.gradcheck` for parameters.\n   110→\n   111→4.  **Coordinate System & Image Orientation:** This project uses a `(slow, fast)` pixel indexing convention, consistent with `matplotlib.imshow(origin='lower')` and `fabio`.\n   112→    -   **Action:** Ensure all `torch.meshgrid` calls use `indexing=\"ij\"` to produce `(slow, fast)` grids.\n   113→    -   **Verification:** When comparing to external images (like the Golden Suite), always confirm the axis orientation. A 90-degree rotation in the diff image is a classic sign of an axis swap.\n   114→\n   115→5.  **Parallel Trace Debugging is Mandatory:** All debugging of physics discrepancies **MUST** begin with a parallel trace comparison.\n   116→    -   **Action:** Generate a step-by-step log from the instrumented C code and an identical log from the PyTorch script (`scripts/debug_pixel_trace.py`). Compare these two files to find the first line where they numerically diverge. **Before comparing, consult the component contract in `docs/architecture/` to verify the expected units of all variables in the trace log.**\n   117→    -   **Reference:** See `docs/development/testing_strategy.md` for the strategy and `docs/debugging/debugging.md` for the detailed workflow.\n   118→    -   **Key Scripts:** The primary script for end-to-end validation is `scripts/verify_detector_geometry.py`. It uses helper modules `scripts/c_reference_runner.py` to execute the C code and `scripts/smv_parser.py` to read the output images. For single-pixel, step-by-step debugging, use `scripts/debug_pixel_trace.py`.\n   119→\n   120→6.  **PyTorch Environment Variable:** All PyTorch code execution **MUST** set the environment variable `KMP_DUPLICATE_LIB_OK=TRUE` to prevent MKL library conflicts.\n   121→    -   **Action:** Either set `os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'` in Python before importing torch, or prefix command-line calls with `KMP_DUPLICATE_LIB_OK=TRUE`.\n   122→    -   **Reason:** Prevents \"Error #15: Initializing libiomp5.dylib, but found libiomp5.dylib already initialized\" crashes when multiple libraries (PyTorch, NumPy) load MKL runtime.\n   123→    -   **Verification:** All Python scripts and tests that import torch must include this environment variable setting.\n   124→\n   125→7.  **Differentiable Programming Principles:** All PyTorch code **MUST** maintain computational graph connectivity for gradient flow.\n   126→    -   **Action:** Avoid functions that explicitly detach tensors from the computation graph within a differentiable code path.\n   127→    -   **Forbidden:** Using `.item()`, `.numpy()`, or `.detach()` on a tensor that requires a gradient, as this will sever the gradient path.\n   128→    -   **Correct:** Pass tensors directly through the computation pipeline. Use Python-level control flow (like `isinstance`) to handle different input types gracefully, but ensure the core operations are performed on tensors.\n   129→    -   **Known Limitation:** Be aware that some PyTorch functions, like `torch.linspace`, do not propagate gradients to their `start` and `end` arguments. In such cases, a manual, differentiable implementation using basic tensor operations (e.g., `torch.arange`) is required.\n   130→    -   **Verification:** All differentiable parameters must have passing `torch.autograd.gradcheck` tests.\n   131→\n   132→8.  **Preserve C-Code References Until Feature-Complete:** C-code quotes in docstrings serve as a roadmap for unimplemented features. They **MUST NOT** be removed until the corresponding feature is fully implemented, tested, and validated.\n   133→    -   **Action:** When implementing a feature described by a C-code quote, leave the quote in place. Once the feature is complete and all its tests (including integration and gradient tests) are passing, the quote may be updated or removed if it no longer adds value beyond the implemented code.\n   134→    -   **Example:** A docstring for an unimplemented function should retain its C-code reference. A docstring for a partially implemented function (e.g., `phi` rotation is done but `misset` is not) should retain the C-code reference for the unimplemented part, clearly marked as \"Future Work\".\n   135→    -   **Verification:** Before removing any C-code reference, confirm that the functionality it describes is covered by a passing test in the test suite.\n   136→\n   137→9.  **Never Use `.item()` on Differentiable Tensors:** The `.item()` method **MUST NOT** be used on any tensor that needs to remain differentiable.\n   138→    -   **Action:** Pass tensors directly to configuration objects and functions instead of extracting scalar values.\n   139→    -   **Forbidden:** `config = Config(param=tensor.item())` - This permanently severs the computation graph.\n   140→    -   **Correct:** `config = Config(param=tensor)` - Preserves gradient flow.\n   141→    -   **Verification:** Any use of `.item()` must be followed by verification that the tensor is not needed for gradient computation.\n   142→\n   143→9.  **Avoid `torch.linspace` for Gradient-Critical Code:** `torch.linspace` does not preserve gradients from tensor endpoints.\n   144→    -   **Action:** Use manual tensor arithmetic for differentiable range generation: `start + step_size * torch.arange(...)`.\n   145→    -   **Forbidden:** `torch.linspace(start_tensor, end_tensor, steps)` where `start_tensor` or `end_tensor` require gradients.\n   146→    -   **Correct:** `start_tensor + (end_tensor - start_tensor) * torch.arange(steps) / (steps - 1)`.\n   147→    -   **Verification:** Check that generated ranges preserve `requires_grad=True` when input tensors require gradients.\n   148→\n   149→10. **Boundary Enforcement for Type Safety:** Use clean architectural boundaries to handle tensor/scalar conversions.\n   150→    -   **Action:** Core methods assume tensor inputs; type conversions happen at call sites.\n   151→    -   **Forbidden:** `isinstance(param, torch.Tensor)` checks inside core computational methods.\n   152→    -   **Correct:** `config = Config(param=torch.tensor(value))` at boundaries, `def core_method(tensor_param)` in implementation.\n   153→    -   **Verification:** Core methods should not contain type checking logic; all parameters should be tensors with consistent device/dtype.\n   154→\n   155→11. **C-Code Reference Template (MANDATORY FOR ALL PORTED FUNCTIONS):**\n   156→    -   **Action:** When implementing ANY function that ports logic from nanoBragg.c, you MUST:\n   157→        1. FIRST create the function stub with the docstring template below\n   158→        2. THEN fill in the C-code reference BEFORE writing any implementation\n   159→        3. ONLY THEN proceed with the Python implementation\n   160→    -   **Template:**\n   161→        ```python\n   162→        def function_name(self, ...):\n   163→            \"\"\"\n   164→            Brief description of function purpose.\n   165→            \n   166→            C-Code Implementation Reference (from nanoBragg.c, lines XXXX-YYYY):\n   167→            ```c\n   168→            [PASTE EXACT C-CODE HERE - DO NOT PARAPHRASE]\n   169→            ```\n   170→            \n   171→            Args:\n   172→                ...\n   173→            Returns:\n   174→                ...\n   175→            \"\"\"\n   176→            # Implementation goes here\n   177→        ```\n   178→    -   **Forbidden:** Writing the implementation before adding the C-code reference\n   179→    -   **Verification:** Before marking any implementation task complete, verify C-code reference exists\n   180→    -   **Rationale:** This is not just for human readability; it is a critical part of our trace-driven validation strategy. It provides a direct, in-code link between the new implementation and its ground-truth reference, which is essential for debugging and verification. Failure to include this reference is considered an implementation error.\n   181→\n   182→12. **Critical Data Flow Convention: The Misset Rotation Pipeline**\n   183→\n   184→    **This rule is non-negotiable and describes a non-standard data flow that MUST be replicated exactly.** The static misset orientation is integrated into the lattice vector calculation in a specific sequence.\n   185→\n   186→    The correct, end-to-end data flow is:\n   187→    1.  Calculate the **base** real (`a,b,c`) and reciprocal (`a*,b*,c*`) vectors from the six unit cell parameters in a canonical orientation.\n   188→    2.  Apply the static misset rotation matrix to **only the reciprocal vectors** (`a*,b*,c*`).\n   189→    3.  **Crucially, recalculate the real-space vectors (`a,b,c`) from the newly rotated reciprocal vectors** using the standard crystallographic relationship (e.g., `a = (b* x c*) * V`).\n   190→    4.  These recalculated, misset-aware real-space vectors are then passed to the dynamic rotation pipeline (`get_rotated_real_vectors`) and are ultimately used in the simulator's Miller index calculation (`h = S·a`).\n   191→\n   192→    **Rationale:** This specific sequence is how `nanoBragg.c` ensures the static orientation is correctly propagated. Any deviation will cause the simulation to fail validation against the golden test cases.\n   193→\n   194→13. **Reciprocal Vector Recalculation for Self-Consistency**\n   195→\n   196→    **The C-code performs a circular recalculation that MUST be replicated for exact metric duality.** After building initial reciprocal vectors and calculating real vectors from them, the C-code recalculates the reciprocal vectors using the standard formula.\n   197→\n   198→    The complete sequence is:\n   199→    1. Build initial reciprocal vectors using the default orientation convention\n   200→    2. Calculate real vectors from reciprocal: `a = (b* × c*) × V`\n   201→    3. **Recalculate reciprocal vectors from real**: `a* = (b × c) / V_actual`\n   202→    4. **Use actual volume**: `V_actual = a · (b × c)` instead of the formula volume\n   203→\n   204→    **Critical:** The volume from the actual vectors differs slightly (~0.6% for triclinic cells) from the formula volume. Using V_actual ensures perfect metric duality (a·a* = 1 exactly).\n   205→\n   206→    **Verification:** The `test_metric_duality` test must pass with `rtol=1e-12`.\n   207→\n   208→14. **Mandatory Component Contracts:** For any non-trivial component port (e.g., `Detector`, `Crystal`), the first step of the implementation phase **MUST** be to author (or consult, if it exists) a complete technical specification in `docs/architecture/[component_name].md`. This contract is the authoritative source for all conventions, units, and logic flows. Implementation must not begin until this document is complete.\n   209→\n   210→15. **Detector Geometry Conventions:** The Detector component follows specific conventions that **MUST** be preserved:\n   211→    -   **Coordinate System:** Lab frame with beam along +X axis, right-handed system, sample at origin\n   212→    -   **Pixel Indexing:** `(slow, fast)` order using `torch.meshgrid(..., indexing=\"ij\")`\n   213→    -   **Pixel Reference:** Integer indices refer to pixel **leading edge/corner**, not center\n   214→    -   **Rotation Order:** detector_rotx → detector_roty → detector_rotz → detector_twotheta\n   215→    -   **Convention Dependency:** MOSFLM vs XDS affects initial basis vectors and twotheta axis\n   216→    -   **Unit Handling:** User config in mm/degrees, internal calculations in Angstroms/radians\n   217→    -   **Pivot Modes:** BEAM pivot (around beam spot) vs SAMPLE pivot (around sample position)\n   218→    -   **Verification:** All detector tests must pass, including basis vector orthonormality and gradient flow\n   219→\n   220→16. **PyTorch Device & Dtype Neutrality:** Implementation MUST work for CPU and GPU tensors and for all supported dtypes without silent device transfers.\n   221→    -   **Action:** Accept tensors on whatever device/dtype the caller provides; use helper utilities (`to()`/`type_as()`) to coerce internal temporaries to the dominant device/dtype instead of hard-coding `.cpu()`/`.cuda()` or allocating new CPU tensors mid-pipeline.\n   222→    -   **Verification:** Add (or update) smoke tests that exercise both CPU and CUDA execution whenever a code path touches tensor math; at minimum, run the authoritative command once with `device=cpu` and once with `device=cuda` (when available) before marking work complete. Treat any Dynamo/compile warnings about mixed devices as failures to resolve immediately.\n   223→    -   **Forbidden:** Leaving datasets, constants, or configuration tensors on default CPU while multiplying by GPU intermediates; relying on implicit device promotion; assuming float64/CPU execution in production paths.\n   224→    -   **Scope:** This applies across the project and to any future PyTorch work you undertake—make code device/dtype agnostic by default.\n   225→\n   226→17. **Tooling & Benchmark Placement:** Benchmark, profiling, and diagnostic scripts SHALL live under structured tooling directories (`scripts/benchmarks/`, `scripts/profiling/`, etc.) and follow the repo’s CLI/env conventions.\n   227→    -   **Action:** When creating or modifying benchmarking utilities, place them under `scripts/…`, require `KMP_DUPLICATE_LIB_OK=TRUE`, resolve binaries via the documented precedence, and record authoritative commands in `docs/development/testing_strategy.md` (or the relevant tooling index).\n   228→    -   **Forbidden:** Dropping standalone benchmarking files in the repo root or bypassing the editable-install expectation with ad-hoc `sys.path` tweaks.\n   229→    -   **Verification:** Update `docs/fix_plan.md` (Suite/Tooling section) with reproduction commands and results every time a benchmark uncovers an issue; ensure CI/docs reference the canonical script location.\n   230→\n   231→## Crystallographic Conventions\n   232→\n   233→This project adheres to the `|G| = 1/d` convention, where `G = h*a* + k*b* + l*c*`. This is equivalent to the `|Q| = 2π/d` convention where `Q = 2πG`. All tests and calculations must be consistent with this standard.\n   234→\n   235→**Default Orientation Matrix**: The project uses the nanoBragg.c convention for constructing the default orientation of reciprocal lattice vectors from cell parameters:\n   236→- a* is placed purely along the x-axis\n   237→- b* is placed in the x-y plane  \n   238→- c* fills out 3D space\n   239→\n   240→This specific orientation must be maintained for consistency with the C-code implementation.\n   241→\n   242→## Golden Test Case Specification (`simple_cubic`)\n   243→\n   244→**The exact `nanoBragg.c` commands used to generate all golden reference data are centrally documented in `tests/golden_data/README.md`. That file is the single source of truth for reproducing the test suite.**\n   245→\n   246→The following parameters for the `simple_cubic` case are provided for quick reference and context. These are the ground truth for the baseline validation milestone.\n   247→\n   248→* **Detector Size:** `1024 x 1024` pixels\n   249→* **Pixel Size:** `0.1` mm\n   250→* **Detector Distance:** `100` mm\n   251→* **Beam Center:** `(512.5, 512.5)` pixels (derived from detector size and beam position)\n   252→* **Wavelength (`lambda`):** `6.2` Å\n   253→* **Crystal Cell:** `100 x 100 x 100` Å, `90, 90, 90` degrees\n   254→* **Crystal Size (`-N`):** `5 x 5 x 5` cells\n   255→* **Default Structure Factor (`-default_F`):** `100`\n   256→\n   257→## Repository Overview\n   258→\n   259→This repository contains **nanoBragg**, a C-based diffraction simulator for nanocrystals, along with comprehensive documentation for a planned PyTorch port. The codebase consists of:\n   260→\n   261→- **Core C simulators**: `nanoBragg.c` (main diffraction simulator), `nonBragg.c` (amorphous scattering), `noisify.c` (noise addition)\n   262→- **PyTorch port documentation**: Complete architectural design and implementation plan in `./docs/`\n   263→- **Auxiliary tools**: Shell scripts for data conversion and matrix generation\n   264→\n   265→## Build Commands\n   266→\n   267→### C Code Compilation\n   268→```bash\n   269→# Standard build\n   270→gcc -O3 -o nanoBragg nanoBragg.c -lm -fopenmp\n   271→\n   272→# Build other simulators\n   273→gcc -O3 -o nonBragg nonBragg.c -lm\n   274→gcc -O3 -o noisify noisify.c -lm\n   275→```\n   276→\n   277→### Binaries and Instrumentation (IMPORTANT)\n   278→- Treat the root `./nanoBragg` as a frozen reference binary; do not rebuild it for tracing.\n   279→- Build and recompile any instrumented C binary under `golden_suite_generator/` (e.g., `./golden_suite_generator/nanoBragg`).\n   280→- Always invoke the C runner via `NB_C_BIN`:\n   281→  - Recommended: `export NB_C_BIN=./golden_suite_generator/nanoBragg`\n   282→  - Alternative: `export NB_C_BIN=./nanoBragg`\n   283→- Tooling (e.g., comparison scripts) SHOULD resolve the C runner in this order:\n   284→  1) `--c-bin` arg if provided\n   285→  2) `NB_C_BIN` env var\n   286→  3) `./golden_suite_generator/nanoBragg` if present\n   287→  4) `./nanoBragg`\n   288→  5) Otherwise, error with guidance\n   289→\n   290→### No Testing Framework\n   291→The repository currently uses manual validation through example runs and visual inspection. No automated test suite exists for the C code.\n   292→\n   293→## Core Architecture\n   294→\n   295→### C Implementation Structure\n   296→- **Single-file architecture**: All core logic in `nanoBragg.c` (~49k lines)\n   297→- **Procedural design**: Sequential execution through main() function\n   298→- **Three-phase execution**:\n   299→  1. **Setup Phase**: Parse arguments, load files, initialize geometry\n   300→  2. **Simulation Loop**: Nested loops over pixels, sources, mosaic domains, phi steps\n   301→  3. **Output Phase**: Apply scaling, add noise, write image files\n   302→\n   303→### Key Data Flow\n   304→1. **Input**: Structure factors (HKL file), crystal orientation (matrix file), beam/detector parameters\n   305→2. **Core calculation**: For each detector pixel, sum contributions from all source points, mosaic domains, and phi steps\n   306→3. **Output**: SMV-format diffraction images with optional noise\n   307→\n   308→### OpenMP Parallelization\n   309→- Single `#pragma omp parallel for` directive on outer pixel loop\n   310→- Shared read-only data (geometry, structure factors)\n   311→- Private per-thread variables for calculations\n   312→- Reduction clauses for global statistics\n   313→\n   314→## PyTorch Port Design\n   315→\n   316→The `./docs/` directory contains a complete architectural design for a PyTorch reimplementation:\n   317→\n   318→### Key Design Principles\n   319→- **Vectorization over loops**: Replace nested C loops with broadcasting tensor operations\n   320→- **Object-oriented structure**: `Crystal`, `Detector`, `Simulator` classes\n   321→- **Differentiable parameters**: Enable gradient-based optimization. **(See Core Implementation Rules above)**\n   322→- **GPU acceleration**: Leverage PyTorch's CUDA backend\n   323→- **Consistent Units**: All internal calculations use Angstroms. **(See Core Implementation Rules above)**\n   324→\n   325→### Critical Documentation Files\n   326→**Architecture & Design:**\n   327→- `docs/architecture/pytorch_design.md`: Core system architecture, vectorization strategy, class design, memory management\n   328→- `docs/development/implementation_plan.md`: Phased development roadmap with specific tasks and deliverables\n   329→- `docs/development/testing_strategy.md`: Three-tier validation approach (translation correctness, gradient correctness, scientific validation)\n   330→\n   331→**C Code Analysis:**\n   332→- `docs/architecture/c_code_overview.md`: Original C codebase structure, execution flow, and design patterns\n   333→- `docs/architecture/c_function_reference.md`: Complete function-by-function reference with porting guidance\n   334→- `docs/architecture/c_parameter_dictionary.md`: All command-line parameters mapped to internal C variables\n   335→\n   336→**Advanced Topics:**\n   337→- `docs/architecture/parameter_trace_analysis.md`: End-to-end parameter flow analysis for gradient interpretation\n   338→- `docs/development/processes.xml`: Standard Operating Procedures for development workflow\n   339→\n   340→### Testing Strategy (PyTorch Port)\n   341→1. **Tier 1**: Numerical equivalence with instrumented C code (\"Golden Suite\")\n   342→2. **Tier 2**: Gradient correctness via `torch.autograd.gradcheck`\n   343→3. **Tier 3**: Scientific validation against physical principles\n   344→\n   345→## Common Usage Patterns\n   346→\n   347→### Basic Simulation\n   348→```bash\n   349→# Generate structure factors from PDB\n   350→getcif.com 3pcq\n   351→refmac5 hklin 3pcq.mtz xyzin 3pcq.pdb hklout refmacout.mtz xyzout refmacout.pdb\n   352→mtz_to_P1hkl.com refmacout.mtz FC_ALL_LS\n   353→\n   354→# Create orientation matrix\n   355→./UBtoA.awk << EOF | tee A.mat\n   356→CELL 281 281 165.2 90 90 120 \n   357→WAVE 6.2\n   358→RANDOM\n   359→EOF\n   360→\n   361→# Run simulation\n   362→\"$NB_C_BIN\" -hkl P1.hkl -matrix A.mat -lambda 6.2 -N 10\n   363→```\n   364→\n   365→### SAXS Simulation\n   366→```bash\n   367→# Single unit cell with interpolation\n   368→\"$NB_C_BIN\" -mat bigcell.mat -hkl P1.hkl -lambda 1 -N 1 -distance 1000 -detsize 100 -pixel 0.1\n   369→```\n   370→\n   371→## File I/O Conventions\n   372→\n   373→### Input Files\n   374→- **HKL files**: Plain text format `h k l F` (one reflection per line)\n   375→- **Matrix files**: MOSFLM-style orientation matrices (9 values for reciprocal vectors)\n   376→- **STOL files**: Structure factor vs sin(θ)/λ for amorphous materials\n   377→\n   378→### Output Files\n   379→- **floatimage.bin**: Raw 4-byte float intensities\n   380→- **intimage.img**: SMV-format noiseless image\n   381→- **noiseimage.img**: SMV-format with Poisson noise\n   382→- **image.pgm**: 8-bit grayscale for visualization\n   383→\n   384→## Development Workflow\n   385→\n   386→### Standard Operating Procedures\n   387→**IMPORTANT**: For all non-trivial development tasks, consult `docs/development/processes.xml` which contains comprehensive Standard Operating Procedures (SOPs) for:\n   388→- Task planning and decomposition\n   389→- Test-driven development\n   390→- Bug fixing and verification\n   391→- Documentation updates\n   392→- Large-scale refactoring\n   393→\n   394→The SOPs emphasize:\n   395→- **Checklist-driven approach**: Use TodoWrite/TodoRead tools for task management\n   396→- **Plan before acting**: Create detailed plans before implementation\n   397→- **Verify then commit**: Always run tests before committing changes\n   398→- **Subagent scaling**: Use specialized subagents for complex or parallelizable tasks\n   399→\n   400→### For C Code Changes\n   401→1. Modify source files directly\n   402→2. Recompile with appropriate flags\n   403→3. Test with known examples from README\n   404→4. Validate output visually with ADXV or similar\n   405→\n   406→### For PyTorch Port Development\n   407→**Primary References:**\n   408→- `docs/development/implementation_plan.md`: Detailed phase-by-phase development plan\n   409→- `docs/architecture/pytorch_design.md`: System architecture and vectorization approach\n   410→- `docs/development/testing_strategy.md`: Comprehensive validation methodology\n   411→\n   412→**Implementation Order:**\n   413→1. **Phase 1**: Implement utility functions (`utils/geometry.py`, `utils/physics.py`)\n   414→2. **Phase 2**: Build core data models (`Crystal`, `Detector` classes) \n   415→3. **Phase 3**: Implement `Simulator` class and main executable\n   416→4. **Phase 4**: Add differentiable capabilities and validation\n   417→\n   418→**Key Implementation Guidelines:**\n   419→- Use `docs/architecture/c_function_reference.md` for porting individual C functions\n   420→- Reference `docs/architecture/c_parameter_dictionary.md` for parameter mapping\n   421→- Consult `docs/architecture/parameter_trace_analysis.md` for understanding gradient flow\n   422→- Follow testing strategy in `docs/development/testing_strategy.md` for validation\n   423→\n   424→## Memory and Performance Considerations\n   425→\n   426→### C Implementation\n   427→- Memory usage scales with detector size and simulation complexity\n   428→- CPU parallelization via OpenMP (typically 4-16 cores)\n   429→- Large structure factor tables cached in memory\n   430→\n   431→### PyTorch Port\n   432→- Memory-intensive vectorization strategy with batching fallback\n   433→- GPU acceleration for tensor operations\n   434→- **Default precision: float32** (configurable via explicit dtype override; use float64 for gradient checks)\n   435→- Batching support for memory management\n   436→\n   437→## ⚡ Common Commands & Workflow\n   438→\n   439→To improve efficiency, use these standard commands for common tasks.\n   440→\n   441→### Testing Commands\n   442→- **List all available tests:**\n   443→  `pytest --collect-only`\n   444→- **Run the full test suite:**\n   445→  `env KMP_DUPLICATE_LIB_OK=TRUE pytest -v` (run from the repository root)\n   446→- **Run acceptance tests:**\n   447→  `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_*.py -v`\n   448→- **Run parallel validation tests (C-PyTorch equivalence):**\n   449→  `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_parallel_*.py -v`\n   450→- **Run a specific test function:**\n   451→  `# Format: pytest -v <file_path>::<ClassName>::<test_function_name>`\n   452→  `pytest -v tests/test_suite.py::TestTier1TranslationCorrectness::test_simple_cubic_reproduction`\n   453→- **Install the package in editable mode:**\n   454→  `pip install -e .`\n   455→\n   456→### Debugging Commands\n   457→- **Run the pixel trace debug script:**\n   458→  `KMP_DUPLICATE_LIB_OK=TRUE python scripts/debug_pixel_trace.py`\n   459→- **Generate C trace for debugging:**\n   460→  ```bash\n   461→  # 1. Add printf statements to nanoBragg.c for variables of interest\n   462→  # 2. Recompile: make -C golden_suite_generator\n   463→  # 3. Run with test parameters:\n   464→  ./golden_suite_generator/nanoBragg [parameters] 2>&1 | grep \"TRACE_C:\" > c_trace.log\n   465→  ```\n   466→- **Compare golden reference data:**\n   467→  See [`tests/golden_data/README.md`](./tests/golden_data/README.md) for exact commands\n   468→- **Lint parity coverage documentation:**\n   469→  `python scripts/lint_parity_coverage.py`\n   470→  Validates spec → matrix → YAML consistency and identifies missing coverage\n   471→\n   472→## Domain-Specific Context\n   473→\n   474→This is scientific simulation software for **X-ray crystallography** and **small-angle scattering (SAXS)**. Key physical concepts:\n   475→- **Bragg diffraction**: Constructive interference from crystal lattice\n   476→- **Structure factors**: Fourier transform of electron density\n   477→- **Mosaicity**: Crystal imperfection modeling\n   478→- **Ewald sphere**: Geometric construction for diffraction condition\n   479→\n   480→The software is used in structural biology, materials science, and synchrotron/X-ray free-electron laser facilities.\n   481→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"6b5f7e09-f6d7-4080-9bd7-182993410d0e"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01GG2JPaKgAmMpx4UV3L75eU","type":"message","role":"assistant","content":[{"type":"text","text":"Let me read the fix_plan.md file with offset and limit to understand the current tasks:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":10811,"cache_creation_input_tokens":31871,"cache_read_input_tokens":28641,"cache_creation":{"ephemeral_5m_input_tokens":31871,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3b9713fd-7466-4d4b-8f28-53130852ee0b"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01GG2JPaKgAmMpx4UV3L75eU","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_018oBUt39BHjezon7kXJquxT","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md","offset":1,"limit":100}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":10811,"cache_creation_input_tokens":31871,"cache_read_input_tokens":28641,"cache_creation":{"ephemeral_5m_input_tokens":31871,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"d9b45246-97dc-4c9f-9267-e76562849232"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018oBUt39BHjezon7kXJquxT","type":"tool_result","content":"     1→# Fix Plan Ledger\n     2→\n     3→**Last Updated:** 2025-10-22 (ralph loop #103)\n     4→**Active Focus:**\n     5→- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.\n     6→- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.\n     7→- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.\n     8→- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.\n     9→- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.\n    10→- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).\n    11→\n    12→## Index\n    13→| ID | Title | Priority | Status |\n    14→| --- | --- | --- | --- |\n    15→| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |\n    16→| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |\n    17→| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |\n    18→| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |\n    19→| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |\n    20→| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |\n    21→| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |\n    22→| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |\n    23→| [SOURCE-WEIGHT-001](#source-weight-001-correct-weighted-source-normalization) | Correct weighted source normalization | Medium | in_planning |\n    24→| [ROUTING-LOOP-001](#routing-loop-001-loopsh-routing-guard) | loop.sh routing guard | High | done |\n    25→| [ROUTING-SUPERVISOR-001](#routing-supervisor-001-supervisorsh-automation-guard) | supervisor.sh automation guard | High | in_progress |\n    26→\n    27→---\n    28→\n    29→\n    30→\n    31→## [PROTECTED-ASSETS-001] docs/index.md safeguard\n    32→- Spec/AT: Protected assets rule in `CLAUDE.md`; automation guard for files listed in `docs/index.md`\n    33→- Priority: Medium\n    34→- Status: in_progress\n    35→- Owner/Date: galph/2025-09-30\n    36→- Reproduction (C & PyTorch):\n    37→  * C: n/a (documentation/policy enforcement)\n    38→  * PyTorch: n/a\n    39→  * Shapes/ROI: n/a\n    40→- First Divergence (if known): n/a — policy task\n    41→- Attempts History:\n    42→  * [2025-09-30] Attempt #1 — Result: partial. Added Protected Assets rule to `CLAUDE.md` and marked `loop.sh` as protected in `docs/index.md`; plan still needs to ensure hygiene checklists reference the rule.\n    43→    Metrics: n/a\n    44→    Artifacts: CLAUDE.md, docs/index.md (git history).\n    45→    Observations/Hypotheses: Hygiene plans must require a docs/index.md scan before deletions; Ralph previously removed `loop.sh` during cleanup because this guard was missing.\n    46→    Next Actions: Update `plans/active/repo-hygiene-002/plan.md` task H4 guidance to reference Protected Assets, then verify the checklist is followed in the next hygiene pass.\n    47→  * [2025-09-30] Attempt #2 — Result: success. Verified Protected Assets rule is properly documented in `CLAUDE.md` (lines 26-28) and `docs/index.md` references `loop.sh` as protected asset. REPO-HYGIENE-002 completed with canonical C file intact.\n    48→    Metrics: Test suite verification — 55 passed, 4 skipped in 37.12 s (crystal geometry 19/19, detector geometry 12/12, AT-PARALLEL tests passing).\n    49→    Artifacts: CLAUDE.md (Protected Assets Rule section), docs/index.md (loop.sh marked as protected).\n    50→    Observations/Hypotheses: Rule is effectively enforced; hygiene tasks now reference docs/index.md before deletions.\n    51→    Next Actions: Capture proof-of-compliance during the next hygiene loop and keep plan cross-references fresh.\n    52→  * [2025-10-07] Attempt #3 — Result: reopened (supervisor audit). Plan H4 still lacked an explicit Protected Assets checklist and no verification log was archived, so compliance cannot yet be proven.\n    53→    Metrics: Analysis only.\n    54→    Artifacts: plans/active/repo-hygiene-002/plan.md (pending update); verification log to be captured under `reports/repo-hygiene/` during next hygiene pass.\n    55→    Observations/Hypotheses: Without a recorded checklist and artifact, future cleanup could again delete protected files.\n    56→    Next Actions: Update plan task H4 with the mandatory docs/index.md scan, then record a compliance log during the next REPO-HYGIENE-002 execution.\n    57→- Risks/Assumptions: Future cleanup scripts must fail-safe against removing listed assets; ensure supervisor prompts reinforce this rule.\n    58→- Exit Criteria (quote thresholds from spec):\n    59→  * CLAUDE.md and docs/index.md enumerate the rule (✅ already satisfied).\n    60→  * Every hygiene-focused plan (e.g., REPO-HYGIENE-002) explicitly checks docs/index.md before deletions.\n    61→  * Verification log links demonstrating the rule was honored during the next hygiene loop.\n    62→\n    63→---\n    64→\n    65→## [REPO-HYGIENE-002] Restore canonical nanoBragg.c\n    66→- Spec/AT: Repository hygiene SOP (`docs/development/processes.xml` §C-parity) & commit 92ac528 regression follow-up\n    67→- Priority: Medium\n    68→- Status: in_progress\n    69→- Owner/Date: galph/2025-09-30\n    70→- Reproduction (C & PyTorch):\n    71→  * C: `git show 92ac528^:golden_suite_generator/nanoBragg.c > /tmp/nanoBragg.c.ref`\n    72→  * PyTorch: `env KMP_DUPLICATE_LIB_OK=TRUE pytest -v tests/test_parity_matrix.py -k \"AT-PARALLEL-021 or AT-PARALLEL-024\"`\n    73→  * Shapes/ROI: 1024×1024 detector, pixel 0.1 mm, full-frame ROI\n    74→- First Divergence (if known): n/a — hygiene task\n    75→- Attempts History:\n    76→  * [2025-09-30] Attempt #1 — Result: partial. Removed nested `golden_suite_generator/golden_suite_generator/` directory and archived `reports/2025-09-30-AT-021-traces`, but deleted `loop.sh` (a protected asset) before the rule existed; item reopened.\n    77→    Metrics: AT-021/024 parity corr=1.0; parity run 20.38 s.\n    78→    Artifacts: reports/archive/2025-09-30-AT-021-traces/\n    79→    Observations/Hypotheses: Need to restore canonical `nanoBragg.c` from 92ac528^ and execute plan tasks H1–H6 without touching protected assets.\n    80→    Next Actions: Complete plan H1–H6 (baseline snapshot, restore canonical file, purge stray reports, rerun parity smoke tests, log closure).\n    81→  * [2025-09-30] Attempt #2 — Result: success. Verified repository already complied with H1–H6: canonical C file matched 92ac528^, stale traces archived, parity harness green.\n    82→    Metrics: AT-021/024 parity 4/4 passed in 26.49 s; `golden_suite_generator/nanoBragg.c` byte-equal to pristine reference (4579 lines).\n    83→    Artifacts: `/tmp/nanoBragg.c.ref` (baseline snapshot), `reports/archive/2025-09-30-AT-021-traces/` (archived traces).\n    84→    Observations/Hypotheses: Cleanup succeeded once Protected Assets guard installed; plan ready to archive after documenting completion.\n    85→    Next Actions: Record closure in plan notes and keep baseline snapshot for future hygiene audits.\n    86→  * [2025-10-07] Attempt #3 — Result: supervisor audit. Confirmed canonical `nanoBragg.c` still diverges from 92ac528^, `reports/2025-09-30-AT-021-traces/` remains under repo root, and a stray top-level `fix_plan.md` (duplicate of docs version) persists. These artefacts keep Plan H1–H4 open and continue to block clean rebases.\n    87→    Metrics: Analysis only.\n    88→    Artifacts: n/a (inspection via `git status` + manual file checks).\n    89→    Observations/Hypotheses: Root-level `fix_plan.md` should be deleted alongside stale reports once Protected Assets guard is followed; restoring `golden_suite_generator/nanoBragg.c` first avoids churn when parity reruns.\n    90→    Next Actions: Execute plan tasks H1–H4 on a dedicated branch: capture baseline file (`git show 92ac528^:golden_suite_generator/nanoBragg.c`), restore it locally, archive `reports/2025-09-30-AT-021-traces/` under `reports/archive/`, remove the duplicate `fix_plan.md`, then run H5 parity smoke before logging completion in H6.\n    91→  * [2025-10-01] Attempt #4 — Result: success. Executed plan tasks H1–H5 and verified all exit criteria met.\n    92→    Metrics: AT-021/024 parity 4/4 passed in 23.18 s; canonical C file byte-identical to 92ac528^ (4579 lines); stale `reports/2025-09-30-AT-021-traces/` confirmed absent (no cleanup needed); duplicate `fix_plan.md` removed.\n    93→    Artifacts: `/tmp/nanoBragg.c.ref` (baseline snapshot for future audits); parity test logs (pytest stdout).\n    94→    Observations/Hypotheses: Repository now complies with all hygiene requirements. Canonical C file maintained, no stray artifacts, parity harness green. Protected Assets Rule honored (no `loop.sh` or index-referenced files touched).\n    95→    Next Actions: None - item closed successfully. Keep baseline snapshot for future hygiene audits.\n    96→- Risks/Assumptions: Ensure Protected Assets guard is honored before deleting files; parity harness must remain green after cleanup.\n    97→- Exit Criteria (quote thresholds from spec):\n    98→  * Canonical `golden_suite_generator/nanoBragg.c` matches 92ac528^ exactly (byte-identical).\n    99→  * Reports from 2025-09-30 relocated under `reports/archive/`.\n   100→  * `NB_RUN_PARALLEL=1` parity smoke (`AT-PARALLEL-021`, `AT-PARALLEL-024`) passes without diff.\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"36b153e7-cc12-4255-bca4-1272445e6b35"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01YFsyy2yBZfdrzFczELEHMe","type":"message","role":"assistant","content":[{"type":"text","text":"Now let me read the active vectorization plan and check the current state:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":14468,"cache_read_input_tokens":60512,"cache_creation":{"ephemeral_5m_input_tokens":14468,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"407f12d5-2700-442d-b537-3502ed872c44"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01YFsyy2yBZfdrzFczELEHMe","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01JXp5JSC2DcQieF1WNXLB4N","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/plans/active/vectorization.md","offset":1,"limit":150}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":14468,"cache_read_input_tokens":60512,"cache_creation":{"ephemeral_5m_input_tokens":14468,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"5be5dcb6-ca80-41f9-b93f-78bca5e2a100"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01JXp5JSC2DcQieF1WNXLB4N","type":"tool_result","content":"     1→## Context\n     2→- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].\n     3→- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.\n     4→- Dependencies:\n     5→  - specs/spec-a-core.md §4 (structure-factor sampling contract)\n     6→  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)\n     7→  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)\n     8→  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)\n     9→  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)\n    10→  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)\n    11→  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`\n    12→- Status Snapshot (2025-11-27): Phases A–C complete with gather vectorization merged (commit 12742e5). Polynomial helpers still scalar; detector absorption remains looped. Phase D is the active gate before parity/perf validation (Phase E) and absorption work (Phase F).\n    13→- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.\n    14→\n    15→### Phase A — Evidence & Baseline Capture\n    16→Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.\n    17→Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.\n    18→Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.\n    19→\n    20→| ID | Task Description | State | How/Why & Guidance |\n    21→| --- | --- | --- | --- |\n    22→| A1 | Re-run tricubic acceptance tests | [D] | ✅ Attempt #1 (2025-10-06). Artifacts: `reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`. |\n    23→| A2 | Measure current tricubic runtime | [D] | ✅ Attempt #2 (2025-10-07). Harness: `scripts/benchmarks/tricubic_baseline.py`; metrics in `phase_a/tricubic_baseline.md` & `tricubic_baseline_results.json`. |\n    24→| A3 | Record detector absorption baseline | [D] | ✅ Attempt #2 (2025-10-07). Harness: `scripts/benchmarks/absorption_baseline.py`; metrics in `phase_a/absorption_baseline.md` & `absorption_baseline_results.json`. |\n    25→\n    26→### Phase B — Tricubic Vectorization Design\n    27→Goal: Finalise tensor-shape, broadcasting, and differentiability design ahead of implementation.\n    28→Prereqs: Phase A evidence captured and logged.\n    29→Exit Criteria: Completed design memo plus grad/device checklist; fix_plan updated with references.\n    30→\n    31→| ID | Task Description | State | How/Why & Guidance |\n    32→| --- | --- | --- | --- |\n    33→| B1 | Derive tensor shapes & broadcasting plan | [D] | ✅ Attempt #3 (2025-10-07). See `reports/2025-10-vectorization/phase_b/design_notes.md` §2. |\n    34→| B2 | Map C polin3 semantics to PyTorch ops | [D] | ✅ Attempt #3. Design notes §3 cites `nanoBragg.c:4021-4058`. |\n    35→| B3 | Gradient & dtype checklist | [D] | ✅ Attempt #3. Design notes §4 aligns with `pytorch_runtime_checklist.md`. |\n    36→\n    37→### Phase C — Neighborhood Gather Implementation\n    38→Goal: Replace scalar neighbour gathering with vectorised indexing in `Crystal._tricubic_interpolation` while retaining OOB fallbacks and graph connectivity.\n    39→Prereqs: Phase B design complete; tests discoverable.\n    40→Exit Criteria: Batched gather merged, unit/regression tests passing on CPU+CUDA, plan/fix_plan updated with evidence.\n    41→\n    42→| ID | Task Description | State | How/Why & Guidance |\n    43→| --- | --- | --- | --- |\n    44→| C1 | Implement batched neighbourhood gather | [D] | ✅ Attempt #15 (2025-10-07). Implementation notes: `reports/2025-10-vectorization/phase_c/implementation_notes.md`; code in `src/nanobrag_torch/models/crystal.py` (commit 12742e5). |\n    45→| C2 | Add gather-specific test suite | [D] | ✅ Attempt #15. `tests/test_tricubic_vectorized.py` + logs (`phase_c/test_tricubic_vectorized.log`, `gather_notes.md`). Includes CPU+CUDA device cases. |\n    46→| C3 | Regression + gradient/device smoke | [D] | ✅ Attempt #16 (2025-10-08). Artifacts: `phase_c/gradient_smoke.log`, `runtime_probe.json`, `status_snapshot.txt`; targeted pytest selectors recorded. |\n    47→\n    48→### Phase D — Polynomial Evaluation Vectorization (Active Gate)\n    49→Goal: Batch the 1D/2D/3D polynomial interpolation helpers (`polint`, `polin2`, `polin3`) so batched gathers avoid nearest-neighbour fallback.\n    50→Prereqs: Phase C output confirmed; `design_notes.md` §3 ready; create `reports/2025-10-vectorization/phase_d/` directory.\n    51→Exit Criteria: Vectorised polynomial helpers integrated, CPU+CUDA tests passing, documentation + metrics captured.\n    52→\n    53→| ID | Task Description | State | How/Why & Guidance |\n    54→| --- | --- | --- | --- |\n    55→| D1 | Draft polynomial validation worksheet | [ ] | Create `phase_d/polynomial_validation.md` capturing tensor-shape derivations, broadcast diagrams, and mapping to `nanoBragg.c` code. Include plan for tap points (scalar vs batched) and cite design_notes §3. |\n    56→| D2 | Implement batched `polint`/`polin2`/`polin3` | [ ] | Modify `utils/physics.py` (or dedicated helper) ensuring `(B,4)` inputs broadcast to `(B,)` outputs. Add C reference docstrings per CLAUDE Rule #11. Preserve differentiability (no `.detach()`/`.item()`). |\n    57→| D3 | Add polynomial regression tests | [ ] | Extend `tests/test_tricubic_vectorized.py` with `TestTricubicPoly` covering scalar vs batched equivalence, gradient flow (`torch.autograd.gradcheck` in float64), and device parametrisation. Capture `pytest --collect-only` in `phase_d/collect.log` before targeted runs. |\n    58→| D4 | Execute targeted pytest sweep | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py tests/test_at_str_002.py -v` on CPU and (if available) CUDA. Store logs under `phase_d/pytest_cpu.log` and `phase_d/pytest_cuda.log`; update `polynomial_validation.md` with timing deltas. |\n    59→\n    60→### Phase E — Integration, Parity, and Performance Validation\n    61→Goal: Confirm the full tricubic interpolation path stays vectorised, maintains parity, and improves performance per PERF-PYTORCH-004 objectives.\n    62→Prereqs: Phase D tasks D1–D4 complete; nearest-neighbour fallback eliminated for batched queries.\n    63→Exit Criteria: Parity metrics (tests + nb-compare/ROI) pass, microbenchmarks show expected speedup, documentation + fix_plan updated.\n    64→\n    65→| ID | Task Description | State | How/Why & Guidance |\n    66→| --- | --- | --- | --- |\n    67→| E1 | Verify acceptance & regression tests | [ ] | Re-run `tests/test_at_str_002.py`, `tests/test_tricubic_vectorized.py`, and any affected gradient suites. Capture CPU/CUDA logs under `phase_e/pytest_cpu.log` & `phase_e/pytest_cuda.log`. Ensure `pytest --collect-only` evidence stored (`phase_e/collect.log`). |\n    68→| E2 | Run microbenchmarks post-vectorization | [ ] | Execute `scripts/benchmarks/tricubic_baseline.py` with `--outdir reports/2025-10-vectorization/phase_e/perf` (before/after metrics). Summarise deltas in `phase_e/perf_summary.md` and update `benchmark_results.json`. |\n    69→| E3 | Document parity/perf summary | [ ] | Produce `phase_e/summary.md` noting corr/Δ metrics vs scalar path, reference nb-compare outputs if used, and record gradient/device neutrality confirmation. Update docs/fix_plan attempt with metrics + artifact links. |\n    70→\n    71→### Phase F — Detector Absorption Vectorization\n    72→Goal: Batch detector absorption loops over `detector_thicksteps` and oversample dimensions, reusing the tricubic vectorization patterns while keeping physics parity.\n    73→Prereqs: Phase E exit criteria satisfied; confirm current absorption baseline artifacts (Phase A3) on hand.\n    74→Exit Criteria: Vectorised absorption in production path, tests/benchmarks passing, documentation updated.\n    75→\n    76→| ID | Task Description | State | How/Why & Guidance |\n    77→| --- | --- | --- | --- |\n    78→| F1 | Author absorption vectorization design | [ ] | Draft `phase_f/design_notes.md` (tensor layout, broadcasting, device/dtype considerations). Cite `nanoBragg.c:3375-3450` and detector spec docs. |\n    79→| F2 | Implement batched absorption | [ ] | Update `_apply_detector_absorption` (or equivalent) to operate on broadcast tensors (slow×fast×thicksteps). Add C reference docstrings and ensure differentiability. |\n    80→| F3 | Add regression + perf tests | [ ] | Extend `tests/test_at_abs_001.py` with device parametrisation; add targeted benchmarks via `scripts/benchmarks/absorption_baseline.py --outdir .../phase_f/perf`. Capture CPU/CUDA logs. |\n    81→| F4 | Summarise results + update fix_plan | [ ] | Document outcomes in `phase_f/summary.md`, note parity evidence (nb-compare if applicable), and update docs/fix_plan attempt history. |\n    82→\n    83→### Phase G — Documentation & Handoff\n    84→Goal: Ensure all vectorization changes are documented, reproducible, and integrated with performance guidance.\n    85→Prereqs: Phases D–F exit criteria met.\n    86→Exit Criteria: Architecture/runtime docs updated; fix_plan closed; supervisor input ready for performance initiative follow-ups.\n    87→\n    88→| ID | Task Description | State | How/Why & Guidance |\n    89→| --- | --- | --- | --- |\n    90→| G1 | Update docs & checklists | [ ] | Refresh `docs/development/pytorch_runtime_checklist.md` (if needed), `docs/architecture/pytorch_design.md`, and add lessons learned note. Record changes in docs/fix_plan. |\n    91→| G2 | Final attempt log & closure | [ ] | Log concluding Attempt in docs/fix_plan.md, summarise metrics, and mark [VECTOR-TRICUBIC-001] as done. Coordinate with PERF-PYTORCH-004 benchmarks for follow-up perf tasks. |\n    92→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"94618643-dd4d-41ef-95c3-94ef4ecfe39a"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01ERyrkewXctZ2Z4EGoTE7Ra","type":"message","role":"assistant","content":[{"type":"text","text":"Based on the `input.md`, I'm tasked with:\n\n**Do Now:** VECTOR-TRICUBIC-001 Phase D1 — draft `reports/2025-10-vectorization/phase_d/polynomial_validation.md` with tensor-shape + C-reference plan; run `pytest --collect-only -q tests/test_tricubic_vectorized.py` and capture output.\n\nThis is a **documentation mode** loop (Mode: Docs). Let me start by running the collect-only command and creating the directory structure."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":3507,"cache_read_input_tokens":74980,"cache_creation":{"ephemeral_5m_input_tokens":3507,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"f45340d5-f099-4830-97bf-2130c695931b"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01ERyrkewXctZ2Z4EGoTE7Ra","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01PLb8GCrqw8bAvhbnhqAHzS","name":"Bash","input":{"command":"mkdir -p reports/2025-10-vectorization/phase_d","description":"Create phase_d directory"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":3507,"cache_read_input_tokens":74980,"cache_creation":{"ephemeral_5m_input_tokens":3507,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"f9ffb1d4-1580-4d5d-a89a-9f9046618218"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01ERyrkewXctZ2Z4EGoTE7Ra","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01DYbHjjcPDmao2iVED857EQ","name":"Bash","input":{"command":"export KMP_DUPLICATE_LIB_OK=TRUE && pytest --collect-only -q tests/test_tricubic_vectorized.py 2>&1 | tee reports/2025-10-vectorization/phase_d/collect.log","description":"Run pytest collect-only for tricubic tests"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":3507,"cache_read_input_tokens":74980,"cache_creation":{"ephemeral_5m_input_tokens":3507,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"2a8b108f-3744-42d3-a03c-91623507c999"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01PLb8GCrqw8bAvhbnhqAHzS","type":"tool_result","content":"/home/ollie/.bash_profile: line 5: /home/ollie/.cargo/env: No such file or directory","is_error":false}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"fafa7efb-a324-438d-bc8e-7b849cbb7500"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01DYbHjjcPDmao2iVED857EQ","type":"tool_result","content":"tests/test_tricubic_vectorized.py::TestTricubicGather::test_vectorized_matches_scalar\ntests/test_tricubic_vectorized.py::TestTricubicGather::test_neighborhood_gathering_internals\ntests/test_tricubic_vectorized.py::TestTricubicGather::test_oob_warning_single_fire\ntests/test_tricubic_vectorized.py::TestTricubicGather::test_device_neutrality[cpu]\ntests/test_tricubic_vectorized.py::TestTricubicGather::test_device_neutrality[cuda]\n\n5 tests collected in 2.09s\n/home/ollie/.bash_profile: line 5: /home/ollie/.cargo/env: No such file or directory","is_error":false}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3d812f3f-7303-4fd9-b99d-9813b5c54d3c"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01QJ3ndu1qxVUfZbk8Xs23oy","type":"message","role":"assistant","content":[{"type":"text","text":"Good. Now I need to read the prior phase documentation to understand the context, then draft the polynomial validation worksheet. Let me read the key reference files:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":704,"cache_read_input_tokens":78487,"cache_creation":{"ephemeral_5m_input_tokens":704,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"2fc859fb-5033-4f6f-997a-9c86ed618b89"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01QJ3ndu1qxVUfZbk8Xs23oy","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01RRxCMWmK25RTFVAobNfAfT","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/reports/2025-10-vectorization/phase_b/design_notes.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":704,"cache_read_input_tokens":78487,"cache_creation":{"ephemeral_5m_input_tokens":704,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3da61bf2-178a-455e-8334-2089d92e8a9a"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01QJ3ndu1qxVUfZbk8Xs23oy","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01GgyUT3n5yd4V6sXtmLkrpG","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/reports/2025-10-vectorization/phase_c/implementation_notes.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":704,"cache_read_input_tokens":78487,"cache_creation":{"ephemeral_5m_input_tokens":704,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"a2d91bc1-7a79-4269-8bee-225ec4eae6aa"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01QJ3ndu1qxVUfZbk8Xs23oy","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01LtkN72xn4PmfzoMVEeLtk8","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/nanoBragg.c","offset":4020,"limit":100}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":704,"cache_read_input_tokens":78487,"cache_creation":{"ephemeral_5m_input_tokens":704,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"1f163a13-0359-4848-9442-b06d42aa8755"}
{"type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"<tool_use_error>File does not exist.</tool_use_error>","is_error":true,"tool_use_id":"toolu_01LtkN72xn4PmfzoMVEeLtk8"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"000837bd-174f-4f55-b164-631a5a482dac"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01GgyUT3n5yd4V6sXtmLkrpG","type":"tool_result","content":"     1→# Phase C1 Implementation Notes: Batched Neighborhood Gather\n     2→\n     3→**Date:** 2025-10-07\n     4→**Git SHA:** (to be recorded in fix_plan)\n     5→**Initiative:** VECTOR-TRICUBIC-001 (PERF-PYTORCH-004 backlog)\n     6→**Plan Reference:** `plans/active/vectorization.md` Phase C (tasks C1–C3)\n     7→**Design Reference:** `reports/2025-10-vectorization/phase_b/design_notes.md`\n     8→\n     9→---\n    10→\n    11→## Executive Summary\n    12→\n    13→Successfully implemented batched neighborhood gather (Phase C1) in `Crystal._tricubic_interpolation`. The implementation constructs `(B, 4, 4, 4)` structure factor neighborhoods for batched Miller index queries using advanced PyTorch indexing, eliminating the need for Python loops over query points.\n    14→\n    15→**Key Deliverable:** Infrastructure for vectorized tricubic interpolation is complete. Phase D (polynomial evaluation vectorization) can now consume the batched neighborhoods.\n    16→\n    17→---\n    18→\n    19→## Implementation Changes\n    20→\n    21→### File Modified: `src/nanobrag_torch/models/crystal.py`\n    22→\n    23→**Lines:** 355–429 (replaced scalar-only gather with batched implementation)\n    24→\n    25→**Key Changes:**\n    26→\n    27→1. **Batch Flattening:** All input Miller indices `(h, k, l)` with arbitrary shapes are flattened to `(B,)` where `B = total number of query points`.\n    28→\n    29→2. **Coordinate Grid Construction:** For each query point, build `(B, 4)` coordinate grids representing the 4×4×4 neighborhood:\n    30→   ```python\n    31→   offsets = torch.arange(-1, 3, device=self.device, dtype=torch.long)  # [-1, 0, 1, 2]\n    32→   h_grid_coords = h_flr_flat.unsqueeze(-1) + offsets  # (B, 4)\n    33→   ```\n    34→\n    35→3. **Advanced Indexing for Neighborhoods:** Use broadcasting to gather `(B, 4, 4, 4)` subcubes:\n    36→   ```python\n    37→   sub_Fhkl = self.hkl_data[\n    38→       h_array_grid[:, :, None, None],  # (B, 4, 1, 1)\n    39→       k_array_grid[:, None, :, None],  # (B, 1, 4, 1)\n    40→       l_array_grid[:, None, None, :]   # (B, 1, 1, 4)\n    41→   ]\n    42→   ```\n    43→\n    44→4. **Path Routing:**\n    45→   - **B=1 (scalar):** Use existing `polin3` helper (squeeze batch dim)\n    46→   - **B>1 (batched):** Fall back to nearest-neighbor until Phase D vectorizes `polin3`\n    47→\n    48→5. **Out-of-Bounds Handling:** Preserved existing OOB detection; warning emission occurs before flattening.\n    49→\n    50→---\n    51→\n    52→## Test Coverage\n    53→\n    54→### New Test File: `tests/test_tricubic_vectorized.py`\n    55→\n    56→**Test Suite:** `TestTricubicGather` with 4 test cases\n    57→\n    58→#### test_vectorized_matches_scalar\n    59→- **Purpose:** Validate batched gather produces correct neighborhoods\n    60→- **Coverage:** Scalar (B=1), batch (B=3), grid (S=2, F=3), edge OOB cases\n    61→- **Result:** ✅ PASSED (2.17s)\n    62→\n    63→#### test_neighborhood_gathering_internals\n    64→- **Purpose:** White-box test validating internal shapes and coordinate arrays\n    65→- **Coverage:** Flattening logic, coordinate grid construction, sample values\n    66→- **Result:** ✅ PASSED\n    67→\n    68→#### test_device_neutrality[cpu]\n    69→- **Purpose:** Verify CPU execution with correct device propagation\n    70→- **Result:** ✅ PASSED\n    71→\n    72→#### test_device_neutrality[cuda]\n    73→- **Purpose:** Verify CUDA execution with correct device propagation\n    74→- **Result:** ✅ PASSED (fixed device comparison: `.device.type` vs `.device`)\n    75→\n    76→### Regression Tests\n    77→\n    78→**File:** `tests/test_at_str_002.py` (existing tricubic interpolation tests)\n    79→\n    80→- `test_tricubic_interpolation_enabled` ✅ PASSED\n    81→- `test_tricubic_out_of_bounds_fallback` ✅ PASSED\n    82→- `test_auto_enable_interpolation` ✅ PASSED\n    83→\n    84→**Combined Core Suite:** 38/38 tests passed (crystal geometry, detector geometry, vectorized gather)\n    85→\n    86→---\n    87→\n    88→## Design Alignment\n    89→\n    90→### Conformance with design_notes.md\n    91→\n    92→| Design Requirement | Implementation Status | Notes |\n    93→|--------------------|----------------------|-------|\n    94→| **Section 2.2:** `(B, 4, 4, 4)` output shape | ✅ Complete | Advanced indexing produces correct shape |\n    95→| **Section 2.3:** `(B, 4)` coordinate arrays | ✅ Complete | `h_indices`, `k_indices`, `l_indices` for Phase D |\n    96→| **Section 2.6:** Broadcasting pattern | ✅ Complete | Followed exact indexing pattern from design |\n    97→| **Section 4.1:** Differentiability | ✅ Preserved | No `.item()` calls; tensors stay on graph |\n    98→| **Section 4.2:** Device neutrality | ✅ Verified | CPU + CUDA tests pass |\n    99→| **Section 5.1:** OOB fallback | ✅ Preserved | Single warning emission, default_F fallback |\n   100→\n   101→### Outstanding Work (Phase D Prerequisites)\n   102→\n   103→- **Polynomial Vectorization:** `polint`, `polin2`, `polin3` helpers still expect scalar inputs\n   104→- **Batched Path Activation:** Currently falls back to nearest-neighbor for B>1\n   105→- **Performance Benchmarking:** Phase E will measure speedup gains\n   106→\n   107→---\n   108→\n   109→## Numerical Validation\n   110→\n   111→### Shape Assertions\n   112→\n   113→All tests verify correct tensor shapes:\n   114→- Scalar input `(1,)` → gather `(1, 4, 4, 4)` → output `(1,)`\n   115→- Batch input `(3,)` → gather `(3, 4, 4, 4)` → output `(3,)`\n   116→- Grid input `(2, 3)` → flatten `(6,)` → gather `(6, 4, 4, 4)` → reshape output `(2, 3)`\n   117→\n   118→### Coordinate Validation\n   119→\n   120→White-box test confirmed:\n   121→- For `h=1.5` (floor=1), coordinate grid is `[0, 1, 2, 3]` (= floor + offsets)\n   122→- Flattening preserves query points: `(1, 2)` → `(B=2,)`\n   123→\n   124→### Device Propagation\n   125→\n   126→- Input tensors on `device=\"cuda\"` → neighborhoods gathered on CUDA → output on CUDA\n   127→- No silent CPU↔CUDA transfers detected\n   128→\n   129→---\n   130→\n   131→## Performance Characteristics\n   132→\n   133→### Memory Footprint (Phase C1 Infrastructure)\n   134→\n   135→| Detector Size | B (pixels) | sub_Fhkl Shape | Memory (float32) |\n   136→|---------------|-----------|----------------|------------------|\n   137→| 512×512       | 262,144   | (262144, 4, 4, 4) | ~67 MB |\n   138→| 1024×1024     | 1,048,576 | (1048576, 4, 4, 4) | ~268 MB |\n   139→| 2048×2048     | 4,194,304 | (4194304, 4, 4, 4) | ~1.07 GB |\n   140→\n   141→**Observation:** Memory scales linearly with detector size. No OOM issues detected during testing.\n   142→\n   143→### Execution Time (Baseline for Phase E)\n   144→\n   145→**Current Status:** Phase C1 gathers neighborhoods but falls back to nearest-neighbor for B>1.\n   146→- Scalar path (B=1): Uses existing `polin3` → interpolation works\n   147→- Batched path (B>1): Falls back to `_nearest_neighbor_lookup` → no speedup yet\n   148→\n   149→**Phase E Goal:** After Phase D vectorizes polynomial evaluation, measure speedup vs. current fallback.\n   150→\n   151→---\n   152→\n   153→## Code Quality Checklist\n   154→\n   155→- [x] **No Python loops over batch dimension:** All operations use tensor broadcasting\n   156→- [x] **Device-neutral:** Offsets and grids inherit device from input tensors\n   157→- [x] **Differentiability preserved:** No `.item()` or `.detach()` calls on grad tensors\n   158→- [x] **Backward compatible:** Scalar path (B=1) unchanged; existing tests pass\n   159→- [x] **Clear comments:** Implementation cites design_notes.md sections\n   160→- [x] **Shape assertions in tests:** Validates expected tensor shapes\n   161→- [x] **OOB handling:** Preserved existing warning/fallback logic\n   162→\n   163→---\n   164→\n   165→## Known Limitations\n   166→\n   167→1. **Batched Path Uses Fallback:**\n   168→   - Phase C1 builds neighborhoods correctly but doesn't use them yet\n   169→   - Falls back to nearest-neighbor for B>1 pending Phase D\n   170→   - Warning message updated to reflect partial implementation\n   171→\n   172→2. **No Mini-Batching:**\n   173→   - Phase C1 processes all B points at once\n   174→   - May hit memory limits for very large detectors (>2048²)\n   175→   - Phase E will implement chunking if needed\n   176→\n   177→3. **Phase D Dependency:**\n   178→   - Cannot activate batched interpolation path until `polin3` is vectorized\n   179→   - Current implementation validates gather infrastructure only\n   180→\n   181→---\n   182→\n   183→## Next Steps (Phase D)\n   184→\n   185→### D1: Vectorize `polint` (1D interpolation)\n   186→- Accept `(B, 4)` coordinate arrays and `(B, 4)` values\n   187→- Return `(B,)` interpolated results\n   188→- Maintain numerical parity with C-code Lagrange formula\n   189→\n   190→### D2: Vectorize `polin2`/`polin3` (2D/3D interpolation)\n   191→- Stack vectorized `polint` results using `torch.stack`\n   192→- Accept `(B, 4, 4)` and `(B, 4, 4, 4)` neighborhoods\n   193→- Test against scalar results for equivalence\n   194→\n   195→### D3: Audit Differentiability\n   196→- Run `torch.autograd.gradcheck` on vectorized helpers\n   197→- Verify gradients flow through batched interpolation path\n   198→- Ensure no graph breaks for torch.compile\n   199→\n   200→---\n   201→\n   202→## Artifacts & References\n   203→\n   204→### Implementation Artifacts\n   205→- **Modified:** `src/nanobrag_torch/models/crystal.py` lines 355–429\n   206→- **Created:** `tests/test_tricubic_vectorized.py` (4 test cases)\n   207→- **This Document:** `reports/2025-10-vectorization/phase_c/implementation_notes.md`\n   208→\n   209→### Test Results\n   210→- **Targeted:** 1/1 passed (`test_vectorized_matches_scalar`)\n   211→- **Full Suite:** 4/4 passed (`test_tricubic_vectorized.py`)\n   212→- **Regression:** 3/3 passed (`test_at_str_002.py`)\n   213→- **Core Suite:** 38/38 passed (crystal + detector + vectorized tests)\n   214→\n   215→### Plan References\n   216→- **Plan:** `plans/active/vectorization.md` Phase C tasks C1–C3\n   217→- **Design:** `reports/2025-10-vectorization/phase_b/design_notes.md` Section 2, Section 4\n   218→- **Fix Plan:** `docs/fix_plan.md` VECTOR-TRICUBIC-001 (to be updated)\n   219→\n   220→---\n   221→\n   222→## Observations & Lessons Learned\n   223→\n   224→### Successful Patterns\n   225→\n   226→1. **Design-First Approach:**\n   227→   - Phase B design memo provided clear tensor shape contracts\n   228→   - Implementation followed broadcasting patterns exactly\n   229→   - No trial-and-error indexing mistakes\n   230→\n   231→2. **Test-Driven Development:**\n   232→   - Wrote tests before activating batched path\n   233→   - White-box tests caught coordinate grid bugs early\n   234→   - Device neutrality tests prevented CPU/CUDA drift\n   235→\n   236→3. **Incremental Delivery:**\n   237→   - Phase C1 delivers gather infrastructure only\n   238→   - Preserves existing scalar path (no regressions)\n   239→   - Clear handoff to Phase D (polynomial work)\n   240→\n   241→### Challenges Encountered\n   242→\n   243→1. **Device Comparison Issue:**\n   244→   - Initial test compared `torch.device(\"cuda\")` vs `torch.device(\"cuda:0\")`\n   245→   - Fixed by comparing `.device.type` strings instead\n   246→   - Documented in test comments for future reference\n   247→\n   248→2. **Test Selector Mismatch:**\n   249→   - `input.md` referenced `TestTricubicInterpolation::test_tricubic_interpolation_enabled`\n   250→   - Actual test path is `test_at_str_002.py::test_tricubic_interpolation_enabled` (function, not class method)\n   251→   - Ran all AT-STR-002 tests instead to ensure coverage\n   252→\n   253→### Validation Insights\n   254→\n   255→- **Gather Logic Correct:** Neighborhoods match expected HKL data patterns\n   256→- **Shape Handling Robust:** Works for scalar, 1D batch, 2D grid inputs\n   257→- **OOB Detection Active:** Warning triggers for edge cases as expected\n   258→- **No Memory Issues:** 1024² detector (268 MB) well within GPU/CPU limits\n   259→\n   260→---\n   261→\n   262→## Document Metadata\n   263→\n   264→- **Author:** Ralph (nanoBragg PyTorch development loop)\n   265→- **Status:** COMPLETE (Phase C1 delivered)\n   266→- **Next Phase:** Phase D (polynomial vectorization)\n   267→- **Artifact Path:** `reports/2025-10-vectorization/phase_c/implementation_notes.md`\n   268→\n   269→---\n   270→\n   271→## Phase C3 Updates: Shape Assertions & Device-Aware Caching\n   272→\n   273→**Date:** 2025-10-07 (continued)\n   274→**Git SHA:** (to be recorded in fix_plan)\n   275→**Plan Reference:** `plans/active/vectorization.md` Phase C task C3\n   276→\n   277→### C3 Implementation Summary\n   278→\n   279→Hardened the batched gather implementation with explicit shape assertions and device consistency checks to prevent silent regressions during Phase D polynomial vectorization work.\n   280→\n   281→### Changes Made\n   282→\n   283→**File Modified:** `src/nanobrag_torch/models/crystal.py` lines 412–464\n   284→\n   285→#### 1. Shape Assertions (C3.1) ✅\n   286→\n   287→Added assertions after neighborhood gathering to verify correct tensor shapes:\n   288→\n   289→```python\n   290→# Phase C3: Shape assertions to prevent silent regressions\n   291→# Verify neighborhood tensor has correct shape for polynomial evaluation\n   292→assert sub_Fhkl.shape == (B, 4, 4, 4), \\\n   293→    f\"Neighborhood shape mismatch: expected ({B}, 4, 4, 4), got {sub_Fhkl.shape}\"\n   294→\n   295→# Verify coordinate arrays have correct shape\n   296→assert h_indices.shape == (B, 4), f\"h_indices shape mismatch: expected ({B}, 4), got {h_indices.shape}\"\n   297→assert k_indices.shape == (B, 4), f\"k_indices shape mismatch: expected ({B}, 4), got {k_indices.shape}\"\n   298→assert l_indices.shape == (B, 4), f\"l_indices shape mismatch: expected ({B}, 4), got {l_indices.shape}\"\n   299→```\n   300→\n   301→**Code References:**\n   302→- `crystal.py:414-420` — Neighborhood and coordinate shape assertions\n   303→\n   304→Added output shape assertions for both interpolation paths:\n   305→\n   306→```python\n   307→# Scalar path (B=1):\n   308→assert F_cell.numel() == 1, \\\n   309→    f\"Scalar interpolation output must have 1 element, got {F_cell.numel()} (shape {F_cell.shape})\"\n   310→assert result.shape == original_shape, \\\n   311→    f\"Output shape mismatch: expected {original_shape}, got {result.shape}\"\n   312→\n   313→# Batched path (B>1, fallback):\n   314→assert result.shape == original_shape, \\\n   315→    f\"Fallback output shape mismatch: expected {original_shape}, got {result.shape}\"\n   316→```\n   317→\n   318→**Code References:**\n   319→- `crystal.py:440-447` — Scalar path output assertions\n   320→- `crystal.py:461-462` — Batched fallback output assertion\n   321→\n   322→**Note:** Changed scalar assertion from `F_cell.shape == torch.Size([])` to `F_cell.numel() == 1` because `polin3` may return either scalar `[]` or `[1]` shape depending on tensor operations.\n   323→\n   324→#### 2. Device-Aware Caching Audit (C3.2) ✅\n   325→\n   326→**Finding:** No explicit caching exists in `_tricubic_interpolation`.\n   327→\n   328→**Device/Dtype Consistency Checks Added:**\n   329→\n   330→```python\n   331→# Phase C3: Device/dtype consistency check\n   332→# Ensure all tensors are on the same device as the input query tensors\n   333→assert sub_Fhkl.device == h.device, \\\n   334→    f\"Device mismatch: sub_Fhkl on {sub_Fhkl.device}, input on {h.device}\"\n   335→assert h_indices.device == h.device, \\\n   336→    f\"Device mismatch: h_indices on {h_indices.device}, input on {h.device}\"\n   337→```\n   338→\n   339→**Code References:**\n   340→- `crystal.py:422-427` — Device consistency assertions\n   341→\n   342→**Device Handling Strategy:**\n   343→- `offsets` tensor: Created with explicit `device=self.device` parameter (line 373)\n   344→- `h_grid_coords`, `k_grid_coords`, `l_grid_coords`: Inherit device from `h_flr_flat` (CPU/CUDA propagates naturally)\n   345→- `sub_Fhkl`: Uses `device=self.device` when no HKL data loaded (line 384)\n   346→- `sub_Fhkl` (HKL path): Inherits device from `self.hkl_data` via advanced indexing (line 401-405)\n   347→- `h_indices`, `k_indices`, `l_indices`: Use `.to(dtype=self.dtype)` which preserves device (lines 386-388, 408-410)\n   348→\n   349→**Verification:** Device checks enforce that all tensors stay on the input device throughout gather and interpolation.\n   350→\n   351→#### 3. Targeted pytest Evidence (C3.3) ✅\n   352→\n   353→**Command 1: Gather Tests**\n   354→```bash\n   355→env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k \"gather\" -v\n   356→```\n   357→\n   358→**Result:** 5/5 passed\n   359→- `test_vectorized_matches_scalar` ✅\n   360→- `test_neighborhood_gathering_internals` ✅\n   361→- `test_oob_warning_single_fire` ✅ (Phase C2 validation)\n   362→- `test_device_neutrality[cpu]` ✅\n   363→- `test_device_neutrality[cuda]` ✅\n   364→\n   365→**Artifact:** `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`\n   366→\n   367→**Command 2: Acceptance Test AT-STR-002**\n   368→```bash\n   369→env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v\n   370→```\n   371→\n   372→**Result:** 1/1 passed\n   373→\n   374→**Artifact:** `reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log`\n   375→\n   376→### Phase C3 Deliverables\n   377→\n   378→- [x] **C3.1** — Shape assertions for neighborhoods `(B, 4, 4, 4)` and outputs\n   379→- [x] **C3.2** — Device-aware caching audit (no caching present; device checks added)\n   380→- [x] **C3.3** — Targeted pytest logs captured and stored\n   381→\n   382→### Impact & Safety\n   383→\n   384→**Regression Prevention:**\n   385→- Shape assertions catch any breaking changes to gather logic during Phase D refactoring\n   386→- Device checks prevent CPU↔CUDA mixed-device bugs\n   387→- Output assertions ensure reshape logic preserves input shapes\n   388→\n   389→**Testing Coverage:**\n   390→- 6/6 targeted tests pass (5 gather + 1 acceptance)\n   391→- CPU and CUDA execution paths both validated\n   392→- OOB warning behavior verified (Phase C2)\n   393→\n   394→**No Performance Impact:**\n   395→- Assertions compile away in optimized builds (typical Python behavior)\n   396→- No additional tensor operations introduced\n   397→\n   398→### Known Limitations\n   399→\n   400→**No Mini-Batching (from Phase C1):**\n   401→- All B points processed at once\n   402→- May hit memory limits for very large detectors (>2048²)\n   403→- Phase E will implement chunking if needed\n   404→\n   405→**Batched Path Still Falls Back (from Phase C1):**\n   406→- Phase C3 hardens infrastructure but doesn't activate batched interpolation\n   407→- Phase D will vectorize `polin3`/`polin2`/`polint` to unlock batched path\n   408→\n   409→### Next Steps: Phase D Prerequisites Met\n   410→\n   411→**Phase D1 Ready:** Vectorize `polint`\n   412→- Input shapes: `(B, 4)` coordinate arrays, `(B, 4)` values\n   413→- Output shape: `(B,)` interpolated results\n   414→- Assertion coverage: `(B, 4)` inputs validated by C3 checks\n   415→\n   416→**Phase D2 Ready:** Vectorize `polin2`/`polin3`\n   417→- Input shapes: `(B, 4, 4)` and `(B, 4, 4, 4)` neighborhoods\n   418→- Assertion coverage: `(B, 4, 4, 4)` neighborhood validated by C3 checks\n   419→- Device handling: All tensors guaranteed on same device\n   420→\n   421→**Phase D3 Ready:** Audit differentiability\n   422→- Assertions use `.shape`, `.numel()`, `.device` (no `.item()` calls)\n   423→- No gradient-breaking operations introduced\n   424→\n   425→---\n   426→\n   427→**End of Implementation Notes**\n   428→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"9ecf0492-6312-43ce-93a7-ead4bb81773a"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01RRxCMWmK25RTFVAobNfAfT","type":"tool_result","content":"     1→# Phase B Design Notes: Tricubic Interpolation Vectorization\n     2→\n     3→**Document Version:** 1.0\n     4→**Date:** 2025-10-07\n     5→**Git SHA:** aedb82e (feature/spec-based-2)\n     6→**Initiative:** VECTOR-TRICUBIC-001 (PERF-PYTORCH-004 backlog)\n     7→**References:**\n     8→- Plan: `plans/active/vectorization.md` Phase B (tasks B1–B3)\n     9→- Baseline: `reports/2025-10-vectorization/phase_a/tricubic_baseline.md`\n    10→- Spec: `specs/spec-a-core.md` §4 (Structure factors)\n    11→- Architecture: `docs/architecture/pytorch_design.md` §§2.2–2.4\n    12→- C Reference: `nanoBragg.c` lines 4021–4058 (polint/polin2/polin3)\n    13→- Current Implementation: `src/nanobrag_torch/models/crystal.py` lines 350–409, `src/nanobrag_torch/utils/physics.py` lines 315–445\n    14→\n    15→---\n    16→\n    17→## Executive Summary\n    18→\n    19→This memo defines the tensor shape design, broadcasting plan, and gradient/device requirements for vectorizing the tricubic interpolation pipeline in nanoBragg PyTorch. The current scalar-only implementation (≈5.5 ms/call on CUDA, ≈1.4 ms/call on CPU per Phase A baselines) limits performance when processing batched detector pixels. Vectorization will eliminate Python loops over neighborhood gathering and polynomial evaluation, enabling GPU parallelism and torch.compile optimization.\n    20→\n    21→**Key Decision:** Adopt a two-stage vectorization approach: (1) **Phase C** implements batched neighborhood gather to construct `(B, 4, 4, 4)` subcubes from Miller indices, where `B` is an arbitrary batch dimension encompassing `(S, F)` detector pixels plus any additional batching (oversample, phi, mosaic); (2) **Phase D** vectorizes `polint`/`polin2`/`polin3` to consume these batched subcubes without Python loops. This preserves the existing fallback logic (out-of-bounds → default_F, single warning emission) while enabling compile-friendly batching.\n    22→\n    23→---\n    24→\n    25→## 1. Context & Motivation\n    26→\n    27→### 1.1 Current Scalar Implementation Limitations\n    28→\n    29→The existing `Crystal._tricubic_interpolation` method (lines 313–409 in `crystal.py`) detects batched inputs (`h.numel() > 1`) and falls back to nearest-neighbor lookup with a warning:\n    30→```python\n    31→if h.numel() > 1:\n    32→    # Batched input detected - fall back to nearest neighbor\n    33→    if not self._interpolation_warning_shown:\n    34→        print(\"WARNING: tricubic interpolation not yet supported for batched inputs\")\n    35→        ...\n    36→    return self._nearest_neighbor_lookup(h, k, l)\n    37→```\n    38→\n    39→**Reason:** The `polin3`/`polin2`/`polint` helpers (`utils/physics.py` lines 315–445) expect scalar query points and 1D/2D/3D grids; they cannot handle batched tensors. Additionally, the current code builds a single `(4, 4, 4)` subcube (`sub_Fhkl`) regardless of how many query points are provided, which is incorrect for vectorized operation where each query needs its own neighborhood.\n    40→\n    41→**Performance Impact (from Phase A):**\n    42→- CPU: ~1.4 ms/call (100 scalar calls in benchmark)\n    43→- CUDA: ~5.5 ms/call (100 scalar calls in benchmark)\n    44→- Per-call overhead remains constant regardless of batch size because the loop is external to the method\n    45→\n    46→### 1.2 Goals for Vectorization\n    47→\n    48→1. **Eliminate Python Loops:** Process all `(S, F)` detector pixels in a single tensor operation to enable GPU parallelism and torch.compile fusion\n    49→2. **Preserve Physics:** Maintain exact numerical parity with the C-code `polint`/`polin2`/`polin3` algorithms (Lagrange 4-point interpolation)\n    50→3. **Maintain Differentiability:** Ensure gradients flow through cell parameters → reciprocal vectors → Miller indices → interpolated F values\n    51→4. **Device Neutrality:** Work correctly on CPU and CUDA without `.cpu()`/`.cuda()` casts (per Core Rule #16)\n    52→5. **Backward Compatibility:** Keep the scalar code path functional for debugging and preserve existing test behavior\n    53→\n    54→---\n    55→\n    56→## 2. Tensor Shape Design (Task B1)\n    57→\n    58→### 2.1 Input Shapes\n    59→\n    60→The `get_structure_factor` method receives Miller indices with shape:\n    61→```\n    62→h, k, l: (S, F) or (S, F, oversample, oversample) or (phi, mosaic, S, F, ...)\n    63→```\n    64→where the leading dimensions depend on the caller's batching strategy (detector grid, subpixel sampling, phi/mosaic sweeps).\n    65→\n    66→**Key Observation:** We do not need to know the specific batch dimensions; we can flatten all leading dims into a single batch dimension `B = S × F × ...` and operate on `(B,)` tensors internally.\n    67→\n    68→### 2.2 Neighborhood Gathering Output Shape\n    69→\n    70→For each query point `(h, k, l)`, tricubic interpolation requires a 4×4×4 neighborhood of structure factors. The target shape after batched gather is:\n    71→```\n    72→sub_Fhkl: (B, 4, 4, 4)\n    73→```\n    74→where:\n    75→- `B` is the flattened batch dimension\n    76→- The `(4, 4, 4)` dimensions correspond to offsets `[-1, 0, 1, 2]` along each of the `(h, k, l)` axes\n    77→\n    78→**Memory Footprint Example:**\n    79→- 1024×1024 detector: B = 1048576 → sub_Fhkl shape `(1048576, 4, 4, 4)` = ~268 MB at float32\n    80→- With oversample=2: B = 4194304 → ~1.07 GB at float32\n    81→\n    82→### 2.3 Coordinate Arrays for Polynomial Evaluation\n    83→\n    84→Following the C-code convention, we need coordinate arrays for each interpolation axis:\n    85→```\n    86→h_indices: (B, 4) -- values [h_flr-1, h_flr, h_flr+1, h_flr+2] for each query point\n    87→k_indices: (B, 4) -- values [k_flr-1, k_flr, k_flr+1, k_flr+2]\n    88→l_indices: (B, 4) -- values [l_flr-1, l_flr, l_flr+1, l_flr+2]\n    89→```\n    90→\n    91→These will be used as the `xa`, `x1a`, `x2a`, `x3a` arguments to the vectorized polynomial helpers.\n    92→\n    93→### 2.4 Query Point Shape\n    94→\n    95→The interpolation target coordinates remain:\n    96→```\n    97→h, k, l: (B,) -- flattened query points\n    98→```\n    99→\n   100→### 2.5 Output Shape\n   101→\n   102→After tricubic interpolation:\n   103→```\n   104→F_cell: (B,) -- interpolated structure factor at each query point\n   105→```\n   106→This tensor is then reshaped to match the original input shape before returning.\n   107→\n   108→### 2.6 Broadcasting Plan Diagram\n   109→\n   110→```\n   111→Input Miller indices:\n   112→  h, k, l: (S, F) or (S, F, oversample²) or (phi, mosaic, S, F, ...)\n   113→         ↓ flatten leading dims\n   114→  h_flat, k_flat, l_flat: (B,)\n   115→         ↓ compute floor indices\n   116→  h_flr, k_flr, l_flr: (B,) int64\n   117→         ↓ build offset array\n   118→  offsets: (4,) = [-1, 0, 1, 2]\n   119→         ↓ broadcast to (B, 4) via unsqueeze + expand\n   120→  h_grid: (B, 4), k_grid: (B, 4), l_grid: (B, 4)\n   121→         ↓ advanced indexing into hkl_data[H, K, L]\n   122→  sub_Fhkl: (B, 4, 4, 4)\n   123→         ↓ vectorized polin3\n   124→  F_cell_flat: (B,)\n   125→         ↓ reshape to original\n   126→  F_cell: original_shape\n   127→```\n   128→\n   129→**Critical Broadcasting Rule:** Use `h_flr.unsqueeze(-1) + offsets` to create `(B, 4)` grids; then use advanced indexing with proper broadcasting:\n   130→```python\n   131→sub_Fhkl = hkl_data[h_grid[:, :, None, None], k_grid[:, None, :, None], l_grid[:, None, None, :]]\n   132→```\n   133→This indexing pattern produces the required `(B, 4, 4, 4)` output.\n   134→\n   135→---\n   136→\n   137→## 3. C-Code Polynomial Semantics Mapping (Task B2)\n   138→\n   139→### 3.1 Reference Implementation Analysis\n   140→\n   141→The C-code implements Lagrange polynomial interpolation via three nested functions:\n   142→- `polint(xa[4], ya[4], x)` → 1D 4-point interpolation\n   143→- `polin2(x1a[4], x2a[4], ya[4][4], x1, x2)` → 2D via 4× 1D interpolations\n   144→- `polin3(x1a[4], x2a[4], x3a[4], ya[4][4][4], x1, x2, x3)` → 3D via 4× 2D interpolations\n   145→\n   146→**Key Observation:** The nesting structure creates temporary arrays (`ymtmp[4]`) at each level. For vectorization, we must replicate this nesting while operating on batched tensors.\n   147→\n   148→### 3.2 Lagrange Basis Functions (polint)\n   149→\n   150→The 1D interpolation computes:\n   151→```\n   152→y = Σᵢ₌₀³ yᵢ × Lᵢ(x)\n   153→```\n   154→where the Lagrange basis function is:\n   155→```\n   156→Lᵢ(x) = ∏_{j≠i} (x - xⱼ) / (xᵢ - xⱼ)\n   157→```\n   158→\n   159→**C-code expansion (from lines 4021–4029):**\n   160→```c\n   161→x0 = (x-xa[1])*(x-xa[2])*(x-xa[3])*ya[0]/((xa[0]-xa[1])*(xa[0]-xa[2])*(xa[0]-xa[3]));\n   162→x1 = (x-xa[0])*(x-xa[2])*(x-xa[3])*ya[1]/((xa[1]-xa[0])*(xa[1]-xa[2])*(xa[1]-xa[3]));\n   163→x2 = (x-xa[0])*(x-xa[1])*(x-xa[3])*ya[2]/((xa[2]-xa[0])*(xa[2]-xa[1])*(xa[2]-xa[3]));\n   164→x3 = (x-xa[0])*(x-xa[1])*(x-xa[2])*ya[3]/((xa[3]-xa[0])*(xa[3]-xa[1])*(xa[3]-xa[2]));\n   165→*y = x0+x1+x2+x3;\n   166→```\n   167→\n   168→**Vectorization Strategy:**\n   169→\n   170→Instead of computing each term separately, precompute Vandermonde-like weight matrices. For equally-spaced grids (offsets `[-1, 0, 1, 2]`), the denominators `(xᵢ - xⱼ)` are constants that can be cached.\n   171→\n   172→**Proposed PyTorch Implementation:**\n   173→```python\n   174→def polint_vectorized(xa: torch.Tensor, ya: torch.Tensor, x: torch.Tensor) -> torch.Tensor:\n   175→    \"\"\"\n   176→    Vectorized 1D 4-point Lagrange interpolation.\n   177→\n   178→    Args:\n   179→        xa: (B, 4) x-coordinates\n   180→        ya: (B, 4) y-values\n   181→        x: (B,) query points\n   182→\n   183→    Returns:\n   184→        (B,) interpolated values\n   185→    \"\"\"\n   186→    # Compute Lagrange basis: shape (B, 4)\n   187→    x_expanded = x.unsqueeze(-1)  # (B, 1)\n   188→    numerator = (x_expanded - xa).prod(dim=-1, keepdim=True)  # (B, 1) -- product over all (x - xa[j])\n   189→\n   190→    # For each i, divide out the (x - xa[i]) term and compute denominator\n   191→    basis = torch.zeros_like(ya)  # (B, 4)\n   192→    for i in range(4):\n   193→        # Numerator for basis i: product of (x - xa[j]) for j ≠ i\n   194→        num_i = torch.ones_like(x)\n   195→        denom_i = torch.ones_like(x)\n   196→        for j in range(4):\n   197→            if j != i:\n   198→                num_i = num_i * (x - xa[:, j])\n   199→                denom_i = denom_i * (xa[:, i] - xa[:, j])\n   200→        basis[:, i] = num_i / denom_i\n   201→\n   202→    # Interpolated value: weighted sum\n   203→    return (basis * ya).sum(dim=-1)\n   204→```\n   205→\n   206→**Performance Note:** The double loop `for i in range(4): for j in range(4)` is acceptable because it operates on fixed small constants (4 iterations) and the inner operations are batched. Torch.compile will unroll these loops. Alternatively, we can precompute the weight matrices if `xa` follows a predictable pattern (e.g., always integer-spaced).\n   207→\n   208→### 3.3 Nested 2D Interpolation (polin2)\n   209→\n   210→The C-code (lines 4033–4042) implements:\n   211→```c\n   212→for (j=1; j<=4; j++) {\n   213→    polint(x2a, ya[j-1], x2, &ymtmp[j-1]);  // Interpolate along x2 for each row\n   214→}\n   215→polint(x1a, ymtmp, x1, y);  // Interpolate along x1\n   216→```\n   217→\n   218→**Vectorization Strategy:**\n   219→\n   220→Process all 4 rows in parallel, then apply final polint:\n   221→```python\n   222→def polin2_vectorized(x1a: torch.Tensor, x2a: torch.Tensor, ya: torch.Tensor,\n   223→                      x1: torch.Tensor, x2: torch.Tensor) -> torch.Tensor:\n   224→    \"\"\"\n   225→    Vectorized 2D polynomial interpolation.\n   226→\n   227→    Args:\n   228→        x1a: (B, 4) first dimension coordinates\n   229→        x2a: (B, 4) second dimension coordinates\n   230→        ya: (B, 4, 4) values at grid points\n   231→        x1, x2: (B,) query points\n   232→\n   233→    Returns:\n   234→        (B,) interpolated values\n   235→    \"\"\"\n   236→    # Interpolate along x2 for each of the 4 rows\n   237→    # Shape: ya[:, i, :] is (B, 4) for row i\n   238→    ymtmp = torch.stack([\n   239→        polint_vectorized(x2a, ya[:, i, :], x2) for i in range(4)\n   240→    ], dim=-1)  # (B, 4)\n   241→\n   242→    # Interpolate along x1\n   243→    return polint_vectorized(x1a, ymtmp, x1)  # (B,)\n   244→```\n   245→\n   246→**Gradient Flow:** The `torch.stack` operation preserves the computation graph; gradients backpropagate through both interpolation stages.\n   247→\n   248→### 3.4 Nested 3D Interpolation (polin3)\n   249→\n   250→The C-code (lines 4045–4058) nests polin2 calls:\n   251→```c\n   252→for (j=1; j<=4; j++) {\n   253→    polin2(x2a, x3a, &ya[j-1][0], x2, x3, &ymtmp[j-1]);\n   254→}\n   255→polint(x1a, ymtmp, x1, y);\n   256→```\n   257→\n   258→**Vectorization Strategy:**\n   259→\n   260→Stack 4 polin2 results and apply final polint:\n   261→```python\n   262→def polin3_vectorized(x1a: torch.Tensor, x2a: torch.Tensor, x3a: torch.Tensor,\n   263→                      ya: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, x3: torch.Tensor) -> torch.Tensor:\n   264→    \"\"\"\n   265→    Vectorized 3D tricubic interpolation.\n   266→\n   267→    Args:\n   268→        x1a: (B, 4) h-coordinates\n   269→        x2a: (B, 4) k-coordinates\n   270→        x3a: (B, 4) l-coordinates\n   271→        ya: (B, 4, 4, 4) structure factors at grid points\n   272→        x1, x2, x3: (B,) query points (h, k, l)\n   273→\n   274→    Returns:\n   275→        (B,) interpolated F values\n   276→    \"\"\"\n   277→    # Interpolate 4 2D slices\n   278→    ymtmp = torch.stack([\n   279→        polin2_vectorized(x2a, x3a, ya[:, i, :, :], x2, x3) for i in range(4)\n   280→    ], dim=-1)  # (B, 4)\n   281→\n   282→    # Final 1D interpolation\n   283→    return polint_vectorized(x1a, ymtmp, x1)  # (B,)\n   284→```\n   285→\n   286→### 3.5 Alternative: Precomputed Weights (Future Optimization)\n   287→\n   288→For regularly-spaced grids (offsets = [-1, 0, 1, 2]), the Lagrange weights are constants. We could precompute a `(4, 4, 4, 4)` weight tensor and perform a single einsum:\n   289→```python\n   290→# Precompute once at init:\n   291→weights = compute_tricubic_weights()  # (4, 4, 4, 4)\n   292→\n   293→# At runtime:\n   294→F_cell = torch.einsum('bhkl,hkl0->b', ya, weights)  # (B,)\n   295→```\n   296→\n   297→**Decision:** Defer this optimization to Phase D or later. The nested loop approach is easier to verify against the C-code and should be sufficient for initial vectorization gains.\n   298→\n   299→---\n   300→\n   301→## 4. Gradient & Device Checklist (Task B3)\n   302→\n   303→### 4.1 Differentiability Requirements\n   304→\n   305→Per `docs/development/pytorch_runtime_checklist.md` and `arch.md` Section 15, the vectorized implementation MUST:\n   306→\n   307→1. **Avoid `.item()` calls:** All intermediate tensors must remain on the computation graph\n   308→2. **Avoid `torch.linspace` with tensor endpoints:** Use manual arithmetic (`start + step * torch.arange(...)`)\n   309→3. **Use @property or functional patterns for derived quantities:** Never overwrite class attributes with detached values\n   310→4. **Maintain tensor inputs throughout:** No isinstance checks inside core methods\n   311→\n   312→**Audit Points for Implementation:**\n   313→\n   314→| Location | Check | Enforcement |\n   315→|----------|-------|-------------|\n   316→| Neighborhood gather | Ensure `h_flr`, `k_flr`, `l_flr` computed via `torch.floor(h)` (not `.long()` which detaches) | Use `.to(dtype=torch.long)` after ensuring gradients already stopped |\n   317→| Offset array | `offsets = torch.arange(-1, 3, device=device)` — no tensor endpoints | ✅ Already safe |\n   318→| Advanced indexing | `hkl_data[h_grid, k_grid, l_grid]` preserves gradients if `hkl_data` requires_grad | ✅ Native PyTorch |\n   319→| Polynomial helpers | All operations use tensor arithmetic (no scalar extraction) | Verify in Phase D implementation |\n   320→\n   321→**Gradient Test Plan (Phase E):**\n   322→```python\n   323→def test_tricubic_vectorized_gradients():\n   324→    \"\"\"Verify gradients flow through vectorized tricubic path.\"\"\"\n   325→    cell_a = torch.tensor(100.0, requires_grad=True, dtype=torch.float64)\n   326→    config = CrystalConfig(cell_a=cell_a, ...)\n   327→    crystal = Crystal(config)\n   328→\n   329→    # Batched input\n   330→    h = torch.tensor([[1.5, 2.3], [3.1, 4.7]], requires_grad=False)\n   331→    k = torch.tensor([[0.5, 1.2], [2.8, 3.5]], requires_grad=False)\n   332→    l = torch.tensor([[0.0, 0.5], [1.0, 1.5]], requires_grad=False)\n   333→\n   334→    F_cell = crystal.get_structure_factor(h.flatten(), k.flatten(), l.flatten())\n   335→    loss = F_cell.sum()\n   336→    loss.backward()\n   337→\n   338→    assert cell_a.grad is not None, \"Gradient should flow to cell parameter\"\n   339→    assert torch.autograd.gradcheck(\n   340→        lambda a: Crystal(CrystalConfig(cell_a=a, ...)).get_structure_factor(...),\n   341→        cell_a, eps=1e-6, atol=1e-4\n   342→    ), \"Numerical gradient check failed\"\n   343→```\n   344→\n   345→### 4.2 Device Neutrality Requirements\n   346→\n   347→Per Core Rule #16 (PyTorch Device & Dtype Neutrality), the implementation MUST:\n   348→\n   349→1. **Accept tensors on any device:** CPU or CUDA\n   350→2. **Avoid hard-coded `.cpu()` or `.cuda()` calls:** Use `.to(device=other_tensor.device)` or `.type_as(other_tensor)`\n   351→3. **Ensure all intermediate tensors live on the same device:** No silent transfers\n   352→4. **Run smoke tests on both CPU and CUDA**\n   353→\n   354→**Device Harmonization Strategy:**\n   355→\n   356→```python\n   357→def _tricubic_interpolation(self, h, k, l):\n   358→    # Infer device from input tensors\n   359→    device = h.device\n   360→    dtype = h.dtype\n   361→\n   362→    # Ensure offset array matches input device\n   363→    offsets = torch.arange(-1, 3, device=device, dtype=torch.long)\n   364→\n   365→    # Ensure hkl_data is on the same device (move once at init if needed)\n   366→    if self.hkl_data is not None and self.hkl_data.device != device:\n   367→        # Warn and transfer (or enforce at init time)\n   368→        warnings.warn(f\"HKL data on {self.hkl_data.device}, moving to {device}\")\n   369→        self.hkl_data = self.hkl_data.to(device=device)\n   370→\n   371→    # All subsequent operations inherit device from input tensors\n   372→    ...\n   373→```\n   374→\n   375→**Smoke Test Plan (Phase E):**\n   376→```bash\n   377→# CPU test\n   378→env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k \"cpu\" -v\n   379→\n   380→# CUDA test (when available)\n   381→env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k \"cuda\" -v\n   382→\n   383→# Parametrized test covering both\n   384→@pytest.mark.parametrize(\"device\", [\"cpu\", pytest.param(\"cuda\", marks=pytest.mark.cuda)])\n   385→def test_tricubic_vectorized_device_neutral(device):\n   386→    if device == \"cuda\" and not torch.cuda.is_available():\n   387→        pytest.skip(\"CUDA not available\")\n   388→    ...\n   389→```\n   390→\n   391→### 4.3 Torch.compile Compatibility\n   392→\n   393→The vectorized implementation should be torch.compile-friendly:\n   394→\n   395→1. **No Python loops over batch dimensions:** Loop only over fixed small constants (e.g., 4 polynomial terms)\n   396→2. **No dynamic control flow based on tensor values:** Use `torch.where` for conditional logic\n   397→3. **No list comprehensions that create variable-length tensors:** Use `torch.stack` with fixed-length lists\n   398→4. **No in-place operations on graph-tracked tensors:** Use out-of-place ops (`.clone()` if needed)\n   399→\n   400→**Known Issues:**\n   401→\n   402→- **CUDA graphs + reshape views:** Per `docs/fix_plan.md` PERF-PYTORCH-004 Attempt #17, tensor views created by `.reshape()` inside compiled code can trigger \"accessing tensor output of CUDAGraphs that has been overwritten\" errors. If this occurs, use `.contiguous().clone()` instead of `.reshape()`.\n   403→\n   404→**Compile Test Plan (Phase E):**\n   405→```python\n   406→@torch.compile(mode=\"reduce-overhead\")\n   407→def compiled_get_structure_factor(crystal, h, k, l):\n   408→    return crystal.get_structure_factor(h, k, l)\n   409→\n   410→def test_tricubic_vectorized_compile():\n   411→    \"\"\"Verify torch.compile works with vectorized tricubic.\"\"\"\n   412→    crystal = Crystal(...)\n   413→    h, k, l = torch.randn(100, device=\"cpu\"), torch.randn(100), torch.randn(100)\n   414→\n   415→    # Warm-up compile\n   416→    _ = compiled_get_structure_factor(crystal, h, k, l)\n   417→\n   418→    # Measure speedup\n   419→    t0 = time.time()\n   420→    eager_result = crystal.get_structure_factor(h, k, l)\n   421→    eager_time = time.time() - t0\n   422→\n   423→    t0 = time.time()\n   424→    compiled_result = compiled_get_structure_factor(crystal, h, k, l)\n   425→    compiled_time = time.time() - t0\n   426→\n   427→    assert torch.allclose(eager_result, compiled_result, rtol=1e-5)\n   428→    print(f\"Speedup: {eager_time / compiled_time:.2f}x\")\n   429→```\n   430→\n   431→---\n   432→\n   433→## 5. Failure Modes & Mitigation\n   434→\n   435→### 5.1 Out-of-Bounds Neighborhoods\n   436→\n   437→**Scenario:** Query point near the edge of the HKL grid; some neighbors fall outside `[h_min, h_max]`.\n   438→\n   439→**Current Behavior (scalar):** Emit one warning, set `self.interpolate = False`, return `default_F`.\n   440→\n   441→**Vectorized Behavior (Phase C):**\n   442→\n   443→1. **Detect OOB indices:** Check if any neighborhood indices fall outside bounds\n   444→2. **Emit warning once:** Use a flag to ensure warning prints only once\n   445→3. **Mask invalid points:** Create a boolean mask `(B,)` indicating which query points have valid neighborhoods\n   446→4. **Apply fallback:** For invalid points, use `default_F`; for valid points, proceed with interpolation\n   447→\n   448→**Implementation Strategy:**\n   449→```python\n   450→# After computing h_grid, k_grid, l_grid (B, 4 each)\n   451→h_valid = (h_grid >= h_min) & (h_grid <= h_max)  # (B, 4)\n   452→k_valid = (k_grid >= k_min) & (k_grid <= k_max)  # (B, 4)\n   453→l_valid = (l_grid >= l_min) & (l_grid <= l_max)  # (B, 4)\n   454→\n   455→# All 4 neighbors must be valid for each query point\n   456→valid_mask = h_valid.all(dim=-1) & k_valid.all(dim=-1) & l_valid.all(dim=-1)  # (B,)\n   457→\n   458→if not valid_mask.all():\n   459→    if not self._interpolation_warning_shown:\n   460→        num_invalid = (~valid_mask).sum().item()\n   461→        print(f\"WARNING: {num_invalid} query points have out-of-range neighborhoods\")\n   462→        print(\"WARNING: using default_F for these points; disabling interpolation for remainder\")\n   463→        self._interpolation_warning_shown = True\n   464→    self.interpolate = False\n   465→\n   466→# Apply mask: gather only for valid points, use default_F for invalid\n   467→F_cell = torch.where(valid_mask, interpolated_values, default_F)\n   468→```\n   469→\n   470→### 5.2 Memory Pressure (Large Batches)\n   471→\n   472→**Scenario:** 1024×1024 detector with oversample=2 → B ≈ 4M → `sub_Fhkl` shape `(4M, 4, 4, 4)` ≈ 1 GB.\n   473→\n   474→**Mitigation Options:**\n   475→\n   476→1. **Mini-batching (if needed):** Split `B` into chunks (e.g., process 256k points at a time). Defer to Phase D if benchmarks show OOM issues.\n   477→2. **Lazy evaluation:** If only a subset of pixels need interpolation (e.g., ROI), filter before building neighborhoods.\n   478→3. **Mixed precision:** Use float16 for intermediate calculations (but verify numerical stability).\n   479→\n   480→**Decision:** Monitor memory usage in Phase E benchmarks. If >80% GPU memory consumed, implement mini-batching in Phase D.\n   481→\n   482→### 5.3 Numerical Stability (Division by Zero)\n   483→\n   484→**Scenario:** Lagrange denominators `(xa[i] - xa[j])` could be zero if grid is degenerate.\n   485→\n   486→**Mitigation:** Clamp denominators to a small epsilon (1e-10) to avoid NaNs:\n   487→```python\n   488→denom_i = (xa[:, i] - xa[:, j]).clamp_min(1e-10)\n   489→```\n   490→\n   491→**Verification:** Add a test with nearly-degenerate grids and assert no NaNs/Infs in output.\n   492→\n   493→---\n   494→\n   495→## 6. Validation Strategy (Phase E Prerequisites)\n   496→\n   497→### 6.1 Parity Tests\n   498→\n   499→**AT-STR-002 (Structure Factors):** Run existing acceptance test after vectorization:\n   500→```bash\n   501→env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v\n   502→```\n   503→**Expected:** Same correlation/RMSE as baseline (scalar interpolation).\n   504→\n   505→**Golden Data:** Use C-code reference (`nanoBragg.c`) with identical parameters to generate comparison images:\n   506→```bash\n   507→nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare \\\n   508→    -- -default_F 100 -cell 70 80 90 75 85 95 -lambda 1.0 -distance 100 -detpixels 512 -N 2\n   509→```\n   510→\n   511→### 6.2 Gradient Tests\n   512→\n   513→**Unit-level:** Verify `polint_vectorized`, `polin2_vectorized`, `polin3_vectorized` pass gradcheck.\n   514→\n   515→**Integration-level:** Verify end-to-end gradients through `Simulator.run()` with interpolation enabled.\n   516→\n   517→### 6.3 Performance Benchmarks\n   518→\n   519→**Baseline vs. Vectorized:**\n   520→- Reuse `scripts/benchmarks/tricubic_baseline.py` with a `--mode vectorized` flag\n   521→- Measure CPU and CUDA warm/cold timings for 256², 512², 1024² detectors\n   522→- Target: ≥10× speedup for batched case vs. 100 scalar calls\n   523→\n   524→**Expected Improvements:**\n   525→- CPU: Amortize overhead across batch; expect 5–10× improvement\n   526→- CUDA: Enable kernel fusion; expect 10–50× improvement (depends on memory bandwidth)\n   527→\n   528→### 6.4 Regression Coverage\n   529→\n   530→**New Unit Tests (Phase D):**\n   531→- `tests/test_tricubic_vectorized.py::test_polint_vectorized_matches_scalar`\n   532→- `tests/test_tricubic_vectorized.py::test_polin2_vectorized_matches_scalar`\n   533→- `tests/test_tricubic_vectorized.py::test_polin3_vectorized_vs_c_reference`\n   534→- `tests/test_tricubic_vectorized.py::test_batched_neighborhood_gather`\n   535→- `tests/test_tricubic_vectorized.py::test_oob_fallback_vectorized`\n   536→\n   537→**Integration Tests (Phase E):**\n   538→- Existing `tests/test_at_str_002.py` (run with vectorized code)\n   539→- Add `tests/test_at_str_002.py::test_vectorized_vs_scalar_equivalence` (compare both paths)\n   540→\n   541→---\n   542→\n   543→## 7. Implementation Roadmap Summary\n   544→\n   545→### Phase C: Neighborhood Gather (Plan Tasks C1–C3)\n   546→\n   547→**Inputs:** `h, k, l` with arbitrary leading dims\n   548→**Outputs:** `sub_Fhkl` shape `(B, 4, 4, 4)`, coordinate arrays `(B, 4)` each\n   549→\n   550→**Key Steps:**\n   551→1. Flatten inputs to `(B,)`\n   552→2. Compute `h_flr = torch.floor(h).to(dtype=torch.long)`\n   553→3. Build `h_grid = h_flr.unsqueeze(-1) + offsets` → `(B, 4)`\n   554→4. Use advanced indexing `hkl_data[h_grid[:, :, None, None], ...]` → `(B, 4, 4, 4)`\n   555→5. Detect OOB with masks; apply fallback logic\n   556→\n   557→**Exit Criteria:**\n   558→- Unit test: `test_batched_neighborhood_gather` passes\n   559→- No Python loops over `B` dimension\n   560→- Device-neutral (runs on CPU and CUDA)\n   561→\n   562→### Phase D: Polynomial Evaluation (Plan Tasks D1–D3)\n   563→\n   564→**Inputs:** `sub_Fhkl (B, 4, 4, 4)`, query points `h, k, l (B,)`, coords `(B, 4)` each\n   565→**Outputs:** `F_cell (B,)` interpolated values\n   566→\n   567→**Key Steps:**\n   568→1. Implement `polint_vectorized` using Lagrange basis\n   569→2. Implement `polin2_vectorized` stacking 4× `polint_vectorized`\n   570→3. Implement `polin3_vectorized` stacking 4× `polin2_vectorized`\n   571→4. Replace scalar helpers in `crystal.py` with vectorized versions\n   572→5. Add gradient tests\n   573→\n   574→**Exit Criteria:**\n   575→- Unit tests: `test_polint_vectorized_matches_scalar`, etc. pass\n   576→- Gradient test: `test_tricubic_gradient` passes with `torch.autograd.gradcheck`\n   577→- Torch.compile compatibility: no graph breaks or CUDA errors\n   578→\n   579→### Phase E: Validation (Plan Tasks E1–E3)\n   580→\n   581→**Artifacts:**\n   582→- `phase_e/pytest.log` (regression tests)\n   583→- `phase_e/perf_results.json` (CPU/CUDA benchmarks)\n   584→- `phase_e/nb_compare/metrics.json` (C-code parity)\n   585→- `phase_e/summary.md` (consolidated results)\n   586→\n   587→**Success Criteria:**\n   588→- AT-STR-002 passes with correlation ≥ 0.999\n   589→- Gradients flow correctly (gradcheck passes)\n   590→- CPU/CUDA speedup ≥ 10× vs. scalar baseline\n   591→- No memory regressions (GPU usage < 80%)\n   592→\n   593→---\n   594→\n   595→## 8. Symbols & Notation Glossary\n   596→\n   597→| Symbol | Meaning | Units/Type |\n   598→|--------|---------|------------|\n   599→| `B` | Batch dimension (flattened from `S × F × ...`) | Integer |\n   600→| `S`, `F` | Slow/fast detector pixel indices | Integer |\n   601→| `h`, `k`, `l` | Miller indices (fractional) | Float (Å⁻¹ in reciprocal space) |\n   602→| `h_flr` | Floor of Miller index | Integer |\n   603→| `sub_Fhkl` | 4×4×4 neighborhood of structure factors | Float (electrons) |\n   604→| `F_cell` | Interpolated structure factor | Float (electrons) |\n   605→| `offsets` | Neighborhood offset array `[-1, 0, 1, 2]` | Integer |\n   606→| `xa`, `ya` | Coordinate and value arrays for `polint` | Float |\n   607→| `L` | Lagrange basis function | Dimensionless |\n   608→| `default_F` | Fallback structure factor | Float (electrons) |\n   609→\n   610→---\n   611→\n   612→## 9. Dependencies & Caching Strategy\n   613→\n   614→### 9.1 HKL Data Device Management\n   615→\n   616→**Current Issue:** `self.hkl_data` is allocated on the device where it was loaded (typically CPU). If a query comes in on CUDA, advanced indexing will fail or silently transfer data.\n   617→\n   618→**Proposed Solution:**\n   619→\n   620→1. **At Crystal initialization:** Store `hkl_data` on CPU (large arrays)\n   621→2. **At first interpolation call:** Detect device from input tensors; move `hkl_data` to that device if needed\n   622→3. **Cache the moved tensor:** Store a reference to avoid repeated transfers\n   623→\n   624→```python\n   625→def _ensure_hkl_on_device(self, device):\n   626→    if self.hkl_data is not None:\n   627→        if self.hkl_data.device != device:\n   628→            self.hkl_data = self.hkl_data.to(device=device)\n   629→```\n   630→\n   631→**Trade-off:** Increases memory if both CPU and CUDA runs occur (duplicate `hkl_data`). Acceptable for typical workflows where device is fixed per run.\n   632→\n   633→### 9.2 Precomputed Weights (Future Optimization)\n   634→\n   635→For grids with constant spacing (e.g., integer HKL indices), Lagrange weights are constant. Phase D could cache a `(4, 4, 4, 4)` weight tensor:\n   636→\n   637→```python\n   638→self._tricubic_weights = self._compute_tricubic_weights()  # Called once at init\n   639→\n   640→def _compute_tricubic_weights(self):\n   641→    \"\"\"Precompute Lagrange weights for integer-spaced grid.\"\"\"\n   642→    # offsets = [-1, 0, 1, 2]\n   643→    # For each interpolation point x ∈ [0, 1], compute Lagrange basis\n   644→    # (deferred to Phase D or later)\n   645→    ...\n   646→```\n   647→\n   648→**Decision:** Defer unless Phase E benchmarks show significant overhead in polynomial evaluation (unlikely given batch sizes).\n   649→\n   650→---\n   651→\n   652→## 10. Risk Assessment\n   653→\n   654→| Risk | Likelihood | Impact | Mitigation |\n   655→|------|------------|--------|------------|\n   656→| Memory OOM for large detectors | Medium | High (crashes) | Implement mini-batching in Phase D if needed |\n   657→| CUDA graph errors with reshape views | Low (already addressed in PERF-004) | Medium (runtime error) | Use `.contiguous().clone()` per fix plan |\n   658→| Numerical drift from C-code | Low (Lagrange formula is exact) | Medium (parity failure) | Extensive parity tests in Phase E |\n   659→| Gradient check failure | Low (all ops differentiable) | High (breaks optimization) | Unit-level gradcheck in Phase D before integration |\n   660→| Torch.compile graph breaks | Medium (nested control flow) | Low (perf only) | Smoke tests in Phase E; fallback to eager if needed |\n   661→| Device mismatch errors | Medium (HKL data on CPU, query on CUDA) | Medium (runtime error) | Explicit device harmonization at method entry |\n   662→\n   663→---\n   664→\n   665→## 11. Open Questions & Future Work\n   666→\n   667→### 11.1 Deferred to Future Phases\n   668→\n   669→1. **Absorption Vectorization (Phase F):** Similar shape design for `_apply_detector_absorption` with `(T, S, F)` tensors\n   670→2. **Weight Matrix Precomputation:** If polynomial evaluation becomes a bottleneck\n   671→3. **Mixed Precision Support:** Use float16 for intermediate calculations (verify numerics)\n   672→4. **JIT Compilation Tuning:** Investigate `torch.jit.script` as alternative to `torch.compile`\n   673→\n   674→### 11.2 Cross-References for Phase C/D Implementation\n   675→\n   676→**Files to modify:**\n   677→- `src/nanobrag_torch/models/crystal.py` lines 313–409 (`_tricubic_interpolation`)\n   678→- `src/nanobrag_torch/utils/physics.py` lines 315–445 (add vectorized helpers)\n   679→- `tests/test_tricubic_vectorized.py` (new file)\n   680→\n   681→**Specs to validate:**\n   682→- `specs/spec-a-core.md` §4.3 (Interpolation behavior)\n   683→- `specs/spec-a-parallel.md` AT-STR-002 (Structure factor parity)\n   684→\n   685→**Architecture alignment:**\n   686→- `docs/architecture/pytorch_design.md` §2.4 (Vectorization strategy)\n   687→- `docs/development/pytorch_runtime_checklist.md` (Device/dtype rules)\n   688→\n   689→---\n   690→\n   691→## 12. Appendix: Sample Broadcast Calculation\n   692→\n   693→**Example:** 3×3 detector (B=9), compute neighborhoods\n   694→\n   695→```python\n   696→import torch\n   697→\n   698→# Input Miller indices (S=3, F=3)\n   699→h = torch.tensor([[1.2, 2.5, 3.8],\n   700→                  [0.5, 1.9, 2.3],\n   701→                  [3.1, 4.0, 5.2]])\n   702→k = torch.tensor([[0.3, 1.1, 2.7],\n   703→                  [1.5, 2.0, 3.9],\n   704→                  [0.8, 1.6, 2.4]])\n   705→l = torch.zeros_like(h)\n   706→\n   707→# Flatten to (B,)\n   708→h_flat = h.flatten()  # [1.2, 2.5, 3.8, 0.5, 1.9, 2.3, 3.1, 4.0, 5.2]\n   709→k_flat = k.flatten()\n   710→l_flat = l.flatten()\n   711→B = h_flat.shape[0]  # 9\n   712→\n   713→# Compute floor indices\n   714→h_flr = torch.floor(h_flat).to(dtype=torch.long)  # [1, 2, 3, 0, 1, 2, 3, 4, 5]\n   715→\n   716→# Build offset array\n   717→offsets = torch.arange(-1, 3, dtype=torch.long)  # [-1, 0, 1, 2]\n   718→\n   719→# Broadcast to (B, 4)\n   720→h_grid = h_flr.unsqueeze(-1) + offsets  # shape (9, 4)\n   721→# h_grid[0] = [0, 1, 2, 3]  (for h=1.2)\n   722→# h_grid[1] = [1, 2, 3, 4]  (for h=2.5)\n   723→# ...\n   724→\n   725→# Simulate HKL data lookup (mock 10×10×10 grid)\n   726→hkl_data = torch.rand(10, 10, 10)\n   727→\n   728→# Advanced indexing to build (B, 4, 4, 4) neighborhoods\n   729→k_grid = torch.floor(k_flat).to(dtype=torch.long).unsqueeze(-1) + offsets\n   730→l_grid = torch.floor(l_flat).to(dtype=torch.long).unsqueeze(-1) + offsets\n   731→\n   732→sub_Fhkl = hkl_data[h_grid[:, :, None, None],\n   733→                    k_grid[:, None, :, None],\n   734→                    l_grid[:, None, None, :]]  # (9, 4, 4, 4)\n   735→\n   736→print(f\"sub_Fhkl shape: {sub_Fhkl.shape}\")  # torch.Size([9, 4, 4, 4])\n   737→```\n   738→\n   739→---\n   740→\n   741→## Document Metadata\n   742→\n   743→- **Author:** Ralph (nanoBragg PyTorch development loop)\n   744→- **Reviewed By:** Galph (supervisor)\n   745→- **Status:** DRAFT (awaiting Phase C implementation)\n   746→- **Next Actions:** Execute Phase C tasks (C1–C3) to implement batched neighborhood gather; update fix_plan.md with this memo's path and findings\n   747→- **Artifact Path:** `reports/2025-10-vectorization/phase_b/design_notes.md`\n   748→\n   749→---\n   750→\n   751→**End of Design Notes**\n   752→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"9ae3725b-680c-4ee4-8651-1cf44f66a9c8"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_0147KzK5VtpaHpwVkX7q7iVg","type":"message","role":"assistant","content":[{"type":"text","text":"Now let me read the relevant sections of the C code for polynomial interpolation:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6690,"cache_creation_input_tokens":13475,"cache_read_input_tokens":79191,"cache_creation":{"ephemeral_5m_input_tokens":13475,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"d42469a6-fbee-40d4-a610-91de622bc451"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_0147KzK5VtpaHpwVkX7q7iVg","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01SDsgkJTRXs7vd9kWEZDj9s","name":"Bash","input":{"command":"sed -n '4020,4060p' /home/ollie/Documents/tmp/nanoBragg/nanoBragg.c","description":"Extract polin3 C code reference"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6690,"cache_creation_input_tokens":13475,"cache_read_input_tokens":79191,"cache_creation":{"ephemeral_5m_input_tokens":13475,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"799399b9-44bc-480a-9987-6fd6bb28fffd"}
{"type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"/home/ollie/.bash_profile: line 5: /home/ollie/.cargo/env: No such file or directory\nsed: can't read /home/ollie/Documents/tmp/nanoBragg/nanoBragg.c: No such file or directory","is_error":true,"tool_use_id":"toolu_01SDsgkJTRXs7vd9kWEZDj9s"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"b767cf53-554e-4570-ae1a-608448e25eaf"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01YYXpVrpovnU2T4HKgjuWTq","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01EoqEKao4Vom8duJiMiAheH","name":"Bash","input":{"command":"sed -n '4020,4060p' nanoBragg.c","description":"Extract polin3 C code reference from current directory"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":6889,"cache_read_input_tokens":92666,"cache_creation":{"ephemeral_5m_input_tokens":6889,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"1e5abc79-1923-42eb-81ab-42460525e4d5"}
{"type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"/home/ollie/.bash_profile: line 5: /home/ollie/.cargo/env: No such file or directory\nsed: can't read nanoBragg.c: No such file or directory","is_error":true,"tool_use_id":"toolu_01EoqEKao4Vom8duJiMiAheH"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"1af9349d-3340-4af9-9008-2c44a0012ea2"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01N8sWGjT8HwigtqkY6Ui7p4","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01EWkJZ8PMNZnULsUjjHv1fG","name":"Glob","input":{"pattern":"**/nanoBragg.c"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":252,"cache_read_input_tokens":99555,"cache_creation":{"ephemeral_5m_input_tokens":252,"ephemeral_1h_input_tokens":0},"output_tokens":26,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"ee3230d8-7508-4201-9759-babd26b52dbc"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01EWkJZ8PMNZnULsUjjHv1fG","type":"tool_result","content":"/home/ollie/Documents/tmp/nanoBragg/golden_suite_generator/nanoBragg.c"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"9486dc0f-f7c1-4153-b145-84ec7057e2fb"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01D97jQuBmgUM2imvLUJi37g","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01CvSEypQUtD67ZneFroHqkp","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/golden_suite_generator/nanoBragg.c","offset":4020,"limit":60}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":98,"cache_read_input_tokens":99807,"cache_creation":{"ephemeral_5m_input_tokens":98,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"737d493a-f764-4b78-ad34-8f60ffc155e8"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01CvSEypQUtD67ZneFroHqkp","type":"tool_result","content":"  4020→    static float gset;\n  4021→    float fac,rsq,v1,v2;\n  4022→\n  4023→    if (iset == 0) {\n  4024→        /* no extra deviats handy ... */\n  4025→\n  4026→        /* so pick two uniform deviates on [-1:1] */\n  4027→        do {\n  4028→            v1=2.0*ran1(idum)-1.0;\n  4029→            v2=2.0*ran1(idum)-1.0;\n  4030→            rsq=v1*v1+v2*v2;\n  4031→        } while (rsq >= 1.0 || rsq == 0);\n  4032→        /* restrained to the unit circle */\n  4033→\n  4034→        /* apply Box-Muller transformation to convert to a normal deviate */\n  4035→        fac=sqrt(-2.0*log(rsq)/rsq);\n  4036→        gset=v1*fac;\n  4037→        iset=1;         /* we now have a spare deviate */\n  4038→        return v2*fac;\n  4039→    } else {\n  4040→        /* there is an extra deviate in gset */\n  4041→        iset=0;\n  4042→        return gset;\n  4043→    }\n  4044→}\n  4045→\n  4046→\n  4047→/* generate Lorentzian deviate with FWHM = 2 */\n  4048→float lorentzdev(long *seed) {\n  4049→    float ran1(long *idum);\n  4050→\n  4051→    return tan(M_PI*(ran1(seed)-0.5));\n  4052→}\n  4053→\n  4054→/* return triangular deviate with FWHM = 1 */\n  4055→float triangledev(long *seed) {\n  4056→    float ran1(long *idum);\n  4057→    float value;\n  4058→\n  4059→    value = ran1(seed);\n  4060→    if(value > 0.5){\n  4061→        value = sqrt(2*(value-0.5))-1;\n  4062→    }else{\n  4063→        value = 1-sqrt(2*value);\n  4064→    }\n  4065→\n  4066→    return value;\n  4067→}\n  4068→\n  4069→\n  4070→\n  4071→float expdev(long *idum)\n  4072→{\n  4073→    float dum;\n  4074→\n  4075→    do\n  4076→    dum=ran1(idum);\n  4077→    while( dum == 0.0);\n  4078→    return -log(dum);\n  4079→}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"6b043e33-2434-4428-8f9a-be8ff24e138c"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_013qkfxcCPuZRopHFEwQU8rh","type":"message","role":"assistant","content":[{"type":"text","text":"Let me search for the polynomial interpolation functions:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":933,"cache_read_input_tokens":99905,"cache_creation":{"ephemeral_5m_input_tokens":933,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"b07c33c6-6506-44c9-a03e-849dc00f2106"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_013qkfxcCPuZRopHFEwQU8rh","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01PUqQ3DL954LAmD1Km6U1FE","name":"Grep","input":{"pattern":"^void polin","path":"/home/ollie/Documents/tmp/nanoBragg/golden_suite_generator/nanoBragg.c","output_mode":"content","-n":true}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":933,"cache_read_input_tokens":99905,"cache_creation":{"ephemeral_5m_input_tokens":933,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"ab1f3250-af5c-44f6-8f02-29adba34ed43"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01PUqQ3DL954LAmD1Km6U1FE","type":"tool_result","content":"92:void polint(double *xa, double *ya, double x, double *y);\n93:void polin2(double *x1a, double *x2a, double **ya, double x1,double x2, double *y);\n94:void polin3(double *x1a, double *x2a, double *x3a, double ***ya, double x1,double x2, double x3, double *y);\n4150:void polint(double *xa, double *ya, double x, double *y)\n4162:void polin2(double *x1a, double *x2a, double **ya, double x1, double x2, double *y)\n4174:void polin3(double *x1a, double *x2a, double *x3a, double ***ya, double x1,"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"f46f067d-add1-4ef7-8153-afbe7d7210f6"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01DPfsT5GthyEndnJGwfyGHb","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01H4xxfCFEaGxihHmk95ArD2","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/golden_suite_generator/nanoBragg.c","offset":4150,"limit":50}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":448,"cache_read_input_tokens":100838,"cache_creation":{"ephemeral_5m_input_tokens":448,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"03f0e6ef-0ce7-4f44-a345-3a17580003ea"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01H4xxfCFEaGxihHmk95ArD2","type":"tool_result","content":"  4150→void polint(double *xa, double *ya, double x, double *y)\n  4151→{\n  4152→        double x0,x1,x2,x3;\n  4153→        x0 = (x-xa[1])*(x-xa[2])*(x-xa[3])*ya[0]/((xa[0]-xa[1])*(xa[0]-xa[2])*(xa[0]-xa[3]));\n  4154→        x1 = (x-xa[0])*(x-xa[2])*(x-xa[3])*ya[1]/((xa[1]-xa[0])*(xa[1]-xa[2])*(xa[1]-xa[3]));\n  4155→        x2 = (x-xa[0])*(x-xa[1])*(x-xa[3])*ya[2]/((xa[2]-xa[0])*(xa[2]-xa[1])*(xa[2]-xa[3]));\n  4156→        x3 = (x-xa[0])*(x-xa[1])*(x-xa[2])*ya[3]/((xa[3]-xa[0])*(xa[3]-xa[1])*(xa[3]-xa[2]));\n  4157→        *y = x0+x1+x2+x3;\n  4158→}\n  4159→\n  4160→\n  4161→\n  4162→void polin2(double *x1a, double *x2a, double **ya, double x1, double x2, double *y)\n  4163→{\n  4164→        void polint(double *xa, double *ya, double x, double *y);\n  4165→        int j;\n  4166→        double ymtmp[4];\n  4167→        for (j=1;j<=4;j++) {\n  4168→                polint(x2a,ya[j-1],x2,&ymtmp[j-1]);\n  4169→        }\n  4170→        polint(x1a,ymtmp,x1,y);\n  4171→}\n  4172→\n  4173→\n  4174→void polin3(double *x1a, double *x2a, double *x3a, double ***ya, double x1,\n  4175→        double x2, double x3, double *y)\n  4176→{\n  4177→        void polint(double *xa, double ya[], double x, double *y);\n  4178→        void polin2(double *x1a, double *x2a, double **ya, double x1,double x2, double *y);\n  4179→        void polin1(double *x1a, double *ya, double x1, double *y);\n  4180→        int j;\n  4181→        double ymtmp[4];\n  4182→\n  4183→        for (j=1;j<=4;j++) {\n  4184→            polin2(x2a,x3a,&ya[j-1][0],x2,x3,&ymtmp[j-1]);\n  4185→        }\n  4186→        polint(x1a,ymtmp,x1,y);\n  4187→}\n  4188→\n  4189→\n  4190→/* FWHM = integral = 1 */\n  4191→double ngauss2D(double x,double y)\n  4192→{\n  4193→    return log(16.)/M_PI*exp(-log(16.)*(x*x+y*y));\n  4194→}\n  4195→double ngauss2Dinteg(double x,double y)\n  4196→{\n  4197→    return 0.125*(erf(2.*x*sqrt(log(2.)))*erf(y*sqrt(log(16.)))*sqrt(log(16.)/log(2.)));\n  4198→}\n  4199→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"489a64ee-dfcc-4a1b-8e69-7e0310bee3e6"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01PLo181TwNxPwuKuEzU4SHd","type":"message","role":"assistant","content":[{"type":"text","text":"Perfect! Now I have all the context I need. Let me create the polynomial validation worksheet for Phase D1:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1177,"cache_read_input_tokens":101286,"cache_creation":{"ephemeral_5m_input_tokens":1177,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3689ca17-b1d4-45a4-9858-9608ad4a9db7"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01PLo181TwNxPwuKuEzU4SHd","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01P18HoGvSoaJK8psHPCE6xk","name":"Write","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/reports/2025-10-vectorization/phase_d/polynomial_validation.md","content":"# Phase D1: Polynomial Validation Worksheet\n# Tricubic Interpolation Vectorization\n\n**Document Version:** 1.0\n**Date:** 2025-10-07\n**Git SHA:** (to be recorded after D2 implementation)\n**Initiative:** VECTOR-TRICUBIC-001 (PERF-PYTORCH-004 backlog)\n**Plan Reference:** `plans/active/vectorization.md` Phase D (tasks D1–D4)\n**Design Reference:** `reports/2025-10-vectorization/phase_b/design_notes.md` Section 3\n**Implementation Context:** `reports/2025-10-vectorization/phase_c/implementation_notes.md`\n\n---\n\n## Executive Summary\n\nThis worksheet defines the **tensor-shape contracts**, **C-code reference mappings**, and **validation strategy** for vectorizing the polynomial interpolation helpers (`polint`, `polin2`, `polin3`) that power tricubic structure factor interpolation. Phase C established batched neighborhood gathering producing `(B, 4, 4, 4)` subcubes; Phase D will enable these subcubes to be consumed without Python loops, unlocking GPU parallelism and torch.compile fusion.\n\n**Key Deliverable:** A complete specification for implementing batched polynomial evaluation with clear input/output shapes, C-code mapping per CLAUDE Rule #11, gradient preservation guarantees, and device neutrality requirements. This worksheet serves as the binding contract between design (Phase B), infrastructure (Phase C), and implementation (Phase D2).\n\n---\n\n## 1. Context & Dependencies\n\n### 1.1 Phase Handoff\n\n**From Phase C (Completed):**\n- Batched neighborhood gather produces `sub_Fhkl: (B, 4, 4, 4)` structure factor neighborhoods\n- Coordinate arrays `h_indices, k_indices, l_indices: (B, 4)` ready for polynomial evaluation\n- Shape assertions validate `(B, 4, 4, 4)` neighborhoods and device consistency\n- Test harness `tests/test_tricubic_vectorized.py` validates gather infrastructure on CPU + CUDA\n- **Blocker:** Batched path falls back to nearest-neighbor because polynomial helpers expect scalars\n\n**To Phase D (This Worksheet):**\n- Define exact tensor shapes for vectorized `polint`/`polin2`/`polin3`\n- Map C-code Lagrange formulas to PyTorch batched operations\n- Specify gradient validation strategy (gradcheck tolerances, float64 requirement)\n- Plan device coverage (CPU + CUDA smoke tests, environment flags)\n- Enumerate tap points for instrumentation if parity drifts\n- Document masking strategy for out-of-bounds neighborhoods\n- Record performance baseline expectations for Phase E comparison\n\n**To Phase E (Validation):**\n- Acceptance test selectors (`test_at_str_002.py::test_tricubic_interpolation_enabled`)\n- Benchmark commands (`scripts/benchmarks/tricubic_baseline.py --mode vectorized`)\n- Parity harness invocation (`nb-compare` with ROI for focal-plane correlation)\n- Expected speedup metrics (≥10× vs. scalar baseline per Phase B design notes)\n\n### 1.2 References\n\n**Architecture & Design:**\n- `specs/spec-a-core.md` §4.3 — Tricubic interpolation behavior specification\n- `specs/spec-a-parallel.md` AT-STR-002 — Structure factor parity acceptance test\n- `docs/architecture/pytorch_design.md` §§2.2–2.4 — Vectorization strategy, broadcast shapes\n- `docs/development/pytorch_runtime_checklist.md` — Device/dtype neutrality guardrails\n- `arch.md` Section 15 — Differentiability guidelines (no `.item()`, no `torch.linspace` with tensor endpoints)\n\n**C-Code Implementation (Ground Truth):**\n- `golden_suite_generator/nanoBragg.c` lines 4150–4158 — `polint` (1D Lagrange interpolation)\n- `golden_suite_generator/nanoBragg.c` lines 4162–4171 — `polin2` (2D nested interpolation)\n- `golden_suite_generator/nanoBragg.c` lines 4174–4187 — `polin3` (3D tricubic interpolation)\n\n**Existing PyTorch Implementation (Scalar-Only):**\n- `src/nanobrag_torch/utils/physics.py` lines 315–445 — Current `polint`/`polin2`/`polin3` helpers\n- `src/nanobrag_torch/models/crystal.py` lines 355–464 — `_tricubic_interpolation` caller\n\n**Phase B/C Artifacts:**\n- `reports/2025-10-vectorization/phase_b/design_notes.md` §3 — Detailed C-code semantics mapping\n- `reports/2025-10-vectorization/phase_c/implementation_notes.md` — Gather implementation + test results\n- `reports/2025-10-vectorization/phase_c/gradient_smoke.log` — Current regression harness evidence\n\n**Testing Infrastructure:**\n- `tests/test_tricubic_vectorized.py` — Gather tests (CPU + CUDA device parametrisation)\n- `tests/test_at_str_002.py` — Acceptance tests for interpolation correctness\n- `reports/2025-10-vectorization/phase_d/collect.log` — pytest collection proof (5 tests)\n\n---\n\n## 2. Tensor Shape Design\n\n### 2.1 Input Shapes (from Phase C Gather)\n\nThe vectorized polynomial helpers will consume the outputs of Phase C neighborhood gathering:\n\n| Tensor | Shape | Description | Device/Dtype |\n|--------|-------|-------------|--------------|\n| `sub_Fhkl` | `(B, 4, 4, 4)` | Structure factor neighborhoods (64 values per query point) | Same as input Miller indices |\n| `h_indices` | `(B, 4)` | h-coordinates: `[h_flr-1, h_flr, h_flr+1, h_flr+2]` for each query | Same as input |\n| `k_indices` | `(B, 4)` | k-coordinates: `[k_flr-1, k_flr, k_flr+1, k_flr+2]` | Same as input |\n| `l_indices` | `(B, 4)` | l-coordinates: `[l_flr-1, l_flr, l_flr+1, l_flr+2]` | Same as input |\n| `h`, `k`, `l` | `(B,)` | Query points (fractional Miller indices) | Same as input |\n\n**Critical Constraint:** All tensors must be on the **same device** and use compatible **dtypes** (typically float32 for performance, float64 for gradient validation). Phase C assertions enforce this.\n\n### 2.2 Output Shape\n\n| Tensor | Shape | Description | Constraints |\n|--------|-------|-------------|-------------|\n| `F_cell` | `(B,)` | Interpolated structure factors | `requires_grad` preserved from inputs |\n\n**Reshape Contract:** The caller (`_tricubic_interpolation`) will reshape `F_cell` from `(B,)` back to the original input shape before returning.\n\n### 2.3 Intermediate Shapes (Nested Interpolation)\n\nFollowing the C-code nesting structure:\n\n#### polint (1D Lagrange Interpolation)\n\n```\nInput:\n  xa: (B, 4)  — x-coordinates\n  ya: (B, 4)  — y-values\n  x:  (B,)    — query points\n\nOutput:\n  y:  (B,)    — interpolated values\n```\n\n#### polin2 (2D Interpolation via 4× polint)\n\n```\nInput:\n  x1a: (B, 4)    — first dimension coordinates\n  x2a: (B, 4)    — second dimension coordinates\n  ya:  (B, 4, 4) — values at grid points\n  x1:  (B,)      — query point (first dim)\n  x2:  (B,)      — query point (second dim)\n\nIntermediate:\n  ymtmp: (B, 4)  — results of interpolating along x2 for each of 4 rows\n\nOutput:\n  y: (B,)        — interpolated values\n```\n\n#### polin3 (3D Tricubic Interpolation via 4× polin2)\n\n```\nInput:\n  x1a: (B, 4)       — h-coordinates\n  x2a: (B, 4)       — k-coordinates\n  x3a: (B, 4)       — l-coordinates\n  ya:  (B, 4, 4, 4) — structure factors at grid points\n  x1:  (B,)         — h query points\n  x2:  (B,)         — k query points\n  x3:  (B,)         — l query points\n\nIntermediate:\n  ymtmp: (B, 4)     — results of 4× polin2 calls (one per h-slice)\n\nOutput:\n  y: (B,)           — interpolated F values\n```\n\n### 2.4 Worked Example: Mapping Detector Grid → Batch → Output\n\n**Scenario:** 512×512 detector, no oversample, single phi/mosaic step\n\n**Input Miller Indices:**\n```\nh, k, l: (512, 512)  — detector grid shape\n```\n\n**Phase C Flattening:**\n```\nB = 512 × 512 = 262,144\nh_flat, k_flat, l_flat: (262144,)\n```\n\n**Phase C Gather Outputs:**\n```\nsub_Fhkl: (262144, 4, 4, 4)   — 64 neighbors per pixel\nh_indices: (262144, 4)         — h-coordinates for interpolation\nk_indices: (262144, 4)\nl_indices: (262144, 4)\n```\n\n**Phase D polin3 Evaluation:**\n```\nF_cell_flat: (262144,)  — one interpolated F per pixel\n```\n\n**Caller Reshape:**\n```\nF_cell = F_cell_flat.reshape(512, 512)  — restore detector grid shape\n```\n\n**Memory Footprint:**\n- `sub_Fhkl`: 262,144 × 64 × 4 bytes (float32) = ~67 MB\n- `h/k/l_indices`: 3 × 262,144 × 4 × 4 bytes = ~12.6 MB\n- `F_cell`: 262,144 × 4 bytes = ~1 MB\n- **Total intermediate:** ~80 MB (well within GPU/CPU limits)\n\n---\n\n## 3. C-Code Reference Implementation (CLAUDE Rule #11)\n\n### 3.1 polint (1D Lagrange Interpolation)\n\n**C-Code Implementation Reference (from nanoBragg.c, lines 4150-4158):**\n\n```c\nvoid polint(double *xa, double *ya, double x, double *y)\n{\n        double x0,x1,x2,x3;\n        x0 = (x-xa[1])*(x-xa[2])*(x-xa[3])*ya[0]/((xa[0]-xa[1])*(xa[0]-xa[2])*(xa[0]-xa[3]));\n        x1 = (x-xa[0])*(x-xa[2])*(x-xa[3])*ya[1]/((xa[1]-xa[0])*(xa[1]-xa[2])*(xa[1]-xa[3]));\n        x2 = (x-xa[0])*(x-xa[1])*(x-xa[3])*ya[2]/((xa[2]-xa[0])*(xa[2]-xa[1])*(xa[2]-xa[3]));\n        x3 = (x-xa[0])*(x-xa[1])*(x-xa[2])*ya[3]/((xa[3]-xa[0])*(xa[3]-xa[1])*(xa[3]-xa[2]));\n        *y = x0+x1+x2+x3;\n}\n```\n\n**Lagrange Formula:**\nFor 4-point interpolation, the Lagrange basis function for point `i` is:\n```\nLᵢ(x) = ∏_{j≠i} (x - xⱼ) / (xᵢ - xⱼ)\n```\n\nThe interpolated value is:\n```\ny = Σᵢ₌₀³ yᵢ × Lᵢ(x)\n```\n\n**Vectorization Strategy:**\n\nFor each query point in the batch, compute all 4 Lagrange basis functions in parallel using broadcasting:\n\n```python\ndef polint_vectorized(xa: torch.Tensor, ya: torch.Tensor, x: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Vectorized 1D 4-point Lagrange interpolation.\n\n    C-Code Implementation Reference (from nanoBragg.c, lines 4150-4158):\n    ```c\n    void polint(double *xa, double *ya, double x, double *y)\n    {\n            double x0,x1,x2,x3;\n            x0 = (x-xa[1])*(x-xa[2])*(x-xa[3])*ya[0]/((xa[0]-xa[1])*(xa[0]-xa[2])*(xa[0]-xa[3]));\n            x1 = (x-xa[0])*(x-xa[2])*(x-xa[3])*ya[1]/((xa[1]-xa[0])*(xa[1]-xa[2])*(xa[1]-xa[3]));\n            x2 = (x-xa[0])*(x-xa[1])*(x-xa[3])*ya[2]/((xa[2]-xa[0])*(xa[2]-xa[1])*(xa[2]-xa[3]));\n            x3 = (x-xa[0])*(x-xa[1])*(x-xa[2])*ya[3]/((xa[3]-xa[0])*(xa[3]-xa[1])*(xa[3]-xa[2]));\n            *y = x0+x1+x2+x3;\n    }\n    ```\n\n    Args:\n        xa: (B, 4) x-coordinates\n        ya: (B, 4) y-values\n        x:  (B,) query points\n\n    Returns:\n        (B,) interpolated values\n    \"\"\"\n    # Compute Lagrange basis functions for each i ∈ [0, 3]\n    # For i=0: numerator = (x - xa[1]) * (x - xa[2]) * (x - xa[3])\n    #          denominator = (xa[0] - xa[1]) * (xa[0] - xa[2]) * (xa[0] - xa[3])\n    # Repeat for i=1,2,3\n\n    # Implementation follows C-code term-by-term expansion\n```\n\n**IMPORTANT:** The docstring template MUST be included in the D2 implementation exactly as shown above, per CLAUDE Rule #11.\n\n### 3.2 polin2 (2D Nested Interpolation)\n\n**C-Code Implementation Reference (from nanoBragg.c, lines 4162-4171):**\n\n```c\nvoid polin2(double *x1a, double *x2a, double **ya, double x1, double x2, double *y)\n{\n        void polint(double *xa, double *ya, double x, double *y);\n        int j;\n        double ymtmp[4];\n        for (j=1;j<=4;j++) {\n                polint(x2a,ya[j-1],x2,&ymtmp[j-1]);\n        }\n        polint(x1a,ymtmp,x1,y);\n}\n```\n\n**Vectorization Strategy:**\n\nProcess all 4 rows in parallel using `torch.stack`:\n\n```python\ndef polin2_vectorized(x1a: torch.Tensor, x2a: torch.Tensor, ya: torch.Tensor,\n                      x1: torch.Tensor, x2: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Vectorized 2D polynomial interpolation.\n\n    C-Code Implementation Reference (from nanoBragg.c, lines 4162-4171):\n    ```c\n    void polin2(double *x1a, double *x2a, double **ya, double x1, double x2, double *y)\n    {\n            void polint(double *xa, double *ya, double x, double *y);\n            int j;\n            double ymtmp[4];\n            for (j=1;j<=4;j++) {\n                    polint(x2a,ya[j-1],x2,&ymtmp[j-1]);\n            }\n            polint(x1a,ymtmp,x1,y);\n    }\n    ```\n\n    Args:\n        x1a: (B, 4)    first dimension coordinates\n        x2a: (B, 4)    second dimension coordinates\n        ya:  (B, 4, 4) values at grid points\n        x1:  (B,)      query point (first dim)\n        x2:  (B,)      query point (second dim)\n\n    Returns:\n        (B,) interpolated values\n    \"\"\"\n    # Interpolate along x2 for each of the 4 rows\n    # Stack results into ymtmp: (B, 4)\n    # Final polint along x1 dimension\n```\n\n### 3.3 polin3 (3D Tricubic Interpolation)\n\n**C-Code Implementation Reference (from nanoBragg.c, lines 4174-4187):**\n\n```c\nvoid polin3(double *x1a, double *x2a, double *x3a, double ***ya, double x1,\n        double x2, double x3, double *y)\n{\n        void polint(double *xa, double ya[], double x, double *y);\n        void polin2(double *x1a, double *x2a, double **ya, double x1,double x2, double *y);\n        void polin1(double *x1a, double *ya, double x1, double *y);\n        int j;\n        double ymtmp[4];\n\n        for (j=1;j<=4;j++) {\n            polin2(x2a,x3a,&ya[j-1][0],x2,x3,&ymtmp[j-1]);\n        }\n        polint(x1a,ymtmp,x1,y);\n}\n```\n\n**Vectorization Strategy:**\n\nStack 4 polin2 results (one per h-slice) and apply final polint:\n\n```python\ndef polin3_vectorized(x1a: torch.Tensor, x2a: torch.Tensor, x3a: torch.Tensor,\n                      ya: torch.Tensor, x1: torch.Tensor, x2: torch.Tensor, x3: torch.Tensor) -> torch.Tensor:\n    \"\"\"\n    Vectorized 3D tricubic interpolation.\n\n    C-Code Implementation Reference (from nanoBragg.c, lines 4174-4187):\n    ```c\n    void polin3(double *x1a, double *x2a, double *x3a, double ***ya, double x1,\n            double x2, double x3, double *y)\n    {\n            void polint(double *xa, double ya[], double x, double *y);\n            void polin2(double *x1a, double *x2a, double **ya, double x1,double x2, double *y);\n            void polin1(double *x1a, double *ya, double x1, double *y);\n            int j;\n            double ymtmp[4];\n\n            for (j=1;j<=4;j++) {\n                polin2(x2a,x3a,&ya[j-1][0],x2,x3,&ymtmp[j-1]);\n            }\n            polint(x1a,ymtmp,x1,y);\n    }\n    ```\n\n    Args:\n        x1a: (B, 4)       h-coordinates\n        x2a: (B, 4)       k-coordinates\n        x3a: (B, 4)       l-coordinates\n        ya:  (B, 4, 4, 4) structure factors at grid points\n        x1:  (B,)         h query points\n        x2:  (B,)         k query points\n        x3:  (B,)         l query points\n\n    Returns:\n        (B,) interpolated F values\n    \"\"\"\n    # Interpolate 4 2D slices (one per h index)\n    # Stack results into ymtmp: (B, 4)\n    # Final polint along h dimension\n```\n\n---\n\n## 4. Gradient Validation Strategy\n\n### 4.1 Differentiability Requirements\n\nPer `arch.md` Section 15 and `docs/development/pytorch_runtime_checklist.md`, vectorized polynomial helpers MUST:\n\n1. **Preserve Computation Graph:** All operations use tensor arithmetic; no `.item()`, `.numpy()`, or `.detach()` calls\n2. **Avoid Non-Differentiable Functions:** No `torch.linspace` with tensor endpoints (known PyTorch limitation)\n3. **Handle Division Safely:** Clamp denominators to avoid NaN/Inf from near-zero values\n4. **Maintain `requires_grad`:** Output tensors inherit gradient tracking from inputs\n\n### 4.2 Gradient Test Plan\n\n**Unit-Level Tests (D3):**\n\nTest each vectorized helper independently with `torch.autograd.gradcheck`:\n\n```python\ndef test_polint_vectorized_gradients():\n    \"\"\"Verify gradients flow through vectorized 1D interpolation.\"\"\"\n    xa = torch.tensor([[0.0, 1.0, 2.0, 3.0]], requires_grad=False, dtype=torch.float64)\n    ya = torch.tensor([[1.0, 2.0, 4.0, 8.0]], requires_grad=True, dtype=torch.float64)\n    x = torch.tensor([1.5], requires_grad=True, dtype=torch.float64)\n\n    # Gradcheck w.r.t. x\n    assert torch.autograd.gradcheck(\n        lambda x_: polint_vectorized(xa, ya, x_),\n        x,\n        eps=1e-6,\n        atol=1e-4\n    )\n\n    # Gradcheck w.r.t. ya\n    assert torch.autograd.gradcheck(\n        lambda ya_: polint_vectorized(xa, ya_, x),\n        ya,\n        eps=1e-6,\n        atol=1e-4\n    )\n```\n\n**Expected Tolerances (float64):**\n- `eps=1e-6` — finite difference step size\n- `atol=1e-4` — absolute tolerance for numerical vs. analytical gradients\n- `rtol=1e-3` — relative tolerance (default)\n\n**Integration-Level Test (D3):**\n\nVerify end-to-end gradients through `_tricubic_interpolation`:\n\n```python\ndef test_tricubic_vectorized_end_to_end_gradients():\n    \"\"\"Verify gradients flow through batched tricubic path.\"\"\"\n    cell_a = torch.tensor(100.0, requires_grad=True, dtype=torch.float64)\n    config = CrystalConfig(cell_a=cell_a, ...)\n    crystal = Crystal(config)\n\n    # Batched input\n    h = torch.tensor([1.5, 2.3, 3.1], dtype=torch.float64)\n    k = torch.tensor([0.5, 1.2, 2.8], dtype=torch.float64)\n    l = torch.tensor([0.0, 0.5, 1.0], dtype=torch.float64)\n\n    F_cell = crystal.get_structure_factor(h, k, l)\n    loss = F_cell.sum()\n    loss.backward()\n\n    assert cell_a.grad is not None, \"Gradient should flow to cell parameter\"\n    assert not torch.isnan(cell_a.grad).any(), \"Gradients must not be NaN\"\n```\n\n### 4.3 Gradient Failure Modes & Mitigation\n\n| Failure Mode | Symptom | Mitigation |\n|--------------|---------|------------|\n| Division by zero in Lagrange denominators | `grad = NaN` | Clamp denominators: `denom.clamp_min(1e-10)` |\n| Detached intermediate tensors | `grad = None` | Audit all operations; ensure no `.item()` calls |\n| `torch.linspace` with tensor coords | `grad = None` for endpoints | Use manual arithmetic: `xa[:, i]` indexing |\n| In-place operations on tracked tensors | Runtime error | Use out-of-place ops: `+` not `+=` |\n\n---\n\n## 5. Device & Dtype Neutrality Plan\n\n### 5.1 Device Handling\n\nPer Core Rule #16 (PyTorch Device & Dtype Neutrality):\n\n**Requirements:**\n1. Accept tensors on any device (CPU, CUDA)\n2. All intermediate tensors must live on the **same device** as inputs\n3. No hard-coded `.cpu()` or `.cuda()` calls\n4. Infer device from input tensors\n\n**Implementation Pattern:**\n\n```python\ndef polint_vectorized(xa, ya, x):\n    device = xa.device  # Infer from input\n    dtype = xa.dtype\n\n    # All intermediate tensors inherit device/dtype\n    # No explicit .to(device=...) calls needed if using tensor ops\n```\n\n**Phase C Infrastructure:**\n- Offsets array: Created with `device=self.device` (line 373 in crystal.py)\n- Coordinate grids: Inherit device from flattened Miller indices\n- Neighborhoods: Gathered via advanced indexing (preserves device)\n\n**Prohibition:** Do NOT call `.to(device=\"cpu\")` or `.to(device=\"cuda\")` inside polynomial helpers.\n\n### 5.2 Dtype Handling\n\n**Default Precision:** float32 (performance-optimized, per `arch.md` Section 14)\n\n**Gradient Testing Precision:** float64 (required for `torch.autograd.gradcheck` numerical stability)\n\n**Test Strategy:**\n\n```python\n@pytest.mark.parametrize(\"dtype\", [torch.float32, torch.float64])\ndef test_polint_vectorized_dtype_neutral(dtype):\n    \"\"\"Verify polint works with different dtypes.\"\"\"\n    xa = torch.tensor([[0.0, 1.0, 2.0, 3.0]], dtype=dtype)\n    ya = torch.tensor([[1.0, 2.0, 4.0, 8.0]], dtype=dtype)\n    x = torch.tensor([1.5], dtype=dtype)\n\n    result = polint_vectorized(xa, ya, x)\n    assert result.dtype == dtype\n    assert not torch.isnan(result).any()\n```\n\n### 5.3 CPU + CUDA Smoke Tests\n\n**Requirement:** Run polynomial tests on both CPU and CUDA before marking Phase D complete.\n\n**Parametrised Test Pattern:**\n\n```python\n@pytest.mark.parametrize(\"device\", [\n    \"cpu\",\n    pytest.param(\"cuda\", marks=pytest.mark.skipif(not torch.cuda.is_available(), reason=\"CUDA not available\"))\n])\ndef test_polin3_vectorized_device_neutral(device):\n    \"\"\"Verify polin3 works on CPU and CUDA.\"\"\"\n    ya = torch.rand(10, 4, 4, 4, device=device)\n    x1a = torch.arange(4, device=device, dtype=torch.float32)\n    # ... rest of test\n```\n\n**Commands (Phase D4):**\n\n```bash\n# CPU test\nenv KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k \"poly\" -v\n\n# CUDA test (when available)\nenv KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k \"poly and cuda\" -v\n```\n\n**Artifact Storage:**\n- `reports/2025-10-vectorization/phase_d/pytest_cpu.log`\n- `reports/2025-10-vectorization/phase_d/pytest_cuda.log`\n\n---\n\n## 6. Masking Strategy for Out-of-Bounds Neighborhoods\n\n### 6.1 Current Behavior (Phase C)\n\nPhase C detects OOB neighborhoods **before** gathering:\n\n```python\nif not valid_mask.all():\n    if not self._interpolation_warning_shown:\n        num_invalid = (~valid_mask).sum().item()\n        print(f\"WARNING: {num_invalid} query points have out-of-range neighborhoods\")\n        print(\"WARNING: using default_F for these points; disabling interpolation for remainder\")\n        self._interpolation_warning_shown = True\n    self.interpolate = False\n```\n\n**Consequence:** Once any OOB point is detected, interpolation is **globally disabled** for the rest of the run.\n\n### 6.2 Phase D Masking Requirements\n\n**Goal:** Preserve existing OOB semantics while enabling batched polynomial evaluation.\n\n**Strategy:**\n\n1. **OOB Detection:** Already handled by Phase C (before polynomial call)\n2. **Polynomial Input:** Only valid neighborhoods reach `polin3_vectorized`\n3. **Fallback Path:** Invalid points use `default_F` (applied in caller)\n\n**No Additional Masking Needed in Polynomial Helpers:** The helpers assume all input neighborhoods are valid. The caller (`_tricubic_interpolation`) applies the mask via `torch.where`:\n\n```python\nif valid_mask.all():\n    # All points valid → call polin3_vectorized\n    F_cell = polin3_vectorized(h_indices, k_indices, l_indices, sub_Fhkl, h_flat, k_flat, l_flat)\nelse:\n    # Mixed valid/invalid → apply mask\n    F_cell_valid = polin3_vectorized(h_indices[valid_mask], ...)\n    F_cell = torch.where(valid_mask, F_cell_valid_padded, default_F)\n```\n\n**Alternative (Simpler):** Since Phase C already disables interpolation globally on first OOB, the batched path may never encounter mixed masks. Verify this in Phase D2 implementation.\n\n### 6.3 NaN Handling\n\n**Potential Issue:** Lagrange denominators `(xa[i] - xa[j])` could be zero if grid is degenerate.\n\n**Mitigation:**\n\n```python\n# In polint_vectorized\ndenom_i = (xa[:, i] - xa[:, j]).clamp_min(1e-10)  # Prevent division by zero\n```\n\n**Test Case (Phase D3):**\n\n```python\ndef test_polint_vectorized_handles_near_degenerate_grids():\n    \"\"\"Verify no NaNs with nearly-equal grid points.\"\"\"\n    xa = torch.tensor([[0.0, 0.0 + 1e-12, 1.0, 2.0]])  # Near-duplicate point\n    ya = torch.tensor([[1.0, 2.0, 3.0, 4.0]])\n    x = torch.tensor([0.5])\n\n    result = polint_vectorized(xa, ya, x)\n    assert not torch.isnan(result).any()\n    assert not torch.isinf(result).any()\n```\n\n---\n\n## 7. Instrumentation & Tap Points\n\n### 7.1 Purpose\n\nIf parity drifts between C-code and PyTorch batched polynomials, we need **tap points** to log intermediate values for comparison.\n\n### 7.2 Proposed Tap Points\n\n**polint (1D):**\n- Input: `xa[0], ya[0], x` (first query point in batch)\n- Lagrange basis weights: `basis[0, :]` (4 values)\n- Output: `y[0]`\n\n**polin2 (2D):**\n- Input: `ya[0, :, :]` (first 4×4 slice)\n- Intermediate: `ymtmp[0, :]` (4 values after x2 interpolation)\n- Output: `y[0]`\n\n**polin3 (3D):**\n- Input: `ya[0, :, :, :]` (first 4×4×4 neighborhood)\n- Intermediate: `ymtmp[0, :]` (4 values after x2/x3 interpolation)\n- Output: `y[0]`\n\n### 7.3 Instrumentation Example\n\n```python\ndef polin3_vectorized(...):\n    # ... implementation ...\n\n    # TAP POINT (conditional, disabled by default)\n    if os.environ.get(\"NANOBRAG_DEBUG_POLIN3\") == \"1\":\n        print(f\"TRACE_PY: polin3 input ya[0, 0, 0, :] = {ya[0, 0, 0, :].tolist()}\")\n        print(f\"TRACE_PY: polin3 ymtmp[0, :] = {ymtmp[0, :].tolist()}\")\n        print(f\"TRACE_PY: polin3 output y[0] = {y[0].item()}\")\n\n    return y\n```\n\n**C-Code Equivalent:**\n\n```c\n// In nanoBragg.c polin3\nif (getenv(\"NANOBRAG_DEBUG_POLIN3\")) {\n    printf(\"TRACE_C: polin3 input ya[0][0][0] = %.15g\\n\", ya[0][0][0]);\n    // ... more taps\n}\n```\n\n**Activation (Phase E debugging):**\n\n```bash\nexport NANOBRAG_DEBUG_POLIN3=1\npytest tests/test_at_str_002.py -v\n```\n\n### 7.4 Tap Point Storage\n\nIf tap logging grows complex, store schemas in:\n```\nreports/2025-10-vectorization/phase_d/tap_points.md\n```\n\n**Decision:** Defer tap point implementation to Phase E (parity debugging) unless D3 unit tests reveal discrepancies.\n\n---\n\n## 8. Performance Baseline & Expected Metrics\n\n### 8.1 Current Baseline (Phase A)\n\n**From `reports/2025-10-vectorization/phase_a/tricubic_baseline.md`:**\n- CPU: ~1.4 ms/call (100 scalar calls in benchmark)\n- CUDA: ~5.5 ms/call (100 scalar calls in benchmark)\n\n**Total for 100 calls:**\n- CPU: 140 ms\n- CUDA: 550 ms\n\n**Bottleneck:** External Python loop over query points; each call has fixed overhead.\n\n### 8.2 Expected Post-Vectorization Performance (Phase E Target)\n\n**Assumption:** Batched polynomial evaluation amortizes overhead across B points.\n\n**Target Speedup:**\n- **CPU:** 5–10× improvement (14–28 ms for 100 batched points vs. 140 ms for 100 scalar calls)\n- **CUDA:** 10–50× improvement (11–55 ms vs. 550 ms) — depends on kernel fusion via torch.compile\n\n**Measurement Command (Phase E):**\n\n```bash\npython scripts/benchmarks/tricubic_baseline.py \\\n    --mode vectorized \\\n    --outdir reports/2025-10-vectorization/phase_e/perf \\\n    --device cpu cuda\n```\n\n**Expected Artifacts:**\n- `phase_e/perf/tricubic_baseline_results.json` — Before/after timing comparison\n- `phase_e/perf_summary.md` — Speedup analysis and bottleneck identification\n\n### 8.3 Torch.compile Compatibility\n\n**Goal:** Ensure vectorized polynomial helpers are compile-friendly (no graph breaks).\n\n**Test (Phase E):**\n\n```python\n@torch.compile(mode=\"reduce-overhead\")\ndef compiled_polin3(x1a, x2a, x3a, ya, x1, x2, x3):\n    return polin3_vectorized(x1a, x2a, x3a, ya, x1, x2, x3)\n\ndef test_polin3_compiles_without_graph_breaks():\n    \"\"\"Verify torch.compile works with vectorized polin3.\"\"\"\n    ya = torch.rand(100, 4, 4, 4, device=\"cpu\")\n    # ... setup inputs ...\n\n    # Warm-up compile\n    _ = compiled_polin3(x1a, x2a, x3a, ya, x1, x2, x3)\n\n    # Verify no exceptions during compiled execution\n    result = compiled_polin3(x1a, x2a, x3a, ya, x1, x2, x3)\n    assert result.shape == (100,)\n```\n\n**Known Issue:** Per `docs/fix_plan.md` PERF-PYTORCH-004 Attempt #17, CUDA graphs + `.reshape()` can trigger \"accessing tensor output of CUDAGraphs that has been overwritten\" errors. If this occurs, use `.contiguous().clone()` instead.\n\n---\n\n## 9. Test Coverage Plan (Phase D3)\n\n### 9.1 Unit Tests (New)\n\n**File:** `tests/test_tricubic_vectorized.py` (extend existing TestTricubicGather class)\n\n**New Test Class:** `TestTricubicPolynomials`\n\n| Test Name | Purpose | Coverage |\n|-----------|---------|----------|\n| `test_polint_vectorized_matches_scalar` | Verify batched polint produces same results as scalar loop | Scalar equivalence, B=1 and B>1 |\n| `test_polint_vectorized_gradients` | Verify gradcheck passes for polint | Gradient flow w.r.t. x and ya |\n| `test_polin2_vectorized_matches_scalar` | Verify batched polin2 vs. scalar | 2D interpolation correctness |\n| `test_polin2_vectorized_gradients` | Verify gradcheck passes for polin2 | Gradient flow end-to-end |\n| `test_polin3_vectorized_vs_c_reference` | Verify polin3 matches C-code output | Parity with golden C values |\n| `test_polin3_vectorized_gradients` | Verify gradcheck passes for polin3 | Gradient flow for tricubic |\n| `test_polynomial_device_neutrality[cpu]` | Verify CPU execution | Device consistency |\n| `test_polynomial_device_neutrality[cuda]` | Verify CUDA execution | Device consistency |\n| `test_polynomial_dtype_preservation` | Verify float32/float64 handling | Dtype compatibility |\n| `test_polynomial_handles_near_degenerate` | Verify NaN handling for edge cases | Numerical stability |\n\n**Total New Tests:** 10 (in addition to existing 5 gather tests)\n\n### 9.2 Integration Tests (Regression)\n\n**Existing Tests (Must Still Pass):**\n- `tests/test_at_str_002.py::test_tricubic_interpolation_enabled`\n- `tests/test_at_str_002.py::test_tricubic_out_of_bounds_fallback`\n- `tests/test_at_str_002.py::test_auto_enable_interpolation`\n\n**Expected Behavior Change:**\n- Phase C: Batched inputs → fall back to nearest-neighbor (warning)\n- Phase D: Batched inputs → use `polin3_vectorized` (no warning)\n\n### 9.3 Acceptance Tests (Phase E)\n\n**File:** `tests/test_at_str_002.py`\n\n**Command:**\n\n```bash\nenv KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v\n```\n\n**Expected:** All tests pass with correlation ≥ 0.999 (same as scalar path).\n\n---\n\n## 10. Open Questions & Decisions for Supervisor Sign-Off\n\n### 10.1 Resolved in This Worksheet\n\n✅ **Tensor shapes:** Fully specified for all helpers (polint/polin2/polin3)\n✅ **C-code mapping:** CLAUDE Rule #11 templates ready for docstrings\n✅ **Gradient strategy:** gradcheck plan with float64 + tolerances defined\n✅ **Device coverage:** CPU + CUDA parametrised tests planned\n✅ **Masking:** OOB handling delegated to Phase C caller (no polynomial changes)\n✅ **Tap points:** Conditional logging strategy defined for Phase E debugging\n\n### 10.2 Open Questions for Supervisor Review\n\n1. **Mini-Batching:** Should Phase D implement chunking for B>1M, or defer to Phase E if OOM occurs?\n   - **Recommendation:** Defer. Test with 2048² detector (B=4M) in Phase E first.\n\n2. **Precomputed Weights:** Should we cache Lagrange weight matrices for integer-spaced grids?\n   - **Recommendation:** Defer to Phase F. Nested loop approach easier to verify first.\n\n3. **Torch.compile Mode:** Use `\"reduce-overhead\"`, `\"max-autotune\"`, or skip compile in Phase D?\n   - **Recommendation:** Test with `\"reduce-overhead\"` in Phase E; skip in D2 implementation.\n\n4. **Complex HKL Interpolation:** C-code supports complex structure factors; PyTorch path currently real-only.\n   - **Recommendation:** Out of scope for Phase D; add TODO for future work.\n\n5. **Alternative Interpolation Schemes:** Spec mentions cubic splines; C-code uses Lagrange. Unify?\n   - **Recommendation:** Out of scope. Lagrange is spec'd and C-code ground truth.\n\n---\n\n## 11. Exit Criteria for Phase D1 (This Worksheet)\n\n**Phase D1 Complete When:**\n- [x] This worksheet (`polynomial_validation.md`) authored with all required sections\n- [x] Tensor shapes documented with worked examples\n- [x] C-code references quoted exactly (lines 4150–4187) per CLAUDE Rule #11\n- [x] Gradient validation strategy specified (gradcheck commands, tolerances)\n- [x] Device coverage plan defined (CPU + CUDA smoke tests)\n- [x] Tap point schema outlined for future debugging\n- [x] Performance baseline expectations recorded from Phase A\n- [x] Test coverage plan enumerated (10 new unit tests + regression)\n- [x] `pytest --collect-only -q tests/test_tricubic_vectorized.py` output captured in `reports/2025-10-vectorization/phase_d/collect.log`\n- [x] Worksheet reviewed by supervisor (galph) — **PENDING**\n\n**Next Phase D2:** Implement `polint_vectorized`, `polin2_vectorized`, `polin3_vectorized` in `utils/physics.py` following this worksheet's specifications.\n\n---\n\n## 12. Configuration Knobs & Environment Flags\n\n### 12.1 Environment Variables\n\n**Required for All Tests:**\n- `KMP_DUPLICATE_LIB_OK=TRUE` — Prevent MKL library conflicts\n\n**Optional for Debugging:**\n- `NANOBRAG_DEBUG_POLIN3=1` — Enable tap point logging\n- `TORCH_COMPILE_DEBUG=1` — Debug torch.compile graph breaks\n\n**Future Performance Tuning:**\n- `TORCH_COMPILE_MODE=reduce-overhead` — torch.compile strategy\n- `OMP_NUM_THREADS=8` — CPU parallelism for NumPy/PyTorch\n\n### 12.2 Runtime Configuration\n\n**Dtype Override (Phase E):**\n\n```python\n# Force float64 for gradient validation\nF_cell = crystal.get_structure_factor(h.to(dtype=torch.float64), ...)\n```\n\n**Device Override (Phase E):**\n\n```python\n# Force CUDA execution\nF_cell = crystal.get_structure_factor(h.to(device=\"cuda\"), ...)\n```\n\n**Torch.compile Caching:**\n\nPer `docs/fix_plan.md` PERF-PYTORCH-004, compiled kernels are cached in `~/.cache/torch/inductor/`. Phase E should document cache behavior.\n\n---\n\n## 13. Coordination with Other Plans\n\n### 13.1 PERF-PYTORCH-004 (Performance Initiative)\n\n**Dependency:** Phase D vectorization unblocks PERF-004 Phase C benchmarking tasks.\n\n**Hand-off:** Once Phase E validates speedup, PERF-004 can proceed with:\n- C5: Weighted-source parity memo\n- C8/C9: Pixel-grid and rotated-vector cost probes\n- D5/D6/D7: Caching work\n\n**Artifact Link:** `reports/benchmarks/20250930-165726-compile-cache/analysis.md` identifies `polin3` as hotspot.\n\n### 13.2 CLI-FLAGS-003 (CLI Parity)\n\n**Dependency:** CLI dtype flag (`-dtype float64`) should work with vectorized tricubic.\n\n**Verification (Phase E):** Run acceptance tests with `-dtype float64` flag and ensure no regressions.\n\n### 13.3 AT-TIER2-GRADCHECK (Gradient Tests)\n\n**Dependency:** Phase D gradient tests contribute to AT-TIER2 coverage.\n\n**Hand-off:** Once Phase D3 completes, update `docs/fix_plan.md` AT-TIER2 Attempts History with polynomial gradcheck evidence.\n\n---\n\n## 14. Documentation Updates (Phase D4 & Phase G)\n\n### 14.1 Phase D4 (Implementation Loop)\n\n**Update After D2 Implementation:**\n- `src/nanobrag_torch/utils/physics.py` — Add vectorized polynomial helpers with C-code docstrings\n- `src/nanobrag_torch/models/crystal.py` — Update `_tricubic_interpolation` to use batched helpers\n- `tests/test_tricubic_vectorized.py` — Add `TestTricubicPolynomials` class with 10 new tests\n\n**Capture Artifacts:**\n- `reports/2025-10-vectorization/phase_d/pytest_cpu.log` — Full test run on CPU\n- `reports/2025-10-vectorization/phase_d/pytest_cuda.log` — Full test run on CUDA (if available)\n- `reports/2025-10-vectorization/phase_d/implementation_notes.md` — Summary of D2 changes (like Phase C)\n\n### 14.2 Phase G (Documentation Handoff)\n\n**Update After Phase E Validation:**\n- `docs/development/pytorch_runtime_checklist.md` — Add tricubic vectorization lessons learned\n- `docs/architecture/pytorch_design.md` — Document polynomial broadcasting patterns\n- `arch.md` — Update ADR-11 (Full Tensor Vectorization) to include tricubic interpolation\n- `CLAUDE.md` — Add one-line note about vectorization requirement for future structure factor work\n\n---\n\n## 15. Summary & Hand-off to Phase D2\n\n**This Worksheet Provides:**\n- ✅ Complete tensor-shape specification for polint/polin2/polin3\n- ✅ Exact C-code references (lines 4150–4187) ready for docstring insertion\n- ✅ Gradient validation plan with gradcheck commands and tolerances\n- ✅ Device coverage strategy (CPU + CUDA smoke tests)\n- ✅ Tap point inventory for future parity debugging\n- ✅ Performance baseline from Phase A and expected Phase E targets\n- ✅ Test coverage plan (10 new unit tests + regression)\n- ✅ Masking/NaN handling strategies\n- ✅ Open questions documented for supervisor triage\n\n**Phase D2 Implementation Checklist:**\n1. Copy C-code docstring templates from Section 3 into new helpers\n2. Implement `polint_vectorized` following shape spec in Section 2.3\n3. Implement `polin2_vectorized` stacking 4× polint results\n4. Implement `polin3_vectorized` stacking 4× polin2 results\n5. Update `crystal.py` to call vectorized helpers for B>1\n6. Add 10 unit tests from Section 9.1 to `test_tricubic_vectorized.py`\n7. Run CPU + CUDA smoke tests and capture logs\n8. Update fix_plan.md Attempts History with metrics + artifact paths\n\n**Blocking Conditions for Phase D2 Start:**\n- ✅ Phase C gather infrastructure complete (verified in Phase C3)\n- ✅ Worksheet reviewed by supervisor (galph) — **PENDING**\n- ⬜ No missing C-code references or undefined tensor shapes (self-audit complete)\n\n**Next Loop (D2):** Implement batched polynomial helpers in `utils/physics.py` and integrate into `crystal.py`, following this worksheet as the binding specification.\n\n---\n\n## Document Metadata\n\n- **Author:** Ralph (nanoBragg PyTorch development loop)\n- **Reviewed By:** Galph (supervisor) — **PENDING**\n- **Status:** DRAFT (Phase D1 deliverable; awaiting supervisor approval for D2 start)\n- **Artifact Path:** `reports/2025-10-vectorization/phase_d/polynomial_validation.md`\n- **Collection Log:** `reports/2025-10-vectorization/phase_d/collect.log` (5 tests collected)\n- **Next Actions:**\n  1. Supervisor reviews worksheet for completeness and technical accuracy\n  2. If approved, proceed to Phase D2 implementation\n  3. If changes needed, update worksheet and re-submit\n\n---\n\n**End of Phase D1 Polynomial Validation Worksheet**\n"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1177,"cache_read_input_tokens":101286,"cache_creation":{"ephemeral_5m_input_tokens":1177,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"c7b31db3-9a14-4da2-8b4b-ba8d80f9c570"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01P18HoGvSoaJK8psHPCE6xk","type":"tool_result","content":"File created successfully at: /home/ollie/Documents/tmp/nanoBragg/reports/2025-10-vectorization/phase_d/polynomial_validation.md"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"518420eb-2a11-4d89-a603-717b9e5006c4"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01LfkLxy6g92Qe4UfkhCkWmg","type":"message","role":"assistant","content":[{"type":"text","text":"Perfect! Now let me update the fix_plan.md with this Phase D1 attempt and run pytest --collect-only to verify the tests are discoverable (already done above):"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":12572,"cache_read_input_tokens":102463,"cache_creation":{"ephemeral_5m_input_tokens":12572,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"abbc13f8-3b27-406d-bafd-0ef92d2746b1"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01LfkLxy6g92Qe4UfkhCkWmg","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01EGzjcrdcrDmk7jqwPRxnDg","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md","offset":2194,"limit":100}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":12572,"cache_read_input_tokens":102463,"cache_creation":{"ephemeral_5m_input_tokens":12572,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"b1477166-360c-4ee6-9a86-bcfe39b2fcb0"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01EGzjcrdcrDmk7jqwPRxnDg","type":"tool_result","content":"  2194→## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption\n  2195→- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).\n  2196→- Priority: High\n  2197→- Status: in_progress (Phases A–C complete; Phase D polynomial vectorization pending)\n  2198→- Owner/Date: galph/2025-10-17\n  2199→- Plan Reference: `plans/active/vectorization.md`\n  2200→- Reproduction (C & PyTorch):\n  2201→  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`\n  2202→  * Optional microbenchmarks: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --device cpu` (and `--device cuda`), plus `scripts/benchmarks/absorption_baseline.py` for detector absorption timing.\n  2203→  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.\n  2204→- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).\n  2205→- Next Actions (2025-11-27 refresh → galph supervision):\n  2206→  1. Phase D1 — Follow `plans/active/vectorization.md` (Phase D table) to author `reports/2025-10-vectorization/phase_d/polynomial_validation.md` with tensor-shape derivations and C references before code edits. Include tap-point plan and cite design_notes §3.\n  2207→  2. Phase D2 — Implement vectorised `polint`/`polin2`/`polin3` per plan guidance, adding CLAUDE Rule #11 docstrings and ensuring differentiability/device neutrality.\n  2208→  3. Phase D3 — Extend `tests/test_tricubic_vectorized.py` with `TestTricubicPoly` and capture collect-only evidence under `phase_d/collect.log` prior to targeted pytest runs.\n  2209→  4. Phase D4 — Execute CPU + CUDA sweeps (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py tests/test_at_str_002.py -v`) storing logs under `phase_d/pytest_cpu.log` & `phase_d/pytest_cuda.log`; summarise timings in `polynomial_validation.md`.\n  2210→  5. Phase E staging — After D1–D4 pass, prep `reports/2025-10-vectorization/phase_e/` (collect log, benchmark command templates) before launching E1–E3 validation tasks.\n  2211→- Attempts History:\n  2212→  * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.\n  2213→    Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.\n  2214→    Artifacts:\n  2215→      - `reports/2025-10-vectorization/phase_a/test_at_str_002.collect.log` — Test collection output confirming 3 tests collected\n  2216→      - `reports/2025-10-vectorization/phase_a/test_at_str_002.log` — Full pytest execution log for tricubic tests\n  2217→      - `reports/2025-10-vectorization/phase_a/test_at_abs_001.log` — Full pytest execution log for absorption tests\n  2218→      - `reports/2025-10-vectorization/phase_a/env.json` — Environment snapshot (Python 3.13.7, PyTorch 2.8.0+cu128, CUDA available)\n  2219→    Observations/Hypotheses:\n  2220→      - Current tricubic implementation passes all acceptance tests without warnings, indicating it works correctly for existing test cases\n  2221→      - No evidence yet of fallback warnings or performance issues in these specific tests\n  2222→      - Test collection confirmed 3 tricubic tests exist and are discoverable\n  2223→      - CUDA is available in test environment for future GPU benchmarking\n  2224→      - Phase A1 complete per plan guidance (`plans/active/vectorization.md` tasks A1 complete)\n  2225→    Next Actions: Log Phase A1 evidence in fix_plan and begin Phase B design work—specifically draft the tensor-shape broadcast plan (B1), map C polin3 semantics to batched tensor ops (B2), and outline the gradient/device checklist (B3) in `reports/2025-10-vectorization/phase_b/design_notes.md` before touching implementation code.\n  2226→  * [2025-10-07] Attempt #2 (ralph loop) — Result: **Phase A2/A3 COMPLETE** (tricubic and absorption baseline harnesses created and executed). Both CPU and CUDA timings captured.\n  2227→    Metrics:\n  2228→      - Tricubic (CPU): 100 scalar calls @ ~1402 μs/call (~713 calls/sec); sizes 256, 512\n  2229→      - Tricubic (CUDA): 100 scalar calls @ ~5548 μs/call (~180 calls/sec); sizes 256, 512\n  2230→      - Absorption (CPU, 256²): 5.2 ms warm run (12.6M pixels/sec); 5 thicksteps\n  2231→      - Absorption (CPU, 512²): 31.5 ms warm run (8.3M pixels/sec); 5 thicksteps\n  2232→      - Absorption (CUDA, 256²): 5.8 ms warm run (11.3M pixels/sec); 5 thicksteps\n  2233→      - Absorption (CUDA, 512²): 5.9 ms warm run (44.8M pixels/sec); 5 thicksteps\n  2234→    Artifacts:\n  2235→      - `scripts/benchmarks/tricubic_baseline.py` — Reusable tricubic interpolation benchmark harness with argparse (--sizes, --repeats, --device, --dtype, --outdir)\n  2236→      - `scripts/benchmarks/absorption_baseline.py` — Reusable detector absorption benchmark harness with argparse (--sizes, --thicksteps, --repeats, --device, --dtype, --outdir)\n  2237→      - `reports/2025-10-vectorization/phase_a/tricubic_baseline.md` — CPU & CUDA tricubic baseline summary (markdown)\n  2238→      - `reports/2025-10-vectorization/phase_a/tricubic_baseline_results.json` — CPU & CUDA tricubic raw timing data (JSON)\n  2239→      - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` — CPU & CUDA absorption baseline summary (markdown)\n  2240→      - `reports/2025-10-vectorization/phase_a/absorption_baseline_results.json` — CPU & CUDA absorption raw timing data (JSON)\n  2241→      - `reports/2025-10-vectorization/phase_a/run_log.txt` — Combined execution log from all benchmark runs\n  2242→    Observations/Hypotheses:\n  2243→      - Tricubic baseline reveals current scalar-only limitation: implementation only supports one Miller index at a time, requiring Python loop over all detector pixels\n  2244→      - CUDA tricubic performance ~4× slower than CPU (5548 μs vs 1402 μs per call), likely due to kernel launch overhead dominating scalar operations\n  2245→      - Absorption shows good GPU scaling for larger detectors (512²: 44.8M px/s vs CPU 8.3M px/s = 5.4× speedup)\n  2246→      - Absorption CPU shows large cold-run overhead (1.9s for 256²) likely from torch.compile warmup; warm runs are very fast (5.2ms)\n  2247→      - Current non-vectorized tricubic: ~1.4 ms/call × 256×256 pixels = ~92 seconds for full detector (if called per-pixel)\n  2248→      - Vectorization opportunity: eliminate Python loop over pixels, process entire detector grid in batched tensor ops\n  2249→    Next Actions: With Phase A complete, execute Phase B tasks in order: (1) capture the `(S,F,4,4,4)` gather and broadcast plan (B1), (2) translate nanoBragg polin/polin2/polin3 algebra into tensor expressions (B2), and (3) record the differentiability/device checklist (B3). Store outputs under `reports/2025-10-vectorization/phase_b/` and update this entry with links once the memo is ready.\n  2250→  * [2025-10-07] Attempt #3 (ralph loop) — Result: **Phase B1–B3 COMPLETE** (design notes document drafted covering tensor shapes, polynomial semantics, gradient/device requirements). Documentation-only loop per input.md Mode: Docs.\n  2251→    Metrics: Test collection passed (`pytest --collect-only -q` succeeded with 463 tests discovered). No code changes; docs-only validation.\n  2252→    Artifacts:\n  2253→      - `reports/2025-10-vectorization/phase_b/design_notes.md` — Comprehensive 12-section design memo covering:\n  2254→        * Section 2: Tensor shape design with `(B, 4, 4, 4)` neighborhood structure and memory footprint estimates\n  2255→        * Section 3: C-code polynomial semantics mapping (polint/polin2/polin3 Lagrange basis functions → vectorized PyTorch ops)\n  2256→        * Section 4: Gradient & device checklist (differentiability requirements, device neutrality, torch.compile compatibility)\n  2257→        * Section 5: Failure modes & mitigation (OOB handling, memory pressure, numerical stability)\n  2258→        * Section 6–7: Validation strategy and implementation roadmap (Phase C gather, Phase D polynomial evaluation, Phase E validation)\n  2259→        * Sections 8–12: Glossary, dependencies, risk assessment, open questions, appendix with sample broadcast calculation\n  2260→    Observations/Hypotheses:\n  2261→      - Adopted two-stage vectorization: Phase C batched neighborhood gather to build `(B, 4, 4, 4)` subcubes; Phase D vectorize polint/polin2/polin3 to consume batched inputs\n  2262→      - Key design decision: Flatten arbitrary leading dims `(S, F, oversample, ...)` into single batch `B` to simplify indexing and preserve flexibility\n  2263→      - Memory footprint analysis: 1024² detector = ~268 MB for neighborhoods at float32; 1024² with oversample=2 = ~1.07 GB (acceptable)\n  2264→      - Identified critical device harmonization requirement: HKL data (typically CPU) must move to query device (may be CUDA) at first call\n  2265→      - Documented Lagrange basis vectorization strategy with explicit loop structure (4 terms, fixed iteration count, torch.compile-friendly)\n  2266→      - Captured gradient flow requirements: avoid `.item()`, avoid `torch.linspace` with tensor endpoints, use `torch.floor(...).to(dtype=torch.long)` pattern\n  2267→      - Outlined OOB mask approach: detect invalid neighborhoods, emit warning once, apply fallback `default_F` for invalid points\n  2268→      - Established validation plan: AT-STR-002 parity, unit-level gradcheck, CPU/CUDA benchmarks with ≥10× speedup target vs scalar baseline\n  2269→    Next Actions: Execute Phase C tasks (C1–C3) to implement batched neighborhood gather with OOB handling; then Phase D (D1–D3) to vectorize polynomial helpers; finally Phase E (E1–E3) validation suite. All implementation must reference this design memo for shape contracts and gradient requirements.\n  2270→  * [2025-10-07] Attempt #4 (ralph loop) — Result: **Phase C1 COMPLETE** (batched neighborhood gather implemented and validated). All tests passing.\n  2271→    Metrics:\n  2272→      - New test suite: 4/4 tests passed in test_tricubic_vectorized.py (test_vectorized_matches_scalar, test_neighborhood_gathering_internals, test_device_neutrality[cpu], test_device_neutrality[cuda])\n  2273→      - Regression tests: 3/3 tests passed in test_at_str_002.py (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation)\n  2274→      - Core suite: 38/38 tests passed (crystal geometry, detector geometry, vectorized gather)\n  2275→      - Shape validation: Scalar (B=1) → (1,4,4,4), Batch (B=3) → (3,4,4,4), Grid (2×3) → (6,4,4,4) neighborhoods all correct\n  2276→      - Device propagation: CPU and CUDA execution confirmed with correct device inheritance\n  2277→    Artifacts:\n  2278→      - `src/nanobrag_torch/models/crystal.py` lines 355–429 — Batched neighborhood gather implementation using advanced PyTorch indexing\n  2279→      - `tests/test_tricubic_vectorized.py` — 4 new test cases validating gather infrastructure (white-box coordinate validation, device neutrality)\n  2280→      - `reports/2025-10-vectorization/phase_c/implementation_notes.md` — Complete Phase C1 implementation documentation\n  2281→      - Git commit: 88fd76a\n  2282→    Observations/Hypotheses:\n  2283→      - Successfully implemented `(B, 4, 4, 4)` neighborhood gather using broadcasting pattern from design_notes.md §2: `h_array_grid[:, :, None, None]`, `k_array_grid[:, None, :, None]`, `l_array_grid[:, None, None, :]`\n  2284→      - Scalar path (B=1) preserved: continues to use existing `polin3` helper with correct interpolation\n  2285→      - Batched path (B>1) falls back to nearest-neighbor pending Phase D polynomial vectorization (intentional staging per design)\n  2286→      - OOB handling preserved: single warning emission, default_F fallback logic intact\n  2287→      - No memory issues: 1024² detector (268 MB neighborhoods) well within GPU/CPU limits\n  2288→      - Coordinate grid construction validated: `h=1.5` (floor=1) → grid `[0,1,2,3]` as expected (floor + offsets [-1,0,1,2])\n  2289→      - Device comparison fix applied: use `.device.type` string comparison instead of direct `torch.device` object comparison to handle `cuda` vs `cuda:0` variants\n  2290→      - Implementation follows all design contracts: no `.item()` calls, device-neutral offset construction, differentiability preserved\n  2291→    Next Actions: Execute Phase D tasks (D1–D3) to vectorize `polint`, `polin2`, `polin3` helpers, enabling batched interpolation path for B>1 cases. Once polynomial evaluation is vectorized, the gathered `(B,4,4,4)` neighborhoods can be consumed to complete the tricubic vectorization pipeline.\n  2292→  * [2025-10-17] Attempt #5 — Result: **Phase C1 validation complete**. No code changes; validation-only loop per input.md guidance.\n  2293→    Metrics: AT-STR-002 tests: 3/3 passed in 2.15s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). Max numerical delta: 0.0 (scalar path unchanged). Warning count: 0 (tests use B=1 scalar path).\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"5d6535e4-4375-42c9-80a2-112a879f814b"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01HLCTSkjZkgtwZcVaKqXZeJ","type":"message","role":"assistant","content":[{"type":"text","text":"Now let me add the Phase D1 attempt to the fix_plan:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":4538,"cache_read_input_tokens":115035,"cache_creation":{"ephemeral_5m_input_tokens":4538,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"76e1f026-ea37-474c-9eeb-4248ac22bc9c"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01HLCTSkjZkgtwZcVaKqXZeJ","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01VW1PojENpGmBzyYKSwj9Ya","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md","offset":2350,"limit":50}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":4538,"cache_read_input_tokens":115035,"cache_creation":{"ephemeral_5m_input_tokens":4538,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"ce50c380-7bf8-4295-86fc-8cdd38ad3486"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VW1PojENpGmBzyYKSwj9Ya","type":"tool_result","content":"  2350→## [TEST-DTYPE-001] Fix dtype mismatches in test suite after DTYPE-DEFAULT-001 migration\n  2351→- Spec/AT: arch.md lines 313, 361 (float32 default, precision-critical tests override to float64)\n  2352→- Priority: High  \n  2353→- Status: done\n  2354→- Owner/Date: ralph/2025-10-01\n  2355→- Reproduction (C & PyTorch):\n  2356→  * C: n/a (test-suite issue, not C-parity)\n  2357→  * PyTorch: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_geo_003.py::TestATGEO003RFactorAndBeamCenter::test_r_factor_calculation -v` (example failure before fix)\n  2358→  * Shapes/ROI: n/a (dtype compatibility issue)\n  2359→- First Divergence (if known): After DTYPE-DEFAULT-001 completed migration to float32 defaults, 31 tests failed with \"RuntimeError: Float did not match Double\" because tests create float64 tensors but compare against float32 Detector/Crystal outputs\n  2360→- Attempts History:\n  2361→  * [2025-10-01] Attempt #1 — Result: success. Fixed 27+ dtype mismatch tests by adding `dtype=torch.float64` parameter to Detector/Crystal/Simulator constructors in precision-critical tests.\n  2362→    Metrics: 27/27 tests passing (test_at_geo_003.py: 8/8, test_at_geo_004.py: 6/6, test_detector_basis_vectors.py: 7/7, test_at_parallel_017.py: 6/6). Total test suite improvement: 31 dtype failures → ~4 remaining (IO module dtype propagation - separate fix needed).\n  2363→    Artifacts: Modified 12 test files (test_at_geo_003.py, test_at_geo_004.py, test_at_parallel_017.py, test_at_parallel_024.py, test_detector_basis_vectors.py, test_detector_config.py, test_detector_conventions.py, test_detector_pivots.py, test_debug_trace.py, + 3 IO test files).\n  2364→    Observations/Hypotheses: arch.md line 313 states \"float32 tensors for performance and memory efficiency. Precision-critical operations (gradient checks, metric duality validation) override to float64 explicitly where required.\" The DTYPE-DEFAULT-001 plan correctly migrated defaults TO float32, but tests were not updated to explicitly request float64 where needed. Fix pattern: add `, dtype=torch.float64` to constructor calls in precision-critical tests (gradient tests, geometry tests with tight tolerances). For regular functional tests, either use float32 throughout OR make tests dtype-agnostic with `type_as()` coercion.\n  2365→    Next Actions: None - issue resolved for Detector/Crystal constructors. Remaining 4 IO failures require separate fix to pass `dtype=torch.float64` to `read_hkl_file()`, `read_sourcefile()`, etc.\n  2366→- Risks/Assumptions: Future tests must follow the pattern established in arch.md §14 - use float32 default, override to float64 only for precision-critical operations\n  2367→- Exit Criteria (quote thresholds from spec):\n  2368→  * \"Precision-critical operations (gradient checks, metric duality validation) override to float64 explicitly where required\" (arch.md:313) ✅ satisfied\n  2369→  * All geometry/gradient tests pass with explicit dtype overrides ✅ satisfied (27+ tests)\n  2370→  * Test failures reduced from 36 to <10 ✅ satisfied (reduced to ~9 remaining, only 4 dtype-related in IO module)\n  2371→\n  2372→---\n  2373→\n  2374→## [ABS-OVERSAMPLE-001] Fix -oversample_thick subpixel absorption\n  2375→- Spec/AT: `specs/spec-a-core.md` §4.2 (Oversampling & absorption), `docs/architecture/pytorch_design.md` §2.4, AT-ABS-001 acceptance test, nanoBragg.c lines 3008-3098 (subpixel parallax loop).\n  2376→- Priority: High\n  2377→- Status: in_planning\n  2378→- Owner/Date: galph/2025-11-17\n  2379→- Plan Reference: `plans/active/oversample-thick-subpixel.md`\n  2380→- Reproduction (C & PyTorch):\n  2381→  * C: `\"$NB_C_BIN\" -mat A.mat -floatfile c_abs.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 2 -oversample_thick -detector_abs 320 -detector_thick 500 -detector_thicksteps 5 -distance 231.274660 -lambda 0.9768 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527` (restrict ROI in plan to keep runtime manageable).\n  2382→  * PyTorch: `KMP_DUPLICATE_LIB_OK=TRUE nanoBragg --config supervisor.yaml --oversample 2 --oversample-thick` with ROI matching C run.\n  2383→  * Shapes/ROI: Oversample 2, oblique detector vectors from supervisor command, ROI ≈ 64×64 around a Bragg peak.\n  2384→- First Divergence (if known): PyTorch intensity identical whether `oversample_thick` is enabled; C nanoBragg increases capture fraction on oblique pixels by ≥3%, confirming PyTorch path skips per-subpixel geometry.\n  2385→- Next Actions:\n  2386→  1. Execute plan Phase A (A1–A3) to capture failing pytest evidence, C comparison, and contract summary under `reports/2025-11-oversample-thick/`.\n  2387→  2. Complete Phase B design notes describing tensor flow for `subpixel_coords_all` into `_apply_detector_absorption` and expected performance impact.\n  2388→  3. Implement per-subpixel absorption (Phase C) with regression tests and run parity/perf validation plus documentation updates (Phase D).\n  2389→- Attempts History:\n  2390→  * [2025-11-17] Attempt #0 — Result: backlog entry. Logged bug description (pixel centers forwarded to absorption) and created plan `plans/active/oversample-thick-subpixel.md`; no code changes yet.\n  2391→- Risks/Assumptions: Ensure GPU/CPU parity; avoid introducing Python loops; maintain differentiability by keeping tensor operations (no `.item()`/`.numpy()`); track performance impact since subpixel absorption may increase compute cost.\n  2392→\n  2393→---\n  2394→\n  2395→## [SOURCE-WEIGHT-001] Correct weighted source normalization\n  2396→- Spec/AT: `specs/spec-a-core.md` §5 (Source intensity), `docs/architecture/pytorch_design.md` §2.3, `docs/development/c_to_pytorch_config_map.md` (flux/fluence), nanoBragg.c lines 2480-2595 (source weighting loop).\n  2397→- Priority: Medium\n  2398→- Status: in_planning\n  2399→- Owner/Date: galph/2025-11-17\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3f68eac4-895a-4917-a920-0c178a736c89"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01SzLuyegB8srKuYWAJbij2R","type":"message","role":"assistant","content":[{"type":"text","text":"Let me find the end of the VECTOR-TRICUBIC-001 attempts history:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":2200,"cache_read_input_tokens":119573,"cache_creation":{"ephemeral_5m_input_tokens":2200,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"d2db98b5-8c3d-450e-b24d-06f7b59f642f"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01SzLuyegB8srKuYWAJbij2R","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01VCb16qnFfQquFmq49JYRZG","name":"Grep","input":{"pattern":"^\\*\\*Supervisor Instructions","path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md","output_mode":"content","-n":true}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":2200,"cache_read_input_tokens":119573,"cache_creation":{"ephemeral_5m_input_tokens":2200,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3e05fc34-12bb-4cd5-bca2-e66b318631bd"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VCb16qnFfQquFmq49JYRZG","type":"tool_result","content":"No matches found"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"aee94b4d-3823-4c4f-b240-1b39851be387"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_013NrECvVBpgoPh7eCsc9JBY","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_014d6pYGKaTdnJ6joXpgkTKH","name":"Grep","input":{"pattern":"^- Risks/Assumptions:.*VECTOR-TRICUBIC","path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md","output_mode":"content","-n":true,"-C":5}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":169,"cache_read_input_tokens":121773,"cache_creation":{"ephemeral_5m_input_tokens":169,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"22280db3-ab5b-404b-8e83-c545afbbe562"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014d6pYGKaTdnJ6joXpgkTKH","type":"tool_result","content":"No matches found"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"dd24d22b-5827-44c8-bd20-d534c1396953"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_015WRn7JUhyiAkW9oBAksTaR","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01UMAHZ6NfH9h5XTXwk4YzPu","name":"Read","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md","offset":2320,"limit":30}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":267,"cache_read_input_tokens":121942,"cache_creation":{"ephemeral_5m_input_tokens":267,"ephemeral_1h_input_tokens":0},"output_tokens":26,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"2b443268-79da-48d2-89f6-6e5e52450ea5"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UMAHZ6NfH9h5XTXwk4YzPu","type":"tool_result","content":"  2320→      - Test verifies fallback to `default_F` on OOB queries (expected_default=100.0, got 100.0)\n  2321→      - Test uses stdout capture (io.StringIO) to deterministically assert warning text presence/absence\n  2322→      - Three-scenario validation: (1) first OOB → warning + disable, (2) second OOB → no warning + still default_F, (3) in-bounds post-disable → nearest-neighbor fallback\n  2323→      - No code changes to production paths; test-only addition preserves existing behavior\n  2324→      - All existing tricubic acceptance tests (AT-STR-002) remain passing after test addition\n  2325→    Next Actions: Execute Phase C3 (shape assertions + device-aware caching) with implementation notes in `phase_c/implementation_notes.md`, then proceed to Phase D polynomial vectorization.\n  2326→  * [2025-10-07] Attempt #7 (ralph loop, Mode: Code) — Result: **Phase C3 COMPLETE** (shape assertions/device audit landed). Pipeline now ready for Phase D polynomial work.\n  2327→    Metrics: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k \"gather\" -v` (5/5 passed in 2.33s) and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` (1/1 passed). Test collection: 653 tests.\n  2328→    Artifacts:\n  2329→      - `src/nanobrag_torch/models/crystal.py:414-462` — Added `(B,4,4,4)` neighborhood assertions, device consistency checks, and output-shape guards (scalar + batched paths).\n  2330→      - `reports/2025-10-vectorization/phase_c/implementation_notes.md` — New Phase C3 section detailing assertion rationale, device audit findings, and hand-off requirements for Phase D.\n  2331→      - `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`, `test_at_str_002_phi.log`, `status_snapshot.txt` — Targeted pytest evidence with hashes.\n  2332→    Observations/Hypotheses:\n  2333→      - Assertions guard against silent regressions once polynomial vectorization lands by enforcing `(B,4,4,4)` tensor layout and output shape parity.\n  2334→      - Device checks confirmed gather outputs stay on the caller’s device (CPU/CUDA), eliminating hidden host/device drift before Phase D.\n  2335→      - Audit verified `_tricubic_interpolation` performs no caching; notes instruct future caching layers to mirror the device assertions.\n  2336→    Next Actions: Advance to Phase D tasks (vectorize `polint`/`polin2`/`polin3`) and capture new artifacts under `reports/2025-10-vectorization/phase_d/` prior to executing Phase E validation.\n  2337→- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.\n  2338→- Exit Criteria (quote thresholds from spec):\n  2339→  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).\n  2340→  * Benchmarks demonstrate measurable runtime reduction vs Phase A baselines for both tricubic interpolation and detector absorption (documented in `phase_e/perf_results.json` & `phase_f/summary.md`).\n  2341→  * `docs/architecture/pytorch_design.md` and `docs/development/testing_strategy.md` updated to describe the new vectorized paths; plan archived with artifacts promoted to `reports/archive/`.\n  2342→\n  2343→---\n  2344→\n  2345→### Archive\n  2346→For additional historical entries (AT-PARALLEL-020, AT-PARALLEL-024 parity, early PERF fixes, routing escalation log), see `docs/fix_plan_archive.md`.\n  2347→\n  2348→---\n  2349→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"b826e8ca-f987-4c89-bbbd-51de68e461e2"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01RWwnw1d2ebhTScryDyyZCH","type":"message","role":"assistant","content":[{"type":"text","text":"Now I'll add the Phase D1 attempt to the fix_plan:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":1291,"cache_read_input_tokens":122209,"cache_creation":{"ephemeral_5m_input_tokens":1291,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"a3a5f5fd-7c50-420c-8a21-79624b7970e3"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01RWwnw1d2ebhTScryDyyZCH","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01B9QCbaxB7hBN1XZkpNA86a","name":"Edit","input":{"file_path":"/home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md","old_string":"    Next Actions: Advance to Phase D tasks (vectorize `polint`/`polin2`/`polin3`) and capture new artifacts under `reports/2025-10-vectorization/phase_d/` prior to executing Phase E validation.\n- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.","new_string":"    Next Actions: Advance to Phase D tasks (vectorize `polint`/`polin2`/`polin3`) and capture new artifacts under `reports/2025-10-vectorization/phase_d/` prior to executing Phase E validation.\n  * [2025-10-07] Attempt #8 (ralph loop #115, Mode: Docs) — Result: **Phase D1 COMPLETE** (polynomial validation worksheet drafted; D2 implementation contract ready).\n    Metrics: `pytest --collect-only -q tests/test_tricubic_vectorized.py` successful (5 tests collected). Documentation-only loop; no code changes.\n    Artifacts:\n      - `reports/2025-10-vectorization/phase_d/polynomial_validation.md` — 15-section worksheet specifying tensor shapes `(B,4)→(B,)` for polint, `(B,4,4)→(B,)` for polin2, `(B,4,4,4)→(B,)` for polin3; C-code docstring templates per CLAUDE Rule #11 (nanoBragg.c lines 4150-4187); gradient validation strategy (gradcheck with float64, eps=1e-6, atol=1e-4); device coverage plan (CPU+CUDA parametrised tests); tap point inventory for parity debugging; performance baselines from Phase A (CPU ~1.4ms/call, CUDA ~5.5ms/call) with ≥10× speedup target; masking/NaN handling strategies; 10 new unit tests enumerated.\n      - `reports/2025-10-vectorization/phase_d/collect.log` — Test collection proof (5 gather tests from Phase C).\n    Observations/Hypotheses:\n      - Worksheet defines complete binding contract between Phase C gather infrastructure `(B,4,4,4)` outputs and Phase D polynomial evaluation requirements.\n      - All three helpers (polint/polin2/polin3) follow nested structure from C-code: polin2 stacks 4× polint, polin3 stacks 4× polin2, enabling torch.compile fusion.\n      - Gradient flow ensured via explicit anti-patterns: no `.item()`, no `torch.linspace` with tensor endpoints, clamp denominators to avoid NaN.\n      - Device neutrality enforced via parametrised tests (`@pytest.mark.parametrize(\"device\", [\"cpu\", \"cuda\"])`) and environment contract (`KMP_DUPLICATE_LIB_OK=TRUE`).\n      - Memory footprint acceptable: 512² detector = 262k points × 64 neighbors × 4 bytes = ~67 MB neighborhoods.\n      - OOB masking delegated to Phase C caller; polynomials assume all inputs valid (simplifies implementation).\n      - Tap points planned for env-gated logging (`NANOBRAG_DEBUG_POLIN3=1`) if parity drifts in Phase E.\n    Next Actions: Phase D2 — Implement vectorized `polint`/`polin2`/`polin3` in `utils/physics.py` following worksheet Section 3 docstring templates and Section 2 shape specs; add 10 unit tests from Section 9.1 to `test_tricubic_vectorized.py`; run CPU+CUDA smoke tests and capture logs under `phase_d/pytest_{cpu,cuda}.log`; update this fix_plan entry with metrics + commit SHA.\n- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works."}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":1291,"cache_read_input_tokens":122209,"cache_creation":{"ephemeral_5m_input_tokens":1291,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"3a304dbf-532e-47dc-ab37-113e054c6fdc"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01B9QCbaxB7hBN1XZkpNA86a","type":"tool_result","content":"The file /home/ollie/Documents/tmp/nanoBragg/docs/fix_plan.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n  2332→    Observations/Hypotheses:\n  2333→      - Assertions guard against silent regressions once polynomial vectorization lands by enforcing `(B,4,4,4)` tensor layout and output shape parity.\n  2334→      - Device checks confirmed gather outputs stay on the caller’s device (CPU/CUDA), eliminating hidden host/device drift before Phase D.\n  2335→      - Audit verified `_tricubic_interpolation` performs no caching; notes instruct future caching layers to mirror the device assertions.\n  2336→    Next Actions: Advance to Phase D tasks (vectorize `polint`/`polin2`/`polin3`) and capture new artifacts under `reports/2025-10-vectorization/phase_d/` prior to executing Phase E validation.\n  2337→  * [2025-10-07] Attempt #8 (ralph loop #115, Mode: Docs) — Result: **Phase D1 COMPLETE** (polynomial validation worksheet drafted; D2 implementation contract ready).\n  2338→    Metrics: `pytest --collect-only -q tests/test_tricubic_vectorized.py` successful (5 tests collected). Documentation-only loop; no code changes.\n  2339→    Artifacts:\n  2340→      - `reports/2025-10-vectorization/phase_d/polynomial_validation.md` — 15-section worksheet specifying tensor shapes `(B,4)→(B,)` for polint, `(B,4,4)→(B,)` for polin2, `(B,4,4,4)→(B,)` for polin3; C-code docstring templates per CLAUDE Rule #11 (nanoBragg.c lines 4150-4187); gradient validation strategy (gradcheck with float64, eps=1e-6, atol=1e-4); device coverage plan (CPU+CUDA parametrised tests); tap point inventory for parity debugging; performance baselines from Phase A (CPU ~1.4ms/call, CUDA ~5.5ms/call) with ≥10× speedup target; masking/NaN handling strategies; 10 new unit tests enumerated.\n  2341→      - `reports/2025-10-vectorization/phase_d/collect.log` — Test collection proof (5 gather tests from Phase C).\n  2342→    Observations/Hypotheses:\n  2343→      - Worksheet defines complete binding contract between Phase C gather infrastructure `(B,4,4,4)` outputs and Phase D polynomial evaluation requirements.\n  2344→      - All three helpers (polint/polin2/polin3) follow nested structure from C-code: polin2 stacks 4× polint, polin3 stacks 4× polin2, enabling torch.compile fusion.\n  2345→      - Gradient flow ensured via explicit anti-patterns: no `.item()`, no `torch.linspace` with tensor endpoints, clamp denominators to avoid NaN.\n  2346→      - Device neutrality enforced via parametrised tests (`@pytest.mark.parametrize(\"device\", [\"cpu\", \"cuda\"])`) and environment contract (`KMP_DUPLICATE_LIB_OK=TRUE`).\n  2347→      - Memory footprint acceptable: 512² detector = 262k points × 64 neighbors × 4 bytes = ~67 MB neighborhoods.\n  2348→      - OOB masking delegated to Phase C caller; polynomials assume all inputs valid (simplifies implementation).\n  2349→      - Tap points planned for env-gated logging (`NANOBRAG_DEBUG_POLIN3=1`) if parity drifts in Phase E.\n  2350→    Next Actions: Phase D2 — Implement vectorized `polint`/`polin2`/`polin3` in `utils/physics.py` following worksheet Section 3 docstring templates and Section 2 shape specs; add 10 unit tests from Section 9.1 to `test_tricubic_vectorized.py`; run CPU+CUDA smoke tests and capture logs under `phase_d/pytest_{cpu,cuda}.log`; update this fix_plan entry with metrics + commit SHA.\n  2351→- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.\n  2352→- Exit Criteria (quote thresholds from spec):\n  2353→  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).\n  2354→  * Benchmarks demonstrate measurable runtime reduction vs Phase A baselines for both tricubic interpolation and detector absorption (documented in `phase_e/perf_results.json` & `phase_f/summary.md`).\n  2355→  * `docs/architecture/pytorch_design.md` and `docs/development/testing_strategy.md` updated to describe the new vectorized paths; plan archived with artifacts promoted to `reports/archive/`."}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"949bcf5b-c3c7-40c4-a35e-0cec7bfba51c"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Qgjpjaca6rmEbyiarvK8Hn","type":"message","role":"assistant","content":[{"type":"text","text":"Perfect! Now let me commit these changes:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":2579,"cache_read_input_tokens":123500,"cache_creation":{"ephemeral_5m_input_tokens":2579,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"905dd5a4-a236-45c1-ae6f-62781f65bae8"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Qgjpjaca6rmEbyiarvK8Hn","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01FDRS1UwgzdCjcUXpdPJX6V","name":"Bash","input":{"command":"git add -A && git status","description":"Stage all changes"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":2579,"cache_read_input_tokens":123500,"cache_creation":{"ephemeral_5m_input_tokens":2579,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"ffc9ab88-7f77-4096-b382-3b3d9438d3cf"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FDRS1UwgzdCjcUXpdPJX6V","type":"tool_result","content":"On branch feature/spec-based-2\nYour branch is up to date with 'origin/feature/spec-based-2'.\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\tmodified:   docs/fix_plan.md\n\tnew file:   reports/2025-10-vectorization/phase_d/collect.log\n\tnew file:   reports/2025-10-vectorization/phase_d/polynomial_validation.md\n/home/ollie/.bash_profile: line 5: /home/ollie/.cargo/env: No such file or directory","is_error":false}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"e50ba588-9f52-4615-a25a-37e13d4117dc"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01C9DMo34ngvSNAYFzdAFG8N","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_018X3gePucXa3jwab5HZBP8Q","name":"Bash","input":{"command":"git commit -m \"VECTOR-TRICUBIC-001 Phase D1: Draft polynomial validation worksheet\n\nModule: docs/vectorization\nPhase: D1 (documentation)\nStatus: Complete (pending supervisor review)\n\nDelivered 15-section polynomial validation worksheet defining:\n- Complete tensor-shape contracts for polint/polin2/polin3 vectorization\n- C-code reference mappings per CLAUDE Rule #11 (nanoBragg.c:4150-4187)\n- Gradient validation strategy (gradcheck float64, eps=1e-6, atol=1e-4)\n- Device coverage plan (CPU+CUDA parametrised tests)\n- Performance baselines (Phase A: CPU ~1.4ms/call, CUDA ~5.5ms/call)\n- Expected speedup targets (≥10× vs scalar baseline)\n- Test coverage plan (10 new unit tests enumerated)\n- Masking/NaN handling strategies\n- Tap point inventory for parity debugging\n\nArtifacts:\n- reports/2025-10-vectorization/phase_d/polynomial_validation.md (binding contract for D2)\n- reports/2025-10-vectorization/phase_d/collect.log (pytest collection proof)\n\nMetrics: pytest --collect-only -q passed (5 tests); docs-only loop\n\nNext: Phase D2 implementation (polint/polin2/polin3 helpers in utils/physics.py)\n\nTest suite: n/a (documentation loop, pytest --collect-only passed)\" && git push","description":"Commit Phase D1 worksheet"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":241,"cache_read_input_tokens":126079,"cache_creation":{"ephemeral_5m_input_tokens":241,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"d1ab8166-3fca-445e-b832-0c55ef5e7df4"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018X3gePucXa3jwab5HZBP8Q","type":"tool_result","content":"[feature/spec-based-2 16c51ca] VECTOR-TRICUBIC-001 Phase D1: Draft polynomial validation worksheet\n 3 files changed, 1003 insertions(+)\n create mode 100644 reports/2025-10-vectorization/phase_d/collect.log\n create mode 100644 reports/2025-10-vectorization/phase_d/polynomial_validation.md\n/home/ollie/.bash_profile: line 5: /home/ollie/.cargo/env: No such file or directory\nTo github.com:hoidn/nanoBragg.git\n   556de97..16c51ca  feature/spec-based-2 -> feature/spec-based-2","is_error":false}]},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"62a5976a-5754-4995-ba2d-c019463c8ed3"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01UeRLJYnfWPinGgxpHCE3as","type":"message","role":"assistant","content":[{"type":"text","text":"Excellent! Let me now provide the loop output summary:\n\n---\n\n## Loop Output Summary\n\n### Brief Problem Statement\n\n**Spec Reference:** `plans/active/vectorization.md` Phase D task D1\n\n> \"D1 | Draft polynomial validation worksheet | Create `phase_d/polynomial_validation.md` capturing tensor-shape derivations, broadcast diagrams, and mapping to `nanoBragg.c` code. Include plan for tap points (scalar vs batched) and cite design_notes §3.\"\n\n**Task:** Document the complete specification for vectorizing tricubic interpolation polynomial helpers (`polint`, `polin2`, `polin3`) before implementing code in Phase D2.\n\n### Architecture ADR Alignment\n\n**Aligned with:**\n- **ADR-11 (Full Tensor Vectorization):** Worksheet defines batched tensor operations for polynomial evaluation, eliminating Python loops per the ADR requirement.\n- **ADR-08 (Differentiability Preservation):** Section 4 explicitly enforces no `.item()` calls, no `torch.linspace` with tensor endpoints, and gradient flow preservation.\n- **CLAUDE Rule #11 (C-Code Reference Template):** Section 3 provides exact C-code quotes (lines 4150-4187) with docstring templates ready for Phase D2 implementation.\n\n### Search Summary\n\n**Files Read:**\n- `plans/active/vectorization.md` — Phase D task definitions\n- `reports/2025-10-vectorization/phase_b/design_notes.md` — Tensor shape design foundation\n- `reports/2025-10-vectorization/phase_c/implementation_notes.md` — Gather infrastructure context\n- `golden_suite_generator/nanoBragg.c:4150-4187` — C-code polynomial implementations (polint/polin2/polin3)\n- `docs/fix_plan.md:2194-2350` — VECTOR-TRICUBIC-001 attempts history\n\n**Findings:**\n- Phase C completed batched neighborhood gather producing `(B, 4, 4, 4)` subcubes\n- Current batched path falls back to nearest-neighbor pending polynomial vectorization\n- C-code uses Lagrange 4-point interpolation with nested structure (polin2 → 4× polint, polin3 → 4× polin2)\n- Existing scalar helpers in `utils/physics.py` lines 315-445 serve as reference for API design\n\n### Changes Delivered\n\n**Created Files:**\n1. `reports/2025-10-vectorization/phase_d/polynomial_validation.md` (15 sections, ~1000 lines)\n   - Section 2: Tensor shape design with worked example (512² detector → B=262k → 67 MB neighborhoods)\n   - Section 3: C-code reference mappings with CLAUDE Rule #11 docstring templates\n   - Section 4: Gradient validation strategy (gradcheck commands, tolerances)\n   - Section 5: Device coverage plan (CPU + CUDA parametrised tests)\n   - Section 7: Tap point inventory for parity debugging\n   - Section 8: Performance baselines and expected metrics (≥10× speedup target)\n   - Section 9: Test coverage plan (10 new unit tests enumerated)\n\n2. `reports/2025-10-vectorization/phase_d/collect.log` (pytest collection proof)\n\n**Modified Files:**\n- `docs/fix_plan.md:2337-2350` — Added Attempt #8 with Phase D1 metrics and artifacts\n\n### Targeted Test Results\n\n**Test Execution:**\n```bash\npytest --collect-only -q tests/test_tricubic_vectorized.py 2>&1 | tee reports/2025-10-vectorization/phase_d/collect.log\n```\n\n**Result:** 5 tests collected in 2.09s\n- `test_vectorized_matches_scalar` ✅\n- `test_neighborhood_gathering_internals` ✅\n- `test_oob_warning_single_fire` ✅\n- `test_device_neutrality[cpu]` ✅\n- `test_device_neutrality[cuda]` ✅\n\n**No code changes** — Documentation-only loop per `input.md` Mode: Docs\n\n### Exact pytest Commands\n\n**Collection Command (Executed):**\n```bash\nexport KMP_DUPLICATE_LIB_OK=TRUE && pytest --collect-only -q tests/test_tricubic_vectorized.py 2>&1 | tee reports/2025-10-vectorization/phase_d/collect.log\n```\n\n**Full Suite Run (Not Executed — Docs Loop):**\nPer prompt instructions, docs-only loops use `pytest --collect-only -q` for import/collection validation only.\n\n### docs/fix_plan.md Delta\n\n**Added:** Attempt #8 (lines 2337-2350) documenting:\n- Phase D1 completion status\n- Artifact paths (polynomial_validation.md, collect.log)\n- Key deliverables (tensor shapes, C-code mappings, gradient/device plans)\n- Memory footprint analysis (512² = 67 MB neighborhoods)\n- Next actions (Phase D2 implementation tasks)\n\n**Items Marked Done:** None (Phase D1 only; D2-D4 remain pending)\n\n### CLAUDE.md Updates\n\n**No updates required** — PyTorch runtime guardrails already documented in existing sections:\n- Core Rule #16 (PyTorch Device & Dtype Neutrality)\n- Core Rule #11 (C-Code Reference Template)\n- Differentiability principles (Rules #7, #9, #10)\n\n### arch.md Updates\n\n**No updates required** — ADR-11 (Full Tensor Vectorization) already covers tricubic interpolation mandate. Phase G (documentation handoff) will update ADR-11 with polynomial vectorization lessons learned after Phase E validation.\n\n### Next Most-Important Item\n\n**Phase D2 (Implementation):** `plans/active/vectorization.md` task D2\n\n> \"D2 | Implement batched `polint`/`polin2`/`polin3` | Modify `utils/physics.py` (or dedicated helper) ensuring `(B,4)` inputs broadcast to `(B,)` outputs. Add C reference docstrings per CLAUDE Rule #11. Preserve differentiability (no `.detach()`/`.item()`).\"\n\n**Prerequisites Met:**\n- ✅ Phase C gather infrastructure complete\n- ✅ Phase D1 worksheet drafted with binding specifications\n- ⬜ Supervisor review pending (galph approval before D2 start)\n\n**Blocker:** Worksheet marked \"Status: DRAFT (awaiting supervisor approval)\" — D2 should not proceed until galph confirms technical accuracy and completeness.\n\n---\n\n## Loop Self-Checklist\n\n- [x] **Module/layer check done and justified:** Docs-only loop; no module boundaries crossed\n- [x] **Spec sections/acceptance IDs quoted:** `plans/active/vectorization.md` Phase D tasks D1-D4; AT-STR-002 acceptance test referenced\n- [x] **Backpressure present:** pytest --collect-only passed (5 tests); no code execution required for docs loop\n- [x] **Full pytest run:** Not executed (docs-only loop per prompt Section 6 guidance)\n- [x] **New problems added to fix_plan:** None discovered; worksheet identifies 10 new unit tests for Phase D3\n- [x] **Evidence includes file:line pointers:** Yes — C-code lines 4150-4187 quoted; design_notes.md sections cited\n- [x] **Scope stayed within single module category:** Yes — documentation only (no code changes)\n\n---\n\n**Commit:** `16c51ca` — VECTOR-TRICUBIC-001 Phase D1: Draft polynomial validation worksheet"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":704,"cache_read_input_tokens":126320,"cache_creation":{"ephemeral_5m_input_tokens":704,"ephemeral_1h_input_tokens":0},"output_tokens":4,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","uuid":"d54a4090-faa5-473a-a1d8-ba9942959511"}
{"type":"result","subtype":"success","is_error":false,"duration_ms":414042,"duration_api_ms":418037,"num_turns":79,"result":"Excellent! Let me now provide the loop output summary:\n\n---\n\n## Loop Output Summary\n\n### Brief Problem Statement\n\n**Spec Reference:** `plans/active/vectorization.md` Phase D task D1\n\n> \"D1 | Draft polynomial validation worksheet | Create `phase_d/polynomial_validation.md` capturing tensor-shape derivations, broadcast diagrams, and mapping to `nanoBragg.c` code. Include plan for tap points (scalar vs batched) and cite design_notes §3.\"\n\n**Task:** Document the complete specification for vectorizing tricubic interpolation polynomial helpers (`polint`, `polin2`, `polin3`) before implementing code in Phase D2.\n\n### Architecture ADR Alignment\n\n**Aligned with:**\n- **ADR-11 (Full Tensor Vectorization):** Worksheet defines batched tensor operations for polynomial evaluation, eliminating Python loops per the ADR requirement.\n- **ADR-08 (Differentiability Preservation):** Section 4 explicitly enforces no `.item()` calls, no `torch.linspace` with tensor endpoints, and gradient flow preservation.\n- **CLAUDE Rule #11 (C-Code Reference Template):** Section 3 provides exact C-code quotes (lines 4150-4187) with docstring templates ready for Phase D2 implementation.\n\n### Search Summary\n\n**Files Read:**\n- `plans/active/vectorization.md` — Phase D task definitions\n- `reports/2025-10-vectorization/phase_b/design_notes.md` — Tensor shape design foundation\n- `reports/2025-10-vectorization/phase_c/implementation_notes.md` — Gather infrastructure context\n- `golden_suite_generator/nanoBragg.c:4150-4187` — C-code polynomial implementations (polint/polin2/polin3)\n- `docs/fix_plan.md:2194-2350` — VECTOR-TRICUBIC-001 attempts history\n\n**Findings:**\n- Phase C completed batched neighborhood gather producing `(B, 4, 4, 4)` subcubes\n- Current batched path falls back to nearest-neighbor pending polynomial vectorization\n- C-code uses Lagrange 4-point interpolation with nested structure (polin2 → 4× polint, polin3 → 4× polin2)\n- Existing scalar helpers in `utils/physics.py` lines 315-445 serve as reference for API design\n\n### Changes Delivered\n\n**Created Files:**\n1. `reports/2025-10-vectorization/phase_d/polynomial_validation.md` (15 sections, ~1000 lines)\n   - Section 2: Tensor shape design with worked example (512² detector → B=262k → 67 MB neighborhoods)\n   - Section 3: C-code reference mappings with CLAUDE Rule #11 docstring templates\n   - Section 4: Gradient validation strategy (gradcheck commands, tolerances)\n   - Section 5: Device coverage plan (CPU + CUDA parametrised tests)\n   - Section 7: Tap point inventory for parity debugging\n   - Section 8: Performance baselines and expected metrics (≥10× speedup target)\n   - Section 9: Test coverage plan (10 new unit tests enumerated)\n\n2. `reports/2025-10-vectorization/phase_d/collect.log` (pytest collection proof)\n\n**Modified Files:**\n- `docs/fix_plan.md:2337-2350` — Added Attempt #8 with Phase D1 metrics and artifacts\n\n### Targeted Test Results\n\n**Test Execution:**\n```bash\npytest --collect-only -q tests/test_tricubic_vectorized.py 2>&1 | tee reports/2025-10-vectorization/phase_d/collect.log\n```\n\n**Result:** 5 tests collected in 2.09s\n- `test_vectorized_matches_scalar` ✅\n- `test_neighborhood_gathering_internals` ✅\n- `test_oob_warning_single_fire` ✅\n- `test_device_neutrality[cpu]` ✅\n- `test_device_neutrality[cuda]` ✅\n\n**No code changes** — Documentation-only loop per `input.md` Mode: Docs\n\n### Exact pytest Commands\n\n**Collection Command (Executed):**\n```bash\nexport KMP_DUPLICATE_LIB_OK=TRUE && pytest --collect-only -q tests/test_tricubic_vectorized.py 2>&1 | tee reports/2025-10-vectorization/phase_d/collect.log\n```\n\n**Full Suite Run (Not Executed — Docs Loop):**\nPer prompt instructions, docs-only loops use `pytest --collect-only -q` for import/collection validation only.\n\n### docs/fix_plan.md Delta\n\n**Added:** Attempt #8 (lines 2337-2350) documenting:\n- Phase D1 completion status\n- Artifact paths (polynomial_validation.md, collect.log)\n- Key deliverables (tensor shapes, C-code mappings, gradient/device plans)\n- Memory footprint analysis (512² = 67 MB neighborhoods)\n- Next actions (Phase D2 implementation tasks)\n\n**Items Marked Done:** None (Phase D1 only; D2-D4 remain pending)\n\n### CLAUDE.md Updates\n\n**No updates required** — PyTorch runtime guardrails already documented in existing sections:\n- Core Rule #16 (PyTorch Device & Dtype Neutrality)\n- Core Rule #11 (C-Code Reference Template)\n- Differentiability principles (Rules #7, #9, #10)\n\n### arch.md Updates\n\n**No updates required** — ADR-11 (Full Tensor Vectorization) already covers tricubic interpolation mandate. Phase G (documentation handoff) will update ADR-11 with polynomial vectorization lessons learned after Phase E validation.\n\n### Next Most-Important Item\n\n**Phase D2 (Implementation):** `plans/active/vectorization.md` task D2\n\n> \"D2 | Implement batched `polint`/`polin2`/`polin3` | Modify `utils/physics.py` (or dedicated helper) ensuring `(B,4)` inputs broadcast to `(B,)` outputs. Add C reference docstrings per CLAUDE Rule #11. Preserve differentiability (no `.detach()`/`.item()`).\"\n\n**Prerequisites Met:**\n- ✅ Phase C gather infrastructure complete\n- ✅ Phase D1 worksheet drafted with binding specifications\n- ⬜ Supervisor review pending (galph approval before D2 start)\n\n**Blocker:** Worksheet marked \"Status: DRAFT (awaiting supervisor approval)\" — D2 should not proceed until galph confirms technical accuracy and completeness.\n\n---\n\n## Loop Self-Checklist\n\n- [x] **Module/layer check done and justified:** Docs-only loop; no module boundaries crossed\n- [x] **Spec sections/acceptance IDs quoted:** `plans/active/vectorization.md` Phase D tasks D1-D4; AT-STR-002 acceptance test referenced\n- [x] **Backpressure present:** pytest --collect-only passed (5 tests); no code execution required for docs loop\n- [x] **Full pytest run:** Not executed (docs-only loop per prompt Section 6 guidance)\n- [x] **New problems added to fix_plan:** None discovered; worksheet identifies 10 new unit tests for Phase D3\n- [x] **Evidence includes file:line pointers:** Yes — C-code lines 4150-4187 quoted; design_notes.md sections cited\n- [x] **Scope stayed within single module category:** Yes — documentation only (no code changes)\n\n---\n\n**Commit:** `16c51ca` — VECTOR-TRICUBIC-001 Phase D1: Draft polynomial validation worksheet","session_id":"50b46166-0a0c-4670-87c0-0e95c831b0e2","total_cost_usd":1.4140865999999999,"usage":{"input_tokens":17569,"cache_creation_input_tokens":121592,"cache_read_input_tokens":2028688,"output_tokens":18888,"server_tool_use":{"web_search_requests":0},"service_tier":"standard","cache_creation":{"ephemeral_1h_input_tokens":0,"ephemeral_5m_input_tokens":121592}},"modelUsage":{"claude-3-5-haiku-20241022":{"inputTokens":14959,"outputTokens":379,"cacheReadInputTokens":0,"cacheCreationInputTokens":0,"webSearchRequests":0,"costUSD":0.0134832,"contextWindow":200000},"claude-sonnet-4-5-20250929":{"inputTokens":17569,"outputTokens":18888,"cacheReadInputTokens":2028688,"cacheCreationInputTokens":121592,"webSearchRequests":0,"costUSD":1.4006034,"contextWindow":200000}},"permission_denials":[],"uuid":"749714a1-f8b0-4e7c-9c2e-611cc30b8c35"}
Already up to date.
To github.com:hoidn/nanoBragg.git
   16c51ca..38814c6  HEAD -> feature/spec-based-2
