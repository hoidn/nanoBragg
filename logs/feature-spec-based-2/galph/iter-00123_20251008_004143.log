Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=ralph status=running-ralph iter=123
Already up to date.
Updating a89ec01..4010e73
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   a89ec01..4010e73  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=124
To github.com:hoidn/nanoBragg.git
   4010e73..bf17bf3  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-08T00:42:01] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-08T00:42:01] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
<4>
run pyrefly check src/. triage the errors and delegate the fixing of them to ralph. be careful about test suite regressions.
</4>
<5>
delegate to ralph a full run of the test suite and triage of the failing test. review, classing various errors as either implementation bugs or consequences of test deprecation. then systematically fix the failing tests.
</5>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-08T00:42:03] thinking

**Preparing to update repository**
[2025-10-08T00:42:04] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:06] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.30s:
Already up to date.
[2025-10-08T00:42:06] tokens used: 4,905

[2025-10-08T00:42:08] thinking

**Preparing to read galph_memory.md**
[2025-10-08T00:42:08] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:09] bash -lc 'cat galph_memory.md' succeeded in 743ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-08T00:42:09] tokens used: 5,980

[2025-10-08T00:42:11] thinking

**Reviewing log truncation and recent entries**
[2025-10-08T00:42:11] exec bash -lc 'tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:12] bash -lc 'tail -n 40 galph_memory.md' succeeded in 730ms:
## 2025-11-27 (galph loop — φ=0 spec baselines evidence push)
- Re-read spec/core docs + CLI-FLAGS plan; confirmed Next Action remains L3k.3c.3 despite historic success notes because VG-1 artifacts need fresh capture post-rotation refactor.
- Selected focus = CLI-FLAGS-003 L3k.3c.3; staying in Parity mode, evidence-only loop (no code edits planned).
- Rewrote input.md (102 lines) directing Ralph to regenerate per-φ traces under a new timestamp, run compare_per_phi_traces.py + summarise_phi_deltas.py, rerun TestPhiZeroParity selectors on CPU (and CUDA if available), and update diagnosis.md, fix_checklist.md, and docs/fix_plan.md with ≤1e-6 deltas (rot_b_y 0.7173197865 Å, k_frac 1.6756687164).
- Emphasised reuse of the 202510070839 C trace, protected-assets compliance, SHA256 logging, and deferral of L3k.3c.4 shim/nb-compare work until VG-1 evidence is archived.
- No repository code or docs changed beyond input.md/memory update.
- Expect Ralph to execute the outlined evidence capture, mark VG-1 rows complete, and advance plan/fix_plan focus to L3k.3c.4 for the next engineering loop.

## 2025-11-28 (galph loop — parity shim planning)
- Added dedicated plan `plans/active/cli-phi-parity-shim/plan.md` with Phases A–D covering design, implementation, and documentation for the φ=0 carryover shim; Phase B now gates API selection and validation strategy.
- Updated `plans/active/cli-noise-pix0/plan.md:L3k.3c.4-5` to point at the new plan and clarified evidence expectations (reports/2025-10-cli-flags/phase_l/parity_shim/...).
- Refreshed `docs/fix_plan.md:450-463` Next Actions to align with the new plan (execute Phases B–D before resuming nb-compare work).
- Issued `input.md` (Docs mode) directing Ralph to author the design note, choose the opt-in trigger, and run the collect-only selector before coding. Command: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q`.
- Commit `7ef88d2` pushed on `feature/spec-based-2`; no tests run in supervisor loop.


## 2025-11-28 (galph loop — CLI parity shim push)
- Re-synced (no upstream changes) and reviewed CLI-FLAGS-003 + parity-shim plan; spec remains φ=0 carryover-free (specs/spec-a-core.md:211-214) while C bug stays quarantined in docs/bugs/verified_c_bugs.md:166-182.
- Selected focus = CLI-FLAGS-003 Phase L3k.3c.4; no new plan needed. Input memo now steers Ralph to implement the opt-in φ carryover shim (Plan Phase C1–C5) with per-φ trace evidence and dual-mode tests.
- No fix_plan or plan edits required this turn; parity shim plan already authoritative. Next supervisor check: confirm reports/2025-10-cli-flags/phase_l/parity_shim/... artifacts exist, docs/fix_plan attempt logged, and tests cover both spec/parity modes before advancing to L3k.3c.5.
[2025-10-08T00:42:12] tokens used: 13,822

[2025-10-08T00:42:17] thinking

**Planning document review**
[2025-10-08T00:42:17] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:18] bash -lc 'cat docs/index.md' succeeded in 745ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-08T00:42:18] tokens used: 16,354

[2025-10-08T00:42:19] thinking

**Opening spec file**
[2025-10-08T00:42:20] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:21] bash -lc 'cat specs/spec-a.md' succeeded in 955ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-08T00:42:21] tokens used: 18,072

[2025-10-08T00:42:23] thinking

**Considering additional spec files**
[2025-10-08T00:42:24] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:25] bash -lc 'cat arch.md' succeeded in 885ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-08T00:42:25] tokens used: 18,332

[2025-10-08T00:42:26] thinking

**Navigating to config map doc**
[2025-10-08T00:42:27] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:28] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 707ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-08T00:42:28] tokens used: 28,563

[2025-10-08T00:42:29] thinking

**Opening debugging documentation**
[2025-10-08T00:42:29] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:30] bash -lc 'cat docs/debugging/debugging.md' succeeded in 694ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-08T00:42:30] tokens used: 30,493

[2025-10-08T00:42:32] thinking

**Reviewing fix_plan.md document**
[2025-10-08T00:42:32] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:33] bash -lc 'cat docs/fix_plan.md' succeeded in 713ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-08T00:42:33] tokens used: 37,327

[2025-10-08T00:42:35] thinking

**Planning to search CLI-FLAGS-003 section**
[2025-10-08T00:42:36] exec bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:37] bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' succeeded in 696ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
512:      - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
667:  * [2025-10-22] Attempt #116 (ralph loop CLI-FLAGS-003 L3k.3c.3) — Result: **VG-1 LOCKED** ✅ (**Phase L3k.3c.3 COMPLETE**). Updated test expectations with 10-digit spec baselines and ≤1e-6 tolerances.
797:      - C trace evidence indicates state carryover within the reference implementation. Until we either patch the C code or emulate this behavior, PyTorch must conform to the reference output to unblock CLI-FLAGS-003.
2158:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
[2025-10-08T00:42:37] tokens used: 40,210

[2025-10-08T00:42:38] thinking

**Checking CLI-FLAGS-003 section**
[2025-10-08T00:42:39] exec bash -lc "sed -n '450,750p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:39] bash -lc "sed -n '450,750p' docs/fix_plan.md" succeeded in 711ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-27 refresh → galph loop i=118):
1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-08T00:42:39] tokens used: 40,707

[2025-10-08T00:42:44] thinking

**Preparing to read testing strategy docs**
[2025-10-08T00:42:46] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:46] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 671ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-08T00:42:46] tokens used: 43,915

[2025-10-08T00:42:51] thinking

**Preparing for deep codebase analysis**
[2025-10-08T00:42:51] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:52] bash -lc 'ls plans/active' succeeded in 698ms:
cli-noise-pix0
cli-phi-parity-shim
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-08T00:42:52] tokens used: 46,677

[2025-10-08T00:42:54] thinking

**Examining relevant plans**
[2025-10-08T00:42:55] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:56] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 700ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-08T00:42:56] tokens used: 46,895

[2025-10-08T00:42:58] thinking

**Reviewing detailed plan document**
[2025-10-08T00:42:58] exec bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:42:59] bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' succeeded in 714ms:
## Context
- Initiative: CLI-FLAGS-003 (`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
- Dependencies:
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).

### Phase A — Spec Baseline Confirmation (Prerequisite)
Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T00:42:59] tokens used: 61,465

[2025-10-08T00:43:02] thinking

**Continuing codebase analysis aligned with long-term goals**
[2025-10-08T00:43:03] exec bash -lc 'rg -n "phi" docs/bugs/verified_c_bugs.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:03] bash -lc 'rg -n "phi" docs/bugs/verified_c_bugs.md' succeeded in 683ms:
167:**Summary:** Inside the φ loop, the rotated vectors `ap/bp/cp` are only updated when `phi != 0.0`; otherwise, they retain the previous state (often from the prior pixel’s final φ step). This produces step-0 Miller fractions that mirror the previous pixel rather than the unrotated lattice.
173:  -phi 0 -osc 0.09 -phisteps 10 -trace_pixel 0 0 \
174:  -floatfile /tmp/phi_float.bin -intfile /tmp/phi_int.img -noisefile /tmp/phi_noise.img \
180:- `golden_suite_generator/nanoBragg.c:3042-3059` — rotation only applied when `phi != 0.0`; no reset path exists.
203:4. Reset `ap/bp/cp` when `phi == 0.0` so the first φ slice uses the unrotated lattice.
[2025-10-08T00:43:03] tokens used: 63,762

[2025-10-08T00:43:05] thinking

**Reviewing vectorization plan**
[2025-10-08T00:43:06] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:07] bash -lc 'cat plans/active/vectorization.md' succeeded in 695ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-27): Phases A–C complete with gather vectorization merged (commit 12742e5). Phase D1 worksheet captured under `reports/2025-10-vectorization/phase_d/polynomial_validation.md`; polynomial helpers remain scalar (D2–D4 pending) and detector absorption is still looped. Phase D is the active gate before parity/perf validation (Phase E) and absorption work (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T00:43:07] tokens used: 69,290

[2025-10-08T00:43:12] thinking

**Reviewing plan completion and next steps**

I'm checking whether vectorization phases D1-D4 are truly complete since the plan indicates they are, but the instructions might be outdated or still require verification. I see there’s a focus on analyzing the codebase deeply before moving on, including some tasks around checking CLI flags and related plans, plus a coin toss step after the analysis. I’ll confirm the current git status and branch, then dive into reviewing relevant plans and flags as the first step.
[2025-10-08T00:43:13] exec bash -lc 'cat plans/active/gradcheck-tier2-completion/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:14] bash -lc 'cat plans/active/gradcheck-tier2-completion/plan.md' succeeded in 690ms:
# Plan: AT-TIER2-GRADCHECK Completion

**Status:** Active (new 2025-10-15)
**Priority:** High — spec compliance blocker (testing_strategy §4.1)
**Related fix_plan item:** `[AT-TIER2-GRADCHECK]` — docs/fix_plan.md
**Created:** 2025-10-15 by galph

## Context
- Initiative: Ensure differentiability guarantees (long-term goal: autodiff-based refinement showcase).
- Phase Goal: Close the remaining Tier-2 gradcheck gaps called out in testing_strategy.md §4.1: `misset_rot_x`, beam `lambda_A`, and `fluence`.
- Current State: Commit 0e3054c implemented gradchecks for unit-cell lengths/angles and detector distance/beam_center_f. Commit d45a0f3 introduced `NANOBRAGG_DISABLE_COMPILE` to work around torch.compile bugs. However, no coverage exists yet for misset rotations or beam parameters, and the harness still emits contradictory compile-mode toggles (`NB_DISABLE_COMPILE` vs `NANOBRAGG_DISABLE_COMPILE`). The spec remains unmet.
- Dependencies: `tests/test_gradients.py`, `tests/test_suite.py::TestTier2GradientCorrectness`, `docs/development/testing_strategy.md §4.1`, `arch.md §15`, perf plan task B7 (env-var alignment for compile toggles).

### Phase A — Baseline Audit & Environment Alignment
Goal: Capture authoritative evidence of current coverage gaps and ensure the compile-disable switch is consistent across harnesses before adding new tests.
Prereqs: None.
Exit Criteria: Audit note summarising missing parameters, baseline gradcheck log attached, and env-var naming decision recorded (either standardise on `NANOBRAGG_DISABLE_COMPILE` or support both).

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
[2025-10-08T00:43:14] tokens used: 72,435

[2025-10-08T00:43:17] thinking

**Preparing for branch inspection**
[2025-10-08T00:43:18] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:18] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 736ms:
feature/spec-based-2
[2025-10-08T00:43:18] tokens used: 74,203

[2025-10-08T00:43:22] thinking

**Analyzing long-term goals and test requirements**
[2025-10-08T00:43:23] exec bash -lc 'rg -n "phi" specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:24] bash -lc 'rg -n "phi" specs/spec-a-core.md' succeeded in 701ms:
211:                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
248:    - Define steps = (number of sources) · (number of mosaic domains) · (phisteps) · (oversample^2).
414:        - Steps = (#accepted divergence points) × dispsteps × mosaic_domains × phisteps ×
507:    - For each of horizontal divergence, vertical divergence, spectral dispersion, phi, and detector thickness sampling, missing combinations of count/range/step SHALL be resolved per the rules in “Sources, Divergence & Dispersion” and “Sampling & Accumulation”, resulting in:
575:    - Setup: sources=1; mosaic_domains=1; oversample=1; phisteps=2 with identical physics across steps (e.g., zero mosaic and symmetric phi so F_cell and F_latt identical); disable thickness/polar/omega oversample toggles.
[2025-10-08T00:43:24] tokens used: 74,602

[2025-10-08T00:43:25] thinking

**Preparing to view lines**
[2025-10-08T00:43:26] exec bash -lc "sed -n '200,260p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:26] bash -lc "sed -n '200,260p' specs/spec-a-core.md" succeeded in 707ms:
            - For each source:
                - Incident unit vector i = −source_dir (unitized); wavelength λ from source.
                - q = (d − i) / λ (m^-1). stol = 0.5·||q||.
                - If dmin > 0 and stol > 0 and dmin > 0.5/stol: skip this subpath.
                - Polarization factor (if enabled; Kahn model):
                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
the Kahn factor from -polar.
                - Crystal orientation:
                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
about u by φ to get (ap,bp,cp).
                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
(a,b,c).
                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
                - Lattice factor F_latt:
                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
where
[2025-10-08T00:43:26] tokens used: 75,046

[2025-10-08T00:43:31] thinking

**Reviewing spec and CLI flag status**
[2025-10-08T00:43:31] exec bash -lc 'rg -n "nonoise"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:32] bash -lc 'rg -n "nonoise"' succeeded in 726ms:
src/nanobrag_torch/__main__.py:339:    parser.add_argument('-nonoise', action='store_true',
src/nanobrag_torch/__main__.py:722:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1198:        # CLI-FLAGS-003: Honor -nonoise flag
nonBragg.c:719:            if(strstr(argv[i], "-nonoise") )
context:248:            if(strstr(argv[i], "-nonoise") )
context:2276:            if(strstr(argv[i], "-nonoise") )
context:2609:        printf("\t-nonoise         \tdisable generating the noisefile\n");
context:6274:            if(strstr(argv[i], "-nonoise") )
context:8812:***-nonoise***
specs/spec-a-core.md:520:    - If -nonoise is set, a noise image SHALL NOT be written even if -noisefile is specified; otherwise, the noise image SHALL be generated by Poisson (or Gaussian approximation for large means) about the float image, then offset, clipped, and written with the same header conventions.
noisify.c:247:            if(strstr(argv[i], "-nonoise") )
specs/spec-a-parallel.md:285:    - -water <µm> background term; -noisefile|-noiseimage enables Poisson noise; -nonoise disables; -seed controls RNG. Poisson exact for small means, rejection up to 1e6, Gaussian approximation beyond.
docs/fix_plan.md:22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
docs/fix_plan.md:450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
docs/fix_plan.md:457:  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
docs/fix_plan.md:458:  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
docs/fix_plan.md:1522:      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
docs/fix_plan.md:1523:      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
docs/fix_plan.md:1527:      - `-nonoise` suppresses noise parameters section AND noise image generation (noiseimage.img not written)
docs/fix_plan.md:1528:      - Float/int/PGM images still generated when -nonoise is active
[2025-10-08T00:43:32] tokens used: 76,601

[2025-10-08T00:43:34] thinking

**Checking CLI noise flag support**
[2025-10-08T00:43:35] exec bash -lc 'rg -n "pix0_vector_mm" -g"*.py"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:35] bash -lc 'rg -n "pix0_vector_mm" -g"*.py"' succeeded in 691ms:
src/nanobrag_torch/__main__.py:190:    parser.add_argument('-pix0_vector_mm', nargs=3, type=float,
src/nanobrag_torch/__main__.py:473:            args.pix0_vector, args.pix0_vector_mm]):
src/nanobrag_torch/__main__.py:568:    if args.pix0_vector and args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:569:        raise ValueError("Cannot specify both -pix0_vector and -pix0_vector_mm simultaneously")
src/nanobrag_torch/__main__.py:575:    elif args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:577:        config['pix0_override_m'] = tuple(x * 0.001 for x in args.pix0_vector_mm)
src/nanobrag_torch/models/detector.py:524:            # C code IGNORES -pix0_vector_mm when custom detector vectors are present.
tests/test_cli_flags.py:4:Tests the -nonoise and -pix0_vector_mm flags added in Phase B.
tests/test_cli_flags.py:32:    """Test pix0_vector (meters) and pix0_vector_mm (millimeters) equivalence."""
tests/test_cli_flags.py:48:        """Verify -pix0_vector_mm accepts millimeters and converts to meters."""
tests/test_cli_flags.py:52:            '-pix0_vector_mm', '100', '-200', '300'
tests/test_cli_flags.py:70:            '-pix0_vector_mm', '100', '-200', '300'
tests/test_cli_flags.py:76:        """Using both -pix0_vector and -pix0_vector_mm should raise ValueError."""
tests/test_cli_flags.py:77:        with pytest.raises(ValueError, match="Cannot specify both -pix0_vector and -pix0_vector_mm"):
tests/test_cli_flags.py:82:                '-pix0_vector_mm', '0', '0', '0'
tests/test_cli_flags.py:101:            '-pix0_vector_mm', str(pix0_mm[0]), str(pix0_mm[1]), str(pix0_mm[2])
tests/test_cli_flags.py:279:            '-pix0_vector_mm', '100', '200', '300'
tests/test_cli_flags.py:379:    Test the BEAM-pivot pix0 transformation when -pix0_vector_mm override is provided.
tests/test_cli_flags.py:439:    def test_pix0_vector_mm_beam_pivot(self, device):
tests/test_cli_flags.py:444:        When custom detector vectors are provided, C code IGNORES -pix0_vector_mm entirely.
[2025-10-08T00:43:35] tokens used: 79,999

[2025-10-08T00:43:41] thinking

**Summarizing project issues and next steps**

I’m gathering current blockers like the parity shim and phi bug, noting what’s pending in vectorization and pyrefly checks. I want to review recent commits and docs to get a clear picture before moving on to iterative reviews prompted by the coin toss. This way, I’ll have a solid understanding of outstanding concerns and potential resolutions.
[2025-10-08T00:43:43] exec bash -lc 'rg -n "pyrefly" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:43] bash -lc 'rg -n "pyrefly" docs/fix_plan.md' exited 1 in 712ms:

[2025-10-08T00:43:43] tokens used: 81,392

[2025-10-08T00:43:46] thinking

**Preparing plan and choosing focus**
[2025-10-08T00:43:47] exec bash -lc "python -c \"import random; print('heads' if random.random()<0.5 else 'tails')\"" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:43:47] bash -lc "python -c \"import random; print('heads' if random.random()<0.5 else 'tails')\"" succeeded in 674ms:
tails
[2025-10-08T00:43:47] tokens used: 81,658

[2025-10-08T00:44:18] thinking

**Reviewing parity shim focus and planning next steps**
[2025-10-08T00:44:18] exec bash -lc "sed -n '1,180p' tests/test_cli_scaling_phi0.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:19] bash -lc "sed -n '1,180p' tests/test_cli_scaling_phi0.py" succeeded in 885ms:
"""
CLI Scaling φ=0 Parity Tests for CLI-FLAGS-003 Phase L3k.3

Tests φ=0 rotated lattice vectors and Miller indices to capture the base-vector
drift before implementing the fix for independent real/reciprocal rotation.

Evidence base: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
Plan reference: plans/active/cli-noise-pix0/plan.md Phase L3k.3
Supervisor memo: input.md:22-45 (Do Now for Phase L3k.3)
"""
import os
import sys
from pathlib import Path
import pytest
import torch
import numpy as np

# Set required environment variable
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

[2025-10-08T00:44:19] tokens used: 83,593

[2025-10-08T00:44:25] thinking

**Preparing documentation and code inspection plan**
[2025-10-08T00:44:26] exec bash -lc 'rg -n "_phi_last_cache" -n src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:27] bash -lc 'rg -n "_phi_last_cache" -n src/nanobrag_torch/models/crystal.py' exited 1 in 778ms:

[2025-10-08T00:44:27] tokens used: 86,186

[2025-10-08T00:44:28] thinking

**Checking snippet for phi rotation**
[2025-10-08T00:44:30] exec bash -lc "sed -n '950,1150p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:31] bash -lc "sed -n '950,1150p' src/nanobrag_torch/models/crystal.py" succeeded in 681ms:
    def get_rotated_real_vectors(self, config: "CrystalConfig") -> Tuple[
        Tuple[torch.Tensor, torch.Tensor, torch.Tensor],
        Tuple[torch.Tensor, torch.Tensor, torch.Tensor],
    ]:
        """
        Get real-space and reciprocal-space lattice vectors after applying all rotations.

        This method applies rotations in the correct physical sequence:
        1. Static missetting rotation (already applied to reciprocal vectors in compute_cell_tensors)
        2. Dynamic spindle (phi) rotation
        3. Mosaic domain rotations

        The method now returns both real-space and reciprocal-space vectors to support
        the correct physics implementation where Miller indices are calculated using
        reciprocal-space vectors.

        C-Code Implementation Reference (from nanoBragg.c):

        ---
        FUTURE WORK: Initial Orientation (`-misset`), applied once (lines 1521-1527):
[2025-10-08T00:44:31] tokens used: 86,314

[2025-10-08T00:44:33] thinking

**Continuing task**
[2025-10-08T00:44:34] exec bash -lc "sed -n '1150,1350p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:34] bash -lc "sed -n '1150,1350p' src/nanobrag_torch/models/crystal.py" succeeded in 700ms:
        #         printf("TRACE:   spindle_vector = [%g, %g, %g]\n", spindle_vector[1], spindle_vector[2], spindle_vector[3]);
        #         printf("TRACE:   Before phi rotation:\n");
        #         printf("TRACE:     a0 = [%g, %g, %g] |a0| = %g\n", a0[1], a0[2], a0[3], a0[0]);
        #         printf("TRACE:     b0 = [%g, %g, %g] |b0| = %g\n", b0[1], b0[2], b0[3], b0[0]);
        #         printf("TRACE:     c0 = [%g, %g, %g] |c0| = %g\n", c0[1], c0[2], c0[3], c0[0]);
        #     }
        #
        #     rotate_axis(a0,ap,spindle_vector,phi);
        #     rotate_axis(b0,bp,spindle_vector,phi);
        #     rotate_axis(c0,cp,spindle_vector,phi);
        # }
        # // When phi==0, ap/bp/cp retain previous values (stale carryover from prior pixel)
        # ```
        #
        # Implementation: In batched form, simulate stale carryover by replacing φ=0 (index 0)
        # with φ=final (index -1) vectors using advanced indexing. This is device/dtype neutral
        # and preserves gradient flow through all tensor operations.

        if config.phi_carryover_mode == "c-parity":
            # Simulate stale carryover: use φ=final vectors as the "previous pixel's last φ"
[2025-10-08T00:44:34] tokens used: 89,134

[2025-10-08T00:44:38] thinking

**Checking parity shim implementation**
[2025-10-08T00:44:39] exec bash -lc 'rg -n "phi_carryover_mode" -n src/nanobrag_torch -g"*.py"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:39] bash -lc 'rg -n "phi_carryover_mode" -n src/nanobrag_torch -g"*.py"' succeeded in 671ms:
src/nanobrag_torch/__main__.py:859:                phi_carryover_mode=args.phi_carryover_mode
src/nanobrag_torch/models/crystal.py:1140:        # When phi_carryover_mode=="c-parity", replace φ=0 vectors with cached "stale" values
src/nanobrag_torch/models/crystal.py:1168:        if config.phi_carryover_mode == "c-parity":
src/nanobrag_torch/config.py:154:    phi_carryover_mode: str = "spec"
src/nanobrag_torch/config.py:164:        # Validate phi_carryover_mode
src/nanobrag_torch/config.py:165:        if self.phi_carryover_mode not in ["spec", "c-parity"]:
src/nanobrag_torch/config.py:167:                f"phi_carryover_mode must be 'spec' or 'c-parity', got '{self.phi_carryover_mode}'"
[2025-10-08T00:44:39] tokens used: 91,912

[2025-10-08T00:44:43] thinking

**Opening configuration**
[2025-10-08T00:44:44] exec bash -lc "sed -n '120,200p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:45] bash -lc "sed -n '120,200p' src/nanobrag_torch/config.py" succeeded in 754ms:
    misset_random: bool = False  # If True, generate random misset angles using seed
    misset_seed: Optional[int] = None  # Seed for random misset generation (C-compatible LCG)

    # MOSFLM matrix orientation (Phase G - CLI-FLAGS-003)
    # When -mat file is provided, these store the MOSFLM A* orientation in Å⁻¹
    # If None, Crystal uses canonical orientation from cell parameters
    mosflm_a_star: Optional[np.ndarray] = None  # MOSFLM a* reciprocal vector (Å⁻¹)
    mosflm_b_star: Optional[np.ndarray] = None  # MOSFLM b* reciprocal vector (Å⁻¹)
    mosflm_c_star: Optional[np.ndarray] = None  # MOSFLM c* reciprocal vector (Å⁻¹)

    # Spindle rotation parameters
    phi_start_deg: float = 0.0
    osc_range_deg: float = 0.0
    phi_steps: int = 1
    spindle_axis: Tuple[float, float, float] = (0.0, 0.0, 1.0)

    # Mosaicity parameters
    mosaic_spread_deg: float = 0.0
    mosaic_domains: int = 1
    mosaic_seed: Optional[int] = None
[2025-10-08T00:44:45] tokens used: 92,328

[2025-10-08T00:44:48] thinking

**Verifying CLI parser configuration**
[2025-10-08T00:44:48] exec bash -lc "sed -n '780,880p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:49] bash -lc "sed -n '780,880p' src/nanobrag_torch/__main__.py" succeeded in 719ms:

    print("\n### Beam Configuration ###")
    print(f"  Wavelength: {beam_config.wavelength_A:.4f} Å")
    if hasattr(beam_config, 'polarization_factor') and beam_config.polarization_factor != 1.0:
        print(f"  Polarization factor: {beam_config.polarization_factor:.3f}")
    if beam_config.fluence:
        print(f"  Fluence: {beam_config.fluence:.2e} photons/m²")
    if beam_config.flux and beam_config.exposure:
        print(f"  Flux: {beam_config.flux:.2e} photons/s")
        print(f"  Exposure: {beam_config.exposure:.3f} s")
    if hasattr(beam_config, 'beamsize_mm') and beam_config.beamsize_mm:
        print(f"  Beam size: {beam_config.beamsize_mm:.3f} mm")

    # Print source information if available
    if beam_config.source_directions is not None and len(beam_config.source_directions) > 0:
        print(f"  Sources: {len(beam_config.source_directions)} sources")
        # Print divergence/dispersion info from config dict if available
        if simulator_config and isinstance(simulator_config, dict):
            if simulator_config.get('dispersion_pct', 0) > 0:
                print(f"  Dispersion: {simulator_config['dispersion_pct']:.1f}% steps={simulator_config.get('dispersion_steps', 1)}")
[2025-10-08T00:44:49] tokens used: 93,655

[2025-10-08T00:44:52] thinking

**Checking parser for phi carryover flag**
[2025-10-08T00:44:54] exec bash -lc "sed -n '280,360p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:55] bash -lc "sed -n '280,360p' src/nanobrag_torch/__main__.py" succeeded in 716ms:
    parser.add_argument('-mosaic_seed', type=int,
                        help='Seed for mosaic rotations')
    parser.add_argument('-misset', nargs='*',
                        help='Misset angles (deg) or "random"')
    parser.add_argument('-misset_seed', type=int,
                        help='Seed for random misset')

    # Sampling
    parser.add_argument('-phi', type=float, metavar='DEG',
                        help='Starting spindle rotation angle')
    parser.add_argument('-osc', type=float, metavar='DEG',
                        help='Oscillation range')
    parser.add_argument('-phistep', type=float, metavar='DEG',
                        help='Step size')
    parser.add_argument('-phisteps', type=int,
                        help='Number of phi steps')
    parser.add_argument('-dmin', type=float, metavar='Å',
                        help='Minimum d-spacing cutoff')
    parser.add_argument('-oversample', type=int,
                        help='Sub-pixel sampling per axis')
[2025-10-08T00:44:55] tokens used: 95,839

[2025-10-08T00:44:58] thinking

**Searching for phi_carryover usage**
[2025-10-08T00:44:59] exec bash -lc "sed -n '430,520p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:44:59] bash -lc "sed -n '430,520p' src/nanobrag_torch/__main__.py" succeeded in 691ms:
                wavelength_A = 12398.42 / args.energy
            elif args.wavelength:
                wavelength_A = args.wavelength
            else:
                raise ValueError("Wavelength must be specified (via -lambda or -energy) when using -mat")

        # Read the MOSFLM matrix and convert to cell parameters
        a_star, b_star, c_star = read_mosflm_matrix(args.mat, wavelength_A)
        cell_params = reciprocal_to_real_cell(a_star, b_star, c_star)
        config['cell_params'] = cell_params

        # Phase G1: Store MOSFLM reciprocal vectors for Crystal orientation
        # These are in Å⁻¹ and already wavelength-scaled from read_mosflm_matrix
        config['mosflm_a_star'] = a_star  # numpy array from read_mosflm_matrix
        config['mosflm_b_star'] = b_star
        config['mosflm_c_star'] = c_star

        # Also store wavelength if not already set
        if 'wavelength_A' not in config:
            config['wavelength_A'] = wavelength_A
[2025-10-08T00:44:59] tokens used: 97,088

[2025-10-08T00:45:01] thinking

**Checking CLI parser for phi-carryover-mode argument**
[2025-10-08T00:45:02] exec bash -lc 'rg -n "phi-carryover" src/nanobrag_torch/__main__.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:03] bash -lc 'rg -n "phi-carryover" src/nanobrag_torch/__main__.py' succeeded in 745ms:
377:    parser.add_argument('--phi-carryover-mode', type=str,
[2025-10-08T00:45:03] tokens used: 98,246
[2025-10-08T00:45:05] exec bash -lc "sed -n '360,420p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:06] bash -lc "sed -n '360,420p' src/nanobrag_torch/__main__.py" succeeded in 716ms:
                        help='Disable progress meter')
    parser.add_argument('-progress', action='store_true',
                        help='Enable progress meter')
    parser.add_argument('-seed', type=int,
                        help='Noise RNG seed')
    parser.add_argument('-show_config', '-echo_config', action='store_true',
                        help='Print configuration parameters for debugging')

    # Performance options (PERF-PYTORCH-006)
    parser.add_argument('-dtype', type=str, choices=['float32', 'float64'],
                        default='float32',
                        help='Floating point precision (float32 for speed, float64 for accuracy)')
    parser.add_argument('-device', type=str, choices=['cpu', 'cuda'],
                        default='cpu',
                        help='Device for computation (cpu or cuda)')

    # Phi rotation behavior (CLI-FLAGS-003 Phase C2)
    parser.add_argument('--phi-carryover-mode', type=str,
                        default='spec',
                        choices=['spec', 'c-parity'],
[2025-10-08T00:45:06] tokens used: 98,390

[2025-10-08T00:45:12] thinking

**Verifying phase C task completion**
[2025-10-08T00:45:12] exec bash -lc 'rg -n "phi_carryover_mode" tests' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:13] bash -lc 'rg -n "phi_carryover_mode" tests' succeeded in 734ms:
tests/test_phi_carryover_mode.py:39:        """Verify default phi_carryover_mode is 'spec' (spec-compliant)."""
tests/test_phi_carryover_mode.py:45:        assert args.phi_carryover_mode == 'spec', \
tests/test_phi_carryover_mode.py:56:        assert args.phi_carryover_mode == 'spec'
tests/test_phi_carryover_mode.py:66:        assert args.phi_carryover_mode == 'c-parity'
tests/test_phi_carryover_mode.py:81:    """Test CrystalConfig validation for phi_carryover_mode."""
tests/test_phi_carryover_mode.py:86:        assert config.phi_carryover_mode == 'spec'
tests/test_phi_carryover_mode.py:90:        config = CrystalConfig(phi_carryover_mode='spec')
tests/test_phi_carryover_mode.py:91:        assert config.phi_carryover_mode == 'spec'
tests/test_phi_carryover_mode.py:95:        config = CrystalConfig(phi_carryover_mode='c-parity')
tests/test_phi_carryover_mode.py:96:        assert config.phi_carryover_mode == 'c-parity'
tests/test_phi_carryover_mode.py:100:        with pytest.raises(ValueError, match="phi_carryover_mode must be"):
tests/test_phi_carryover_mode.py:101:            CrystalConfig(phi_carryover_mode='invalid')
tests/test_phi_carryover_mode.py:124:        assert args.phi_carryover_mode == 'spec'
tests/test_phi_carryover_mode.py:130:            phi_carryover_mode=args.phi_carryover_mode
tests/test_phi_carryover_mode.py:133:        assert crystal_config.phi_carryover_mode == 'spec'
tests/test_phi_carryover_mode.py:149:        assert args.phi_carryover_mode == 'c-parity'
tests/test_phi_carryover_mode.py:154:            phi_carryover_mode=args.phi_carryover_mode
tests/test_phi_carryover_mode.py:157:        assert crystal_config.phi_carryover_mode == 'c-parity'
tests/test_phi_carryover_mode.py:161:    """Test that phi_carryover_mode affects rotation behavior correctly."""
tests/test_phi_carryover_mode.py:186:            phi_carryover_mode='spec'
[2025-10-08T00:45:13] tokens used: 99,495

[2025-10-08T00:45:15] thinking

**Checking existing tests for parity shim**
[2025-10-08T00:45:16] exec bash -lc "sed -n '1,160p' tests/test_phi_carryover_mode.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:17] bash -lc "sed -n '1,160p' tests/test_phi_carryover_mode.py" succeeded in 683ms:
"""
Test suite for --phi-carryover-mode CLI flag (CLI-FLAGS-003 Phase C2)

This module tests the CLI flag wiring and validation for the phi carryover mode
option that allows reproducing the C-PARITY-001 bug for validation purposes.

References:
- docs/bugs/verified_c_bugs.md (C-PARITY-001 description)
- plans/active/cli-phi-parity-shim/plan.md (Phase B2 design)
- reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md
"""
import os
import pytest
import torch
from nanobrag_torch.__main__ import create_parser, parse_and_validate_args
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.config import BeamConfig

# Set required environment variable
[2025-10-08T00:45:17] tokens used: 100,757

[2025-10-08T00:45:26] thinking

**Verifying task completion and plan updates**
[2025-10-08T00:45:27] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:27] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim' succeeded in 681ms:
20251007T232657Z
[2025-10-08T00:45:27] tokens used: 102,655

[2025-10-08T00:45:30] thinking

**Checking inside**
[2025-10-08T00:45:30] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:31] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z' succeeded in 699ms:
collect_only.log
design.md
[2025-10-08T00:45:31] tokens used: 102,919

[2025-10-08T00:45:33] thinking

**Checking for additional directories**
[2025-10-08T00:45:34] exec bash -lc 'find reports/2025-10-cli-flags/phase_l/parity_shim -maxdepth 2 -type d -print' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:35] bash -lc 'find reports/2025-10-cli-flags/phase_l/parity_shim -maxdepth 2 -type d -print' succeeded in 682ms:
reports/2025-10-cli-flags/phase_l/parity_shim
reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z
[2025-10-08T00:45:35] tokens used: 103,161

[2025-10-08T00:45:39] thinking

**Reviewing parity mode test coverage**
[2025-10-08T00:45:40] exec bash -lc "sed -n '160,360p' tests/test_phi_carryover_mode.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:41] bash -lc "sed -n '160,360p' tests/test_phi_carryover_mode.py" succeeded in 673ms:
class TestPhiCarryoverBehavior:
    """Test that phi_carryover_mode affects rotation behavior correctly."""

    @pytest.mark.parametrize("device,dtype", [
        ("cpu", torch.float32),
        ("cpu", torch.float64),
        pytest.param("cuda", torch.float32, marks=pytest.mark.skipif(
            not torch.cuda.is_available(), reason="CUDA not available"
        )),
        pytest.param("cuda", torch.float64, marks=pytest.mark.skipif(
            not torch.cuda.is_available(), reason="CUDA not available"
        )),
    ])
    def test_spec_mode_fresh_rotation(self, device, dtype):
        """
        Verify 'spec' mode applies fresh rotation for φ=0.

        In spec mode, φ=0 should receive an identity rotation (fresh vectors).
        """
        config = CrystalConfig(
[2025-10-08T00:45:41] tokens used: 103,551

[2025-10-08T00:45:43] thinking

**Verifying trace summary artifacts**
[2025-10-08T00:45:44] exec bash -lc "find reports/2025-10-cli-flags/phase_l -maxdepth 2 -type f -name 'trace_summary*'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:45] bash -lc "find reports/2025-10-cli-flags/phase_l -maxdepth 2 -type f -name 'trace_summary*'" succeeded in 722ms:

[2025-10-08T00:45:45] tokens used: 106,099

[2025-10-08T00:45:49] thinking

**Verifying task completion and plan updates**
[2025-10-08T00:45:50] exec bash -lc 'rg -n "Attempt" docs/fix_plan.md | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:51] bash -lc 'rg -n "Attempt" docs/fix_plan.md | head' succeeded in 766ms:
41:- Attempts History:
42:  * [2025-09-30] Attempt #1 — Result: partial. Added Protected Assets rule to `CLAUDE.md` and marked `loop.sh` as protected in `docs/index.md`; plan still needs to ensure hygiene checklists reference the rule.
47:  * [2025-09-30] Attempt #2 — Result: success. Verified Protected Assets rule is properly documented in `CLAUDE.md` (lines 26-28) and `docs/index.md` references `loop.sh` as protected asset. REPO-HYGIENE-002 completed with canonical C file intact.
52:  * [2025-10-07] Attempt #3 — Result: reopened (supervisor audit). Plan H4 still lacked an explicit Protected Assets checklist and no verification log was archived, so compliance cannot yet be proven.
75:- Attempts History:
76:  * [2025-09-30] Attempt #1 — Result: partial. Removed nested `golden_suite_generator/golden_suite_generator/` directory and archived `reports/2025-09-30-AT-021-traces`, but deleted `loop.sh` (a protected asset) before the rule existed; item reopened.
81:  * [2025-09-30] Attempt #2 — Result: success. Verified repository already complied with H1–H6: canonical C file matched 92ac528^, stale traces archived, parity harness green.
86:  * [2025-10-07] Attempt #3 — Result: supervisor audit. Confirmed canonical `nanoBragg.c` still diverges from 92ac528^, `reports/2025-09-30-AT-021-traces/` remains under repo root, and a stray top-level `fix_plan.md` (duplicate of docs version) persists. These artefacts keep Plan H1–H4 open and continue to block clean rebases.
91:  * [2025-10-01] Attempt #4 — Result: success. Executed plan tasks H1–H5 and verified all exit criteria met.
121:- Attempts History:
[2025-10-08T00:45:51] tokens used: 106,521

[2025-10-08T00:45:54] thinking

**Searching for phi_carryover references**
[2025-10-08T00:45:55] exec bash -lc 'rg -n "phi carryover" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:45:56] bash -lc 'rg -n "phi carryover" docs/fix_plan.md' exited 1 in 677ms:

[2025-10-08T00:45:56] tokens used: 141,283

[2025-10-08T00:45:58] thinking

**Searching for 'parity shim' in fix_plan**
[2025-10-08T00:45:59] exec bash -lc 'rg -n "parity shim" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:46:00] bash -lc 'rg -n "parity shim" docs/fix_plan.md' succeeded in 728ms:
461:1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
462:2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
505:      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
538:      2. → Phase L3k.3c.4 — Design opt-in C-parity shim for validation harnesses (defer to next implementation loop)
540:  * [2025-10-07] Attempt #119 (ralph loop i=119, Mode: Docs) — Result: ✅ **SUCCESS** (Phase L3k.3c.4 parity shim design COMPLETE). **No code changes.**
543:      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md` — Complete parity shim design note (496 lines, 10 sections): executive summary, C-PARITY-001 background (nanoBragg.c:3044-3066 quoted per CLAUDE Rule #11), opt-in trigger (`--phi-carryover-mode {spec,c-parity}`), batched tensor implementation strategy, validation plan (tests + traces + nb-compare), risk assessment, documentation updates, implementation roadmap
558:      1. ✅ Phase L3k.3c.4 (Phase B of parity shim plan) complete — design approved, ready for implementation
563:  * [2025-10-07] Attempt #120 (ralph loop i=120) — Result: ✅ **SUCCESS** (Phase C1-C2 parity shim implementation COMPLETE). **Opt-in φ=0 carryover mode implemented with batched tensor operations, CLI flag wired, validation complete.**
568:      - `src/nanobrag_torch/models/crystal.py:1080-1128` — Implemented parity shim using `torch.index_select` for batched φ=0 replacement (lines 1109-1128)
681:      1. Phase L3k.3c.4 — Design opt-in C-parity shim (cite docs/bugs/verified_c_bugs.md:166-204)
688:      - TODO markers placed at crystal.py:122, 150, 1130 for Phase L3k.3c.4 C-parity shim work (opt-in flag to reproduce C bug for validation harnesses)
2181:      - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
2197:      - **Immediate**: Review memo with galph (supervisor loop) to decide threshold adjustment vs parity shim implementation
2199:      - If parity shim required: Implement `--c-parity-phi-carryover` flag per strategy in diagnosis.md (cache `_phi_last_vectors`, conditional reuse at φ=0)
[2025-10-08T00:46:00] tokens used: 141,955

[2025-10-08T00:46:02] thinking

**Examining specific log entries**
[2025-10-08T00:46:03] exec bash -lc "sed -n '520,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:46:03] bash -lc "sed -n '520,620p' docs/fix_plan.md" succeeded in 680ms:
      4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
  * [2025-10-07] Attempt #118 (ralph loop i=118, Mode: Parity/Evidence) — Result: ✅ **SUCCESS** (Phase L3k.3c.3 φ=0 spec baseline evidence COMPLETE). **No code changes.**
    Metrics: Evidence-only loop. Tests PASSED (2/2 in 2.14s). Spec baselines locked: rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/metadata.txt` — Environment metadata (torch 2.8.0+cu128, CUDA available, git SHA 4cb561b, CPU device)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/pytest_phi0.log` — Test execution output (2 passed)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/sha256.txt` — Cryptographic hashes (eea25db..., 84bd30b...)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/comparison_summary.md` — Full evidence summary with interpretation, C-PARITY-001 note, next actions
    Observations/Hypotheses:
      - **Spec compliance confirmed**: Both tests pass, proving φ=0 rotation is identity transformation per specs/spec-a-core.md:211-214
      - **test_rot_b_matches_c PASSED**: rot_b[0,0,1] Y component = 0.7173197865 Å at φ=0, confirming base vector unchanged by identity rotation
      - **test_k_frac_phi0_matches_c PASSED**: k_frac = 1.6756687164 at φ=0 for pixel (685,1039), confirming Miller indices use base vectors
      - **C-PARITY-001 divergence documented**: C binary produces rot_b_y=0.6715882339 Å and k_frac=-0.607256 due to stale vector carryover bug (docs/bugs/verified_c_bugs.md:166-204)
      - **VG-1 gate satisfied**: Both spec baselines locked with ≤1e-6 tolerances on CPU (CUDA smoke test deferred to next loop per input.md pitfall guidance)
      - **Mode: Parity/Evidence** — Tests exist and pass; no code changes needed this loop per input.md:1-8 "Do Now" directive
    First Divergence: N/A (spec-compliant behavior validated; C-parity divergence is documented bug, not PyTorch regression)
    Next Actions:
      1. ✅ Phase L3k.3c.3 complete — spec baselines locked with evidence artifacts
      2. → Phase L3k.3c.4 — Design opt-in C-parity shim for validation harnesses (defer to next implementation loop)
      3. → Phase L3k.3d — Resolve nb-compare ROI parity (VG-3/VG-4) after shim work
[2025-10-08T00:46:03] tokens used: 143,128

[2025-10-08T00:46:06] thinking

**Continuing to review attempts**
[2025-10-08T00:46:06] exec bash -lc "sed -n '620,760p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:46:07] bash -lc "sed -n '620,760p' docs/fix_plan.md" succeeded in 685ms:
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/c_trace_phi_20251123.log` — C TRACE_C_PHI (10 steps; SHA256 recorded in sha256.txt)
      - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.log` — PyTorch per-φ trace
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json` — VG-1 delta metrics (`status`: "ok", φ₀ Δk=1.8116e-02)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/comparison_stdout_20251123.txt` — Comparison table (φ₀ DIVERGE, φ₁–φ₉ OK)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md` — Updated with carryover notes
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt` & `sha256.txt` — Repro command log + hashes
    Observations/Hypotheses:
      - C retains the φ₉ orientation when φ_tic resets to 0 (C k_frac φ₀ == φ₉ == -0.60725584; rot_b_y φ₀ = 0.671588233999813 Å)
      - PyTorch reuses the unrotated base vector at φ₀ (rot_b_y = 0.7173197865486145 Å), then matches C for φ≥1 (Δk ≤ 2.845×10⁻⁵)
      - The remaining parity gap is therefore the φ=0 carryover: we must persist the φ_{last} rotated state (or equivalent) when φ_tic loops back to zero
    First Divergence: φ_tic=0 (φ=0°) — Δk=1.8116×10⁻² (PyTorch -0.5891393528 vs C -0.6072558396), ΔF_latt_b=1.912228
    Next Actions:
      1. Phase L3k.3c.3 — Implement φ==0 carryover fix in `Crystal.get_rotated_real_vectors`, rerun per-φ harness, and hit VG-1 thresholds (Δk, Δb_y ≤ 1e-6).
      2. Keep nb-compare (L3k.3d) and documentation (L3k.3e) queued until VG-1 is green.
  * [2025-10-07] Attempt #109 (ralph loop i=109, Phase L3k.3c.2) — Result: **EVIDENCE COMPLETE** (Phase L3k.3c.2 metrics documentation). **Δk and Δb_y captured; remediation outlined.**
    Metrics: Evidence-only loop (no code changes). Δk(φ₀)=1.811649e-02 (threshold <1e-6 NOT MET); Δb_y=0.045731552549 Å. Per-φ comparison: 1 DIVERGE (φ_tic=0), 9 OK (φ_tic=1-9, Δk<3e-5). Pytest collection: 655 tests.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/diagnosis.md` — Full metrics table, remediation outline (φ=0 carryover via cached φ_last state)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/compare_latest.txt` — Per-φ comparison output from `compare_per_phi_traces.py`
[2025-10-08T00:46:07] tokens used: 144,773

[2025-10-08T00:46:10] thinking

**Searching for "Attempt #120" details**
[2025-10-08T00:46:11] exec bash -lc 'rg -n "Attempt #120" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:46:11] bash -lc 'rg -n "Attempt #120" docs/fix_plan.md' succeeded in 682ms:
563:  * [2025-10-07] Attempt #120 (ralph loop i=120) — Result: ✅ **SUCCESS** (Phase C1-C2 parity shim implementation COMPLETE). **Opt-in φ=0 carryover mode implemented with batched tensor operations, CLI flag wired, validation complete.**
[2025-10-08T00:46:11] tokens used: 149,639
[2025-10-08T00:46:19] exec bash -lc "sed -n '560,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:46:20] bash -lc "sed -n '560,620p' docs/fix_plan.md" succeeded in 695ms:
      3. → Phase L3k.3c.5 — Dual-mode documentation/tests after implementation
      4. → Phase L3k.3d — nb-compare ROI parity (VG-3/VG-4) using c-parity mode
      4. Update `plans/active/cli-noise-pix0/plan.md` L3k.3c.3 state from [ ] to [D] with this attempt reference
  * [2025-10-07] Attempt #120 (ralph loop i=120) — Result: ✅ **SUCCESS** (Phase C1-C2 parity shim implementation COMPLETE). **Opt-in φ=0 carryover mode implemented with batched tensor operations, CLI flag wired, validation complete.**
    Metrics: Targeted tests PASSED (6/6 in 4.25s). Smoke tests: test_cli_scaling_phi0.py 2/2 passed, test_at_geo_001.py 1/1 passed, test_at_crystal_absolute.py 3/3 passed. Config validation: phi_carryover_mode invalid rejection working. No regressions detected.
    Artifacts:
      - `src/nanobrag_torch/config.py:56-59` — Added `phi_carryover_mode: str = "spec"` field to CrystalConfig
      - `src/nanobrag_torch/config.py:69-73` — Added validation in `__post_init__` to reject invalid modes
      - `src/nanobrag_torch/models/crystal.py:1080-1128` — Implemented parity shim using `torch.index_select` for batched φ=0 replacement (lines 1109-1128)
      - `src/nanobrag_torch/models/crystal.py:1084-1103` — Added C-code reference (nanoBragg.c:3044-3058) per CLAUDE Rule #11
      - `src/nanobrag_torch/__main__.py:377-385` — Added `--phi-carryover-mode {spec,c-parity}` CLI flag with help text
      - `src/nanobrag_torch/__main__.py:859` — Wired flag through to CrystalConfig instantiation
      - Test logs: `/tmp/phi0_test.log` (2 passed), smoke test output (6 passed, 3 warnings)
    Observations/Hypotheses:
      - **Batched implementation verified**: Uses `torch.index_select` on phi dimension (dim=0) to replace index 0 with index -1; no Python loops
      - **Gradient flow preserved**: No `.detach()`, `.item()`, or `.cpu()` calls in shim; gradients flow through index_select
      - **Device/dtype neutral**: Indices tensor created on same device as input (`a_final.device`); dtype long for indices
      - **Default is spec-compliant**: phi_carryover_mode="spec" produces fresh rotations; validates against C-PARITY-001 documentation
      - **C-code reference included**: Lines 1084-1103 contain exact C code from nanoBragg.c per CLAUDE Rule #11
      - **Validation working**: Invalid mode "invalid" correctly rejected with ValueError
[2025-10-08T00:46:20] tokens used: 152,125

[2025-10-08T00:46:23] thinking

**Verifying parity mode tests**
[2025-10-08T00:46:24] exec bash -lc 'rg -n "test_phi_carryover_mode" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:46:25] bash -lc 'rg -n "test_phi_carryover_mode" docs/fix_plan.md' exited 1 in 704ms:

[2025-10-08T00:46:25] tokens used: 154,453

[2025-10-08T00:46:38] thinking

**Preparing plan updates**

I'm reviewing task statuses to update the plan files accurately, marking completed tasks as done and adjusting next steps to focus on outstanding per-φ trace capturing and summary tasks. I'll gather evidence from code, tests, and logs to support these updates and ensure the plan's next actions reflect the current progress and pending work.
[2025-10-08T00:46:42] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-phi-parity-shim/plan.md
@@ -43,5 +43,5 @@
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` retains spec assertions (Attempt #120 log `/tmp/phi0_test.log`). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
@@ -59,2 +59 @@
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-
[2025-10-08T00:46:42] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T00:46:42] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..2df1b9f2d05fd3b54f55ba6c0c5cde2de8ef17db
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` retains spec assertions (Attempt #120 log `/tmp/phi0_test.log`). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-

[2025-10-08T00:46:42] tokens used: 156,074
[2025-10-08T00:46:42] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..2df1b9f2d05fd3b54f55ba6c0c5cde2de8ef17db
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` retains spec assertions (Attempt #120 log `/tmp/phi0_test.log`). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:46:49] thinking

**Revising log references**
[2025-10-08T00:46:51] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-phi-parity-shim/plan.md
@@ -45,3 +45,3 @@
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
-| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` retains spec assertions (Attempt #120 log `/tmp/phi0_test.log`). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
[2025-10-08T00:46:51] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T00:46:51] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-

[2025-10-08T00:46:51] tokens used: 241,921
[2025-10-08T00:46:51] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:46:57] thinking

**Revising fix_plan next actions**
[2025-10-08T00:47:03] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -460,4 +460,4 @@
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
[2025-10-08T00:47:03] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-08T00:47:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-

[2025-10-08T00:47:03] tokens used: 243,312
[2025-10-08T00:47:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:10] thinking

**Ensuring plan task status consistency**
[2025-10-08T00:47:13] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -309,3 +309,3 @@
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
[2025-10-08T00:47:13] apply_patch(auto_approved=true) exited 0 in 33ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-08T00:47:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..0c0f5b8424b9fae120260907a1d7a90049be100f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-

[2025-10-08T00:47:13] tokens used: 244,981
[2025-10-08T00:47:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..0c0f5b8424b9fae120260907a1d7a90049be100f
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:16] thinking

**Updating task status for tests and docs**
[2025-10-08T00:47:19] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -310,3 +310,3 @@
 | L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
[2025-10-08T00:47:19] apply_patch(auto_approved=true) exited 0 in 48ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-08T00:47:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-

[2025-10-08T00:47:19] tokens used: 245,778
[2025-10-08T00:47:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:23] thinking

**Preparing for input.md creation**
[2025-10-08T00:47:24] exec bash -lc 'head -n 80 scripts/compare_per_phi_traces.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:47:25] bash -lc 'head -n 80 scripts/compare_per_phi_traces.py' succeeded in 871ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Compare C vs PyTorch per-φ traces

Identifies the first φ where Δk exceeds tolerance (5e-4) to isolate the φ-grid mismatch.
"""

import json
import sys
from pathlib import Path

def parse_c_trace(log_file):
    """Parse C trace log file."""
    traces = []
    with open(log_file) as f:
        for line in f:
            if line.startswith('TRACE_C_PHI'):
                parts = line.split()
                traces.append({
                    'phi_tic': int(parts[1].split('=')[1]),
[2025-10-08T00:47:25] tokens used: 246,321
[2025-10-08T00:47:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:29] thinking

**Investigating PyTorch trace generation**
[2025-10-08T00:47:30] exec bash -lc 'rg -n "compare_per_phi_traces" -n plans/active/cli-phi-parity-shim/plan.md reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:47:31] bash -lc 'rg -n "compare_per_phi_traces" -n plans/active/cli-phi-parity-shim/plan.md reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md' succeeded in 696ms:
plans/active/cli-phi-parity-shim/plan.md:10:  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
plans/active/cli-phi-parity-shim/plan.md:35:| B3 | Define validation strategy | [D] | ✅ Documented in `design.md` §4: (a) Extended test classes `TestPhiCarryoverParity`, (b) CPU+CUDA parametrized tests, (c) Per-φ trace commands (`scripts/compare_per_phi_traces.py`), (d) nb-compare integration with `--py-args` flag. Artifact targets enumerated. |
plans/active/cli-phi-parity-shim/plan.md:47:| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md:418:**Script**: `scripts/compare_per_phi_traces.py`
reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md:425:KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py \
reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md:431:KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py \
[2025-10-08T00:47:31] tokens used: 247,945
[2025-10-08T00:47:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:33] thinking

**Checking design notes for commands**
[2025-10-08T00:47:33] exec bash -lc "sed -n '410,450p' reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:47:34] bash -lc "sed -n '410,450p' reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md" succeeded in 691ms:

    # Invalid value
    with pytest.raises(SystemExit):
        parser.parse_args([..., "--phi-carryover-mode", "invalid"])
```

### 4.2 Trace Validation

**Script**: `scripts/compare_per_phi_traces.py`

**Execution Plan**:

```bash
# 1. Spec mode trace (current behavior)
mkdir -p reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/traces/spec
KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py \
  --mode spec \
  --outdir reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/traces/spec

# 2. C-parity mode trace (shim behavior)
[2025-10-08T00:47:34] tokens used: 248,567
[2025-10-08T00:47:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:40] thinking

**Verifying script CLI options**
[2025-10-08T00:47:41] exec bash -lc 'rg "--mode" scripts/compare_per_phi_traces.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:47:41] bash -lc 'rg "--mode" scripts/compare_per_phi_traces.py' exited 2 in 700ms:
rg: unrecognized flag --mode
[2025-10-08T00:47:41] tokens used: 249,466
[2025-10-08T00:47:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:43] thinking

**Handling command-line argument issue**
[2025-10-08T00:47:44] exec bash -lc 'rg "mode" scripts/compare_per_phi_traces.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:47:45] bash -lc 'rg "mode" scripts/compare_per_phi_traces.py' exited 1 in 722ms:

[2025-10-08T00:47:45] tokens used: 249,678
[2025-10-08T00:47:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:48] thinking

**Searching for other script versions**
[2025-10-08T00:47:49] exec bash -lc 'rg -n "compare_per_phi_traces" -g"*.py"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:47:50] bash -lc 'rg -n "compare_per_phi_traces" -g"*.py"' succeeded in 678ms:
scripts/compare_per_phi_traces.py:30:        print("Usage: python compare_per_phi_traces.py <pytorch_json> <c_log>")
[2025-10-08T00:47:50] tokens used: 249,867
[2025-10-08T00:47:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:55] thinking

**Investigating pyro JSON generation**
[2025-10-08T00:47:56] exec bash -lc 'rg -n "trace_py_rot_vector_per_phi" -g"*.py"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:47:57] bash -lc 'rg -n "trace_py_rot_vector_per_phi" -g"*.py"' exited 1 in 740ms:

[2025-10-08T00:47:57] tokens used: 250,227
[2025-10-08T00:47:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:47:59] thinking

**Checking related report files**
[2025-10-08T00:48:00] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:01] bash -lc 'cat reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt' succeeded in 734ms:
2025-10-07 12:16:11 TRACE START
make: Entering directory '/home/ollie/Documents/tmp/nanoBragg/golden_suite_generator'
make: 'nanoBragg' is up to date.
make: Leaving directory '/home/ollie/Documents/tmp/nanoBragg/golden_suite_generator'
/bin/bash: line 1: PYTHONPATH=src: command not found
/home/ollie/miniconda3/envs/myenv/bin/python: can't find '__main__' module in '/home/ollie/Documents/tmp/nanoBragg'
/bin/bash: line 1: PYTHONPATH=src: command not found
/home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py:129: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  'timestamp_iso': datetime.utcnow().isoformat() + 'Z'
/home/ollie/Documents/tmp/nanoBragg/src/nanobrag_torch/models/crystal.py:1040: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  spindle_axis = torch.tensor(
/home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py:400: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  timestamp = datetime.utcnow().isoformat() + 'Z'
MOSFLM matrix probe written to reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log
Captured 12 MOSFLM probe lines
Per-φ trace written to reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.log
Per-φ JSON written to reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.json
Captured 10 TRACE_PY_PHI lines
Main trace written to reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123.log
Environment snapshot: reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json
[2025-10-08T00:48:01] tokens used: 250,466
[2025-10-08T00:48:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:48:04] thinking

**Inspecting trace harness location**
[2025-10-08T00:48:06] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:06] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 700ms:
#!/usr/bin/env python
"""
Phase L3h MOSFLM Matrix Probe Harness

Extends the scaling trace harness to log MOSFLM reciprocal vectors at key stages:
- Before misset rotation
- After reciprocal→real reconstruction
- After real→reciprocal re-derivation

This captures the evidence needed to diagnose the Y-component drift in real-space
vectors identified in Phase L3f/L3g.

Date: 2025-10-07 (replayed from galph loop i=92)
Engineer: Ralph (evidence-only mode per input.md)
Plan Reference: plans/active/cli-noise-pix0/plan.md Phase L3h
"""

import argparse
import json
import sys
[2025-10-08T00:48:06] tokens used: 251,396
[2025-10-08T00:48:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:48:10] thinking

**Investigating harness for phi_carryover_mode**
[2025-10-08T00:48:11] exec bash -lc 'rg -n "phi_carryover_mode" reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:12] bash -lc 'rg -n "phi_carryover_mode" reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' exited 1 in 688ms:

[2025-10-08T00:48:12] tokens used: 253,367
[2025-10-08T00:48:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:48:18] thinking

**Evaluating trace harness compatibility**

I'm considering that the existing trace harness might be outdated and may require adaptation for the new parity mode. It's probably best to guide Ralph to use or extend this harness while referencing the right commands, potentially found in `commands.txt` or related docs, to produce the necessary per-phi traces. I'll look for earlier command invocations or instructions mentioning `trace_harness.py` to clarify the process.
[2025-10-08T00:48:19] exec bash -lc 'rg -n "trace_harness.py" docs/fix_plan.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:19] bash -lc 'rg -n "trace_harness.py" docs/fix_plan.md plans/active/cli-noise-pix0/plan.md' succeeded in 737ms:
plans/active/cli-noise-pix0/plan.md:20:- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
plans/active/cli-noise-pix0/plan.md:106:| E2 | Generate matching PyTorch trace | [D] | ✅ 2025-10-16: `pytorch_trace_beam.log` generated with `trace_harness.py` (double precision). Harness currently overrides beam vector manually to mimic the supervisor command. |
plans/active/cli-noise-pix0/plan.md:140:| H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
plans/active/cli-noise-pix0/plan.md:141:| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
plans/active/cli-noise-pix0/plan.md:169:| H6b | Extend PyTorch trace harness | [D] | ✅ Attempt #37 (2025-10-06) patched `reports/2025-10-cli-flags/phase_h/trace_harness.py` to emit matching `TRACE_PY` lines after Detector geometry setup, removed the hard-coded BEAM pivot, and executed via `PYTHONPATH=src` to guarantee the editable implementation. Trace archived at `phase_h6/py_trace/trace_py_pix0.log` with env/git snapshots; residual ΔF = −1136 µm confirms instrumentation succeeded and Phase H6c analysis is next. |
plans/active/cli-noise-pix0/plan.md:223:| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
plans/active/cli-noise-pix0/plan.md:269:| L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
plans/active/cli-noise-pix0/plan.md:275:| L3h | MOSFLM matrix probe & diff | [D] | ✅ Attempt #92 (2025-10-07, ralph evidence loop i=92): Created `trace_harness.py` in rot_vector/, captured 12 MOSFLM probe lines (post-misset reciprocals, reconstructed reals, re-derived reciprocals), proved V_formula ≈ V_actual (Δ=1.5e-11 Å³), **ruled out Hypothesis H2**. Reciprocal re-derivation exact to 15 digits. Artifacts: `mosflm_matrix_probe.md` (primary doc), `mosflm_matrix_probe_output.log`, `trace_harness.py`, `harness_run.log`. pytest: 579 tests collected. Next: Phase L3i C instrumentation to complete C vs PyTorch diff. |
docs/fix_plan.md:844:      - `reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py` - Adapted harness from scaling_audit pattern
docs/fix_plan.md:921:    Next Actions: Phase L3c — Audit `trace_harness.py` to find why HKL data isn't loaded despite file existing; fix harness to mirror probe's successful attachment pattern (crystal.hkl_data = F_grid, crystal.hkl_metadata = metadata); verify CLI __main__.py follows same pattern when -hkl provided; NO simulator.py changes needed.
docs/fix_plan.md:933:    Next Actions: Phase L3c harness audit per plan guidance (review trace_harness.py lines 206-236, compare against probe successful pattern, fix HKL attachment). NO simulator.py changes needed (scaling math correct per L2c, lookup logic works per L3a probe).
docs/fix_plan.md:938:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:260-333` - Harness updates to capture and parse TRACE_PY_PHI lines
docs/fix_plan.md:962:  * [2025-10-17] Attempt #72 (ralph loop) — Result: **SUCCESS** (Phase L2b harness MOSFLM orientation fix). **Corrected `trace_harness.py` to assign each MOSFLM reciprocal vector to its own config field instead of packing all three into `mosflm_a_star`.**
docs/fix_plan.md:965:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:159-161` - Fixed MOSFLM vector assignment (mosflm_a_star, mosflm_b_star, mosflm_c_star as separate tensors)
docs/fix_plan.md:1071:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:233-236` — Fixed HKL attachment (crystal.hkl_data = F_grid_tensor, crystal.hkl_metadata = hkl_metadata)
docs/fix_plan.md:1096:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:238-282` - Modified to use Simulator with debug_config and contextlib.redirect_stdout
docs/fix_plan.md:1116:    Next Actions: Patch `trace_harness.py` to use the updated loader API, rerun the supervisor command capture, and confirm `trace_py_scaling.log` records real physics scalars before resuming comparison work.
docs/fix_plan.md:1125:      - **Trace harness is outdated:** Lines 252-286 of `trace_harness.py` manually construct TRACE_PY lines with hardcoded placeholders ("NOT_EXTRACTED", polar=beam_config.polarization_factor, capture_fraction=1.0) instead of invoking simulator.run() with debug_config and capturing stdout
docs/fix_plan.md:1128:    Next Actions: Next engineer turn should update trace_harness.py to use the live simulator TRACE_PY output (invoke with debug_config, capture stdout, write to file), rerun harness to generate fresh trace_py_scaling.log, then rerun comparison script to identify the actual first divergence with real PyTorch values.
docs/fix_plan.md:1243:      - `reports/2025-10-cli-flags/phase_h/trace_harness.py:30-122` - Patched Detector.__init__ to emit TRACE_PY lines post-geometry-setup
[2025-10-08T00:48:19] tokens used: 253,722
[2025-10-08T00:48:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:48:29] thinking

**Preparing input instructions and verifying trace harness**

I’m figuring out how to guide Ralph to adapt the existing trace harness for per-φ traces by possibly adding a new CLI flag without direct code changes myself. I’m also planning commands for running targeted tests and using the comparison script, while I dig deeper into the harness file to see if `phi_carryover_mode` support exists or can be easily added through config.
[2025-10-08T00:48:30] exec bash -lc "sed -n '200,360p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:30] bash -lc "sed -n '200,360p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 714ms:
            'phi_steps': crystal_config.phi_steps,
            'mosaic_spread_deg': crystal_config.mosaic_spread_deg,
            'mosaic_domains': crystal_config.mosaic_domains,
            'spindle_axis': crystal_config.spindle_axis.tolist()
        },
        'detector': {
            'distance_mm': detector_config.distance_mm,
            'pixel_size_mm': detector_config.pixel_size_mm,
            'spixels': detector_config.spixels,
            'fpixels': detector_config.fpixels,
            'beam_center_s': detector_config.beam_center_s,
            'beam_center_f': detector_config.beam_center_f,
            'convention': str(detector_config.detector_convention),
            'pivot': str(detector_config.detector_pivot),
            'oversample': detector_config.oversample
        },
        'beam': {
            'wavelength_A': beam_config.wavelength_A,
            'polarization_factor': beam_config.polarization_factor,
            'flux': beam_config.flux,
[2025-10-08T00:48:30] tokens used: 256,898
[2025-10-08T00:48:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:48:33] thinking

**Checking for phi_carryover mode settings**
[2025-10-08T00:48:34] exec bash -lc 'rg -n "phi_carry" reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:35] bash -lc 'rg -n "phi_carry" reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' exited 1 in 703ms:

[2025-10-08T00:48:35] tokens used: 259,590
[2025-10-08T00:48:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:48:40] thinking

**Examining harness configuration behavior**
[2025-10-08T00:48:41] exec bash -lc 'rg -n "CrystalConfig(" -n reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:42] bash -lc 'rg -n "CrystalConfig(" -n reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py' exited 2 in 703ms:
rg: regex parse error:
    (?:CrystalConfig()
    ^
error: unclosed group
[2025-10-08T00:48:42] tokens used: 259,887
[2025-10-08T00:48:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:48:45] thinking

**Opening CrystalConfig section**
[2025-10-08T00:48:45] exec bash -lc "sed -n '140,220p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:48:46] bash -lc "sed -n '140,220p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 705ms:
    else:
        raise ValueError(f"Unknown config: {args.config}")

    # Load MOSFLM matrix (Step 3)
    mat_path = Path('A.mat')
    if not mat_path.exists():
        raise FileNotFoundError(f"A.mat not found in current directory: {Path.cwd()}")

    # Note: wavelength is already in params['beam']['wavelength_A']
    a_star, b_star, c_star = read_mosflm_matrix(str(mat_path), params['beam']['wavelength_A'])

    # Extract cell parameters from reciprocal vectors
    cell_params = reciprocal_to_real_cell(a_star, b_star, c_star)
    cell_a, cell_b, cell_c, cell_alpha, cell_beta, cell_gamma = cell_params

    # Build crystal config with cell params and MOSFLM vectors
    # Each MOSFLM reciprocal vector must be assigned to its own config field
    # (not packed into a single list) so Crystal uses the specified orientation
    crystal_config = CrystalConfig(
        cell_a=cell_a,
[2025-10-08T00:48:46] tokens used: 260,056
[2025-10-08T00:48:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:49:01] thinking

**Preparing detailed parity trace instructions**

I’m laying out comprehensive instructions for the user to run parity-mode and spec-mode trace captures using the harness, including how to modify parameters to set phi_carryover_mode, generate outputs with timestamps, run targeted tests, and compare traces. I’ll organize this into a clear input.md format with explicit commands, paths, pitfalls, and references to fix_plan items and docs, helping the user guide the engineer responsible for executing these steps effectively.
[2025-10-08T00:49:04] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:49:05] bash -lc 'cat input.md' succeeded in 913ms:
Summary: Capture Phase D4 CPU/CUDA pytest evidence for the vectorized tricubic interpolation path and log timings.
Mode: Perf
Focus: VECTOR-TRICUBIC-001 — Phase D4 targeted pytest sweep
Branch: feature/spec-based-2
Mapped tests: tests/test_tricubic_vectorized.py::TestTricubicPoly; tests/test_at_str_002.py::TestStructureFactorInterpolation::test_tricubic_interpolation_enabled
Artifacts: reports/2025-10-vectorization/phase_d/collect.log; reports/2025-10-vectorization/phase_d/pytest_cpu.log; reports/2025-10-vectorization/phase_d/pytest_cuda.log; reports/2025-10-vectorization/phase_d/polynomial_validation.md
Do Now: VECTOR-TRICUBIC-001 Phase D4 – run `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py::TestTricubicPoly -v` (CPU) and, if available, `CUDA_VISIBLE_DEVICES=0 KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py::TestTricubicPoly -v` (CUDA); tee outputs to `reports/2025-10-vectorization/phase_d/pytest_{cpu,cuda}.log`, then rerun `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::TestStructureFactorInterpolation::test_tricubic_interpolation_enabled -v` and append timings to `polynomial_validation.md`.
If Blocked: Capture failing command + stderr into `reports/2025-10-vectorization/phase_d/attempt_fail.log`, note device/dtype, and log a blocked Attempt under VECTOR-TRICUBIC-001 in docs/fix_plan.md before pausing.
Priorities & Rationale:
- plans/active/vectorization.md:48-59 promotes Phase D4 as the active gate now that D2 succeeded; evidence must show CPU and CUDA sweeps with timings.
- docs/fix_plan.md:2303-2477 records Attempt #10 and asks for D4 logs plus timing deltas in polynomial_validation.md before moving to Phase E.
- reports/2025-10-vectorization/phase_d/polynomial_validation.md:1-220 outlines the measurement schema (wall-clock, device info, gradcheck notes) that needs updating after each sweep.
- docs/development/testing_strategy.md:66-120 mandates targeted selectors first, dual-device coverage, and logging commands in reports/ for reproducibility.
- docs/development/pytorch_runtime_checklist.md:1-35 reiterates the vectorization + device/dtype neutrality guardrails you must re-confirm while gathering evidence.
How-To Map:
- Refresh selector inventory: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py::TestTricubicPoly --collect-only -q > reports/2025-10-vectorization/phase_d/collect.log` (append date stamp inside the file).
- CPU run: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py::TestTricubicPoly -v | tee reports/2025-10-vectorization/phase_d/pytest_cpu.log` (include start/end timestamps and elapsed time in the log header).
- CUDA run (if torch.cuda.is_available()): `CUDA_VISIBLE_DEVICES=0 KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py::TestTricubicPoly -v | tee reports/2025-10-vectorization/phase_d/pytest_cuda.log`.
- Acceptance check: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::TestStructureFactorInterpolation::test_tricubic_interpolation_enabled -v >> reports/2025-10-vectorization/phase_d/pytest_cpu.log`; replicate on CUDA if feasible or note unavailability in polynomial_validation.md.
- Update reports/2025-10-vectorization/phase_d/polynomial_validation.md with a new “Phase D4 execution” subsection summarising command strings, wall-clock timings, device/dtype, and any CUDA availability notes.
[2025-10-08T00:49:05] tokens used: 262,398
[2025-10-08T00:49:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:49:19] thinking

**Drafting detailed harness instructions**

I’m gathering all the necessary commands and environment setups for running the harness with phi carryover modes, ensuring outputs are captured properly and tests are run. I want to include guidance on patching the harness for new CLI flags, setting environment variables, and updating plans based on results, so everything is clear and actionable.
[2025-10-08T00:49:49] exec bash -lc "cat <<'EOF' > input.md
Summary: Capture Phase L3k.3c.4 parity evidence—per-φ traces and targeted pytest logs for spec vs c-parity modes—so CLI-FLAGS-003 can advance to nb-compare.
Mode: Parity
Focus: CLI-FLAGS-003 — Phase L3k.3c.4 parity shim evidence capture
Branch: feature/spec-based-2
Mapped tests: tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior; tests/test_cli_scaling_phi0.py::TestPhiZeroParity
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_spec.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_c_parity.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/c_trace_phi.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_spec.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_c_parity.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/delta_metrics.json
Do Now: CLI-FLAGS-003 Phase L3k.3c.4 – run the parity trace harness twice (spec + c-parity) via "'`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode <mode> --out reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_<mode>.log`, then collect a fresh C reference (`NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg ... -trace_pixel 685 1039`) and compare with `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py <py_json> <c_log> | tee reports/.../per_phi_summary_<mode>.txt`.
If Blocked: Capture the failing command + stderr to `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/attempt_fail.log`, note whether the harness needs refactoring (e.g., add `--phi-mode` plumbing), and log an Attempt under CLI-FLAGS-003 before pausing.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:306-314 marks L3k.3c.4 as [D] except for Phase C4 evidence; completing these traces unblocks Phase L3k.3c.5 docs/tests.
- plans/active/cli-phi-parity-shim/plan.md:47-55 requires per-φ comparisons for both modes plus Δk/Δb tolerances ≤1e-6.
- docs/fix_plan.md:450-470 now calls for parity shim evidence capture ahead of documentation updates.
- docs/bugs/verified_c_bugs.md:166-204 describes the C-PARITY-001 baseline the parity mode must reproduce.
- tests/test_cli_scaling_phi0.py:1-120 keeps spec-mode assertions locked; we must prove parity mode matches C without regressing spec.
How-To Map:
- Prep directory: `timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"`.
- Harness (add `--phi-mode` if missing by threading a new argparse choice into trace_harness.py that injects `phi_carryover_mode` into `params['"'crystal']"'`):
  - Spec run: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"`.
  - Parity run: same command with `--phi-mode c-parity` and output to `trace_py_c_parity.log`.
  - Each invocation should emit a per-φ JSON (e.g., trace_py_per_phi.json) and env/config snapshots; copy them into `$outdir`.
- C trace: `NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg -mat A.mat -floatfile c_phi.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -trace_pixel 685 1039 > "$outdir/c_trace_phi.log" 2>&1`.
- Per-φ comparisons: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_spec.txt"` and repeat for the parity JSON (`trace_py_c_parity_per_phi.json`). Record Δk/Δb_y, ensure parity mode ≤1e-6; include final metrics in `delta_metrics.json`.
- Tests: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v > "$outdir/pytest_phi_carryover.log"` and `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v > "$outdir/pytest_phi0.log"`.
- Update plan/fix_plan: mark `plans/active/cli-phi-parity-shim/plan.md` C4/C5 accordingly, append Attempt in docs/fix_plan.md with artifact paths, and refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the new parity numbers.
Pitfalls To Avoid:
- Keep spec mode untouched as default; do not flip defaults while adding harness options.
- Use `PYTHONPATH=src` so the harness exercises the editable install, not site-packages copies.
- Preserve tensor device/dtype neutrality—ensure harness indices and overrides stay on the chosen device.
- Capture SHA256 hashes for every generated file in `$outdir/sha256.txt` (use `shasum -a 256`); parity review depends on reproducibility.
- Do not overwrite historic traces; use the new timestamped folder every run.
- Respect Protected Assets (docs/index.md) when editing harness or logging outputs.
- If CUDA is available, note whether traces/tests were CPU-only and document rationale (parity gating is CPU baseline, but mention GPU status).
- Avoid running nb-compare yet; stay scoped to per-φ validation until VG-1 thresholds confirmed.
- Ensure C trace build uses the instrumented binary (`NB_C_BIN=./golden_suite_generator/nanoBragg`); do not rebuild the frozen root binary.
Pointers:
- plans/active/cli-phi-parity-shim/plan.md:47-55 — Phase C4 expectations and tolerance thresholds.
- plans/active/cli-noise-pix0/plan.md:300-315 — L3k.3c subphase checklist and evidence routing.
- docs/fix_plan.md:450-470 — Updated Next Actions emphasizing parity evidence capture.
- specs/spec-a-core.md:211-214 — Spec φ rotation rule (identity at φ=0).
- docs/bugs/verified_c_bugs.md:166-204 — C-PARITY-001 reference values for φ=0 carryover.
- tests/test_phi_carryover_mode.py:1-200 — Existing parity-mode tests you must keep green.
Next Up: (1) Phase L3k.3c.5 doc updates once traces are archived; (2) Prepare nb-compare rerun (Phase L3k.3d) with `--py-args "--phi-carryover-mode c-parity"` after VG-1 passes.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:49:50] bash -lc "cat <<'EOF' > input.md
Summary: Capture Phase L3k.3c.4 parity evidence—per-φ traces and targeted pytest logs for spec vs c-parity modes—so CLI-FLAGS-003 can advance to nb-compare.
Mode: Parity
Focus: CLI-FLAGS-003 — Phase L3k.3c.4 parity shim evidence capture
Branch: feature/spec-based-2
Mapped tests: tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior; tests/test_cli_scaling_phi0.py::TestPhiZeroParity
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_spec.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_c_parity.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/c_trace_phi.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_spec.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_c_parity.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/delta_metrics.json
Do Now: CLI-FLAGS-003 Phase L3k.3c.4 – run the parity trace harness twice (spec + c-parity) via "'`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode <mode> --out reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_<mode>.log`, then collect a fresh C reference (`NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg ... -trace_pixel 685 1039`) and compare with `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py <py_json> <c_log> | tee reports/.../per_phi_summary_<mode>.txt`.
If Blocked: Capture the failing command + stderr to `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/attempt_fail.log`, note whether the harness needs refactoring (e.g., add `--phi-mode` plumbing), and log an Attempt under CLI-FLAGS-003 before pausing.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:306-314 marks L3k.3c.4 as [D] except for Phase C4 evidence; completing these traces unblocks Phase L3k.3c.5 docs/tests.
- plans/active/cli-phi-parity-shim/plan.md:47-55 requires per-φ comparisons for both modes plus Δk/Δb tolerances ≤1e-6.
- docs/fix_plan.md:450-470 now calls for parity shim evidence capture ahead of documentation updates.
- docs/bugs/verified_c_bugs.md:166-204 describes the C-PARITY-001 baseline the parity mode must reproduce.
- tests/test_cli_scaling_phi0.py:1-120 keeps spec-mode assertions locked; we must prove parity mode matches C without regressing spec.
How-To Map:
- Prep directory: `timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"`.
- Harness (add `--phi-mode` if missing by threading a new argparse choice into trace_harness.py that injects `phi_carryover_mode` into `params['"'crystal']"'`):
  - Spec run: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"`.
  - Parity run: same command with `--phi-mode c-parity` and output to `trace_py_c_parity.log`.
  - Each invocation should emit a per-φ JSON (e.g., trace_py_per_phi.json) and env/config snapshots; copy them into `$outdir`.
- C trace: `NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg -mat A.mat -floatfile c_phi.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -trace_pixel 685 1039 > "$outdir/c_trace_phi.log" 2>&1`.
- Per-φ comparisons: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_spec.txt"` and repeat for the parity JSON (`trace_py_c_parity_per_phi.json`). Record Δk/Δb_y, ensure parity mode ≤1e-6; include final metrics in `delta_metrics.json`.
- Tests: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v > "$outdir/pytest_phi_carryover.log"` and `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v > "$outdir/pytest_phi0.log"`.
- Update plan/fix_plan: mark `plans/active/cli-phi-parity-shim/plan.md` C4/C5 accordingly, append Attempt in docs/fix_plan.md with artifact paths, and refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the new parity numbers.
Pitfalls To Avoid:
- Keep spec mode untouched as default; do not flip defaults while adding harness options.
- Use `PYTHONPATH=src` so the harness exercises the editable install, not site-packages copies.
- Preserve tensor device/dtype neutrality—ensure harness indices and overrides stay on the chosen device.
- Capture SHA256 hashes for every generated file in `$outdir/sha256.txt` (use `shasum -a 256`); parity review depends on reproducibility.
- Do not overwrite historic traces; use the new timestamped folder every run.
- Respect Protected Assets (docs/index.md) when editing harness or logging outputs.
- If CUDA is available, note whether traces/tests were CPU-only and document rationale (parity gating is CPU baseline, but mention GPU status).
- Avoid running nb-compare yet; stay scoped to per-φ validation until VG-1 thresholds confirmed.
- Ensure C trace build uses the instrumented binary (`NB_C_BIN=./golden_suite_generator/nanoBragg`); do not rebuild the frozen root binary.
Pointers:
- plans/active/cli-phi-parity-shim/plan.md:47-55 — Phase C4 expectations and tolerance thresholds.
- plans/active/cli-noise-pix0/plan.md:300-315 — L3k.3c subphase checklist and evidence routing.
- docs/fix_plan.md:450-470 — Updated Next Actions emphasizing parity evidence capture.
- specs/spec-a-core.md:211-214 — Spec φ rotation rule (identity at φ=0).
- docs/bugs/verified_c_bugs.md:166-204 — C-PARITY-001 reference values for φ=0 carryover.
- tests/test_phi_carryover_mode.py:1-200 — Existing parity-mode tests you must keep green.
Next Up: (1) Phase L3k.3c.5 doc updates once traces are archived; (2) Prepare nb-compare rerun (Phase L3k.3d) with `--py-args "--phi-carryover-mode c-parity"` after VG-1 passes.
EOF
' succeeded in 851ms:

[2025-10-08T00:49:50] tokens used: 266,658
[2025-10-08T00:49:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:49:59] thinking

**Verifying updates before documenting**
[2025-10-08T00:50:03] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:04] bash -lc 'git status --short' succeeded in 922ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
 M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T00:50:04] tokens used: 269,467
[2025-10-08T00:50:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:08] thinking

**Updating galph_memory.md with progress notes**

I'll add a new dated section to galph_memory.md, summarizing completion of parity shim implementation and updates to the plan and fix_plan with next steps focused on evidence capture, following the existing date and formatting style.
[2025-10-08T00:50:12] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-30 (galph loop — parity evidence focus)
- Reviewed CLI-FLAGS-003 progress: parity shim code/tests already landed (docs/fix_plan.md Attempt #120) but plan rows still open.
- Updated "'`plans/active/cli-phi-parity-shim/plan.md` C1–C3 to [D] with artifact references; marked `plans/active/cli-noise-pix0/plan.md` L3k.3c.4 as [D] and refreshed Next Actions to target Phase C4 evidence capture.
- Revised `docs/fix_plan.md` Next Actions so L3k.3c.4 emphasises per-φ trace collection + targeted pytest logs before documentation work.
- Issued new `input.md` (Parity mode) directing Ralph to extend the trace harness with a `--phi-mode` toggle, record spec vs c-parity per-φ traces, rerun tests, and log artifacts under `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/`.
- Expect Ralph to produce VG-1 parity evidence, update parity plan rows C4/C5, and then proceed toward Phase L3k.3d nb-compare once traces pass tolerances.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:12] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-30 (galph loop — parity evidence focus)
- Reviewed CLI-FLAGS-003 progress: parity shim code/tests already landed (docs/fix_plan.md Attempt #120) but plan rows still open.
- Updated "'`plans/active/cli-phi-parity-shim/plan.md` C1–C3 to [D] with artifact references; marked `plans/active/cli-noise-pix0/plan.md` L3k.3c.4 as [D] and refreshed Next Actions to target Phase C4 evidence capture.
- Revised `docs/fix_plan.md` Next Actions so L3k.3c.4 emphasises per-φ trace collection + targeted pytest logs before documentation work.
- Issued new `input.md` (Parity mode) directing Ralph to extend the trace harness with a `--phi-mode` toggle, record spec vs c-parity per-φ traces, rerun tests, and log artifacts under `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/`.
- Expect Ralph to produce VG-1 parity evidence, update parity plan rows C4/C5, and then proceed toward Phase L3k.3d nb-compare once traces pass tolerances.
EOF
' succeeded in 705ms:

[2025-10-08T00:50:12] tokens used: 270,183
[2025-10-08T00:50:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:16] thinking

**Staging and preparing commit**
[2025-10-08T00:50:16] exec bash -lc 'git add -A' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:17] bash -lc 'git add -A' succeeded in 824ms:

[2025-10-08T00:50:17] tokens used: 270,605
[2025-10-08T00:50:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:22] thinking

**Preparing commit message**
[2025-10-08T00:50:22] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 parity evidence planning - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:23] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 parity evidence planning - tests: not run"' succeeded in 792ms:
[feature/spec-based-2 a0ebb8c] SUPERVISOR: CLI-FLAGS-003 parity evidence planning - tests: not run
 5 files changed, 51 insertions(+), 43 deletions(-)
[2025-10-08T00:50:23] tokens used: 271,218
[2025-10-08T00:50:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:26] thinking

**Pushing changes to remote**
[2025-10-08T00:50:26] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:28] bash -lc 'git push' succeeded in 2.24s:
To github.com:hoidn/nanoBragg.git
   bf17bf3..a0ebb8c  feature/spec-based-2 -> feature/spec-based-2
[2025-10-08T00:50:28] tokens used: 271,955
[2025-10-08T00:50:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:34] thinking

**Preparing final response**
[2025-10-08T00:50:35] exec bash -lc "nl -ba plans/active/cli-phi-parity-shim/plan.md | sed -n '40,80p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:35] bash -lc "nl -ba plans/active/cli-phi-parity-shim/plan.md | sed -n '40,80p'" succeeded in 728ms:
    40	Exit Criteria: Production code contains opt-in shim, tests/logs stored, fix_plan Attempt logged with metrics.
    41	
    42	| ID | Task Description | State | How/Why & Guidance |
    43	| --- | --- | --- | --- |
    44	| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
    45	| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
    46	| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
    47	| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
    48	| C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
    49	
    50	### Phase D — Documentation & Handoff
    51	Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
    52	Prereqs: Phase C complete, evidence uploaded.
    53	Exit Criteria: Docs refreshed, plan cross-references updated, Next Actions ready for nb-compare rerun.
    54	
    55	| ID | Task Description | State | How/Why & Guidance |
    56	| --- | --- | --- | --- |
    57	| D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
    58	| D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
    59	| D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
[2025-10-08T00:50:35] tokens used: 272,381
[2025-10-08T00:50:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:38] thinking

**Navigating to specific plan file**
[2025-10-08T00:50:39] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,330p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:39] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,330p'" succeeded in 706ms:
   300	| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
   301	| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
   302	
   303	#### L3k.3c Tasks — Restore φ=0 Parity with C Reference
   304	
   305	| ID | Task Description | State | How/Why & Guidance |
   306	| --- | --- | --- | --- |
   307	| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
   308	| L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
   309	| L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
   310	| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
   311	| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
   312	| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
   313	
   314	### Phase L4 — Supervisor Command Parity Rerun
   315	Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
   316	Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
   317	Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
   318	
   319	| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T00:50:39] tokens used: 273,450
[2025-10-08T00:50:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:42] thinking

**Noting docs/fix_plan.md changes**
[2025-10-08T00:50:43] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '450,480p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:44] bash -lc "nl -ba docs/fix_plan.md | sed -n '450,480p'" succeeded in 703ms:
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
   460	- Next Actions (2025-11-27 refresh → galph loop i=118):
   461	1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
   462	2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
   463	3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
   464	- Attempts History:
   465	  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
   466	    Metrics: Planning-only (no tests executed).
   467	    Artifacts:
   468	      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
   469	      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-08T00:50:44] tokens used: 275,145
[2025-10-08T00:50:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:47] thinking

**Considering file modification mentions**
[2025-10-08T00:50:47] exec bash -lc 'tail -n 40 galph_memory.md | nl -ba' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:48] bash -lc 'tail -n 40 galph_memory.md | nl -ba' succeeded in 751ms:
     1	
     2	## 2025-11-28 (galph loop — parity shim planning)
     3	- Added dedicated plan `plans/active/cli-phi-parity-shim/plan.md` with Phases A–D covering design, implementation, and documentation for the φ=0 carryover shim; Phase B now gates API selection and validation strategy.
     4	- Updated `plans/active/cli-noise-pix0/plan.md:L3k.3c.4-5` to point at the new plan and clarified evidence expectations (reports/2025-10-cli-flags/phase_l/parity_shim/...).
     5	- Refreshed `docs/fix_plan.md:450-463` Next Actions to align with the new plan (execute Phases B–D before resuming nb-compare work).
     6	- Issued `input.md` (Docs mode) directing Ralph to author the design note, choose the opt-in trigger, and run the collect-only selector before coding. Command: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q`.
     7	- Commit `7ef88d2` pushed on `feature/spec-based-2`; no tests run in supervisor loop.
     8	
     9	
    10	## 2025-11-28 (galph loop — CLI parity shim push)
    11	- Re-synced (no upstream changes) and reviewed CLI-FLAGS-003 + parity-shim plan; spec remains φ=0 carryover-free (specs/spec-a-core.md:211-214) while C bug stays quarantined in docs/bugs/verified_c_bugs.md:166-182.
    12	- Selected focus = CLI-FLAGS-003 Phase L3k.3c.4; no new plan needed. Input memo now steers Ralph to implement the opt-in φ carryover shim (Plan Phase C1–C5) with per-φ trace evidence and dual-mode tests.
    13	- No fix_plan or plan edits required this turn; parity shim plan already authoritative. Next supervisor check: confirm reports/2025-10-cli-flags/phase_l/parity_shim/... artifacts exist, docs/fix_plan attempt logged, and tests cover both spec/parity modes before advancing to L3k.3c.5.
    14	
    15	## 2025-11-28 (galph loop — vectorization plan sync)
    16	- Reviewed spec/core docs for tricubic interpolation (specs/spec-a-core.md:230, 595) and confirmed φ carryover bug remains quarantined in docs/bugs/verified_c_bugs.md.
    17	- Marked Phase D1 as complete in `plans/active/vectorization.md` (Attempt #8 worksheet) and refreshed status snapshot to reference `reports/2025-10-vectorization/phase_d/polynomial_validation.md`.
    18	- Updated `docs/fix_plan.md` VECTOR-TRICUBIC-001 Next Actions to drop the stale D1 todo and point Ralph toward D2–D4 with the new evidence requirements.
    19	- Issued Perf-mode `input.md` directing Ralph to author failing `TestTricubicPoly` coverage (Phase D3) before implementing vectorized helpers.
    20	- Follow-up: Expect next loop to land D2 vectorized polynomials, record CPU/CUDA pytest logs under phase_d/, and log a new Attempt once tests go green.
[2025-10-08T00:50:48] tokens used: 276,726
[2025-10-08T00:50:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:52] thinking

**Preparing final update summary**
[2025-10-08T00:50:52] exec bash -lc "nl -ba input.md | sed -n '1,120p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T00:50:53] bash -lc "nl -ba input.md | sed -n '1,120p'" succeeded in 686ms:
     1	Summary: Capture Phase L3k.3c.4 parity evidence—per-φ traces and targeted pytest logs for spec vs c-parity modes—so CLI-FLAGS-003 can advance to nb-compare.
     2	Mode: Parity
     3	Focus: CLI-FLAGS-003 — Phase L3k.3c.4 parity shim evidence capture
     4	Branch: feature/spec-based-2
     5	Mapped tests: tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior; tests/test_cli_scaling_phi0.py::TestPhiZeroParity
     6	Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_spec.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_c_parity.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/c_trace_phi.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_spec.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_c_parity.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/delta_metrics.json
     7	Do Now: CLI-FLAGS-003 Phase L3k.3c.4 – run the parity trace harness twice (spec + c-parity) via `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode <mode> --out reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_<mode>.log`, then collect a fresh C reference (`NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg ... -trace_pixel 685 1039`) and compare with `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py <py_json> <c_log> | tee reports/.../per_phi_summary_<mode>.txt`.
     8	If Blocked: Capture the failing command + stderr to `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/attempt_fail.log`, note whether the harness needs refactoring (e.g., add `--phi-mode` plumbing), and log an Attempt under CLI-FLAGS-003 before pausing.
     9	Priorities & Rationale:
    10	- plans/active/cli-noise-pix0/plan.md:306-314 marks L3k.3c.4 as [D] except for Phase C4 evidence; completing these traces unblocks Phase L3k.3c.5 docs/tests.
    11	- plans/active/cli-phi-parity-shim/plan.md:47-55 requires per-φ comparisons for both modes plus Δk/Δb tolerances ≤1e-6.
    12	- docs/fix_plan.md:450-470 now calls for parity shim evidence capture ahead of documentation updates.
    13	- docs/bugs/verified_c_bugs.md:166-204 describes the C-PARITY-001 baseline the parity mode must reproduce.
    14	- tests/test_cli_scaling_phi0.py:1-120 keeps spec-mode assertions locked; we must prove parity mode matches C without regressing spec.
    15	How-To Map:
    16	- Prep directory: `timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"`.
    17	- Harness (add `--phi-mode` if missing by threading a new argparse choice into trace_harness.py that injects `phi_carryover_mode` into `params['crystal']`):
    18	  - Spec run: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"`.
    19	  - Parity run: same command with `--phi-mode c-parity` and output to `trace_py_c_parity.log`.
    20	  - Each invocation should emit a per-φ JSON (e.g., trace_py_per_phi.json) and env/config snapshots; copy them into `$outdir`.
[2025-10-08T00:50:53] tokens used: 279,516
[2025-10-08T00:50:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-


[2025-10-08T00:50:59] thinking

**Summarizing key modifications for final message**

I’m organizing the final message around a “Parity Focus” header, listing important changes with line references: plan updates in two plans files, fix_plan next actions, new input instructions, and memory updates tied to Ralph’s parity evidence task. I’ll also note that no tests were run and wrap up with suggested next steps to guide what comes after. This layout should clearly convey the progress and what remains.
[2025-10-08T00:51:00] codex

**Parity Focus**  
- Marked parity-shim implementation rows complete and left C4/C5 open in `plans/active/cli-phi-parity-shim/plan.md:44-48`, so the plan now signals only the evidence work remains.  
- Synced `plans/active/cli-noise-pix0/plan.md:303-311` to show L3k.3c.4 is done, with L3k.3c.5 targeting doc/checklist updates after fresh traces.  
- Reframed `docs/fix_plan.md:450-463` Next Actions around capturing spec vs c-parity per-φ traces plus targeted pytest logs before moving to documentation or nb-compare.  
- Replaced the supervisor memo (`input.md:1-42`) with Parity-mode guidance directing Ralph to extend the harness with a `--phi-mode` toggle, gather both trace sets, compare via `scripts/compare_per_phi_traces.py`, and log artifacts/tests under a new timestamp.  
- Logged the supervision decisions in `galph_memory.md:35-40` so the next loop knows C1–C3 are settled and evidence capture is the new gate.  

No tests were run in this supervisor turn. Next up: Ralph should execute the harness updates, archive the dual-mode traces/tests, update plan/fix_plan rows (C4/C5), then proceed toward the L3k.3d nb-compare rerun once VG-1 tolerances are met.
[2025-10-08T00:51:03] tokens used: 283,031
[2025-10-08T00:51:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 56ab89135472743a74e4b460d18fcb40453f7fdb..8ab1e9b332ed3ce35bb1037aab1aa574a250dd40
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,8 +458,8 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
-2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 0d666b54ec3a17de706f6e3e2760424e56d438f2..d26eab8e87dcbae789e794a335102ebca12ab1af
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index bdeb24a47c9b41956bd848f06a39b09767cf22af..90d71c96dd0a8911252875dfa7bea2453289b8d3
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -41,9 +41,9 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
-| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
-| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
+| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
+| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
+| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
 | C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
@@ -57,4 +57,3 @@
 | D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
 | D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
 | D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
-

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   a0ebb8c..9e4a811  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=124...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=124
Updating 9e4a811..84b2634
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   9e4a811..84b2634  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=124
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 84b2634..979813b
Fast-forward
 docs/fix_plan.md                                   |  25 ++
 .../parity_shim/20251008T005247Z/c_trace_phi.log   | 342 +++++++++++++++++++++
 .../20251008T005247Z/comparison_summary.md         |  30 ++
 .../20251008T005247Z/delta_metrics.json            |  24 ++
 .../20251008T005247Z/per_phi_summary_c_parity.txt  |  30 ++
 .../20251008T005247Z/per_phi_summary_spec.txt      |  44 +++
 .../parity_shim/20251008T005247Z/pytest_phi0.log   |  11 +
 .../parity_shim/20251008T005247Z/sha256.txt        |  10 +
 .../20251008T005247Z/trace_py_c_parity.log         |  43 +++
 .../trace_py_c_parity_per_phi.json                 |  82 +++++
 .../parity_shim/20251008T005247Z/trace_py_spec.log |  43 +++
 .../20251008T005247Z/trace_py_spec_per_phi.json    |  82 +++++
 .../trace_py_c_parity_per_phi.json                 |  82 +++++
 .../20251008T005247Z/trace_py_c_parity_per_phi.log |  10 +
 .../20251008T005247Z/trace_py_spec_per_phi.json    |  82 +++++
 .../20251008T005247Z/trace_py_spec_per_phi.log     |  10 +
 .../phase_l/rot_vector/trace_harness.py            |   5 +
 .../phase_l/rot_vector/trace_py_env.json           |   4 +-
 18 files changed, 957 insertions(+), 2 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/c_trace_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/delta_metrics.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/per_phi_summary_c_parity.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/per_phi_summary_spec.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/pytest_phi0.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/sha256.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_c_parity.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_c_parity_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_spec.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_spec_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_c_parity_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_c_parity_per_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_spec_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_spec_per_phi.log
From github.com:hoidn/nanoBragg
   84b2634..979813b  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 979813b..6c2a591
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   979813b..6c2a591  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=125
Ralph completed iteration 124; proceeding to 125
