Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=23
To github.com:hoidn/nanoBragg.git
   65fb387..15fdec5  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T06:18:05] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T06:18:05] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
Phase Gate (Evidence): If the active plan phase is Evidence, Do Now SHALL be evidence‑only: run the authoritative reference reproduction commands and capture the required artifacts; at most run the project’s test discovery (no execution). Do not include runnable tests.

Validation Preflight (tests): Before listing any test file/identifier in Do Now, validate that it resolves via the project’s documented test discovery; if validation fails, omit tests and note “(none — evidence‑only this loop)” and add a TODO in docs/fix_plan.md documenting the missing mapping.

Human Summary (input.md header): Prepend a short summary block with the following lines (validated where applicable):
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>

Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it relate to? 
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? if not, fix. things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, this should be addressed. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
- Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
- Header: timestamp, current commit hash (short), author “galph”, and Active Focus summary.
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it. If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T06:18:09] thinking

**Preparing to update repository**
[2025-10-06T06:18:10] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:12] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.15s:
Already up to date.
[2025-10-06T06:18:12] tokens used: 12,798

[2025-10-06T06:18:14] thinking

**Preparing to read galph_memory.md**
[2025-10-06T06:18:14] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:15] bash -lc 'cat galph_memory.md' succeeded in 712ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T06:18:15] tokens used: 12,930

[2025-10-06T06:18:21] thinking

**Reviewing key documentation files**
[2025-10-06T06:18:21] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:22] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 688ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T06:18:22] tokens used: 15,852

[2025-10-06T06:18:24] thinking

**Opening additional specification documents**
[2025-10-06T06:18:24] exec bash -lc "sed -n '1,160p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:25] bash -lc "sed -n '1,160p' specs/spec-a.md" succeeded in 676ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T06:18:25] tokens used: 17,598

[2025-10-06T06:18:26] thinking

**Requesting architecture documentation**
[2025-10-06T06:18:26] exec bash -lc "sed -n '1,160p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:27] bash -lc "sed -n '1,160p' arch.md" succeeded in 692ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T06:18:27] tokens used: 17,915

[2025-10-06T06:18:29] thinking

**Reviewing config mapping doc**
[2025-10-06T06:18:29] exec bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:30] bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" succeeded in 683ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T06:18:30] tokens used: 20,714

[2025-10-06T06:18:31] thinking

**Opening debugging documentation**
[2025-10-06T06:18:31] exec bash -lc "sed -n '1,160p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:32] bash -lc "sed -n '1,160p' docs/debugging/debugging.md" succeeded in 710ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T06:18:32] tokens used: 22,650

[2025-10-06T06:18:33] thinking

**Checking for testing strategy document**
[2025-10-06T06:18:34] exec bash -lc "sed -n '1,160p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:35] bash -lc "sed -n '1,160p' docs/development/testing_strategy.md" succeeded in 678ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T06:18:35] tokens used: 24,673

[2025-10-06T06:18:36] thinking

**Checking for existing plans**
[2025-10-06T06:18:37] exec bash -lc "sed -n '1,160p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:37] bash -lc "sed -n '1,160p' docs/fix_plan.md" succeeded in 701ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T06:18:37] tokens used: 27,878

[2025-10-06T06:18:39] thinking

**Searching for CLI-FLAGS-003 section**
[2025-10-06T06:18:40] exec bash -lc 'rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:40] bash -lc 'rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 717ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T06:18:40] tokens used: 30,853

[2025-10-06T06:18:44] thinking

**Navigating to section 448**
[2025-10-06T06:18:44] exec bash -lc "sed -n '448,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:45] bash -lc "sed -n '448,620p' docs/fix_plan.md" succeeded in 711ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
- Attempts History:
  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
    Metrics: C reference behavior captured for both flags via parallel command execution.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
    Observations/Hypotheses:
[2025-10-06T06:18:45] tokens used: 32,098

[2025-10-06T06:18:57] thinking

**Opening relevant plan file**
[2025-10-06T06:18:58] exec bash -lc "sed -n '1,160p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:18:59] bash -lc "sed -n '1,160p' plans/active/cli-noise-pix0/plan.md" succeeded in 950ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |

### Phase B — CLI & Config Wiring
Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
[2025-10-06T06:18:59] tokens used: 35,073

[2025-10-06T06:19:06] thinking

**Listing plan directories**
[2025-10-06T06:19:06] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:07] bash -lc 'ls plans/active' succeeded in 717ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T06:19:07] tokens used: 36,687

[2025-10-06T06:19:08] thinking

**Opening vectorization plan**
[2025-10-06T06:19:09] exec bash -lc "sed -n '1,160p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:09] bash -lc "sed -n '1,160p' plans/active/vectorization.md" succeeded in 669ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T06:19:09] tokens used: 36,932

[2025-10-06T06:19:14] thinking

**Preparing for codebase analysis**
[2025-10-06T06:19:15] exec bash -lc 'git branch --show-current' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:15] bash -lc 'git branch --show-current' succeeded in 688ms:
feature/spec-based-2
[2025-10-06T06:19:15] tokens used: 39,627

[2025-10-06T06:19:23] thinking

**Analyzing current CLI plan and long-term goals**

I'm gathering details on the CLI plan status and open tasks, especially around lattice issues and vectorization phases. I'll review recent plans and docs to identify gaps and make sure the roadmap aligns with long-term goals before proceeding.
[2025-10-06T06:19:24] exec bash -lc 'rg -n "VECTOR-TRICUBIC-001" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:25] bash -lc 'rg -n "VECTOR-TRICUBIC-001" docs/fix_plan.md' succeeded in 721ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
911:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-06T06:19:25] tokens used: 40,145

[2025-10-06T06:19:26] thinking

**Checking section content**
[2025-10-06T06:19:27] exec bash -lc "sed -n '911,1080p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:27] bash -lc "sed -n '911,1080p' docs/fix_plan.md" succeeded in 689ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_planning (Phase A evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions:
  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
  2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
  3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * (pending) — Capture Phase A baseline artifacts and update this log.
- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.
- Exit Criteria (quote thresholds from spec):
  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).
[2025-10-06T06:19:27] tokens used: 40,446

[2025-10-06T06:19:30] thinking

**Reviewing long-term CLI plan progress**
[2025-10-06T06:19:31] exec bash -lc 'rg -n "Phase H" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:31] bash -lc 'rg -n "Phase H" plans/active/cli-noise-pix0/plan.md' succeeded in 666ms:
5:- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
89:| G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
91:### Phase H — Lattice Structure Factor Alignment
99:| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
[2025-10-06T06:19:31] tokens used: 42,792

[2025-10-06T06:19:33] thinking

**Locating Phase H section**
[2025-10-06T06:19:34] exec bash -lc "sed -n '90,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:35] bash -lc "sed -n '90,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 688ms:

### Phase H — Lattice Structure Factor Alignment
Goal: Ensure the CLI-provided beam vector propagates through Detector→Simulator and bring scattering/lattice parity back in line before polarization work.
Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |

### Phase I — Polarization Alignment (follow-up)
Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
Prereqs: Phases F–H complete; traces show `F_latt` parity.
Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
[2025-10-06T06:19:35] tokens used: 43,371

[2025-10-06T06:19:37] thinking

**Organizing pending tasks**
[2025-10-06T06:19:37] exec bash -lc "python - <<'PY'
import random
result = random.choice(['heads','tails'])
print(result)
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:38] bash -lc "python - <<'PY'
import random
result = random.choice(['heads','tails'])
print(result)
PY" succeeded in 734ms:
heads
[2025-10-06T06:19:38] tokens used: 44,831

[2025-10-06T06:19:40] thinking

**Inspecting recent commits**
[2025-10-06T06:19:41] exec bash -lc 'git log --oneline -10' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:41] bash -lc 'git log --oneline -10' succeeded in 699ms:
15fdec5 [SYNC i=23] actor=galph status=running
65fb387 [SYNC i=23] actor=ralph → next=galph status=ok ralph_commit=ce28187
ce28187 [CLI-FLAGS-003] Phase H3 evidence: incident beam parity achieved, lattice factor divergence isolated
e4de39e [SYNC i=22] actor=ralph status=running
e234cba [SYNC i=22] actor=galph → next=ralph status=ok galph_commit=a39f56c
a39f56c SUPERVISOR: Phase H3 evidence prep - tests: not run
ba649f0 docs(index): add reference to scripts/validation for reproducible validation tooling
f0e0d4c [SYNC i=22] actor=galph status=running
ab2735d ORCHESTRATION: document --prepull-auto-commit-docs in README - tests: not run
55878e4 ORCHESTRATION(supervisor): add --prepull-auto-commit-docs (default on) with whitelist+size cap; reuse auto-commit helper - tests: not run
[2025-10-06T06:19:41] tokens used: 45,036

[2025-10-06T06:19:43] thinking

**Inspecting commit ce28187**
[2025-10-06T06:19:44] exec bash -lc 'git show --stat ce28187' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:44] bash -lc 'git show --stat ce28187' succeeded in 732ms:
commit ce28187bf6efee9e232246e7aaed214509d190ff
Author: ollie <ohoidn>
Date:   Sun Oct 5 23:17:05 2025 -0700

    [CLI-FLAGS-003] Phase H3 evidence: incident beam parity achieved, lattice factor divergence isolated
    
    Evidence gathering after H2 beam vector fix (commit 8c1583d):
    - Incident beam vector: perfect match (0.00051387949 0 -0.99999986)
    - Miller indices: diverge by 0.097/0.024/0.120 (exceeds 1e-3 threshold)
    - F_latt components: critical divergence (Py [-3.29,10.74,-1.78] vs C [35.89,38.63,25.70])
    - F_latt product: 568× difference (62.68 vs 35636)
    
    Primary suspect: sincg() argument order in get_structure_factor()
    Secondary suspect: Missing Na/Nb/Nc scaling after sincg
    
    Artifacts:
    - reports/2025-10-cli-flags/phase_h/trace_py_after_H2.log (PyTorch trace)
    - reports/2025-10-cli-flags/phase_h/trace_comparison_after_H2.md (analysis)
    - reports/2025-10-cli-flags/phase_h/implementation_notes.md (hypotheses)
    - reports/2025-10-cli-flags/phase_h/trace_diff_after_H2.log (diff)
[2025-10-06T06:19:44] tokens used: 45,448

[2025-10-06T06:19:49] thinking

**Reviewing commit history for iterations**
[2025-10-06T06:19:49] exec bash -lc 'git log --oneline --author=ralph -n 10' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:50] bash -lc 'git log --oneline --author=ralph -n 10' succeeded in 803ms:

[2025-10-06T06:19:50] tokens used: 46,217

[2025-10-06T06:19:57] thinking

**Analyzing commit authorship and planning updates**
[2025-10-06T06:19:57] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_h/implementation_notes.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:19:58] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_h/implementation_notes.md" succeeded in 660ms:
# Phase H3 Implementation Notes

**Date:** 2025-10-05
**Focus:** Lattice factor mismatch diagnosis

## Validated Components ✅

1. **Incident Beam Vector:** Perfect match after H2 fix (commit 8c1583d)
2. **Reciprocal Vectors:** rot_a_star, rot_b_star, rot_c_star identical to C (Phase G3)
3. **Orientation Matrix:** MOSFLM A* ingestion correct (Phase G2)

## Outstanding Issues 🔴

### Issue 1: F_latt Component Sign and Magnitude
- C produces positive values ~25-40
- PyTorch produces mix of signs, magnitude ~2-10
- Product differs by 568× (35636 vs 62.7)

### Issue 2: Miller Indices Fractional Precision
- h: Δ≈0.097 (exceeds 1e-3 threshold)
[2025-10-06T06:19:58] tokens used: 46,735

[2025-10-06T06:20:04] thinking

**Evaluating plan needs and updates**

I'm reviewing whether existing plans for long-term goals need updates or refinements to better reflect new hypotheses and instructions. I'll verify implementation details by checking the existence of referenced scripts to ensure the plans are realistic and actionable. Let's explore the `scripts/benchmarks` directory next.
[2025-10-06T06:20:05] exec bash -lc 'ls scripts/benchmarks' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:06] bash -lc 'ls scripts/benchmarks' succeeded in 658ms:
benchmark_detailed.py
compare_dtype_performance.py
investigate_compile_cache.py
profile_cuda_kernels.py
test_cache.py
test_kernel_cache.py
[2025-10-06T06:20:06] tokens used: 48,228

[2025-10-06T06:20:12] thinking

**Evaluating plan updates and script creation**

I’m thinking about the plan’s gaps, especially the missing `sample_tricubic_baseline.py` script and how to explicitly build that into Phase A’s tasks. There’s a need to firm up the plan with clear instructions around this baseline script and incorporate new hypotheses like verifying `sincg` argument order and Na scaling into cli-noise-pix0. I also want to verify that the fix_plan docs correctly reference all attempt logs, including attempt #21. I’ll check those entries to ensure everything aligns.
[2025-10-06T06:20:14] exec bash -lc 'rg "Attempt #21" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:14] bash -lc 'rg "Attempt #21" -n docs/fix_plan.md' succeeded in 689ms:
203:  * [2025-10-01] Attempt #21 — Result: success (Phase B complete). Executed remaining Phase B tasks: marked B3 skipped (would require gprof recompilation; deemed optional), completed B5 eager-mode profiling at 1024². Results: PyTorch eager warm 0.082s vs C 0.052s (1.64× slower), profiler trace captured.
212:  * [2025-09-30] Attempt #21 — Result: P3.0c COMPLETE. Validated weighted multi-source normalization on CPU and CUDA with 2 sources (weights 2.0 & 3.0, λ 6.2Å & 8.0Å). PyTorch correctly implements `steps / n_sources` normalization per AT-SRC-001. Discovered C code ignores `source_I` weights during accumulation (line 2616 overwrites weight with `I_bg`), making C↔Py weighted parity impossible. CPU/CUDA self-consistency verified (rel diff <2e-6).
217:  * [2025-10-10] Attempt #22 (supervisor loop BD) — Result: invalidates Attempt #21. `scripts/validate_weighted_source_normalization.py` mutates `simulator.source_directions/weights/wavelengths`, but the simulator only uses `_source_*` tensors populated from `BeamConfig` during `__init__`. The run therefore fell back to the single-source branch, so the recorded CPU/CUDA totals do not exercise unequal weights. Weighted-source parity evidence remains outstanding.
245:    Observations/Hypotheses: The old Attempt #21 validation was invalid because it set `simulator.source_*` attributes post-construction; these are never read—only `_source_*` caches populated from `BeamConfig` during `__init__` are used. Corrected approach passes sources through BeamConfig before construction, ensuring `_source_directions/_source_wavelengths/_source_weights` are properly cached. CPU/CUDA self-consistency now proven with unequal weights exercised. Phase 3 decision memo can be finalized.
780:  * [2025-10-05] Attempt #21 (ralph loop i=22) — Result: evidence-only (Phase H3 trace captured). **Incident beam vector parity achieved; lattice factor divergence isolated.**
[2025-10-06T06:20:14] tokens used: 48,788

[2025-10-06T06:20:20] thinking

**Evaluating plan update and code verification**
[2025-10-06T06:20:20] exec bash -lc 'rg -n "get_structure_factor" src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:21] bash -lc 'rg -n "get_structure_factor" src/nanobrag_torch/models/crystal.py' succeeded in 695ms:
184:    def get_structure_factor(
[2025-10-06T06:20:21] tokens used: 50,536

[2025-10-06T06:20:22] thinking

**Checking necessary section**
[2025-10-06T06:20:23] exec bash -lc "sed -n '184,360p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:23] bash -lc "sed -n '184,360p' src/nanobrag_torch/models/crystal.py" succeeded in 697ms:
    def get_structure_factor(
        self, h: torch.Tensor, k: torch.Tensor, l: torch.Tensor  # noqa: E741
    ) -> torch.Tensor:
        """
        Look up or interpolate the structure factor for given h,k,l indices.

        Implements AT-STR-001 (nearest-neighbor lookup) and AT-STR-002 (tricubic interpolation).

        This method handles both nearest-neighbor lookup and differentiable tricubic
        interpolation, as determined by self.interpolate flag, to match the C-code.

        C-Code Implementation Reference (from nanoBragg.c, lines 3101-3139):
        The C code performs nearest-neighbor lookup or tricubic interpolation based
        on the 'interpolate' flag. Out-of-range accesses return default_F.
        """
        # If no HKL data loaded, return default_F for all reflections
        if self.hkl_data is None:
            return torch.full_like(h, float(self.config.default_F), device=self.device, dtype=self.dtype)

        # Get metadata
[2025-10-06T06:20:23] tokens used: 51,245

[2025-10-06T06:20:25] thinking

**Inspecting physics utility file**
[2025-10-06T06:20:25] exec bash -lc 'rg -n "def sincg" -n src/nanobrag_torch/utils/physics.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:26] bash -lc 'rg -n "def sincg" -n src/nanobrag_torch/utils/physics.py' succeeded in 677ms:
33:def sincg(u: torch.Tensor, N: torch.Tensor) -> torch.Tensor:
[2025-10-06T06:20:26] tokens used: 54,104
[2025-10-06T06:20:29] exec bash -lc "sed -n '1,120p' src/nanobrag_torch/utils/physics.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:29] bash -lc "sed -n '1,120p' src/nanobrag_torch/utils/physics.py" succeeded in 734ms:
"""
Vectorized physics utilities for nanoBragg PyTorch implementation.

This module contains PyTorch implementations of physical models and
calculations from the original C code.
"""

import torch


# Use different compile modes for CPU vs GPU to avoid CUDA graph issues
# On GPU, "max-autotune" avoids the nested compilation CUDA graph problem
# On CPU, "reduce-overhead" is faster
def _get_compile_decorator():
    """Get appropriate compile decorator based on available hardware."""
    import os
    disable_compile = os.environ.get("NANOBRAGG_DISABLE_COMPILE", "0") == "1"

    if disable_compile:
        # Return identity decorator when compilation is disabled (for gradient testing)
[2025-10-06T06:20:29] tokens used: 54,269

[2025-10-06T06:20:31] thinking

**Investigating sincg usage**
[2025-10-06T06:20:31] exec bash -lc 'rg -n "sincg(" -g"*.py"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:32] bash -lc 'rg -n "sincg(" -g"*.py"' exited 2 in 686ms:
rg: regex parse error:
    (?:sincg()
    ^
error: unclosed group
[2025-10-06T06:20:32] tokens used: 55,749

[2025-10-06T06:20:34] thinking

**Escaping parentheses in search**
[2025-10-06T06:20:34] exec bash -lc "rg -n \"sincg\\(\" src" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:35] bash -lc "rg -n \"sincg\\(\" src" succeeded in 695ms:
src/nanobrag_torch/utils/physics.py:33:def sincg(u: torch.Tensor, N: torch.Tensor) -> torch.Tensor:
src/nanobrag_torch/simulator.py:219:        F_latt_a = sincg(torch.pi * (h - h0), Na)
src/nanobrag_torch/simulator.py:220:        F_latt_b = sincg(torch.pi * (k - k0), Nb)
src/nanobrag_torch/simulator.py:221:        F_latt_c = sincg(torch.pi * (l - l0), Nc)
src/nanobrag_torch/simulator.py:1264:                    F_latt_a = sincg(torch.pi * torch.tensor(h - h0), Na).item()
src/nanobrag_torch/simulator.py:1265:                    F_latt_b = sincg(torch.pi * torch.tensor(k - k0), Nb).item()
src/nanobrag_torch/simulator.py:1266:                    F_latt_c = sincg(torch.pi * torch.tensor(l - l0), Nc).item()
[2025-10-06T06:20:35] tokens used: 55,967

[2025-10-06T06:20:37] thinking

**Checking simulator.py usage**
[2025-10-06T06:20:37] exec bash -lc "sed -n '180,260p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:38] bash -lc "sed -n '180,260p' src/nanobrag_torch/simulator.py" succeeded in 674ms:
            rot_c_broadcast = rot_c.unsqueeze(0).unsqueeze(0)
        else:
            # (S, F) case: add 3 leading dims
            rot_a_broadcast = rot_a.unsqueeze(0).unsqueeze(0).unsqueeze(0)
            rot_b_broadcast = rot_b.unsqueeze(0).unsqueeze(0).unsqueeze(0)
            rot_c_broadcast = rot_c.unsqueeze(0).unsqueeze(0).unsqueeze(0)
    else:
        # Single source: (S, F, 3) -> (S, F, 1, 1, 3) or (batch, 3) -> (batch, 1, 1, 3)
        scattering_broadcast = scattering_vector.unsqueeze(-2).unsqueeze(-2)
        # rot vectors: (N_phi, N_mos, 3) -> (1, 1, N_phi, N_mos, 3)
        rot_a_broadcast = rot_a.unsqueeze(0).unsqueeze(0)
        rot_b_broadcast = rot_b.unsqueeze(0).unsqueeze(0)
        rot_c_broadcast = rot_c.unsqueeze(0).unsqueeze(0)

    h = dot_product(scattering_broadcast, rot_a_broadcast)
    k = dot_product(scattering_broadcast, rot_b_broadcast)
    l = dot_product(scattering_broadcast, rot_c_broadcast)  # noqa: E741

    # Find nearest integer Miller indices
    h0 = torch.round(h)
[2025-10-06T06:20:38] tokens used: 56,403

[2025-10-06T06:20:42] thinking

**Investigating sincg function usage**
[2025-10-06T06:20:43] exec bash -lc "sed -n '3050,3140p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:44] bash -lc "sed -n '3050,3140p' golden_suite_generator/nanoBragg.c" succeeded in 671ms:
                                    if(fpixel==trace_fpixel && spixel==trace_spixel && source==0 && mos_tic==0 && phi_tic==0) {
                                        printf("TRACE_C: rot_a_angstroms %.15g %.15g %.15g\n", a[1]*1e10, a[2]*1e10, a[3]*1e10);
                                        printf("TRACE_C: rot_b_angstroms %.15g %.15g %.15g\n", b[1]*1e10, b[2]*1e10, b[3]*1e10);
                                        printf("TRACE_C: rot_c_angstroms %.15g %.15g %.15g\n", c[1]*1e10, c[2]*1e10, c[3]*1e10);
                                        printf("TRACE_C: rot_a_star_A_inv %.15g %.15g %.15g\n", a_star[1], a_star[2], a_star[3]);
                                        printf("TRACE_C: rot_b_star_A_inv %.15g %.15g %.15g\n", b_star[1], b_star[2], b_star[3]);
                                        printf("TRACE_C: rot_c_star_A_inv %.15g %.15g %.15g\n", c_star[1], c_star[2], c_star[3]);
                                        printf("TRACE_C: hkl_frac %.15g %.15g %.15g\n", h, k, l);
                                        printf("TRACE_C: hkl_rounded %d %d %d\n", h0, k0, l0);
                                    }


                                    /* structure factor of the lattice (paralelpiped crystal)
                                        F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
                                    */
                                    F_latt = 1.0;
                                    if(xtal_shape == SQUARE)
                                    {
                                        /* xtal is a paralelpiped */
                                        double F_latt_a = 1.0, F_latt_b = 1.0, F_latt_c = 1.0;
[2025-10-06T06:20:44] tokens used: 58,680

[2025-10-06T06:20:49] thinking

**Comparing sinc function usage in C and PyTorch**
[2025-10-06T06:20:50] exec bash -lc 'rg -n "sincg" golden_suite_generator/nanoBragg.c' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:50] bash -lc 'rg -n "sincg" golden_suite_generator/nanoBragg.c' succeeded in 710ms:
145:double sincg(double x, double N);
1092:                /* use sincg */
3071:                                            F_latt_a = sincg(M_PI*h,Na);
3075:                                            F_latt_b = sincg(M_PI*k,Nb);
3079:                                            F_latt_c = sincg(M_PI*l,Nc);
3561:double sincg(double x,double N) {
[2025-10-06T06:20:50] tokens used: 60,617
[2025-10-06T06:20:52] exec bash -lc "sed -n '3561,3605p' golden_suite_generator/nanoBragg.c" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:20:53] bash -lc "sed -n '3561,3605p' golden_suite_generator/nanoBragg.c" succeeded in 677ms:
double sincg(double x,double N) {
    if(x==0.0) return N;

    return sin(x*N)/sin(x);
}

/* Fourier transform of a sphere */
double sinc3(double x) {
    if(x==0.0) return 1.0;

    return 3.0*(sin(x)/x-cos(x))/(x*x);
}

double sinc_conv_sinc3(double x) {
    if(x==0.0) return 1.0;

    return 3.0*(sin(x)-x*cos(x))/(x*x*x);
}


[2025-10-06T06:20:53] tokens used: 60,946

[2025-10-06T06:21:41] thinking

**Detailing plan updates for sincg argument verification and scaling**
[2025-10-06T06:21:44] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -99,4 +99,4 @@
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
[2025-10-06T06:21:44] apply_patch(auto_approved=true) exited 0 in 12ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T06:21:44] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:21:44] tokens used: 65,357
[2025-10-06T06:21:44] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:21:49] thinking

**Updating next actions in fix_plan.md**
[2025-10-06T06:21:53] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,3 +457,3 @@
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
[2025-10-06T06:21:53] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T06:21:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..e845e609b476e9422cf758070a682411cda5e3cf
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.

[2025-10-06T06:21:53] tokens used: 66,483
[2025-10-06T06:21:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..e845e609b476e9422cf758070a682411cda5e3cf
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.


[2025-10-06T06:21:59] thinking

**Updating vectorization plan and tasks**

I’m planning to enhance the vectorization plan by adding explicit instructions for creating new benchmark scripts under `scripts/benchmarks/`, updating Phase A tasks to call these out, and referencing the absence of baseline harnesses in the plan context and later phases. This should clarify goals and align the documentation with the intended new experiments.
[2025-10-06T06:22:07] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/vectorization.md
@@ -3,3 +3,3 @@
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
@@ -13,4 +13,4 @@
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
@@ -57,3 +57,3 @@
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`triclubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
[2025-10-06T06:22:07] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M plans/active/vectorization.md
[2025-10-06T06:22:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..e845e609b476e9422cf758070a682411cda5e3cf
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..6a71023f31ff578f200b6c8f460ffcaad4625848
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`triclubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization

[2025-10-06T06:22:07] tokens used: 68,169
[2025-10-06T06:22:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..e845e609b476e9422cf758070a682411cda5e3cf
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..6a71023f31ff578f200b6c8f460ffcaad4625848
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`triclubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:22:12] thinking

**Verifying spelling of tricubic**
[2025-10-06T06:22:13] exec bash -lc "sed -n '1,120p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:22:14] bash -lc "sed -n '1,120p' plans/active/vectorization.md" succeeded in 927ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T06:22:14] tokens used: 69,690
[2025-10-06T06:22:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..e845e609b476e9422cf758070a682411cda5e3cf
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..6a71023f31ff578f200b6c8f460ffcaad4625848
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`triclubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:22:17] thinking

**Correcting filename typo**
[2025-10-06T06:22:18] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/vectorization.md
@@ -57,3 +57,3 @@
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`triclubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
[2025-10-06T06:22:18] apply_patch(auto_approved=true) exited 0 in 40ms:
Success. Updated the following files:
M plans/active/vectorization.md
[2025-10-06T06:22:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..e845e609b476e9422cf758070a682411cda5e3cf
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization

[2025-10-06T06:22:19] tokens used: 72,416
[2025-10-06T06:22:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..e845e609b476e9422cf758070a682411cda5e3cf
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:22:22] thinking

**Updating fix_plan entry details**
[2025-10-06T06:22:25] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -922,3 +922,3 @@
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
[2025-10-06T06:22:25] apply_patch(auto_approved=true) exited 0 in 40ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T06:22:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization

[2025-10-06T06:22:25] tokens used: 73,130
[2025-10-06T06:22:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:22:36] thinking

**Preparing input.md instructions**

I’m gathering details to produce the input.md by summarizing the goal about diagnosing the `sincg` argument bug and clarifying that this is an Evidence phase involving data capture before code changes. I’m also figuring out the exact commands, like running a trace harness script, to instruct for collecting logs and manual calculations without modifying code yet. This needs careful coordination with the plan to ensure correct focus and phased instructions.
[2025-10-06T06:22:39] exec bash -lc 'ls reports/2025-10-cli-flags/phase_h' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:22:40] bash -lc 'ls reports/2025-10-cli-flags/phase_h' succeeded in 884ms:
attempt_log.txt
implementation_notes.md
trace_comparison.md
trace_comparison_after_H2.md
trace_diff.log
trace_diff_after_H2.log
trace_harness.py
trace_py.log
trace_py.stderr
trace_py_after_H2.log
trace_py_after_H2.stderr
[2025-10-06T06:22:40] tokens used: 74,095
[2025-10-06T06:22:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:22:46] thinking

**Preparing instructions for evidence gathering**
[2025-10-06T06:22:46] exec bash -lc 'git rev-parse --short HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:22:47] bash -lc 'git rev-parse --short HEAD' succeeded in 695ms:
15fdec5
[2025-10-06T06:22:47] tokens used: 74,723
[2025-10-06T06:22:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:22:49] thinking

**Considering timestamp format for header**
[2025-10-06T06:22:50] exec bash -lc 'date -u +"%Y-%m-%d %H:%M:%SZ"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:22:50] bash -lc 'date -u +"%Y-%m-%d %H:%M:%SZ"' succeeded in 680ms:
2025-10-06 06:22:50Z
[2025-10-06T06:22:50] tokens used: 75,004
[2025-10-06T06:22:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:22:59] thinking

**Composing detailed task header**
[2025-10-06T06:23:00] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:23:01] bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" succeeded in 692ms:
   440	- Immediate Next Actions (2025-10-15):
   441	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   442	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   443	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   444	- Attempts History: None — new item.
   445	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   446	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   447	
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
   458	- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
   459	- Attempts History:
[2025-10-06T06:23:01] tokens used: 75,837
[2025-10-06T06:23:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:23:03] thinking

**Recording line numbers for plans**
[2025-10-06T06:23:04] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '80,140p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:23:05] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '80,140p'" succeeded in 679ms:
    80	### Phase G — MOSFLM Matrix Orientation Support
    81	Goal: Preserve full crystal orientation from `-mat` files so PyTorch matches C lattice vectors and downstream physics.
    82	Prereqs: Detector parity (Phase F) achieved or at least traced; clarity on orientation data flow.
    83	Exit Criteria: Crystal trace (rotated a/b/c vectors) aligns with C for the supervisor command; CLI accepts orientation without manual overrides.
    84	
    85	| ID | Task Description | State | How/Why & Guidance |
    86	| --- | --- | --- | --- |
    87	| G1 | Extend CLI config to retain A* vectors | [D] | ✅ Commit 28fc584 stores MOSFLM reciprocal vectors from `-mat` in `parse_and_validate_args` and threads them into `CrystalConfig`; 26-case CLI regression sweep captured in Attempt #15 notes. |
    88	| G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
    89	| G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
    90	
    91	### Phase H — Lattice Structure Factor Alignment
    92	Goal: Ensure the CLI-provided beam vector propagates through Detector→Simulator and bring scattering/lattice parity back in line before polarization work.
    93	Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
    94	Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
    95	
    96	| ID | Task Description | State | How/Why & Guidance |
    97	| --- | --- | --- | --- |
    98	| H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
    99	| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
[2025-10-06T06:23:05] tokens used: 79,317
[2025-10-06T06:23:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:23:07] thinking

**Preparing line numbers for plan reference**
[2025-10-06T06:23:08] exec bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,160p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:23:09] bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,160p'" succeeded in 728ms:
     1	## Context
     2	- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
     3	- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
     4	- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
     5	
     6	### Phase A — Evidence & Baseline Capture
     7	Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
     8	Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
     9	Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.
    10	
    11	| ID | Task Description | State | How/Why & Guidance |
    12	| --- | --- | --- | --- |
    13	| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
    14	| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
    15	| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
    16	
    17	### Phase B — Tricubic Vectorization Design
    18	Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
    19	Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
    20	Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T06:23:09] tokens used: 81,101
[2025-10-06T06:23:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:23:21] thinking

**Outlining input.md content structure**
[2025-10-06T06:23:22] exec bash -lc "nl -ba src/nanobrag_torch/simulator.py | sed -n '200,260p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:23:22] bash -lc "nl -ba src/nanobrag_torch/simulator.py | sed -n '200,260p'" succeeded in 862ms:
   200	    k0 = torch.round(k)
   201	    l0 = torch.round(l)
   202	
   203	    # Look up structure factors
   204	    F_cell = crystal_get_structure_factor(h0, k0, l0)
   205	
   206	    # Ensure F_cell is on the same device as h (device-neutral implementation per Core Rule #16)
   207	    # The crystal.get_structure_factor may return CPU tensors even when h0/k0/l0 are on CUDA
   208	    if F_cell.device != h.device:
   209	        F_cell = F_cell.to(device=h.device)
   210	
   211	    # Calculate lattice structure factor
   212	    Na = N_cells_a
   213	    Nb = N_cells_b
   214	    Nc = N_cells_c
   215	    shape = crystal_shape
   216	    fudge = crystal_fudge
   217	
   218	    if shape == CrystalShape.SQUARE:
   219	        F_latt_a = sincg(torch.pi * (h - h0), Na)
[2025-10-06T06:23:22] tokens used: 83,481
[2025-10-06T06:23:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:23:25] thinking

**Identifying reference lines with line numbers**
[2025-10-06T06:23:25] exec bash -lc "nl -ba golden_suite_generator/nanoBragg.c | sed -n '3058,3090p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:23:26] bash -lc "nl -ba golden_suite_generator/nanoBragg.c | sed -n '3058,3090p'" succeeded in 709ms:
  3058	                                        printf("TRACE_C: hkl_rounded %d %d %d\n", h0, k0, l0);
  3059	                                    }
  3060	
  3061	
  3062	                                    /* structure factor of the lattice (paralelpiped crystal)
  3063	                                        F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
  3064	                                    */
  3065	                                    F_latt = 1.0;
  3066	                                    if(xtal_shape == SQUARE)
  3067	                                    {
  3068	                                        /* xtal is a paralelpiped */
  3069	                                        double F_latt_a = 1.0, F_latt_b = 1.0, F_latt_c = 1.0;
  3070	                                        if(Na>1){
  3071	                                            F_latt_a = sincg(M_PI*h,Na);
  3072	                                            F_latt *= F_latt_a;
  3073	                                        }
  3074	                                        if(Nb>1){
  3075	                                            F_latt_b = sincg(M_PI*k,Nb);
  3076	                                            F_latt *= F_latt_b;
  3077	                                        }
[2025-10-06T06:23:26] tokens used: 85,752
[2025-10-06T06:23:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:23:40] thinking

**Outlining input.md structure and content**

I'm mapping out how to build input.md with about 100-200 lines, following a specific sectioned format including header, Do Now commands, prioritized rationale, how-to commands, pitfalls, pointers with file references, and optional next steps. I'll also ensure bullet lists use dashes and file paths include start lines where possible to meet conventions.
[2025-10-06T06:23:41] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_h/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:23:42] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_h/trace_harness.py" succeeded in 809ms:
#!/usr/bin/env python3
"""
PyTorch trace harness for CLI-FLAGS-003 Phase H1.
Generates TRACE_PY output matching C trace format.
Phase H1: Clean trace without manual beam overrides - Detector.apply_custom_vectors() handles beam_vector from CLI.
"""

import os
import sys
import torch
from pathlib import Path

# Set environment variable for MKL conflicts
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent / 'src'))

from nanobrag_torch.config import (
    DetectorConfig, CrystalConfig, BeamConfig,
[2025-10-06T06:23:42] tokens used: 87,441
[2025-10-06T06:23:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:23:54] thinking

**Outlining logging and manual computation instructions**

I’m creating detailed instructions to run the trace harness with environment variables and redirect outputs consistently to new log files, guiding the user to compute manual `sincg` values using inline Python scripts and store results in dedicated markdown files. I’ll include a bullet list summarizing commands and reminders to avoid overwriting logs or modifying code prematurely, plus key reference pointers and suggested next steps once validation completes.
[2025-10-06T06:24:10] exec bash -lc "cat <<'EOF' > input.md
timestamp: 2025-10-06 06:22:50Z
commit: 15fdec5
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3 lattice mismatch diagnosis

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — run "'`env KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log 2> reports/2025-10-cli-flags/phase_h/trace_py_after_H3.stderr`; finish with `pytest --collect-only -q`
If Blocked: Capture the failing stdout/stderr, append a short note to `reports/2025-10-cli-flags/phase_h/attempt_log.txt`, and diff against `trace_py_after_H2.log` to pinpoint where execution diverged before asking for guidance.

Priorities & Rationale:
- docs/fix_plan.md:448 — Next actions call for confirming the `(h-h0)` usage before any simulator edits.
- plans/active/cli-noise-pix0/plan.md:100 — Phase H3 checklist now requires a manual `sincg` reproduction and hypothesis log.
- reports/2025-10-cli-flags/phase_h/trace_comparison_after_H2.md:1 — Existing trace diff highlights the `F_latt` magnitude gap we must quantify.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:1 — Hypotheses already point at the `sincg` argument order; extend this with today’s evidence.
- golden_suite_generator/nanoBragg.c:3063 — Canonical formula uses absolute `h/k/l`; reproduce these numbers for our comparison.
- src/nanobrag_torch/simulator.py:218 — Current PyTorch path feeds `(h-h0)` into `sincg`; verify this is the culprit before touching code.

How-To Map:
- `env KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log 2> reports/2025-10-cli-flags/phase_h/trace_py_after_H3.stderr` — regenerate the PyTorch trace with the post-H2 wiring; keep stderr for run metadata.
- `python - <<'"'PY'"'` (see below) → pipe output to `reports/2025-10-cli-flags/phase_h/manual_sincg.md` to compute `sincg` for the exact `h,k,l` tuples from the C trace and compare against PyTorch results:
  ```python
  import torch
  h = torch.tensor(2.001203, dtype=torch.float64)
  k = torch.tensor(1.992798, dtype=torch.float64)
  l = torch.tensor(-12.990767, dtype=torch.float64)
  Na, Nb, Nc = (36, 47, 29)
  from nanobrag_torch.utils.physics import sincg
  vals = {
      '"'C_expected': (35.889, 38.632, 25.702),
      'Py_current': (
          float(sincg(torch.pi * (h - torch.round(h)), torch.tensor(Na)).item()),
          float(sincg(torch.pi * (k - torch.round(k)), torch.tensor(Nb)).item()),
          float(sincg(torch.pi * (l - torch.round(l)), torch.tensor(Nc)).item()),
      ),
      'Py_with_absolute': (
          float(sincg(torch.pi * h, torch.tensor(Na)).item()),
          float(sincg(torch.pi * k, torch.tensor(Nb)).item()),
          float(sincg(torch.pi * l, torch.tensor(Nc)).item()),
      ),
  }
  for key, triplet in vals.items():
      print(key, ':', ', '.join(f'{x:.6f}' for x in triplet))
  PY
  "'```
- Update `reports/2025-10-cli-flags/phase_h/implementation_notes.md` with a new “2025-10-06” block summarising the manual `sincg` findings, the confirmed root cause, and the proposed fix/test plan; note the filenames you produced and any follow-on questions.
- `pytest --collect-only -q` — ensure collection still passes after evidence gathering; stash the log under `reports/2025-10-cli-flags/phase_h/pytest_collect.log`.

Pitfalls To Avoid:
- Do not modify simulator code yet; today is evidence-only per Phase H3.
- Keep all new artifacts under `reports/2025-10-cli-flags/phase_h/` to preserve trace lineage.
- Avoid reintroducing manual beam overrides in the harness; rely on CLI wiring now that H2 landed.
- Maintain float64 tensors in scratch scripts so comparisons stay numerically stable.
- Do not delete or rename any files listed in `docs/index.md` (Protected Assets rule).
- Skip ad-hoc snippets outside `reports/…`; no temp files in repo root.
- Preserve device/dtype neutrality in any helper code (no `.cpu()`/`.item()` on critical tensors).
- If you need to re-run the harness, clean up old logs or suffix them clearly; no silent overwrites.
- Keep the loop evidence-only—no commits or merges until we agree on the fix plan.
- Continue logging attempts in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` after each major action.

Pointers:
- docs/fix_plan.md:448 — Current status and next actions for `[CLI-FLAGS-003]`.
- plans/active/cli-noise-pix0/plan.md:91 — Phase H tasks and exit criteria.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H2.log:1 — Last PyTorch trace for comparison.
- reports/2025-10-cli-flags/phase_h/trace_comparison_after_H2.md:1 — Prior diff to baseline your notes.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:1 — Append today’s findings here.
- src/nanobrag_torch/simulator.py:218 — Location of the current lattice factor calculation.
- golden_suite_generator/nanoBragg.c:3063 — Reference sincg usage (`sincg(M_PI*h, Na)`).

Next Up:
- Queue Phase H4 parity rerun after the lattice fix plan is agreed (still within `[CLI-FLAGS-003]`).
- Prep Phase A baselines for `[VECTOR-TRICUBIC-001]` once CLI parity evidence is captured.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:24:11] bash -lc "cat <<'EOF' > input.md
timestamp: 2025-10-06 06:22:50Z
commit: 15fdec5
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3 lattice mismatch diagnosis

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — run "'`env KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log 2> reports/2025-10-cli-flags/phase_h/trace_py_after_H3.stderr`; finish with `pytest --collect-only -q`
If Blocked: Capture the failing stdout/stderr, append a short note to `reports/2025-10-cli-flags/phase_h/attempt_log.txt`, and diff against `trace_py_after_H2.log` to pinpoint where execution diverged before asking for guidance.

Priorities & Rationale:
- docs/fix_plan.md:448 — Next actions call for confirming the `(h-h0)` usage before any simulator edits.
- plans/active/cli-noise-pix0/plan.md:100 — Phase H3 checklist now requires a manual `sincg` reproduction and hypothesis log.
- reports/2025-10-cli-flags/phase_h/trace_comparison_after_H2.md:1 — Existing trace diff highlights the `F_latt` magnitude gap we must quantify.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:1 — Hypotheses already point at the `sincg` argument order; extend this with today’s evidence.
- golden_suite_generator/nanoBragg.c:3063 — Canonical formula uses absolute `h/k/l`; reproduce these numbers for our comparison.
- src/nanobrag_torch/simulator.py:218 — Current PyTorch path feeds `(h-h0)` into `sincg`; verify this is the culprit before touching code.

How-To Map:
- `env KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log 2> reports/2025-10-cli-flags/phase_h/trace_py_after_H3.stderr` — regenerate the PyTorch trace with the post-H2 wiring; keep stderr for run metadata.
- `python - <<'"'PY'"'` (see below) → pipe output to `reports/2025-10-cli-flags/phase_h/manual_sincg.md` to compute `sincg` for the exact `h,k,l` tuples from the C trace and compare against PyTorch results:
  ```python
  import torch
  h = torch.tensor(2.001203, dtype=torch.float64)
  k = torch.tensor(1.992798, dtype=torch.float64)
  l = torch.tensor(-12.990767, dtype=torch.float64)
  Na, Nb, Nc = (36, 47, 29)
  from nanobrag_torch.utils.physics import sincg
  vals = {
      '"'C_expected': (35.889, 38.632, 25.702),
      'Py_current': (
          float(sincg(torch.pi * (h - torch.round(h)), torch.tensor(Na)).item()),
          float(sincg(torch.pi * (k - torch.round(k)), torch.tensor(Nb)).item()),
          float(sincg(torch.pi * (l - torch.round(l)), torch.tensor(Nc)).item()),
      ),
      'Py_with_absolute': (
          float(sincg(torch.pi * h, torch.tensor(Na)).item()),
          float(sincg(torch.pi * k, torch.tensor(Nb)).item()),
          float(sincg(torch.pi * l, torch.tensor(Nc)).item()),
      ),
  }
  for key, triplet in vals.items():
      print(key, ':', ', '.join(f'{x:.6f}' for x in triplet))
  PY
  "'```
- Update `reports/2025-10-cli-flags/phase_h/implementation_notes.md` with a new “2025-10-06” block summarising the manual `sincg` findings, the confirmed root cause, and the proposed fix/test plan; note the filenames you produced and any follow-on questions.
- `pytest --collect-only -q` — ensure collection still passes after evidence gathering; stash the log under `reports/2025-10-cli-flags/phase_h/pytest_collect.log`.

Pitfalls To Avoid:
- Do not modify simulator code yet; today is evidence-only per Phase H3.
- Keep all new artifacts under `reports/2025-10-cli-flags/phase_h/` to preserve trace lineage.
- Avoid reintroducing manual beam overrides in the harness; rely on CLI wiring now that H2 landed.
- Maintain float64 tensors in scratch scripts so comparisons stay numerically stable.
- Do not delete or rename any files listed in `docs/index.md` (Protected Assets rule).
- Skip ad-hoc snippets outside `reports/…`; no temp files in repo root.
- Preserve device/dtype neutrality in any helper code (no `.cpu()`/`.item()` on critical tensors).
- If you need to re-run the harness, clean up old logs or suffix them clearly; no silent overwrites.
- Keep the loop evidence-only—no commits or merges until we agree on the fix plan.
- Continue logging attempts in `reports/2025-10-cli-flags/phase_h/attempt_log.txt` after each major action.

Pointers:
- docs/fix_plan.md:448 — Current status and next actions for `[CLI-FLAGS-003]`.
- plans/active/cli-noise-pix0/plan.md:91 — Phase H tasks and exit criteria.
- reports/2025-10-cli-flags/phase_h/trace_py_after_H2.log:1 — Last PyTorch trace for comparison.
- reports/2025-10-cli-flags/phase_h/trace_comparison_after_H2.md:1 — Prior diff to baseline your notes.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:1 — Append today’s findings here.
- src/nanobrag_torch/simulator.py:218 — Location of the current lattice factor calculation.
- golden_suite_generator/nanoBragg.c:3063 — Reference sincg usage (`sincg(M_PI*h, Na)`).

Next Up:
- Queue Phase H4 parity rerun after the lattice fix plan is agreed (still within `[CLI-FLAGS-003]`).
- Prep Phase A baselines for `[VECTOR-TRICUBIC-001]` once CLI parity evidence is captured.
EOF
' succeeded in 759ms:

[2025-10-06T06:24:11] tokens used: 91,381
[2025-10-06T06:24:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:24:15] thinking

**Verifying shell snippet quoting**
[2025-10-06T06:24:16] exec bash -lc "sed -n '1,200p' input.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:24:16] bash -lc "sed -n '1,200p' input.md" succeeded in 713ms:
timestamp: 2025-10-06 06:22:50Z
commit: 15fdec5
author: galph
Active Focus: [CLI-FLAGS-003] Phase H3 lattice mismatch diagnosis

Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — run `env KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log 2> reports/2025-10-cli-flags/phase_h/trace_py_after_H3.stderr`; finish with `pytest --collect-only -q`
If Blocked: Capture the failing stdout/stderr, append a short note to `reports/2025-10-cli-flags/phase_h/attempt_log.txt`, and diff against `trace_py_after_H2.log` to pinpoint where execution diverged before asking for guidance.

Priorities & Rationale:
- docs/fix_plan.md:448 — Next actions call for confirming the `(h-h0)` usage before any simulator edits.
- plans/active/cli-noise-pix0/plan.md:100 — Phase H3 checklist now requires a manual `sincg` reproduction and hypothesis log.
- reports/2025-10-cli-flags/phase_h/trace_comparison_after_H2.md:1 — Existing trace diff highlights the `F_latt` magnitude gap we must quantify.
- reports/2025-10-cli-flags/phase_h/implementation_notes.md:1 — Hypotheses already point at the `sincg` argument order; extend this with today’s evidence.
- golden_suite_generator/nanoBragg.c:3063 — Canonical formula uses absolute `h/k/l`; reproduce these numbers for our comparison.
- src/nanobrag_torch/simulator.py:218 — Current PyTorch path feeds `(h-h0)` into `sincg`; verify this is the culprit before touching code.

How-To Map:
- `env KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log 2> reports/2025-10-cli-flags/phase_h/trace_py_after_H3.stderr` — regenerate the PyTorch trace with the post-H2 wiring; keep stderr for run metadata.
- `python - <<'PY'` (see below) → pipe output to `reports/2025-10-cli-flags/phase_h/manual_sincg.md` to compute `sincg` for the exact `h,k,l` tuples from the C trace and compare against PyTorch results:
  ```python
[2025-10-06T06:24:16] tokens used: 93,373
[2025-10-06T06:24:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:24:22] thinking

**Preparing to update galph_memory.md**

I'll get ready to add a new dated entry to `galph_memory.md` summarizing recent progress: plan updates on vectorization and bug fixes, evaluation of ralph’s commit, and follow-up instructions. I want to check the file end for a clean append and clearly capture all key points before committing.
[2025-10-06T06:24:23] exec bash -lc 'tail -n 20 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:24:24] bash -lc 'tail -n 20 galph_memory.md' succeeded in 739ms:
- Updated `plans/active/cli-noise-pix0/plan.md` to add Phase H (lattice structure factor alignment) with tasks H1–H3 and moved polarization to new Phase I. Context now calls out the lattice gap and sequencing (H before I).
- Refreshed `docs/fix_plan.md` `[CLI-FLAGS-003]` entry: status line now lists phases completed, Next Actions target Phase H artifacts under `reports/2025-10-cli-flags/phase_h/`, exit criteria include Phase H lattice + Phase I polarization.
- Coin flip=heads triggered a review of Ralph’s recent work: orientation ingestion commits solid (tests pass, MOSFLM parity proven) but Phase H remains unstarted; harness still overrides beam vector manually. Feedback: evidence first, no polarization tweaks yet.
- Vectorization goal unchanged — plan stays at Phase A evidence until CLI parity narrows the gap.
- Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
- Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.

## 2025-10-06 (galph loop)
- Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
- Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
- docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
- Authored new input.md (Do Now: Phase H2 beam propagation + targeted pytest) and committed with message "SUPERVISOR: CLI H2 plan refresh - tests: not run".
- Working tree clean post-push (feature/spec-based-2 @ 35cd319).
 - Follow-up: Ralph to wire detector.beam_vector into Simulator, rerun beam trace, and land targeted pytest per input.md.
## 2025-10-06 (galph loop — Phase H3 evidence prep)
- git sync clean (ba649f0). Reviewed required specs/arch/testing docs plus plans/active entries before analysis per SOP.
- Long-term Goal 1 status: beam vector fix merged (commit 8c1583d) but Phase H3 evidence missing—PyTorch trace still shows pre-fix divergence. Key gaps: rerun `trace_harness.py` without manual overrides, diff against `trace_c.log`, log first divergence; likely causes for residual lattice mismatch are either incorrect `sincg` argument (`π*(h-h0)` vs `π*h`) or Na/Nb/Nc scaling once incident vector confirmed. Goal 2 (vectorization) remains blocked until CLI parity evidence complete; Phase A baseline still outstanding.
- Coin flip → heads; reviewed last ~10 Ralph iterations. Latest commit 8c1583d correctly delegates `detector.beam_vector` into Simulator, adds regression test (`TestCLIBeamVector::test_custom_beam_vector_propagates`), no regressions observed. Work productive; advised to capture post-fix trace before touching lattice math.
- Plan upkeep: marked `plans/active/cli-noise-pix0/plan.md` Phase H2 as [D] with Attempt #20 context and refreshed H3 guidance to require new trace evidence + hypothesis logging. Input memo rewritten (108 lines) directing Ralph to produce `trace_py_after_H2` artifacts, diff vs C, update reports/implementation notes, and run targeted pytest.
- Follow-ups for Ralph next loop: run trace harness with env vars, store `trace_py_after_H2` + diff + comparison markdown, update docs/fix_plan Attempt log with findings, keep loop evidence-only (no code edits) before advancing to lattice fixes.
[2025-10-06T06:24:24] tokens used: 96,209
[2025-10-06T06:24:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:24:29] thinking

**Appending new changelog entry**
[2025-10-06T06:24:39] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-06 (galph loop — H3 sincg diagnosis setup)
- Git already up to date (15fdec5); mandatory spec/arch/testing docs and active plans refreshed before analysis.
- Long-term Goal 1: New Phase H3 evidence (commit ce28187) shows "'`F_latt` mismatch; confirmed top hypothesis is PyTorch feeding `(h-h0)` into `sincg`. Updated `plans/active/cli-noise-pix0/plan.md` H3 guidance to require manual `sincg(M_PI*h, Na)` reproduction and hypothesis logging before any simulator edits.
- docs/fix_plan.md `[CLI-FLAGS-003]` Next Actions now point at rerunning `trace_harness.py`, capturing manual `sincg` calculations, then executing Phase H4 once the lattice fix is staged.
- Coin flip=heads → reviewed Ralph’s latest code commit (ce28187). Evidence-only trace capture landed as expected, no regressions observed; productive iteration highlighting sincg vs lattice scaling suspects.
- Long-term Goal 2: `plans/active/vectorization.md` Phase A updated to author reusable tricubic/absorption benchmark harnesses under `scripts/benchmarks/` so baseline timings can be captured once CLI parity stabilises; fix_plan Next Actions adjusted accordingly.
- Authored new input.md (Do Now: rerun trace harness, compute manual sincg table, pytest collect) and staged reporting guardrails for today’s evidence-only loop.
- Follow-ups for Ralph: regenerate PyTorch trace under `trace_py_after_H3.log`, create `manual_sincg.md` comparing `(h-h0)` vs absolute arguments, append findings to `implementation_notes.md`, and keep Attempt log current before proposing the simulator fix.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:24:40] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-06 (galph loop — H3 sincg diagnosis setup)
- Git already up to date (15fdec5); mandatory spec/arch/testing docs and active plans refreshed before analysis.
- Long-term Goal 1: New Phase H3 evidence (commit ce28187) shows "'`F_latt` mismatch; confirmed top hypothesis is PyTorch feeding `(h-h0)` into `sincg`. Updated `plans/active/cli-noise-pix0/plan.md` H3 guidance to require manual `sincg(M_PI*h, Na)` reproduction and hypothesis logging before any simulator edits.
- docs/fix_plan.md `[CLI-FLAGS-003]` Next Actions now point at rerunning `trace_harness.py`, capturing manual `sincg` calculations, then executing Phase H4 once the lattice fix is staged.
- Coin flip=heads → reviewed Ralph’s latest code commit (ce28187). Evidence-only trace capture landed as expected, no regressions observed; productive iteration highlighting sincg vs lattice scaling suspects.
- Long-term Goal 2: `plans/active/vectorization.md` Phase A updated to author reusable tricubic/absorption benchmark harnesses under `scripts/benchmarks/` so baseline timings can be captured once CLI parity stabilises; fix_plan Next Actions adjusted accordingly.
- Authored new input.md (Do Now: rerun trace harness, compute manual sincg table, pytest collect) and staged reporting guardrails for today’s evidence-only loop.
- Follow-ups for Ralph: regenerate PyTorch trace under `trace_py_after_H3.log`, create `manual_sincg.md` comparing `(h-h0)` vs absolute arguments, append findings to `implementation_notes.md`, and keep Attempt log current before proposing the simulator fix.
EOF
' succeeded in 937ms:

[2025-10-06T06:24:40] tokens used: 97,785
[2025-10-06T06:24:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:24:45] thinking

**Checking git status**
[2025-10-06T06:24:45] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:24:46] bash -lc 'git status --short' succeeded in 830ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
 M plans/active/vectorization.md
[2025-10-06T06:24:46] tokens used: 99,099
[2025-10-06T06:24:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:24:49] thinking

**Preparing to commit changes**
[2025-10-06T06:24:49] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:24:50] bash -lc 'git diff' succeeded in 793ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e..0ad5c46 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
[2025-10-06T06:24:50] tokens used: 99,253
[2025-10-06T06:24:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:24:55] thinking

**Committing changes with test note**
[2025-10-06T06:24:56] exec bash -lc 'git add -A' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:24:57] bash -lc 'git add -A' succeeded in 697ms:

[2025-10-06T06:24:57] tokens used: 102,175
[2025-10-06T06:24:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:24:59] thinking

**Committing changes**
[2025-10-06T06:25:00] exec bash -lc 'git commit -m "SUPERVISOR: CLI H3 plan guidance + vectorization baseline prep - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:25:00] bash -lc 'git commit -m "SUPERVISOR: CLI H3 plan guidance + vectorization baseline prep - tests: not run"' succeeded in 734ms:
[feature/spec-based-2 f0bb461] SUPERVISOR: CLI H3 plan guidance + vectorization baseline prep - tests: not run
 5 files changed, 76 insertions(+), 105 deletions(-)
[2025-10-06T06:25:00] tokens used: 102,402
[2025-10-06T06:25:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:25:11] thinking

**Analyzing unexpected commit deletions**
[2025-10-06T06:25:12] exec bash -lc 'git show HEAD --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:25:13] bash -lc 'git show HEAD --stat' succeeded in 1.12s:
commit f0bb461854d1452e41a319c226e7f08eced28aa1
Author: ollie <ohoidn@slac.stanford.edu>
Date:   Sun Oct 5 23:25:00 2025 -0700

    SUPERVISOR: CLI H3 plan guidance + vectorization baseline prep - tests: not run

 docs/fix_plan.md                    |   4 +-
 galph_memory.md                     |   9 +++
 input.md                            | 156 ++++++++++++++----------------------
 plans/active/cli-noise-pix0/plan.md |   4 +-
 plans/active/vectorization.md       |   8 +-
 5 files changed, 76 insertions(+), 105 deletions(-)
[2025-10-06T06:25:13] tokens used: 103,011
[2025-10-06T06:25:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:25:16] thinking

**Pushing rewritten input.md to remote**
[2025-10-06T06:25:16] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:25:18] bash -lc 'git push' succeeded in 2.22s:
To github.com:hoidn/nanoBragg.git
   15fdec5..f0bb461  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T06:25:18] tokens used: 103,379
[2025-10-06T06:25:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:25:20] thinking

**Verifying clean working tree**
[2025-10-06T06:25:21] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T06:25:21] bash -lc 'git status --short' succeeded in 866ms:

[2025-10-06T06:25:21] tokens used: 103,638
[2025-10-06T06:25:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization


[2025-10-06T06:25:43] thinking

**Composing final status update**

I'll summarize the key updates clearly, referencing plan files and logs, evaluate Ralph's recent commit, note that tests were not run, and provide a concise next steps list with numeric suggestions for progressing.
[2025-10-06T06:25:44] codex

- Reframed the lattice investigation in `[CLI-FLAGS-003]` so Phase H3 now mandates manual `sincg(M_PI*h, Na)` reproduction and hypothesis logging before any simulator edits (`docs/fix_plan.md:448`, `plans/active/cli-noise-pix0/plan.md:100`), with matching march orders captured in `input.md:1-140`.
- Logged today’s supervisory context and follow-ups in `galph_memory.md:1051`, keeping the evidence trail for the sincg diagnosis intact.
- Strengthened the vectorization roadmap by requiring reusable tricubic/absorption benchmark harnesses in Phase A (`plans/active/vectorization.md:1-60`, `docs/fix_plan.md:920`), so baseline timing data will be reproducible once CLI parity closes.
- Reviewed Ralph’s latest evidence commit (ce28187) and confirmed it was a productive trace-only pass isolating the lattice factor gap—no regressions detected.
- Tests: not run (evidence-planning loop only).

Next steps:
1. Execute the new Do Now in `input.md`—rerun `trace_harness.py`, capture `trace_py_after_H3.log`, compute the manual sincg table, and append results to `phase_h/implementation_notes.md`.
2. Once the manual evidence confirms the `(h-h0)` bug, draft the simulator fix/test approach so Phase H4 parity rerun can proceed immediately afterward.
[2025-10-06T06:25:47] tokens used: 190,967
[2025-10-06T06:25:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 188911e3a2bc3a48df5d92b85b29301670471136..0ad5c46d6b410392ad571b82fd1739b265124790
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,7 +455,7 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase H H2–H4: wire `detector.beam_vector` through `Simulator` to restore incident-beam parity, then diagnose remaining lattice deltas and archive metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive plan Phase H3 by replaying `reports/2025-10-cli-flags/phase_h/trace_harness.py`, reproducing the C `sincg(M_PI*h, Na)` values, and confirming the PyTorch lattice path still feeds `(h-h0)` (log hypotheses + proposed fix/test plan in `phase_h/implementation_notes.md`); (2) After correcting the lattice calculation, execute Phase H4 parity smoke (polarization disabled) and archive <0.5% `F_latt` deltas + <10× intensity gap under `phase_h/parity_after_lattice_fix/`, updating the Attempt log; (3) With lattice settled, resume Phase I polarization alignment (I1–I3) and the follow-on cleanup (e.g., removing `scaled.hkl.1`).
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -920,7 +920,7 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions:
-  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
+  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
   2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
   3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
 - Attempts History:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 937cde3bf26c90cf08451e54654d8047e89b49b1..0d00d29fcb0e84a457f18be6a4dac35b18a92e03
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -97,8 +97,8 @@
 | --- | --- | --- | --- |
 | H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
 | H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
-| H3 | Diagnose & fix residual lattice mismatch | [ ] | After confirming `incident_vec` via `phase_h/trace_harness.py`, diff `F_latt*`/`hkl_frac` against C (`nanoBragg.c` 3005-3178). Track hypotheses in `phase_h/implementation_notes.md` (suspect sincg arguments or Na/Nb/Nc scaling) while keeping vectorization/device neutrality intact. |
-| H4 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) with polarization disabled, confirm `F_latt` components within 0.5% and intensity gap <10×. Archive metrics under `phase_h/parity_after_lattice_fix/` and update docs/fix_plan Attempt log. |
+| H3 | Diagnose & fix residual lattice mismatch | [ ] | Re-run `phase_h/trace_harness.py` after H2, then reproduce the C-side `sincg(M_PI*h, Na)` numbers in a scratch harness (store under `phase_h/manual_sincg.md`). Inspect `src/nanobrag_torch/simulator.py` (lines ~210-225) to confirm the PyTorch path is using `(h-h0)` instead of the absolute fractional `h`; document findings plus any Na/Nb/Nc scaling checks in `phase_h/implementation_notes.md`. Close with a proposed fix/test plan that preserves vectorization + device neutrality before code edits begin. |
+| H4 | Validate lattice parity | [ ] | Once the fix is staged, rerun the supervisor command with polarization disabled; capture aligned traces, `F_latt` comparisons (<0.5% delta), and intensity ratios (<10×) under `phase_h/parity_after_lattice_fix/`. Update docs/fix_plan Attempt log with metrics and attach any targeted pytest node you leverage. |
 
 ### Phase I — Polarization Alignment (follow-up)
 Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d5947241fe00e39e9d564aa5b80e1f91defdb602..c4b3c61e6b7093edd3edc7b48dc6f69504e399a1
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -1,7 +1,7 @@
 ## Context
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
-- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).
+- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -11,8 +11,8 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
-| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
-| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |
+| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
+| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
 
 ### Phase B — Tricubic Vectorization Design
 Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
@@ -55,7 +55,7 @@
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
 | E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
-| E2 | Performance benchmark | [ ] | Extend (or create) `scripts/benchmarks/sample_tricubic_baseline.py` to compare pre/post timings; run for CPU & CUDA, storing CSV/JSON in `phase_e/perf_results.json`. |
+| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
 | E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |
 
 ### Phase F — Detector Absorption Vectorization

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   f0bb461..3c3b35d  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=23...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=23
Updating 3c3b35d..8d77152
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   3c3b35d..8d77152  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=23
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 8d77152..4e0e36e
Fast-forward
 docs/fix_plan.md                                   |  18 +
 .../phase_h/implementation_notes.md                |  55 ++
 reports/2025-10-cli-flags/phase_h/manual_sincg.md  |  21 +
 .../2025-10-cli-flags/phase_h/pytest_collect.log   | 637 +++++++++++++++++++++
 .../phase_h/trace_py_after_H3.log                  |  49 ++
 .../phase_h/trace_py_after_H3.stderr               |   2 +
 6 files changed, 782 insertions(+)
 create mode 100644 reports/2025-10-cli-flags/phase_h/manual_sincg.md
 create mode 100644 reports/2025-10-cli-flags/phase_h/pytest_collect.log
 create mode 100644 reports/2025-10-cli-flags/phase_h/trace_py_after_H3.log
 create mode 100644 reports/2025-10-cli-flags/phase_h/trace_py_after_H3.stderr
From github.com:hoidn/nanoBragg
   8d77152..4e0e36e  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 4e0e36e..3279ed9
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   4e0e36e..3279ed9  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=24
Ralph completed iteration 23; proceeding to 24
