Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=53
To github.com:hoidn/nanoBragg.git
   c0c8f46..b849205  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T22:47:50] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T22:47:50] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: any pytest command included here is provided for verification / feedback in Ralph’s subsequent loop.
<Do Now guidelines>
Phase Gate (Evidence, supervisor-scoped): When you (galph) select an Evidence-phase task, focus on information collection and do not change the implementation or introduce new tests (with the exception of verification scripts). This gate applies only to galph. Ralph is exempt.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T22:47:53] thinking

**Preparing to run git pull with timeout**
[2025-10-06T22:47:53] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:47:56] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.38s:
Already up to date.
[2025-10-06T22:47:56] tokens used: 1,678

[2025-10-06T22:47:57] thinking

**Reading galph_memory.md**
[2025-10-06T22:47:58] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:47:59] bash -lc 'cat galph_memory.md' succeeded in 749ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T22:47:59] tokens used: 3,468

[2025-10-06T22:48:03] thinking

**Preparing to review required documents**
[2025-10-06T22:48:04] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:04] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 705ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T22:48:04] tokens used: 17,280

[2025-10-06T22:48:06] thinking

**Moving on to next spec**
[2025-10-06T22:48:06] exec bash -lc "sed -n '1,200p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:07] bash -lc "sed -n '1,200p' specs/spec-a.md" succeeded in 718ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T22:48:07] tokens used: 19,033

[2025-10-06T22:48:08] thinking

**Considering reading shards and core**
[2025-10-06T22:48:09] exec bash -lc "sed -n '1,200p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:10] bash -lc "sed -n '1,200p' specs/spec-a-core.md" succeeded in 703ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-06T22:48:10] tokens used: 19,338

[2025-10-06T22:48:12] thinking

**Reviewing initial documentation**
[2025-10-06T22:48:13] exec bash -lc "sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:13] bash -lc "sed -n '1,200p' arch.md" succeeded in 727ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T22:48:13] tokens used: 27,321

[2025-10-06T22:48:17] thinking

**Checking pytorch config docs**
[2025-10-06T22:48:18] exec bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:18] bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 717ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T22:48:18] tokens used: 29,805

[2025-10-06T22:48:20] thinking

**Opening debugging documentation**
[2025-10-06T22:48:20] exec bash -lc "sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:21] bash -lc "sed -n '1,200p' docs/debugging/debugging.md" succeeded in 715ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T22:48:21] tokens used: 31,662

[2025-10-06T22:48:23] thinking

**Inspecting fix_plan.md top lines**
[2025-10-06T22:48:24] exec bash -lc "sed -n '1,200p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:24] bash -lc "sed -n '1,200p' docs/fix_plan.md" succeeded in 727ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T22:48:24] tokens used: 34,133

[2025-10-06T22:48:26] thinking

**Noting available documentation**
[2025-10-06T22:48:27] exec bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:27] bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 741ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T22:48:27] tokens used: 37,506

[2025-10-06T22:48:31] thinking

**Preparing for deep code analysis**
[2025-10-06T22:48:31] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:32] bash -lc 'ls plans/active' succeeded in 831ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T22:48:32] tokens used: 40,039

[2025-10-06T22:48:35] thinking

**Reviewing CLI-FLAGS-003 plan**
[2025-10-06T22:48:36] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:36] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 694ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
[2025-10-06T22:48:36] tokens used: 40,908

[2025-10-06T22:48:38] thinking

**Reviewing relevant documentation**
[2025-10-06T22:48:39] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:40] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 723ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T22:48:40] tokens used: 43,904

[2025-10-06T22:48:43] thinking

**Preparing for feature and test analysis**
[2025-10-06T22:48:44] exec bash -lc 'rg "-nonoise" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:44] bash -lc 'rg "-nonoise" -n' succeeded in 764ms:
input.md:7:-n
input.md:7:-n
input.md:11:-n
input.md:32:-n
input.md:40:-n
getcif.com:110:-n
getcif.com:111:-n
loop.sh:52:-n
verify_rotation.py:41:-n
verify_rotation.py:53:-n
verify_rotation.py:62:-n
verify_rotation.py:140:-n
verify_rotation.py:143:-n
verify_rotation.py:146:-n
generate_all_comparisons.py:134:-n
src/nanobrag_torch/__main__.py:241:-n
src/nanobrag_torch/__main__.py:337:-n
src/nanobrag_torch/__main__.py:337:-n
src/nanobrag_torch/__main__.py:339:-n
src/nanobrag_torch/__main__.py:341:-n
[2025-10-06T22:48:44] tokens used: 47,216

[2025-10-06T22:48:47] thinking

**Investigating CLI noise option handling**
[2025-10-06T22:48:48] exec bash -lc "sed -n '300,420p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:49] bash -lc "sed -n '300,420p' src/nanobrag_torch/__main__.py" succeeded in 740ms:
    parser.add_argument('-oversample_thick', action='store_true',
                        help='Recompute absorption per subpixel')
    parser.add_argument('-oversample_polar', action='store_true',
                        help='Recompute polarization per subpixel')
    parser.add_argument('-oversample_omega', action='store_true',
                        help='Recompute solid angle per subpixel')
    parser.add_argument('-roi', nargs=4, type=int,
                        metavar=('xmin', 'xmax', 'ymin', 'ymax'),
                        help='Pixel index limits (inclusive, zero-based)')

    # Background
    parser.add_argument('-water', type=float, metavar='µm',
                        help='Water background size (µm)')

    # Source intensity
    parser.add_argument('-fluence', type=float, metavar='photons/m^2',
                        help='Fluence (photons/m^2)')
    parser.add_argument('-flux', type=float, metavar='photons/s',
                        help='Flux (photons/s)')
    parser.add_argument('-exposure', type=float, metavar='s',
[2025-10-06T22:48:49] tokens used: 51,300

[2025-10-06T22:48:51] thinking

**Checking -nonoise CLI behavior**
[2025-10-06T22:48:52] exec bash -lc 'rg "nonoise" src/nanobrag_torch -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:53] bash -lc 'rg "nonoise" src/nanobrag_torch -n' succeeded in 702ms:
src/nanobrag_torch/__main__.py:339:    parser.add_argument('-nonoise', action='store_true',
src/nanobrag_torch/__main__.py:711:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1185:        # CLI-FLAGS-003: Honor -nonoise flag
[2025-10-06T22:48:53] tokens used: 52,961
[2025-10-06T22:48:55] exec bash -lc "sed -n '1180,1220p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:48:56] bash -lc "sed -n '1180,1220p' src/nanobrag_torch/__main__.py" succeeded in 734ms:
            # If pgmscale not provided, default to 1.0 per spec
            pgmscale = config.get('pgmscale', 1.0) if config.get('pgmscale') is not None else 1.0
            write_pgm(config['pgmfile'], intensity.cpu().numpy(), pgmscale)
            print(f"Wrote PGM image to {config['pgmfile']}")

        # CLI-FLAGS-003: Honor -nonoise flag
        if config.get('noisefile') and not config.get('suppress_noise', False):
            # Generate and write noise image
            noise_config = NoiseConfig(
                seed=config.get('seed'),
                adc_offset=config.get('adc', 40.0)
            )
            # For noise generation, we need to handle ROI properly (AT-CLI-005)
            # Only apply noise and ADC to pixels inside ROI
            # First, create a mask for where intensity > 0 (inside ROI)
            roi_mask = intensity > 0

            # Generate noise for the entire image (but without readout noise)
            noisy, overloads = generate_poisson_noise(
                intensity,
[2025-10-06T22:48:56] tokens used: 53,291

[2025-10-06T22:48:59] thinking

**Investigating config and CLI flags**
[2025-10-06T22:49:00] exec bash -lc 'rg "pix0_vector" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:01] bash -lc 'rg "pix0_vector" -n src/nanobrag_torch' succeeded in 778ms:
src/nanobrag_torch/__main__.py:187:    parser.add_argument('-pix0_vector', nargs=3, type=float,
src/nanobrag_torch/__main__.py:190:    parser.add_argument('-pix0_vector_mm', nargs=3, type=float,
src/nanobrag_torch/__main__.py:462:            args.pix0_vector, args.pix0_vector_mm]):
src/nanobrag_torch/__main__.py:557:    if args.pix0_vector and args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:558:        raise ValueError("Cannot specify both -pix0_vector and -pix0_vector_mm simultaneously")
src/nanobrag_torch/__main__.py:560:    if args.pix0_vector:
src/nanobrag_torch/__main__.py:561:        config['custom_pix0_vector'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:562:        # pix0_vector is in meters, convert to config
src/nanobrag_torch/__main__.py:563:        config['pix0_override_m'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:564:    elif args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:566:        config['pix0_override_m'] = tuple(x * 0.001 for x in args.pix0_vector_mm)
src/nanobrag_torch/__main__.py:567:        config['custom_pix0_vector'] = config['pix0_override_m']
src/nanobrag_torch/simulator.py:1200:                # Output pix0_vector first
src/nanobrag_torch/simulator.py:1201:                pix0 = self.detector.pix0_vector
src/nanobrag_torch/simulator.py:1202:                print(f"TRACE_PY: pix0_vector_meters {pix0[0].item():.15g} {pix0[1].item():.15g} {pix0[2].item():.15g}")
src/nanobrag_torch/models/detector.py.backup:103:        # Calculate and cache pix0_vector (position of first pixel)
src/nanobrag_torch/models/detector.py.backup:104:        self._calculate_pix0_vector()
src/nanobrag_torch/models/detector.py.backup:113:        self._cached_pix0_vector = self.pix0_vector.clone()
src/nanobrag_torch/models/detector.py.backup:197:        # Recalculate pix0_vector when geometry changes
src/nanobrag_torch/models/detector.py.backup:198:        self._calculate_pix0_vector()
[2025-10-06T22:49:01] tokens used: 53,980

[2025-10-06T22:49:07] thinking

**Verifying CLI flag handling and plan status**
[2025-10-06T22:49:08] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:08] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 744ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T22:49:08] tokens used: 98,337
[2025-10-06T22:49:11] exec bash -lc "sed -n '448,640p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:11] bash -lc "sed -n '448,640p' docs/fix_plan.md" succeeded in 729ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
 - Next Actions (2025-11-07 refresh, amended 2025-11-08):
  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-06T22:49:11] tokens used: 98,596

[2025-10-06T22:49:16] thinking

**Analyzing progress on long-term goals**

I’m reviewing the current status of key plans related to CLI-FLAGS-003 and scaling parity, focusing on understanding code issues that block running the parallel test command with -nonoise and -pix0. There’s a notable mismatch in the scattering vector possibly caused by double subtraction, so I’m gathering details to pinpoint root causes and next steps. I’ll also check the vectorization plan and related documentation for any updates or gaps.
[2025-10-06T22:49:17] exec bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:18] bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' succeeded in 817ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
1318:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-06T22:49:18] tokens used: 101,915
[2025-10-06T22:49:20] exec bash -lc "sed -n '1318,1460p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:21] bash -lc "sed -n '1318,1460p' docs/fix_plan.md" succeeded in 739ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_planning (Phase A evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions:
  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
  2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
  3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * (pending) — Capture Phase A baseline artifacts and update this log.
- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.
- Exit Criteria (quote thresholds from spec):
  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).
[2025-10-06T22:49:21] tokens used: 102,198

[2025-10-06T22:49:30] thinking

**Analyzing CLI parity issue causes**

I’m digging into the CLI parity problems linked to the F_latt mismatch and Δk discrepancy. To understand this, I’m focusing on investigating relevant harness scripts that might be subtracting pix0 twice, which could explain the 6-unit Δk difference noted in the plan. I want to confirm whether this mismatch stems from the harness or elsewhere by reviewing the detailed harness code files.
[2025-10-06T22:49:31] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:32] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py" succeeded in 813ms:
#!/usr/bin/env python3
"""
Phase K3f2: PyTorch base lattice trace harness
Emits TRACE_PY_BASE lines matching C baseline for comparison.

CRITICAL: Uses detector.get_pixel_coords() directly as the sample→pixel vector.
Do NOT subtract pix0_vector because coordinates already include that origin offset.
"""

import os
import sys
import torch
import argparse
from pathlib import Path

# Ensure editable install is used
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent.parent / "src"))

os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

[2025-10-06T22:49:32] tokens used: 104,334

[2025-10-06T22:49:37] thinking

**Planning deep analysis and hypothesis formation**
[2025-10-06T22:49:37] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/base_lattice' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:38] bash -lc 'ls reports/2025-10-cli-flags/phase_k/base_lattice' succeeded in 756ms:
README.md
c_stdout.txt
compare_traces.py
metadata.json
run_c_trace.sh
summary.md
trace_harness.py
trace_py.log
[2025-10-06T22:49:38] tokens used: 107,685

[2025-10-06T22:49:41] thinking

**Inspecting trace_py.log content**
[2025-10-06T22:49:41] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:42] bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/summary.md' succeeded in 751ms:
======================================================================
Phase K3f3: Base Lattice Trace Comparison
======================================================================
C trace:  /home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt
Py trace: /home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log

======================================================================
RECIPROCAL VECTORS (Å⁻¹, λ-scaled)
======================================================================
  a_star: DIVERGE
    C:      [-0.0290511, -0.0293959, 0.0107499]
    Py:     [-1.177003215, -1.190972323, 0.435530564]
    Delta:  [1.147952115, 1.161576423, 0.424780664] (max=1.161576423)
    Ratio:  [40.51492766, 40.51491273, 40.51484795]

  b_star: DIVERGE
    C:      [-0.00312639, 0.0104376, -0.0328567]
    Py:     [-0.126665578, 0.4228804311, -1.331186015]
    Delta:  [0.123539188, 0.4124428311, 1.298329315] (max=1.298329315)
    Ratio:  [40.5149639, 40.51510224, 40.51490305]
[2025-10-06T22:49:42] tokens used: 107,885

[2025-10-06T22:49:53] thinking

**Analyzing unit scale discrepancies**
[2025-10-06T22:49:53] exec bash -lc "sed -n '1,200p' src/nanobrag_torch/io/mosflm.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:49:54] bash -lc "sed -n '1,200p' src/nanobrag_torch/io/mosflm.py" succeeded in 972ms:
"""MOSFLM matrix file I/O utilities.

This module provides functions for reading MOSFLM-style orientation matrices,
which contain reciprocal lattice vectors scaled by wavelength.
"""

import numpy as np
from pathlib import Path
from typing import Tuple, Union


def read_mosflm_matrix(filepath: Union[str, Path], wavelength_A: float) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    """Read MOSFLM A matrix file and extract reciprocal lattice vectors.

    The MOSFLM A matrix format contains 9 values (3x3 matrix) where each row
    is a reciprocal lattice vector (a*, b*, c*) in units of Å^-1·(1/λ_Å).

    C-Code Implementation Reference (from nanoBragg.c, lines 3135-3148):
    ```c
    if(matfilename != NULL)
[2025-10-06T22:49:54] tokens used: 109,807

[2025-10-06T22:50:05] thinking

**Analyzing scale factor and vector discrepancies**

I'm sorting through how scale factors relate to wavelength units and noticing a big mismatch between pyro's and C's real vectors. This suggests the `Crystal` class in pyro might be misapplying unit conversions or using incorrect input data, so I'll check the `CrystalConfig` dataclass in the config file to pinpoint expected reciprocal vector fields.
[2025-10-06T22:50:06] exec bash -lc "sed -n '1,220p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:07] bash -lc "sed -n '1,220p' src/nanobrag_torch/config.py" succeeded in 906ms:
"""
Configuration dataclasses for nanoBragg PyTorch implementation.

This module defines strongly-typed configuration objects that are intended to
replace the large set of local variables and command-line parsing logic found
in the original C main() function. Each dataclass will correspond to a physical
component of the simulation (Crystal, Detector, Beam).

For a detailed mapping of these dataclass fields to the original nanoBragg.c 
command-line flags, including implicit conventions and common pitfalls, see:
docs/development/c_to_pytorch_config_map.md

C-Code Implementation Reference (from nanoBragg.c):
The configuration is currently handled by a large argument-parsing loop
in main(). The future dataclasses will encapsulate the variables set
in this block.

Representative examples from nanoBragg.c (lines 506-1101):

// Crystal Parameters
[2025-10-06T22:50:07] tokens used: 112,236

[2025-10-06T22:50:10] thinking

**Analyzing type compatibility in CrystalConfig**
[2025-10-06T22:50:11] exec bash -lc "sed -n '1,260p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:11] bash -lc "sed -n '1,260p' src/nanobrag_torch/models/crystal.py" succeeded in 723ms:
"""
Crystal model for nanoBragg PyTorch implementation.

This module defines the Crystal class responsible for managing unit cell,
orientation, and structure factor data.

NOTE: The default parameters in this file are configured to match the 'simple_cubic'
golden test case, which uses a 10 Å unit cell and a 500×500×500 cell crystal size.
"""

from typing import Optional, Tuple

import math
import torch

from ..config import CrystalConfig, BeamConfig
from ..utils.geometry import angles_to_rotation_matrix
from ..io.hkl import read_hkl_file, try_load_hkl_or_fdump


[2025-10-06T22:50:11] tokens used: 114,979

[2025-10-06T22:50:14] thinking

**Searching for compute_cell_tensors method**
[2025-10-06T22:50:15] exec bash -lc 'rg "compute_cell_tensors" -n src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:15] bash -lc 'rg "compute_cell_tensors" -n src/nanobrag_torch/models/crystal.py' succeeded in 735ms:
412:    def compute_cell_tensors(self) -> dict:
762:    def _compute_cell_tensors_cached(self):
764:        Cached version of compute_cell_tensors to avoid redundant calculations.
772:        return self.compute_cell_tensors()
777:        return self._compute_cell_tensors_cached()["a"]
782:        return self._compute_cell_tensors_cached()["b"]
787:        return self._compute_cell_tensors_cached()["c"]
792:        return self._compute_cell_tensors_cached()["a_star"]
797:        return self._compute_cell_tensors_cached()["b_star"]
802:        return self._compute_cell_tensors_cached()["c_star"]
807:        return self._compute_cell_tensors_cached()["V"]
822:        1. Static missetting rotation (already applied to reciprocal vectors in compute_cell_tensors)
[2025-10-06T22:50:15] tokens used: 117,707
[2025-10-06T22:50:18] exec bash -lc "sed -n '412,650p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:19] bash -lc "sed -n '412,650p' src/nanobrag_torch/models/crystal.py" succeeded in 791ms:
    def compute_cell_tensors(self) -> dict:
        """
        Calculate real and reciprocal space lattice vectors from cell parameters.

        This is the central, differentiable function for all geometry calculations.
        Uses the nanoBragg.c convention to convert cell parameters (a,b,c,α,β,γ)
        to real-space and reciprocal-space lattice vectors.

        This method now supports general triclinic cells and maintains full
        differentiability for all six cell parameters. The computation graph
        is preserved for gradient-based optimization.

        The implementation follows the nanoBragg.c default orientation convention:
        - a* is placed purely along the x-axis
        - b* is placed in the x-y plane
        - c* fills out 3D space

        C-Code Implementation Reference (from nanoBragg.c):

        Volume calculation from cell parameters (lines 1798-1808):
[2025-10-06T22:50:19] tokens used: 118,058

[2025-10-06T22:50:22] thinking

**Examining unit conversions for vectors**
[2025-10-06T22:50:23] exec bash -lc "sed -n '760,840p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:24] bash -lc "sed -n '760,840p' src/nanobrag_torch/models/crystal.py" succeeded in 723ms:
        }

    def _compute_cell_tensors_cached(self):
        """
        Cached version of compute_cell_tensors to avoid redundant calculations.

        Note: For differentiability, we cannot use .item() or create cache keys
        from tensor values. Instead, we simply recompute when needed, relying
        on PyTorch's own computation graph caching.
        """
        # For now, just compute directly - PyTorch will handle computation graph caching
        # A more sophisticated caching mechanism that preserves gradients could be added later
        return self.compute_cell_tensors()

    @property
    def a(self) -> torch.Tensor:
        """Real-space lattice vector a (Angstroms)."""
        return self._compute_cell_tensors_cached()["a"]

    @property
[2025-10-06T22:50:24] tokens used: 121,456

[2025-10-06T22:50:33] thinking

**Analyzing unit inconsistencies in vectors**

I'm untangling confusion about unit mismatches between Angstroms and meters in vector values, trying to reconcile printed outputs with documented units by considering conversion factors and planning to run a quick Python check in the proper environment to confirm what `Crystal.a` actually returns.
[2025-10-06T22:50:36] exec bash -lc "PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A, B, C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    N_cells=(36,47,29),
    phi_start_deg=0.0,
    osc_range_deg=0.1,
    phi_steps=10,
    spindle_axis=(-1.0, 0.0, 0.0),
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('a:', crystal.a)
print('b:', crystal.b)
print('c:', crystal.c)
print('norm a:', crystal.a.norm())
print('a_star:', crystal.a_star)
print('a_star norm:', crystal.a_star.norm())
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:37] bash -lc "PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A, B, C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    N_cells=(36,47,29),
    phi_start_deg=0.0,
    osc_range_deg=0.1,
    phi_steps=10,
    spindle_axis=(-1.0, 0.0, 0.0),
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('a:', crystal.a)
print('b:', crystal.b)
print('c:', crystal.c)
print('norm a:', crystal.a.norm())
print('a_star:', crystal.a_star)
print('a_star norm:', crystal.a_star.norm())
PY
" exited 134 in 1.19s:
OMP: Error #15: Initializing libomp.dylib, but found libomp.dylib already initialized.
OMP: Hint This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://openmp.llvm.org/
bash: line 32:  3120 Abort trap: 6              PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A, B, C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    N_cells=(36,47,29),
    phi_start_deg=0.0,
    osc_range_deg=0.1,
[2025-10-06T22:50:37] tokens used: 123,574

[2025-10-06T22:50:39] thinking

**Setting environment variable for run**
[2025-10-06T22:50:42] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A, B, C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    N_cells=(36,47,29),
    phi_start_deg=0.0,
    osc_range_deg=0.1,
    phi_steps=10,
    spindle_axis=(-1.0, 0.0, 0.0),
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('a:', crystal.a)
print('b:', crystal.b)
print('c:', crystal.c)
print('norm a:', crystal.a.norm())
print('a_star:', crystal.a_star)
print('a_star norm:', crystal.a_star.norm())
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:44] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A, B, C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    N_cells=(36,47,29),
    phi_start_deg=0.0,
    osc_range_deg=0.1,
    phi_steps=10,
    spindle_axis=(-1.0, 0.0, 0.0),
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('a:', crystal.a)
print('b:', crystal.b)
print('c:', crystal.c)
print('norm a:', crystal.a.norm())
print('a_star:', crystal.a_star)
print('a_star norm:', crystal.a_star.norm())
PY
" succeeded in 2.81s:
a: tensor([-0.0006, -0.0009, -0.0002], dtype=torch.float64)
b: tensor([-4.6587e-04,  2.9062e-05, -1.1795e-03], dtype=torch.float64)
c: tensor([ 0.0009, -0.0010, -0.0004], dtype=torch.float64)
norm a: tensor(0.0011, dtype=torch.float64)
a_star: tensor([-1.1770, -1.1910,  0.4355], dtype=torch.float64)
a_star norm: tensor(1.7302, dtype=torch.float64)
[2025-10-06T22:50:44] tokens used: 125,587

[2025-10-06T22:50:51] thinking

**Analyzing unit inconsistencies in Crystal.a**
[2025-10-06T22:50:55] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A, B, C = read_mosflm_matrix('A.mat', wavelength)
import numpy as np
A=np.array(A)
B=np.array(B)
C=np.array(C)
V_star = np.dot(A, np.cross(B, C))
V = 1.0/V_star
print('V_star', V_star)
print('V', V)
print('norm A', np.linalg.norm(A))
print('expected cell length', np.linalg.norm(np.cross(B,C))*V)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:50:57] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A, B, C = read_mosflm_matrix('A.mat', wavelength)
import numpy as np
A=np.array(A)
B=np.array(B)
C=np.array(C)
V_star = np.dot(A, np.cross(B, C))
V = 1.0/V_star
print('V_star', V_star)
print('V', V)
print('norm A', np.linalg.norm(A))
print('expected cell length', np.linalg.norm(np.cross(B,C))*V)
PY
" succeeded in 1.90s:
V_star 4.051493406725384e-05
V 24682.256630111344
norm A 0.042704145351856106
expected cell length 26.75138761703569
[2025-10-06T22:50:57] tokens used: 127,304

[2025-10-06T22:51:03] thinking

**Analyzing unit consistency in cell parameter calculations**
[2025-10-06T22:51:04] exec bash -lc "sed -n '650,920p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:51:05] bash -lc "sed -n '650,920p' src/nanobrag_torch/models/crystal.py" succeeded in 786ms:
                if isinstance(angle, torch.Tensor):
                    # Already a tensor - just convert dtype/device while preserving gradients
                    angle_tensor = angle.to(dtype=self.dtype, device=self.device)
                else:
                    # Scalar - create new tensor
                    angle_tensor = torch.tensor(angle, dtype=self.dtype, device=self.device)
                misset_rad.append(torch.deg2rad(angle_tensor))
            R_misset = angles_to_rotation_matrix(misset_rad[0], misset_rad[1], misset_rad[2])
            a_star = rotate_umat(a_star, R_misset)
            b_star = rotate_umat(b_star, R_misset)
            c_star = rotate_umat(c_star, R_misset)

        # Generate real-space vectors from (possibly rotated) reciprocal vectors
        # Cross products
        a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)
        b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)
        c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)

        # C-code implementation for user-supplied cell (nanoBragg.c lines 2072-2080):
        # When cell parameters are user-supplied, the C code rescales cross products
[2025-10-06T22:51:05] tokens used: 128,015

[2025-10-06T22:51:14] thinking

**Analyzing volume calculation in compute_cell_tensors**
[2025-10-06T22:51:21] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('V (Angstrom"'^3) ='"', crystal.V)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:51:24] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength = 0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('V (Angstrom"'^3) ='"', crystal.V)
PY
" succeeded in 2.81s:
V (Angstrom^3) = tensor(1.0000e-06, dtype=torch.float64)
[2025-10-06T22:51:24] tokens used: 131,205

[2025-10-06T22:51:30] thinking

**Investigating volume unit discrepancy**
[2025-10-06T22:51:31] exec bash -lc 'rg "1e-10" -n src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:51:31] bash -lc 'rg "1e-10" -n src/nanobrag_torch/models/crystal.py' exited 1 in 733ms:

[2025-10-06T22:51:31] tokens used: 132,706

[2025-10-06T22:51:34] thinking

**Investigating V value computation**
[2025-10-06T22:51:34] exec bash -lc "rg '\"V\"' -n src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:51:35] bash -lc "rg '\"V\"' -n src/nanobrag_torch/models/crystal.py" succeeded in 746ms:
487:            - "V": Unit cell volume (Angstroms^3)
759:            "V": V,
807:        return self._compute_cell_tensors_cached()["V"]
1087:        V = vectors["V"]
[2025-10-06T22:51:35] tokens used: 132,955

[2025-10-06T22:51:38] thinking

**Investigating volume computation and clamping**
[2025-10-06T22:51:40] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
config = CrystalConfig(cell_a=1, cell_b=1, cell_c=1, cell_alpha=90, cell_beta=90, cell_gamma=90)
crystal = Crystal(config=config, dtype=torch.float64)
print('cell_a', crystal.cell_a)
print('V retrieved', crystal.V)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:51:42] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
config = CrystalConfig(cell_a=1, cell_b=1, cell_c=1, cell_alpha=90, cell_beta=90, cell_gamma=90)
crystal = Crystal(config=config, dtype=torch.float64)
print('cell_a', crystal.cell_a)
print('V retrieved', crystal.V)
PY
" succeeded in 2.54s:
cell_a tensor(1., dtype=torch.float64)
V retrieved tensor(1., dtype=torch.float64)
[2025-10-06T22:51:42] tokens used: 133,454

[2025-10-06T22:51:47] thinking

**Analyzing cross product units and volume calculations**
[2025-10-06T22:51:49] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal

wavelength = 0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
vecs = crystal.compute_cell_tensors()
for k,v in vecs.items():
    print(k, v)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:51:52] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal

wavelength = 0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
vecs = crystal.compute_cell_tensors()
for k,v in vecs.items():
    print(k, v)
PY
" succeeded in 2.49s:
a tensor([-0.0006, -0.0009, -0.0002], dtype=torch.float64)
b tensor([-4.6587e-04,  2.9062e-05, -1.1795e-03], dtype=torch.float64)
c tensor([ 0.0009, -0.0010, -0.0004], dtype=torch.float64)
a_star tensor([-1.1770, -1.1910,  0.4355], dtype=torch.float64)
b_star tensor([-0.1267,  0.4229, -1.3312], dtype=torch.float64)
c_star tensor([ 1.0518, -0.5807, -0.4297], dtype=torch.float64)
V tensor(1.0000e-06, dtype=torch.float64)
[2025-10-06T22:51:52] tokens used: 135,138

[2025-10-06T22:51:55] thinking

**Analyzing vector magnitude discrepancies**
[2025-10-06T22:51:57] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
import numpy as np
wavelength=0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
a_cross = np.cross(np.array(B), np.array(C))
print('b_star x c_star', a_cross)
print('norm', np.linalg.norm(a_cross))
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:51:58] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
import numpy as np
wavelength=0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
a_cross = np.cross(np.array(B), np.array(C))
print('b_star x c_star', a_cross)
print('norm', np.linalg.norm(a_cross))
PY
" succeeded in 1.35s:
b_star x c_star [-0.00058164 -0.00088613 -0.00022616]
norm 0.0010838307055117517
[2025-10-06T22:51:58] tokens used: 136,303

[2025-10-06T22:52:08] thinking

**Analyzing volume scaling discrepancy**
[2025-10-06T22:52:11] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
cell_a = torch.tensor(1.0, dtype=torch.float64)
cell_b = torch.tensor(1.0, dtype=torch.float64)
cell_c = torch.tensor(1.0, dtype=torch.float64)
alpha = torch.tensor(90.0, dtype=torch.float64)
beta = torch.tensor(90.0, dtype=torch.float64)
gamma = torch.tensor(90.0, dtype=torch.float64)
alpha_rad = torch.deg2rad(alpha)
beta_rad = torch.deg2rad(beta)
gamma_rad = torch.deg2rad(gamma)
aavg = (alpha_rad + beta_rad + gamma_rad)/2.0
skew = torch.sin(aavg) * torch.sin(aavg-alpha_rad) * torch.sin(aavg-beta_rad) * torch.sin(aavg-gamma_rad)
print('skew', skew)
skew = torch.abs(skew).clamp_min(1e-12)
V = 2.0 * cell_a * cell_b * cell_c * torch.sqrt(skew)
print('V before clamp', V)
V = V.clamp_min(1e-6)
print('V after clamp', V)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:52:13] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
cell_a = torch.tensor(1.0, dtype=torch.float64)
cell_b = torch.tensor(1.0, dtype=torch.float64)
cell_c = torch.tensor(1.0, dtype=torch.float64)
alpha = torch.tensor(90.0, dtype=torch.float64)
beta = torch.tensor(90.0, dtype=torch.float64)
gamma = torch.tensor(90.0, dtype=torch.float64)
alpha_rad = torch.deg2rad(alpha)
beta_rad = torch.deg2rad(beta)
gamma_rad = torch.deg2rad(gamma)
aavg = (alpha_rad + beta_rad + gamma_rad)/2.0
skew = torch.sin(aavg) * torch.sin(aavg-alpha_rad) * torch.sin(aavg-beta_rad) * torch.sin(aavg-gamma_rad)
print('skew', skew)
skew = torch.abs(skew).clamp_min(1e-12)
V = 2.0 * cell_a * cell_b * cell_c * torch.sqrt(skew)
print('V before clamp', V)
V = V.clamp_min(1e-6)
print('V after clamp', V)
PY
" succeeded in 1.81s:
skew tensor(0.2500, dtype=torch.float64)
V before clamp tensor(1.0000, dtype=torch.float64)
V after clamp tensor(1.0000, dtype=torch.float64)
[2025-10-06T22:52:13] tokens used: 138,518

[2025-10-06T22:52:17] thinking

**Analyzing value inconsistency and computation**
[2025-10-06T22:52:19] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
wavelength = 0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
vecs = crystal.compute_cell_tensors()
import torch
V_actual = torch.dot(vecs['a'], torch.cross(vecs['b'], vecs['c']))
print('V_actual', V_actual)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:52:22] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
wavelength = 0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0,
    cell_b=1.0,
    cell_c=1.0,
    cell_alpha=90.0,
    cell_beta=90.0,
    cell_gamma=90.0,
    mosflm_a_star=A,
    mosflm_b_star=B,
    mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
vecs = crystal.compute_cell_tensors()
import torch
V_actual = torch.dot(vecs['a'], torch.cross(vecs['b'], vecs['c']))
print('V_actual', V_actual)
PY
" succeeded in 2.87s:
<stdin>:21: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
Please either pass the dim explicitly or simply use torch.linalg.cross.
The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at /Users/runner/work/pytorch/pytorch/pytorch/aten/src/ATen/native/Cross.cpp:66.)
V_actual tensor(1.6415e-09, dtype=torch.float64)
[2025-10-06T22:52:22] tokens used: 140,288

[2025-10-06T22:52:38] thinking

**Analyzing unit inconsistencies in lattice vectors**

I'm untangling a tricky mismatch of units involving crystal cell vectors and volumes—meters versus Angstroms—and how the real-space vectors are computed after reading MOSFLM orientation. It seems the code leaves some variables like cell lengths and volume at defaults rather than recalculating them from MOSFLM data, causing real vector and Δk discrepancies. I'll need to find where MOSFLM matrices are parsed and verify if length recalculations are triggered properly.
[2025-10-06T22:52:40] exec bash -lc 'rg "mosflm" src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:52:41] bash -lc 'rg "mosflm" src/nanobrag_torch/models/crystal.py' succeeded in 910ms:
            hasattr(self.config, "mosflm_a_star") and self.config.mosflm_a_star is not None
            and hasattr(self.config, "mosflm_b_star") and self.config.mosflm_b_star is not None
            and hasattr(self.config, "mosflm_c_star") and self.config.mosflm_c_star is not None
                self.config.mosflm_a_star,
                self.config.mosflm_b_star,
                self.config.mosflm_c_star,
        mosflm_provided = (
            hasattr(self.config, "mosflm_a_star") and self.config.mosflm_a_star is not None
            and hasattr(self.config, "mosflm_b_star") and self.config.mosflm_b_star is not None
            and hasattr(self.config, "mosflm_c_star") and self.config.mosflm_c_star is not None
        if not mosflm_provided:
[2025-10-06T22:52:41] tokens used: 141,983

[2025-10-06T22:52:48] thinking

**Analyzing lattice vector computation issues**

I'm seeing that pyro `Crystal` with MOSFLM orientation doesn't recalc cell lengths or volume, causing a big mismatch in vectors and resulting values. This explains the large Δk difference caused by incorrect vector scaling. Next, I'll check `pix0_vector_mm` support and look into loops in `_tricubic_interpolation` to prepare for vectorization improvements.
[2025-10-06T22:52:50] exec bash -lc 'rg "_tricubic_interpolation" -n src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:52:50] bash -lc 'rg "_tricubic_interpolation" -n src/nanobrag_torch/models/crystal.py' succeeded in 744ms:
216:            return self._tricubic_interpolation(h, k, l)
272:    def _tricubic_interpolation(
[2025-10-06T22:52:50] tokens used: 143,568
[2025-10-06T22:52:53] exec bash -lc "sed -n '272,412p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:52:53] bash -lc "sed -n '272,412p' src/nanobrag_torch/models/crystal.py" succeeded in 701ms:
    def _tricubic_interpolation(
        self, h: torch.Tensor, k: torch.Tensor, l: torch.Tensor  # noqa: E741
    ) -> torch.Tensor:
        """
        Tricubic interpolation of structure factors (AT-STR-002).

        C-Code Implementation Reference (from nanoBragg.c, lines 3152-3209):
        ```c
        if ( ((h-h_min+3)>h_range) ||
             (h-2<h_min)           ||
             ((k-k_min+3)>k_range) ||
             (k-2<k_min)           ||
             ((l-l_min+3)>l_range) ||
             (l-2<l_min)  ) {
            if(babble){
                babble=0;
                printf ("WARNING: out of range for three point interpolation: h,k,l,h0,k0,l0: %g,%g,%g,%d,%d,%d \n", h,k,l,h0,k0,l0);
                printf("WARNING: further warnings will not be printed! ");
            }
            F_cell = default_F;
[2025-10-06T22:52:53] tokens used: 143,750

[2025-10-06T22:53:07] thinking

**Analyzing vectorization and scaling discrepancies**

I’m gathering details on vector scaling issues between Pyro and C, focusing on MOSFLM matrix handling and unit mismatches causing 40x differences in lattice vector lengths; I plan to verify hypotheses about unit conversions and check C output logs to confirm these suspicions.
[2025-10-06T22:53:07] exec bash -lc 'head -n 60 reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:53:08] bash -lc 'head -n 60 reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt' succeeded in 914ms:
WARNING: auto-generating odet_vector
nanoBragg nanocrystal diffraction simulator - James Holton and Ken Frankel 5-17-17
custom convention selected.
pivoting detector around sample
TRACE_C:detector_convention=CUSTOM
TRACE_C:angles_rad=rotx:0 roty:0 rotz:0 twotheta:0
TRACE_C:beam_center_m=Xclose:0.000211818 Yclose:0.000217322 pixel_mm:0.172
TRACE_C:initial_fdet=0.999982004873912 -0.00599800002923425 -0.000118000000575132
TRACE_C:initial_sdet=-0.0059979996566955 -0.999969942765222 -0.0049129997187971
TRACE_C:initial_odet=-8.85282813644494e-05 0.00491361907271126 -0.999987924182263
TRACE_C:Fclose_m=0.217742295
TRACE_C:Sclose_m=0.21390708
TRACE_C:close_distance_m=0.231271826111781
TRACE_C:ratio=0.999987746654913
TRACE_C:distance_m=0.23127466
TRACE_C:term_fast_before_rot=-0.217738376699947 0.00130601829177553 2.56935909352306e-05
TRACE_C:term_slow_before_rot=0.00128301459240474 0.213900650544676 0.00105092542388871
TRACE_C:term_close_before_rot=-2.04740972936938e-05 0.00113638165576361 -0.231269033315361
TRACE_C:pix0_before_rotation=-0.216475836204836 0.216343050492215 -0.230192414300537
TRACE_C:pix0_after_rotz=-0.216475836204836 0.216343050492215 -0.230192414300537
[2025-10-06T22:53:08] tokens used: 146,761

[2025-10-06T22:53:12] thinking

**Noticing volume scaling factor**
[2025-10-06T22:53:13] exec bash -lc "sed -n '60,160p' reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:53:13] bash -lc "sed -n '60,160p' reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt" succeeded in 707ms:
TRACE:   a_star_cross_b_star = [0.000853648, -0.000988131, -0.000395128]
TRACE:   V_cell = 24682.3, V_star = 4.05149e-05
TRACE: After computing real-space vectors:
TRACE:   a = [-14.3563, -21.8718, -5.58202] |a| = 26.7514
TRACE:   b = [-11.4987, 0.71732, -29.1132] |b| = 31.31
TRACE:   c = [21.07, -24.3893, -9.75265] |c| = 33.6734
TRACE: Re-generating reciprocal vectors from real-space vectors:
TRACE:   Before re-generation: a_star = [-0.0290511, -0.0293959, 0.0107499] |a_star| = 0.0427041
TRACE:   Before re-generation: b_star = [-0.00312639, 0.0104376, -0.0328567] |b_star| = 0.0346162
TRACE:   Before re-generation: c_star = [0.0259604, -0.014333, -0.0106066] |c_star| = 0.0314941
TRACE:   Cross products: b_cross_c = [-717.047, -725.557, 265.331]
TRACE:   Cross products: c_cross_a = [-77.1664, 257.625, -810.977]
TRACE:   Cross products: a_cross_b = [640.762, -353.771, -261.795]
TRACE:   After re-generation: a_star = [-0.0290511, -0.0293959, 0.0107499] |a_star| = 0.0427041
TRACE:   After re-generation: b_star = [-0.00312639, 0.0104376, -0.0328567] |b_star| = 0.0346162
TRACE:   After re-generation: c_star = [0.0259604, -0.014333, -0.0106066] |c_star| = 0.0314941
Unit Cell: 26.7514 31.31 33.6734 88.687 71.5295 68.1375
Recp Cell: 0.0427041 0.0346162 0.0314941 83.8005 109.406 112.647
volume = 24682.3 A^3
real-space cell vectors (Angstrom):
[2025-10-06T22:53:13] tokens used: 148,431

[2025-10-06T22:53:18] thinking

**Analyzing vector scaling differences**
[2025-10-06T22:53:21] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
wavelength=0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
a_star = torch.tensor(A, dtype=torch.float64)
b_star = torch.tensor(B, dtype=torch.float64)
c_star = torch.tensor(C, dtype=torch.float64)
V_cell = 2.0 * 1 * 1 * 1 * torch.sqrt(torch.tensor(0.25, dtype=torch.float64))
b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)
print('bxc', b_star_cross_c_star)
print('V_cell', V_cell)
print('product', b_star_cross_c_star * V_cell)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:53:23] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.io.mosflm import read_mosflm_matrix
wavelength=0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
a_star = torch.tensor(A, dtype=torch.float64)
b_star = torch.tensor(B, dtype=torch.float64)
c_star = torch.tensor(C, dtype=torch.float64)
V_cell = 2.0 * 1 * 1 * 1 * torch.sqrt(torch.tensor(0.25, dtype=torch.float64))
b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)
print('bxc', b_star_cross_c_star)
print('V_cell', V_cell)
print('product', b_star_cross_c_star * V_cell)
PY
" succeeded in 1.67s:
bxc tensor([-0.0006, -0.0009, -0.0002], dtype=torch.float64)
V_cell tensor(1., dtype=torch.float64)
product tensor([-0.0006, -0.0009, -0.0002], dtype=torch.float64)
[2025-10-06T22:53:23] tokens used: 151,130

[2025-10-06T22:53:41] thinking

**Analyzing crystal cell parameter discrepancies**

I'm examining why the cell volume calculation stays at 1 in pyro while C computes a large reciprocal value, suspecting pyro doesn't update actual cell lengths from MOSFLM orientation. I’m considering hypotheses around missing recomputation of cell parameters and inconsistent scaling between pyro and C reciprocal vectors, aiming to clarify these inconsistencies through targeted verification steps.
[2025-10-06T22:53:44] exec bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength=0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0, cell_b=1.0, cell_c=1.0,
    cell_alpha=90.0, cell_beta=90.0, cell_gamma=90.0,
    mosflm_a_star=A, mosflm_b_star=B, mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('a_star', crystal.a_star)
print('b_star', crystal.b_star)
print('c_star', crystal.c_star)
print('cross(b_star, c_star)', torch.cross(crystal.b_star, crystal.c_star, dim=0))
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:53:47] bash -lc "KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY'
import torch
from nanobrag_torch.config import CrystalConfig
from nanobrag_torch.models.crystal import Crystal
from nanobrag_torch.io.mosflm import read_mosflm_matrix

wavelength=0.9768
A,B,C = read_mosflm_matrix('A.mat', wavelength)
config = CrystalConfig(
    cell_a=1.0, cell_b=1.0, cell_c=1.0,
    cell_alpha=90.0, cell_beta=90.0, cell_gamma=90.0,
    mosflm_a_star=A, mosflm_b_star=B, mosflm_c_star=C,
)
crystal = Crystal(config=config, dtype=torch.float64)
print('a_star', crystal.a_star)
print('b_star', crystal.b_star)
print('c_star', crystal.c_star)
print('cross(b_star, c_star)', torch.cross(crystal.b_star, crystal.c_star, dim=0))
PY
" succeeded in 2.58s:
a_star tensor([-1.1770, -1.1910,  0.4355], dtype=torch.float64)
b_star tensor([-0.1267,  0.4229, -1.3312], dtype=torch.float64)
c_star tensor([ 1.0518, -0.5807, -0.4297], dtype=torch.float64)
cross(b_star, c_star) tensor([-0.9547, -1.4546, -0.3712], dtype=torch.float64)
[2025-10-06T22:53:47] tokens used: 153,243

[2025-10-06T22:54:02] thinking

**Analyzing cross product discrepancies**

I'm investigating why the cross product computed from one set of vectors differs hugely from another, tracing it to how volume scaling and vector recomputation happen. It looks like the real cell lengths and volume need updating from the mosflm orientation for correct reciprocal vectors—I'm considering a fix that recalculates these based on actual cell measurements before moving on to the next step of generating a random coin flip in Python.
[2025-10-06T22:54:04] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:54:05] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 903ms:
tails
[2025-10-06T22:54:05] tokens used: 155,304

[2025-10-06T22:54:13] thinking

**Evaluating need to update plan**
[2025-10-06T22:54:14] exec bash -lc 'rg "K3f4" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:54:15] bash -lc 'rg "K3f4" -n plans/active/cli-noise-pix0/plan.md' succeeded in 714ms:
201:| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
[2025-10-06T22:54:15] tokens used: 155,859

[2025-10-06T22:54:46] thinking

**Updating plan with root cause and task statuses**

I'll update the existing plan to mark completed tasks as done, add a new task documenting the root cause of MOSFLM vector scaling issues, and revise the plan context and next actions to reference relevant docs and next steps for the fix. This includes patching task statuses, adding diagnostic summaries, and ensuring alignment with long-term goals and instructions.
[2025-10-06T22:54:57] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -16,2 +16,3 @@
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
@@ -197,6 +198,6 @@
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
 
[2025-10-06T22:54:57] apply_patch(auto_approved=true) exited 0 in 16ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T22:54:57] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..fa64eac71cf1b06be80e9a33fdc4b2308a77bfff
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,10 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:54:57] tokens used: 159,746
[2025-10-06T22:54:57] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..fa64eac71cf1b06be80e9a33fdc4b2308a77bfff
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,10 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:55:07] thinking

**Updating documentation and plan with new fix phase**

I'm updating `docs/fix_plan.md` to reflect the root cause and add a new Phase K3g focused on implementing the MOSFLM cell rescale fix in `Crystal.compute_cell_tensors`. This includes documenting the cause, specifying new tasks, and adjusting next actions to prepare for regression testing after the fix.
[2025-10-06T22:55:15] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -203,2 +203,13 @@
 
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+
 ### Phase L — Final Parity & Regression Sweep
[2025-10-06T22:55:15] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T22:55:15] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:55:15] tokens used: 162,900
[2025-10-06T22:55:15] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:55:19] thinking

**Updating next actions in docs**
[2025-10-06T22:55:24] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,6 +457,6 @@
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
[2025-10-06T22:55:24] apply_patch(auto_approved=true) exited 0 in 17ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T22:55:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:55:24] tokens used: 164,716
[2025-10-06T22:55:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:55:35] thinking

**Preparing input.md update instructions**

I'm gathering all the details needed to create the new `input.md`, focusing on the CLI-FLAGS-003 task and its related sub-tasks. I plan to specify the phase as Implementation since code changes are involved, include the exact test command with environment variables, and determine the current git branch name to complete the structured input for Ralph's next steps.
[2025-10-06T22:55:37] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:55:37] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 885ms:
feature/spec-based-2
[2025-10-06T22:55:37] tokens used: 166,353
[2025-10-06T22:55:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:55:46] thinking

**Outlining detailed feature branch plan**
[2025-10-06T22:56:00] exec bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so CLI command matches C
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Capture updated `base_lattice/summary.md` with the blocker description and drop a note in docs/fix_plan Attempts; rerun `trace_harness.py` + `compare_traces.py` to show latest deltas.
Priorities & Rationale:
- specs/spec-a-core.md §Geometry — C pipeline rescales `b*×c*` with `V_cell`, so PyTorch must mirror before converting to meters.
- golden_suite_generator/nanoBragg.c:3135-3210 (C trace) — authoritative reference for MOSFLM orientation handling.
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g) — documents root cause and required fix/test sequence.
- docs/fix_plan.md#cli-flags-003 — updated Next Actions demand MOSFLM real-vector rebuild + scaling test rerun.
- docs/development/c_to_pytorch_config_map.md — confirm detector pivot & unit expectations while editing Crystal geometry.
How-To Map:
- Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` (K3f4) with a Root Cause section before coding.
- Implement K3g1 inside `src/nanobrag_torch/models/crystal.py`: when `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors (`Å`), convert to meters, update reciprocal duals; add C reference block.
- Add coverage per K3g2 (e.g., new assertion in `tests/test_cli_scaling.py`) verifying PyTorch real vectors match C within 5e-4 after conversion to Å.
- Run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log` and `python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py` to confirm |Δh,k,l| < 5e-4.
- Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` and stash log in `phase_k/f_latt_fix/pytest_post_fix.log`.
Pitfalls To Avoid:
- Do not leave `V` at the placeholder value when MOSFLM vectors exist; recompute cell lengths before converting to meters.
- Keep tensor paths differentiable (no `.item()`/`.numpy()`); reuse existing tensors for device/dtype neutrality.
- Preserve metric duality (recalculate reciprocal vectors from real vectors using `V_actual`).
- Keep pix0 override precedence untouched (custom vectors still force SAMPLE pivot and ignore override).
- Maintain C-code docstring references per Core Rule #11 when touching `Crystal.compute_cell_tensors`.
- Run targeted pytest only once after code changes; no full suite.
- Ensure environment vars (`KMP_DUPLICATE_LIB_OK`, `NB_RUN_PARALLEL`, `NB_C_BIN`) are set before parity tests.
- Archive new artifacts under the existing `reports/2025-10-cli-flags/phase_k/` structure; do not create ad-hoc dirs.
- Avoid ad-hoc scripts; reuse `trace_harness.py` / `compare_traces.py` for parity evidence.
- Respect Protected Assets rule (no renaming docs/index-listed files).
Pointers:
- specs/spec-a-core.md (Geometry & Units)
- golden_suite_generator/nanoBragg.c:3135-3210
- plans/active/cli-noise-pix0/plan.md (Phase K3g table)
- docs/fix_plan.md#cli-flags-003
- scripts in reports/2025-10-cli-flags/phase_k/base_lattice/
Next Up: Phase K3g3 scaling rerun cleanup (if fix lands quickly) or pivot back to vectorization plan once CLI parity test passes.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:56:01] bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so CLI command matches C
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Capture updated `base_lattice/summary.md` with the blocker description and drop a note in docs/fix_plan Attempts; rerun `trace_harness.py` + `compare_traces.py` to show latest deltas.
Priorities & Rationale:
- specs/spec-a-core.md §Geometry — C pipeline rescales `b*×c*` with `V_cell`, so PyTorch must mirror before converting to meters.
- golden_suite_generator/nanoBragg.c:3135-3210 (C trace) — authoritative reference for MOSFLM orientation handling.
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g) — documents root cause and required fix/test sequence.
- docs/fix_plan.md#cli-flags-003 — updated Next Actions demand MOSFLM real-vector rebuild + scaling test rerun.
- docs/development/c_to_pytorch_config_map.md — confirm detector pivot & unit expectations while editing Crystal geometry.
How-To Map:
- Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` (K3f4) with a Root Cause section before coding.
- Implement K3g1 inside `src/nanobrag_torch/models/crystal.py`: when `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors (`Å`), convert to meters, update reciprocal duals; add C reference block.
- Add coverage per K3g2 (e.g., new assertion in `tests/test_cli_scaling.py`) verifying PyTorch real vectors match C within 5e-4 after conversion to Å.
- Run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log` and `python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py` to confirm |Δh,k,l| < 5e-4.
- Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` and stash log in `phase_k/f_latt_fix/pytest_post_fix.log`.
Pitfalls To Avoid:
- Do not leave `V` at the placeholder value when MOSFLM vectors exist; recompute cell lengths before converting to meters.
- Keep tensor paths differentiable (no `.item()`/`.numpy()`); reuse existing tensors for device/dtype neutrality.
- Preserve metric duality (recalculate reciprocal vectors from real vectors using `V_actual`).
- Keep pix0 override precedence untouched (custom vectors still force SAMPLE pivot and ignore override).
- Maintain C-code docstring references per Core Rule #11 when touching `Crystal.compute_cell_tensors`.
- Run targeted pytest only once after code changes; no full suite.
- Ensure environment vars (`KMP_DUPLICATE_LIB_OK`, `NB_RUN_PARALLEL`, `NB_C_BIN`) are set before parity tests.
- Archive new artifacts under the existing `reports/2025-10-cli-flags/phase_k/` structure; do not create ad-hoc dirs.
- Avoid ad-hoc scripts; reuse `trace_harness.py` / `compare_traces.py` for parity evidence.
- Respect Protected Assets rule (no renaming docs/index-listed files).
Pointers:
- specs/spec-a-core.md (Geometry & Units)
- golden_suite_generator/nanoBragg.c:3135-3210
- plans/active/cli-noise-pix0/plan.md (Phase K3g table)
- docs/fix_plan.md#cli-flags-003
- scripts in reports/2025-10-cli-flags/phase_k/base_lattice/
Next Up: Phase K3g3 scaling rerun cleanup (if fix lands quickly) or pivot back to vectorization plan once CLI parity test passes.
EOF
' succeeded in 874ms:

[2025-10-06T22:56:01] tokens used: 168,139
[2025-10-06T22:56:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:56:09] thinking

**Planning to expand input.md to required length**

I need to rewrite `input.md` completely to reach about 100-200 lines since it currently has only around 40 lines. To do this, I’ll add more granular bullet points, break down steps into smaller parts, and possibly add blank lines to increase line count, ensuring it meets the instructions properly.
[2025-10-06T22:56:55] exec bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so CLI parity command matches C outputs
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with the blocker description, rerun `trace_harness.py` + `compare_traces.py` to capture fresh deltas, and log the attempt in docs/fix_plan before pausing.

Priorities & Rationale:
- specs/spec-a-core.md §Geometry — Sets canonical sequence: derive real vectors from reciprocal ones, rescale with `V_cell`, convert to meters; our implementation must match this before φ rotations.
- golden_suite_generator/nanoBragg.c:3135-3210 — Shows the MOSFLM branch (remove wavelength, compute `b*×c*`, multiply by `V_cell≈2.4682×10''^4 Å''^3`, then convert to meters) that PyTorch currently skips.
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g) — Records the Δh≈6 finding and defines the fix/test checklist; stay aligned with the plan checkpoints.
- docs/fix_plan.md#cli-flags-003 — Next Actions now require MOSFLM rescale implementation plus scaling regression; we need to supply evidence to close Attempt #46.
- docs/development/c_to_pytorch_config_map.md — Confirms detector pivot + unit conventions when we touch `Crystal.compute_cell_tensors`; prevents regressions while editing geometry.
- docs/development/testing_strategy.md §2.5 — Parity matrix guidance; ensure pytest command uses `NB_RUN_PARALLEL=1` + C binary when re-running scaling.

How-To Map:
- Step 1: Extend `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with a Root Cause section (K3f4). Summarize that PyTorch leaves `V=1 Å''^3` when MOSFLM A* is supplied, whereas C recomputes `V_cell≈2.4682×10''^4 Å''^3` and rescales `b*×c*` accordingly.
- Step 2: In `src/nanobrag_torch/models/crystal.py`, update `compute_cell_tensors`:
  - Detect `mosflm_a_star/b_star/c_star`.
  - Convert to tensors (Å⁻¹) and compute cross products `b*×c*`, `c*×a*`, `a*×b*`.
  - Calculate `V_star = a*·(b*×c*)` and `V_cell = 1/V_star` (Å³).
  - Multiply cross products by `V_cell` to get real vectors in Å, then convert to meters (×1e-10) before storing.
  - Update `self.cell_a/b/c` tensors (Å) using the derived magnitudes to preserve downstream sample size logic.
  - Recalculate reciprocal vectors from the new real vectors using `V_actual = a·(b×c)` to maintain metric duality, mirroring nanoBragg.c lines 3190-3210.
  - Document the C reference block per Core Rule #11 directly above the new branch.
- Step 3: Ensure differentiability & device neutrality:
  - Use existing tensors (`self.dtype`, `self.device`).
  - Avoid `.item()` except for logging inside plan scripts; rely on tensor arithmetic.
  - Clear geometry cache if new tensors replace cached values.
- Step 4: Implement regression coverage (K3g2):
  - Add assertions inside `tests/test_cli_scaling.py` (or create `tests/test_cli_scaling_mosflm.py`) verifying that PyTorch real vectors (converted to Å) match stored expected values from C within 5e-4 for the supervisor command configuration.
  - Optional: load expected vectors from `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log` or hard-code the C values with comments referencing the artifact path.
- Step 5: Refresh parity harness artifacts:
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log`.
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py --c reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt --py reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md`.
  - Confirm |Δh|, |Δk|, |Δl| < 5e-4 at φ=0°.
- Step 6: Run targeted pytest (`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`) and stash the log under `reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log`.
- Step 7: Update `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` with new ratios (F_latt, polarization, I_final) and summarize the result in docs/fix_plan Attempt #46 once parity is confirmed.

Pitfalls To Avoid:
- Leaving `V` at the placeholder value when MOSFLM orientations are supplied; always recompute from A* vectors before converting units.
- Failing to update `self.cell_a/b/c` — sample clipping relies on real magnitudes in Å; leaving 1.0 will cause future inconsistencies.
- Breaking differentiability by using `.item()` or constructing new tensors on CPU while running on CUDA; reuse `type_as` / existing tensors.
- Accidentally altering pix0 override precedence (custom detector vectors must continue to force SAMPLE pivot and ignore `pix0_override`).
- Forgetting to regenerate reciprocal vectors from the corrected real vectors; metric duality must hold (`a·a* = 1` etc.).
- Skipping `KMP_DUPLICATE_LIB_OK=TRUE` or `NB_RUN_PARALLEL=1`; parity tests will fail or hang without them.
- Creating ad-hoc scripts/directories; reuse `reports/2025-10-cli-flags/phase_k` tooling and maintain Protected Assets.
- Running the full pytest suite; stick to targeted node + parity harness to keep loop within scope.
- Neglecting to archive new trace outputs under `base_lattice/post_fix/` with timestamps; we need reproducibility for audit.
- Forgetting to add/update Core Rule #11 C reference around the new MOSFLM branch.

Pointers:
- specs/spec-a-core.md (Units & Geometry expectations)
- docs/architecture/pytorch_design.md §§2.3-2.4 (Crystal pipeline overview)
- golden_suite_generator/nanoBragg.c:3135-3210 (MOSFLM handling reference)
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g tables)
- docs/fix_plan.md#cli-flags-003 (Next Actions + Attempts context)
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt (C trace ground truth)
- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py (Py harness)
- reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py (diff tooling)
- tests/test_cli_scaling.py (scaling regression targets)
- docs/development/testing_strategy.md §2.5 (env + parity command references)

Next Up:
- If MOSFLM parity lands quickly, proceed to Phase K3c documentation cleanup (scaling summary + Attempt #46 log).
- Otherwise, capture any remaining Δh/Δk/Δl evidence and consult vectorization plan once CLI parity is green.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:56:55] bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so CLI parity command matches C outputs
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with the blocker description, rerun `trace_harness.py` + `compare_traces.py` to capture fresh deltas, and log the attempt in docs/fix_plan before pausing.

Priorities & Rationale:
- specs/spec-a-core.md §Geometry — Sets canonical sequence: derive real vectors from reciprocal ones, rescale with `V_cell`, convert to meters; our implementation must match this before φ rotations.
- golden_suite_generator/nanoBragg.c:3135-3210 — Shows the MOSFLM branch (remove wavelength, compute `b*×c*`, multiply by `V_cell≈2.4682×10''^4 Å''^3`, then convert to meters) that PyTorch currently skips.
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g) — Records the Δh≈6 finding and defines the fix/test checklist; stay aligned with the plan checkpoints.
- docs/fix_plan.md#cli-flags-003 — Next Actions now require MOSFLM rescale implementation plus scaling regression; we need to supply evidence to close Attempt #46.
- docs/development/c_to_pytorch_config_map.md — Confirms detector pivot + unit conventions when we touch `Crystal.compute_cell_tensors`; prevents regressions while editing geometry.
- docs/development/testing_strategy.md §2.5 — Parity matrix guidance; ensure pytest command uses `NB_RUN_PARALLEL=1` + C binary when re-running scaling.

How-To Map:
- Step 1: Extend `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with a Root Cause section (K3f4). Summarize that PyTorch leaves `V=1 Å''^3` when MOSFLM A* is supplied, whereas C recomputes `V_cell≈2.4682×10''^4 Å''^3` and rescales `b*×c*` accordingly.
- Step 2: In `src/nanobrag_torch/models/crystal.py`, update `compute_cell_tensors`:
  - Detect `mosflm_a_star/b_star/c_star`.
  - Convert to tensors (Å⁻¹) and compute cross products `b*×c*`, `c*×a*`, `a*×b*`.
  - Calculate `V_star = a*·(b*×c*)` and `V_cell = 1/V_star` (Å³).
  - Multiply cross products by `V_cell` to get real vectors in Å, then convert to meters (×1e-10) before storing.
  - Update `self.cell_a/b/c` tensors (Å) using the derived magnitudes to preserve downstream sample size logic.
  - Recalculate reciprocal vectors from the new real vectors using `V_actual = a·(b×c)` to maintain metric duality, mirroring nanoBragg.c lines 3190-3210.
  - Document the C reference block per Core Rule #11 directly above the new branch.
- Step 3: Ensure differentiability & device neutrality:
  - Use existing tensors (`self.dtype`, `self.device`).
  - Avoid `.item()` except for logging inside plan scripts; rely on tensor arithmetic.
  - Clear geometry cache if new tensors replace cached values.
- Step 4: Implement regression coverage (K3g2):
  - Add assertions inside `tests/test_cli_scaling.py` (or create `tests/test_cli_scaling_mosflm.py`) verifying that PyTorch real vectors (converted to Å) match stored expected values from C within 5e-4 for the supervisor command configuration.
  - Optional: load expected vectors from `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log` or hard-code the C values with comments referencing the artifact path.
- Step 5: Refresh parity harness artifacts:
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log`.
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py --c reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt --py reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md`.
  - Confirm |Δh|, |Δk|, |Δl| < 5e-4 at φ=0°.
- Step 6: Run targeted pytest (`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`) and stash the log under `reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log`.
- Step 7: Update `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` with new ratios (F_latt, polarization, I_final) and summarize the result in docs/fix_plan Attempt #46 once parity is confirmed.

Pitfalls To Avoid:
- Leaving `V` at the placeholder value when MOSFLM orientations are supplied; always recompute from A* vectors before converting units.
- Failing to update `self.cell_a/b/c` — sample clipping relies on real magnitudes in Å; leaving 1.0 will cause future inconsistencies.
- Breaking differentiability by using `.item()` or constructing new tensors on CPU while running on CUDA; reuse `type_as` / existing tensors.
- Accidentally altering pix0 override precedence (custom detector vectors must continue to force SAMPLE pivot and ignore `pix0_override`).
- Forgetting to regenerate reciprocal vectors from the corrected real vectors; metric duality must hold (`a·a* = 1` etc.).
- Skipping `KMP_DUPLICATE_LIB_OK=TRUE` or `NB_RUN_PARALLEL=1`; parity tests will fail or hang without them.
- Creating ad-hoc scripts/directories; reuse `reports/2025-10-cli-flags/phase_k` tooling and maintain Protected Assets.
- Running the full pytest suite; stick to targeted node + parity harness to keep loop within scope.
- Neglecting to archive new trace outputs under `base_lattice/post_fix/` with timestamps; we need reproducibility for audit.
- Forgetting to add/update Core Rule #11 C reference around the new MOSFLM branch.

Pointers:
- specs/spec-a-core.md (Units & Geometry expectations)
- docs/architecture/pytorch_design.md §§2.3-2.4 (Crystal pipeline overview)
- golden_suite_generator/nanoBragg.c:3135-3210 (MOSFLM handling reference)
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g tables)
- docs/fix_plan.md#cli-flags-003 (Next Actions + Attempts context)
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt (C trace ground truth)
- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py (Py harness)
- reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py (diff tooling)
- tests/test_cli_scaling.py (scaling regression targets)
- docs/development/testing_strategy.md §2.5 (env + parity command references)

Next Up:
- If MOSFLM parity lands quickly, proceed to Phase K3c documentation cleanup (scaling summary + Attempt #46 log).
- Otherwise, capture any remaining Δh/Δk/Δl evidence and consult vectorization plan once CLI parity is green.
EOF
' succeeded in 914ms:

[2025-10-06T22:56:55] tokens used: 171,720
[2025-10-06T22:56:55] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:56:58] thinking

**Verifying line count**
[2025-10-06T22:56:58] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:56:59] bash -lc 'wc -l input.md' succeeded in 688ms:
      68 input.md
[2025-10-06T22:56:59] tokens used: 174,397
[2025-10-06T22:56:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:57:04] thinking

**Expanding content for detailed instructions**

I'll work on increasing the length of the instructions by breaking down bullets into multiple lines, adding extra commentary and verification steps, and restructuring sections with enumerated steps and blank lines, aiming to reach between 100-200 lines for better clarity and thoroughness.
[2025-10-06T22:57:31] exec bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so the supervisor CLI parity command matches nanoBragg C
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with blocker notes, rerun `trace_harness.py` + `compare_traces.py` for delta capture, and log the setback in docs/fix_plan before pausing.

Priorities & Rationale:
- specs/spec-a-core.md §Geometry — Canonical flow: remove wavelength, cross products, multiply by `V_cell`, convert to meters; PyTorch must follow this to keep h/k/l parity.
- specs/spec-a-core.md §Units — Confirms Å ↔ meters conversions; real vectors must be Angstroms before conversion.
- golden_suite_generator/nanoBragg.c:3135-3210 — MOSFLM branch in C; instrumented logs show `V_cell≈2.4682×10''^4 Å''^3` and |a|≈26.75 Å before Angstrom→meter conversion.
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g) — Documents Δh≈6 root cause and codifies the fix/test pipeline we must follow.
- docs/fix_plan.md#cli-flags-003 — Next Actions now reference Phase K3g tasks; completion evidence must feed Attempt #46.
- docs/development/c_to_pytorch_config_map.md — Verifies detector pivot and unit expectations so geometry edits don’t regress previous parity wins.
- docs/development/testing_strategy.md §2.5 — Authoritative parity commands; mandates `NB_RUN_PARALLEL=1` + C binary for scaling regression.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — C trace snapshot; use as ground truth for expected vectors/volumes.

How-To Map:
- Step 1 — Documentation prep (K3f4):
  - Open `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md`.
  - Add a “Root Cause” section summarising that PyTorch leaves `V=1 Å''^3` when MOSFLM A* is provided, while C recomputes `V_cell≈2.4682×10''^4 Å''^3` then rescales `b*×c*` before converting to meters.
  - Reference the specific trace lines from `c_stdout.txt` and `trace_py.log` when describing the magnitude mismatch (≈40.5× in reciprocal vectors, ≈4.05×10''^5 in real vectors).
- Step 2 — Code modification (K3g1) inside `src/nanobrag_torch/models/crystal.py`:
  - Detect the MOSFLM branch (existing `mosflm_provided` logic) and introduce C-reference docstring citing nanoBragg.c lines 3135-3210 before implementation.
  - Convert raw MOSFLM vectors to tensors on `self.device` / `self.dtype` without breaking gradients.
  - Compute cross products (`b_star × c_star`, `c_star × a_star`, `a_star × b_star`) and `V_star = a_star · (b_star × c_star)`.
  - Derive `V_cell = 1 / V_star` (Å³) and multiply each cross product by `V_cell` to obtain real vectors in Angstroms before any conversion.
  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` (Å) using the resulting magnitudes so sample clipping continues to operate on real dimensions.
  - Convert real vectors to meters by multiplying by `1e-10`, store them in tensors used downstream, and retain differentiability (no `.item()` usages).
  - Recompute reciprocal vectors from the real vectors using `V_actual = a · (b × c)` to maintain metric duality (`a·a* = 1`, etc.).
  - Ensure geometry cache invalidation still occurs when these tensors change (reuse existing cache logic or clear `_geometry_cache`).
- Step 3 — Regression coverage (K3g2):
  - Extend `tests/test_cli_scaling.py` or introduce a dedicated test file to assert that PyTorch’s MOSFLM-derived real vectors (converted to Å) match C values within 5e-4 per component.
  - Include comments pointing to `reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt` as the authoritative data source.
  - Guard the test so it runs on CPU by default but maintains device neutrality (parametrise over available devices if practical).
- Step 4 — Parity harness refresh:
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log`.
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py --c reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt --py reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md`.
  - Verify the diff summary shows |Δh|, |Δk|, |Δl| < 5e-4 and document the metrics in the summary file.
- Step 5 — Scaling regression (K3g3 + K3c):
  - Run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`.
  - Save the pytest log to `reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log`.
  - Update `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` with new ratios (F_latt, polarization, I_final) comparing PyTorch vs C, and note the restored parity.
  - Prepare nb-compare visuals if useful and store in an appropriate `post_fix/` subfolder.
- Step 6 — Fix-plan bookkeeping:
  - Append Attempt #46 (or next attempt number) in docs/fix_plan once parity evidence is archived.
  - Mention the updated artifacts and command outputs when logging the attempt.

Pitfalls To Avoid:
- Leaving `V` at the placeholder value (`1 Å''^3`) when MOSFLM A* vectors are present; this is the core bug causing Δh ≈ 6.
- Forgetting to convert real vectors from Å to meters after rescaling; `Crystal.a`/`b`/`c` must remain meters for downstream physics.
- Using `.item()` or `.numpy()` on differentiable tensors; keep everything as tensors to preserve gradients per Core Rule #7.
- Allocating tensors on CPU while device is CUDA; use `.to(device=self.device)` or `.type_as()` to stay device/dtype neutral.
- Modifying pix0 override precedence or pivot logic; custom detector vectors must continue to force SAMPLE pivot and ignore `pix0_override`.
- Skipping reciprocal vector regeneration; without this step metric duality breaks and later tests will fail.
- Running the entire pytest suite; only run the targeted scaling node plus harness scripts to conserve loop time.
- Omitting `KMP_DUPLICATE_LIB_OK=TRUE` or `NB_RUN_PARALLEL=1`; parity command depends on both environment variables.
- Writing new tooling outside `reports/` or `scripts/validation/`; comply with Protected Assets and existing directory conventions.
- Neglecting to add/keep C-code references (Core Rule #11) when altering critical physics code.

Pointers:
- specs/spec-a-core.md — Units & geometry canonical reference.
- docs/architecture/pytorch_design.md §§2.3-2.4 — Crystal pipeline description & vectorization expectations.
- golden_suite_generator/nanoBragg.c:3135-3210 — MOSFLM handling baseline.
- plans/active/cli-noise-pix0/plan.md — Phase K3f/K3g tables, exit criteria, artifact expectations.
- docs/fix_plan.md#cli-flags-003 — Next Actions + Attempts log for this effort.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — C trace with authoritative lattice vectors.
- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py — PyTorch trace generator (already float64 & CPU by default).
- reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py — Diff script to quantify Δh/Δk/Δl post-fix.
- tests/test_cli_scaling.py — Targeted scaling regression; extend here for MOSFLM assertions.
- docs/development/testing_strategy.md §2.5 — Environment and parity command mapping.

Next Up:
- If MOSFLM scaling parity succeeds quickly, close Phase K3c documentation and then resume vectorization plan Phase A.
- If issues persist, capture updated Δh/Δk/Δl data under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:57:32] bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so the supervisor CLI parity command matches nanoBragg C
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with blocker notes, rerun `trace_harness.py` + `compare_traces.py` for delta capture, and log the setback in docs/fix_plan before pausing.

Priorities & Rationale:
- specs/spec-a-core.md §Geometry — Canonical flow: remove wavelength, cross products, multiply by `V_cell`, convert to meters; PyTorch must follow this to keep h/k/l parity.
- specs/spec-a-core.md §Units — Confirms Å ↔ meters conversions; real vectors must be Angstroms before conversion.
- golden_suite_generator/nanoBragg.c:3135-3210 — MOSFLM branch in C; instrumented logs show `V_cell≈2.4682×10''^4 Å''^3` and |a|≈26.75 Å before Angstrom→meter conversion.
- plans/active/cli-noise-pix0/plan.md (Phase K3f/K3g) — Documents Δh≈6 root cause and codifies the fix/test pipeline we must follow.
- docs/fix_plan.md#cli-flags-003 — Next Actions now reference Phase K3g tasks; completion evidence must feed Attempt #46.
- docs/development/c_to_pytorch_config_map.md — Verifies detector pivot and unit expectations so geometry edits don’t regress previous parity wins.
- docs/development/testing_strategy.md §2.5 — Authoritative parity commands; mandates `NB_RUN_PARALLEL=1` + C binary for scaling regression.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — C trace snapshot; use as ground truth for expected vectors/volumes.

How-To Map:
- Step 1 — Documentation prep (K3f4):
  - Open `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md`.
  - Add a “Root Cause” section summarising that PyTorch leaves `V=1 Å''^3` when MOSFLM A* is provided, while C recomputes `V_cell≈2.4682×10''^4 Å''^3` then rescales `b*×c*` before converting to meters.
  - Reference the specific trace lines from `c_stdout.txt` and `trace_py.log` when describing the magnitude mismatch (≈40.5× in reciprocal vectors, ≈4.05×10''^5 in real vectors).
- Step 2 — Code modification (K3g1) inside `src/nanobrag_torch/models/crystal.py`:
  - Detect the MOSFLM branch (existing `mosflm_provided` logic) and introduce C-reference docstring citing nanoBragg.c lines 3135-3210 before implementation.
  - Convert raw MOSFLM vectors to tensors on `self.device` / `self.dtype` without breaking gradients.
  - Compute cross products (`b_star × c_star`, `c_star × a_star`, `a_star × b_star`) and `V_star = a_star · (b_star × c_star)`.
  - Derive `V_cell = 1 / V_star` (Å³) and multiply each cross product by `V_cell` to obtain real vectors in Angstroms before any conversion.
  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` (Å) using the resulting magnitudes so sample clipping continues to operate on real dimensions.
  - Convert real vectors to meters by multiplying by `1e-10`, store them in tensors used downstream, and retain differentiability (no `.item()` usages).
  - Recompute reciprocal vectors from the real vectors using `V_actual = a · (b × c)` to maintain metric duality (`a·a* = 1`, etc.).
  - Ensure geometry cache invalidation still occurs when these tensors change (reuse existing cache logic or clear `_geometry_cache`).
- Step 3 — Regression coverage (K3g2):
  - Extend `tests/test_cli_scaling.py` or introduce a dedicated test file to assert that PyTorch’s MOSFLM-derived real vectors (converted to Å) match C values within 5e-4 per component.
  - Include comments pointing to `reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt` as the authoritative data source.
  - Guard the test so it runs on CPU by default but maintains device neutrality (parametrise over available devices if practical).
- Step 4 — Parity harness refresh:
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log`.
  - `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py --c reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt --py reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md`.
  - Verify the diff summary shows |Δh|, |Δk|, |Δl| < 5e-4 and document the metrics in the summary file.
- Step 5 — Scaling regression (K3g3 + K3c):
  - Run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`.
  - Save the pytest log to `reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log`.
  - Update `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` with new ratios (F_latt, polarization, I_final) comparing PyTorch vs C, and note the restored parity.
  - Prepare nb-compare visuals if useful and store in an appropriate `post_fix/` subfolder.
- Step 6 — Fix-plan bookkeeping:
  - Append Attempt #46 (or next attempt number) in docs/fix_plan once parity evidence is archived.
  - Mention the updated artifacts and command outputs when logging the attempt.

Pitfalls To Avoid:
- Leaving `V` at the placeholder value (`1 Å''^3`) when MOSFLM A* vectors are present; this is the core bug causing Δh ≈ 6.
- Forgetting to convert real vectors from Å to meters after rescaling; `Crystal.a`/`b`/`c` must remain meters for downstream physics.
- Using `.item()` or `.numpy()` on differentiable tensors; keep everything as tensors to preserve gradients per Core Rule #7.
- Allocating tensors on CPU while device is CUDA; use `.to(device=self.device)` or `.type_as()` to stay device/dtype neutral.
- Modifying pix0 override precedence or pivot logic; custom detector vectors must continue to force SAMPLE pivot and ignore `pix0_override`.
- Skipping reciprocal vector regeneration; without this step metric duality breaks and later tests will fail.
- Running the entire pytest suite; only run the targeted scaling node plus harness scripts to conserve loop time.
- Omitting `KMP_DUPLICATE_LIB_OK=TRUE` or `NB_RUN_PARALLEL=1`; parity command depends on both environment variables.
- Writing new tooling outside `reports/` or `scripts/validation/`; comply with Protected Assets and existing directory conventions.
- Neglecting to add/keep C-code references (Core Rule #11) when altering critical physics code.

Pointers:
- specs/spec-a-core.md — Units & geometry canonical reference.
- docs/architecture/pytorch_design.md §§2.3-2.4 — Crystal pipeline description & vectorization expectations.
- golden_suite_generator/nanoBragg.c:3135-3210 — MOSFLM handling baseline.
- plans/active/cli-noise-pix0/plan.md — Phase K3f/K3g tables, exit criteria, artifact expectations.
- docs/fix_plan.md#cli-flags-003 — Next Actions + Attempts log for this effort.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — C trace with authoritative lattice vectors.
- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py — PyTorch trace generator (already float64 & CPU by default).
- reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py — Diff script to quantify Δh/Δk/Δl post-fix.
- tests/test_cli_scaling.py — Targeted scaling regression; extend here for MOSFLM assertions.
- docs/development/testing_strategy.md §2.5 — Environment and parity command mapping.

Next Up:
- If MOSFLM scaling parity succeeds quickly, close Phase K3c documentation and then resume vectorization plan Phase A.
- If issues persist, capture updated Δh/Δk/Δl data under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
EOF
' succeeded in 865ms:

[2025-10-06T22:57:32] tokens used: 177,027
[2025-10-06T22:57:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:57:36] thinking

**Counting lines**
[2025-10-06T22:57:37] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:57:38] bash -lc 'wc -l input.md' succeeded in 688ms:
      77 input.md
[2025-10-06T22:57:38] tokens used: 180,292
[2025-10-06T22:57:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:57:42] thinking

**Planning content expansion**
[2025-10-06T22:58:11] exec bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so the supervisor parity command matches nanoBragg C
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with blocker notes, rerun `trace_harness.py` + `compare_traces.py` to capture new deltas, and log the stall in docs/fix_plan before pausing.

Priorities & Rationale:
- specs/spec-a-core.md §Geometry — Defines the canonical order: remove wavelength from MOSFLM matrix, compute cross products, scale by `V_cell`, then convert to meters. We must mirror this to keep h/k/l parity.
- specs/spec-a-core.md §Units — Reiterates Å to meter conversions; forgetting the `1e-10` factor caused the current Δh≈6 gap.
- golden_suite_generator/nanoBragg.c:3135-3210 — C implementation shows `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, and real vectors in Å before conversion. Use as the implementation template.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — Contains the instrumented C trace proving |a|=26.7514 Å and |a|=2.67514e-9 m after conversion; matches the spec.
- plans/active/cli-noise-pix0/plan.md — Phase K3f table now marked `[D]`, Phase K3g defines the implementation + regression steps we must execute.
- docs/fix_plan.md#cli-flags-003 — Next Actions cite Phase K3g1–K3g3; completion evidence must feed Attempt #46.
- docs/development/c_to_pytorch_config_map.md — Validates detector pivot + unit conventions to avoid regressions when editing `Crystal.compute_cell_tensors`.
- docs/development/testing_strategy.md §2.5 — Parity matrix commands; keep `NB_RUN_PARALLEL=1` and `NB_C_BIN=./golden_suite_generator/nanoBragg` in environment.

How-To Map:
- Step 1 — Document the diagnosis (K3f4):
  - Edit `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md`.
  - Add a “Root Cause” section describing the 40.5× reciprocal and 4.05×10''^5 real-vector magnitude errors.
  - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
  - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å''^3`, which causes the mismatch.
- Step 2 — Implement MOSFLM rescale (K3g1):
  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
  - Replace the previous assignment that left `V = 1 Å''^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
- Step 3 — Regression coverage (K3g2):
  - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
  - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
  - Parameterize over available devices (`cpu`, `cuda` when available) to maintain device neutrality, but allow skipping if CUDA is unavailable.
  - Add assertions that the recomputed `V_cell` matches `24682.3 Å''^3` within tolerance when MOSFLM inputs are used.
- Step 4 — Refresh parity traces:
  - Run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log`.
  - Execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py --c reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt --py reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md`.
  - Confirm the summary reports |Δh|, |Δk|, |Δl| < 5e-4 and document the metrics.
  - Archive the new PyTorch trace and diff summary alongside the existing evidence (`post_fix/` subdir).
- Step 5 — Scaling regression and documentation (K3g3 + K3c):
  - Run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`.
  - Save output to `reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log`.
  - Update `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` with new F_latt, polarization, and final intensity ratios.
  - Note in the write-up that the previous 21.6% F_latt error disappears once MOSFLM vectors are rescaled.
  - Generate nb-compare visuals if helpful and store them under `reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/`.
- Step 6 — Fix-plan bookkeeping:
  - Log Attempt #46 (or next number) in docs/fix_plan summarising commands run, metrics observed, and artifact paths.
  - Cross-link the plan updates (Phase K3g rows) and confirm exit criteria are met.

Pitfalls To Avoid:
- Leaving `self.cell_a/b/c` at placeholder values; downstream sample clipping and gradient logic depend on accurate Å magnitudes.
- Forgetting to convert real vectors from Å to meters, which would flip the error sign instead of fixing it.
- Using `.item()`/`.numpy()` on tensors that require gradients; keep operations tensorised.
- Creating tensors on CPU when running on CUDA; always inherit device/dtype from existing tensors.
- Disturbing pix0 precedence rules (custom vectors force SAMPLE pivot, ignoring pix0 override).
- Skipping reciprocal regeneration; metric duality (`a·a* = 1`) must hold to avoid regressions elsewhere.
- Running the full pytest suite; stick to targeted nodes to keep the loop efficient.
- Forgetting `KMP_DUPLICATE_LIB_OK=TRUE` or `NB_RUN_PARALLEL=1`; parity command will fail without them.
- Writing ad-hoc scripts or storing artifacts outside `reports/`; follow existing directory structure and Protected Assets policy.
- Omitting the required C-code reference in `Crystal.compute_cell_tensors` when modifying MOSFLM logic.
- Ignoring device/dtype neutrality; keep operations vectorized and free of `.cpu()`/`.cuda()` shims inside the compiled path.

Pointers:
- specs/spec-a-core.md — Units, geometry, and lattice derivation rules.
- docs/architecture/pytorch_design.md §§2.3-2.4 — Crystal pipeline overview, highlighting where MOSFLM data should enter.
- golden_suite_generator/nanoBragg.c:3135-3210 — Exact MOSFLM sequence to replicate.
- plans/active/cli-noise-pix0/plan.md — Phase K3g table & exit criteria after today’s update.
- docs/fix_plan.md#cli-flags-003 — Active fix-plan entry with updated Next Actions.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — C trace ground truth for vectors and volumes.
- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py — PyTorch trace generator (float64, CPU) used for parity evidence.
- reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py — Diff script to validate |Δh|, |Δk|, |Δl| thresholds.
- tests/test_cli_scaling.py — Scaling regression; extend for MOSFLM assertions.
- docs/development/testing_strategy.md §2.5 — Test command mapping for parity runs.

Next Up:
- If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
- If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
- After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:58:12] bash -lc "cat <<'EOF' > input.md
Summary: Restore MOSFLM lattice scaling so the supervisor parity command matches nanoBragg C
Phase: Implementation
Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md
Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run "'`env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with blocker notes, rerun `trace_harness.py` + `compare_traces.py` to capture new deltas, and log the stall in docs/fix_plan before pausing.

Priorities & Rationale:
- specs/spec-a-core.md §Geometry — Defines the canonical order: remove wavelength from MOSFLM matrix, compute cross products, scale by `V_cell`, then convert to meters. We must mirror this to keep h/k/l parity.
- specs/spec-a-core.md §Units — Reiterates Å to meter conversions; forgetting the `1e-10` factor caused the current Δh≈6 gap.
- golden_suite_generator/nanoBragg.c:3135-3210 — C implementation shows `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, and real vectors in Å before conversion. Use as the implementation template.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — Contains the instrumented C trace proving |a|=26.7514 Å and |a|=2.67514e-9 m after conversion; matches the spec.
- plans/active/cli-noise-pix0/plan.md — Phase K3f table now marked `[D]`, Phase K3g defines the implementation + regression steps we must execute.
- docs/fix_plan.md#cli-flags-003 — Next Actions cite Phase K3g1–K3g3; completion evidence must feed Attempt #46.
- docs/development/c_to_pytorch_config_map.md — Validates detector pivot + unit conventions to avoid regressions when editing `Crystal.compute_cell_tensors`.
- docs/development/testing_strategy.md §2.5 — Parity matrix commands; keep `NB_RUN_PARALLEL=1` and `NB_C_BIN=./golden_suite_generator/nanoBragg` in environment.

How-To Map:
- Step 1 — Document the diagnosis (K3f4):
  - Edit `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md`.
  - Add a “Root Cause” section describing the 40.5× reciprocal and 4.05×10''^5 real-vector magnitude errors.
  - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
  - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å''^3`, which causes the mismatch.
- Step 2 — Implement MOSFLM rescale (K3g1):
  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
  - Replace the previous assignment that left `V = 1 Å''^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
- Step 3 — Regression coverage (K3g2):
  - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
  - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
  - Parameterize over available devices (`cpu`, `cuda` when available) to maintain device neutrality, but allow skipping if CUDA is unavailable.
  - Add assertions that the recomputed `V_cell` matches `24682.3 Å''^3` within tolerance when MOSFLM inputs are used.
- Step 4 — Refresh parity traces:
  - Run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log`.
  - Execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py --c reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt --py reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log --out reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md`.
  - Confirm the summary reports |Δh|, |Δk|, |Δl| < 5e-4 and document the metrics.
  - Archive the new PyTorch trace and diff summary alongside the existing evidence (`post_fix/` subdir).
- Step 5 — Scaling regression and documentation (K3g3 + K3c):
  - Run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`.
  - Save output to `reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log`.
  - Update `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` with new F_latt, polarization, and final intensity ratios.
  - Note in the write-up that the previous 21.6% F_latt error disappears once MOSFLM vectors are rescaled.
  - Generate nb-compare visuals if helpful and store them under `reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/`.
- Step 6 — Fix-plan bookkeeping:
  - Log Attempt #46 (or next number) in docs/fix_plan summarising commands run, metrics observed, and artifact paths.
  - Cross-link the plan updates (Phase K3g rows) and confirm exit criteria are met.

Pitfalls To Avoid:
- Leaving `self.cell_a/b/c` at placeholder values; downstream sample clipping and gradient logic depend on accurate Å magnitudes.
- Forgetting to convert real vectors from Å to meters, which would flip the error sign instead of fixing it.
- Using `.item()`/`.numpy()` on tensors that require gradients; keep operations tensorised.
- Creating tensors on CPU when running on CUDA; always inherit device/dtype from existing tensors.
- Disturbing pix0 precedence rules (custom vectors force SAMPLE pivot, ignoring pix0 override).
- Skipping reciprocal regeneration; metric duality (`a·a* = 1`) must hold to avoid regressions elsewhere.
- Running the full pytest suite; stick to targeted nodes to keep the loop efficient.
- Forgetting `KMP_DUPLICATE_LIB_OK=TRUE` or `NB_RUN_PARALLEL=1`; parity command will fail without them.
- Writing ad-hoc scripts or storing artifacts outside `reports/`; follow existing directory structure and Protected Assets policy.
- Omitting the required C-code reference in `Crystal.compute_cell_tensors` when modifying MOSFLM logic.
- Ignoring device/dtype neutrality; keep operations vectorized and free of `.cpu()`/`.cuda()` shims inside the compiled path.

Pointers:
- specs/spec-a-core.md — Units, geometry, and lattice derivation rules.
- docs/architecture/pytorch_design.md §§2.3-2.4 — Crystal pipeline overview, highlighting where MOSFLM data should enter.
- golden_suite_generator/nanoBragg.c:3135-3210 — Exact MOSFLM sequence to replicate.
- plans/active/cli-noise-pix0/plan.md — Phase K3g table & exit criteria after today’s update.
- docs/fix_plan.md#cli-flags-003 — Active fix-plan entry with updated Next Actions.
- reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt — C trace ground truth for vectors and volumes.
- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py — PyTorch trace generator (float64, CPU) used for parity evidence.
- reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py — Diff script to validate |Δh|, |Δk|, |Δl| thresholds.
- tests/test_cli_scaling.py — Scaling regression; extend for MOSFLM assertions.
- docs/development/testing_strategy.md §2.5 — Test command mapping for parity runs.

Next Up:
- If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
- If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
- After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
EOF
' succeeded in 677ms:

[2025-10-06T22:58:12] tokens used: 183,034
[2025-10-06T22:58:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:58:16] thinking

**Counting lines**
[2025-10-06T22:58:17] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:58:18] bash -lc 'wc -l input.md' succeeded in 685ms:
      87 input.md
[2025-10-06T22:58:18] tokens used: 185,905
[2025-10-06T22:58:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:58:22] thinking

**Expanding detailed instructions**
[2025-10-06T22:58:32] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -26,14 +26,25 @@
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
[2025-10-06T22:58:32] apply_patch(auto_approved=true) exited 0 in 27ms:
Success. Updated the following files:
M input.md
[2025-10-06T22:58:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..41a9857895b9b368316388f972f1fa35a94219be
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:58:32] tokens used: 187,163
[2025-10-06T22:58:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..41a9857895b9b368316388f972f1fa35a94219be
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:58:35] thinking

**Verifying line count**
[2025-10-06T22:58:35] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:58:36] bash -lc 'wc -l input.md' succeeded in 904ms:
      98 input.md
[2025-10-06T22:58:36] tokens used: 188,379
[2025-10-06T22:58:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..41a9857895b9b368316388f972f1fa35a94219be
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:58:39] thinking

**Extending file length**
[2025-10-06T22:58:41] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -98 +98,3 @@
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
[2025-10-06T22:58:41] apply_patch(auto_approved=true) exited 0 in 40ms:
Success. Updated the following files:
M input.md
[2025-10-06T22:58:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T22:58:41] tokens used: 188,683
[2025-10-06T22:58:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:58:44] thinking

**Reviewing lines**
[2025-10-06T22:58:44] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:58:45] bash -lc 'wc -l input.md' succeeded in 709ms:
     100 input.md
[2025-10-06T22:58:45] tokens used: 188,992
[2025-10-06T22:58:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:58:49] thinking

**Checking git status for changes**
[2025-10-06T22:58:50] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:58:51] bash -lc 'git status --short' succeeded in 727ms:
 M input.md
[2025-10-06T22:58:51] tokens used: 189,190
[2025-10-06T22:58:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:58:55] thinking

**Verifying file modifications in git**
[2025-10-06T22:58:56] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:58:57] bash -lc 'git diff' succeeded in 877ms:
diff --git a/input.md b/input.md
index 159f6c9..a1b6295 100644
--- a/input.md
+++ b/input.md
@@ -1,77 +1,100 @@
-Summary: Restore MOSFLM lattice scaling so the supervisor CLI parity command matches nanoBragg C
+Summary: Restore MOSFLM lattice scaling so the supervisor parity command matches nanoBragg C
 Phase: Implementation
 Focus: CLI-FLAGS-003 / Phase K3g1–K3g3
 Branch: feature/spec-based-2
 Mapped tests: tests/test_cli_scaling.py::test_f_latt_square_matches_c
 Artifacts: reports/2025-10-cli-flags/phase_k/base_lattice/summary.md; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/trace_py.log; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md; reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log; reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md
 Do Now: Execute CLI-FLAGS-003 – Phase K3g1 (Crystal MOSFLM rescale) and run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`
-If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with blocker notes, rerun `trace_harness.py` + `compare_traces.py` for delta capture, and log the setback in docs/fix_plan before pausing.
+If Blocked: Update `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with blocker notes, rerun `trace_harness.py` + `compare_traces.py` to capture new deltas, and log the stall in docs/fix_plan before pausing.
 
 Priorities & Rationale:
-- specs/spec-a-core.md §Geometry — Canonical flow: remove wavelength, cross products, multiply by `V_cell`, convert to meters; PyTorch must follow this to keep h/k/l parity.
-- specs/spec-a-core.md §Units — Confirms Å ↔ meters conversions; real vectors must be Angstroms before conversion.
-- golden_suite_generator/nanoBragg.c:3135-3210 — MOSFLM branch in C; instrumented logs show `V_cell≈2.4682×10^4 Å^3` and |a|≈26.75 Å before Angstrom→meter conversion.
[2025-10-06T22:58:57] tokens used: 189,438
[2025-10-06T22:58:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:02] thinking

**Investigating unstaged plan changes**
[2025-10-06T22:59:03] exec bash -lc 'git diff -- plans/active/cli-noise-pix0/plan.md docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:03] bash -lc 'git diff -- plans/active/cli-noise-pix0/plan.md docs/fix_plan.md' succeeded in 746ms:

[2025-10-06T22:59:03] tokens used: 192,180
[2025-10-06T22:59:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:06] thinking

**Verifying code persistence**
[2025-10-06T22:59:06] exec bash -lc 'rg "K3g1" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:07] bash -lc 'rg "K3g1" -n plans/active/cli-noise-pix0/plan.md' succeeded in 692ms:
211:| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
[2025-10-06T22:59:07] tokens used: 192,329
[2025-10-06T22:59:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:17] thinking

**Checking for unstaged plan changes**
[2025-10-06T22:59:19] exec bash -lc 'git show HEAD:plans/active/cli-noise-pix0/plan.md | grep -n "K3g1"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:20] bash -lc 'git show HEAD:plans/active/cli-noise-pix0/plan.md | grep -n "K3g1"' succeeded in 832ms:
211:| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
[2025-10-06T22:59:20] tokens used: 193,024
[2025-10-06T22:59:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:23] thinking

**Checking for existing modifications**
[2025-10-06T22:59:23] exec bash -lc "git show HEAD:plans/active/cli-noise-pix0/plan.md | sed -n '150,240p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:24] bash -lc "git show HEAD:plans/active/cli-noise-pix0/plan.md | sed -n '150,240p'" succeeded in 703ms:
| H6f | Align pivot selection when custom vectors provided | [D] | ✅ Attempt #40 (2025-10-26) updated `DetectorConfig.__post_init__` to force SAMPLE pivot whenever custom detector basis vectors (fdet/sdet/odet/beam) are supplied, added regression suite `TestCLIPivotSelection` (CPU+CUDA, float32/float64), relocated visuals under `reports/2025-10-cli-flags/phase_h6/visuals/`, and logged implementation notes at `pivot_fix.md`. |
| H6g | Re-run pix0 traces after pivot fix | [D] | ✅ Attempt #41 (2025-10-27) reran the harness with SAMPLE pivot enforced; `phase_h6/post_fix/trace_py.log`, `trace_diff.txt`, and `metadata.json` show |Δpix0| ≤ 2.85 µm and zero beam-center deltas. nb-compare smoke stored alongside traces; docs/fix_plan Attempt #41 updated. |
| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
| H5e | Correct beam-center→F/S mapping units | [D] | ✅ 2025-10-24 Attempt #33. `Detector._configure_geometry` now converts `self.config.beam_center_f/s` (mm) to meters via `/1000.0` before computing Fbeam/Sbeam, resolving the 1.1mm ΔF error. All 26 CLI flags tests passing. Artifacts: `src/nanobrag_torch/models/detector.py:490-515`, `docs/fix_plan.md` Attempt #33. Original task: Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |

### Phase I — Polarization Alignment (follow-up)
Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
Prereqs: Phases F–H complete; traces show `F_latt` parity.
Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
| I2 | Implement polarization parity | [P] | ✅ 2025-10-17 update set BeamConfig.polarization_factor default to 1.0, but C traces (2025-10-31) confirm the Kahn factor defaults to 0.0 when `-polar` is absent. Reopen to: (a) restore 0.0 default, (b) keep -polar/-nopolar overrides working, and (c) adjust TestCLIPolarization expectations accordingly. |
| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; remains blocked pending Phase K fixes (orientation rescale + polarization default). |

### Phase J — Intensity Scaling Evidence
Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
[2025-10-06T22:59:24] tokens used: 193,355
[2025-10-06T22:59:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:28] thinking

**Checking file changes and staging status**
[2025-10-06T22:59:28] exec bash -lc "sed -n '180,260p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:29] bash -lc "sed -n '180,260p' plans/active/cli-noise-pix0/plan.md" succeeded in 669ms:
Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
| K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
| K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [D] | ✅ 2025-11-06 Attempt #43 (`a89f6fd`): added `mosflm_provided` guard; `mosflm_rescale.py` now reports Δa/b/c=0.0 Å against C (`orientation_delta.md`). |
| K3b | Realign polarization defaults with C | [D] | ✅ 2025-11-06 Attempt #43: `BeamConfig.polarization_factor` defaults to 0.0; CLI regression updated; scaling harness will be re-run once K3e/K3f land. |
| K3d | Diagnose dtype sensitivity of F_latt | [D] | ✅ 2025-11-06 Attempt #44 (`271e2b6`): float64 sweep stored under `phase_k/f_latt_fix/dtype_sweep/` proved precision is not the culprit (F_latt_b error persists at 93.98%). |
| K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
| K3e | Capture per-φ Miller index parity | [D] | ✅ 2025-10-06 Attempt #45 (ralph). Created `scripts/trace_per_phi.py`, generated PyTorch trace (`per_phi_pytorch_20251006-151228.json`), added TRACE_C_PHI to nanoBragg.c:3156-3160, ran C trace, compared via `scripts/compare_per_phi_traces.py`. **Finding:** Δk≈6.042 at φ=0° (C k_frac=−3.857, Py k_frac=−9.899), persists across all φ steps. **Root cause:** Not a φ-sampling issue—base lattice vectors or scattering geometry differ before φ rotation. |
#### Phase K3f — Base lattice & scattering parity
Goal: Eliminate the Δk≈6.0 mismatch uncovered in K3e by proving base lattice vectors, pixel geometry, and scattering-vector math match C before φ rotation.
Prereqs: K3e per-φ evidence archived; MOSFLM rescale guard (K3a) merged; pix0 SAMPLE pivot parity validated (H6g).
Exit Criteria: Trace comparison shows |Δh|, |Δk|, |Δl| < 5e-4 at φ=0° with matching lattice vectors and scattering vectors; scaling_chain.md refreshed with post-fix numbers; docs/fix_plan Attempt #46 logged.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
[2025-10-06T22:59:29] tokens used: 194,963
[2025-10-06T22:59:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:34] thinking

**Verifying and staging modified files**
[2025-10-06T22:59:34] exec bash -lc 'git diff --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:35] bash -lc 'git diff --stat' succeeded in 742ms:
 input.md | 139 +++++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 81 insertions(+), 58 deletions(-)
[2025-10-06T22:59:35] tokens used: 197,466
[2025-10-06T22:59:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:38] thinking

**Verifying plan updates**
[2025-10-06T22:59:39] exec bash -lc "sed -n '40,120p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:39] bash -lc "sed -n '40,120p' plans/active/cli-noise-pix0/plan.md" succeeded in 690ms:

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| B1 | Extend argparse surface | [D] | `create_parser()` now exposes both flags (see `src/nanobrag_torch/__main__.py:187-206`); keep help text aligned with `nanoBragg.c` usage block. |
| B2 | Thread `-nonoise` to simulator | [D] | `parse_and_validate_args()` records `suppress_noise`, and the noise writer at `__main__.py:1170-1199` skips SMV noise output when true. Add warning copy before closing Phase C. |
| B3 | Support pix0 overrides | [D] | Fixed detector override assignment bug (2025-10-05). `_calculate_pix0_vector()` now assigns to `self.pix0_vector` and sets `r_factor=1.0`, `distance_corrected=distance`. Device/dtype coercion preserved via `.to()`. Verified: CLI `-pix0_vector_mm 100 200 300` → tensor([0.1, 0.2, 0.3]). |
| B4 | Preserve meter and mm flag parity | [D] | Run paired parser smoke checks proving `-pix0_vector` (meters) and `-pix0_vector_mm` (millimetres) yield identical `pix0_override_m` tensors and that dual-flag usage raises `ValueError`. Record commands + stdout in `reports/2025-10-cli-flags/phase_b/detector/pix0_override_equivalence.txt`. ✅ 2025-10-05: Verified parser equivalence and dual-flag ValueError handling. |
| B5 | Unit & cache hygiene | [D] | Capture a detector mini-harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python - <<'PY' …`) showing `Detector(..., pix0_override_m=...)` preserves device/dtype after `invalidate_cache()` and when moved across CPU/CUDA. Store log in `reports/2025-10-cli-flags/phase_b/detector/cache_handoff.txt`; note any follow-on assertions needed in code/tests. ✅ 2025-10-05: Cache stability confirmed on CPU/CUDA with device/dtype preservation. |

### Phase C — Validation & Documentation
Goal: Prove parity via targeted tests and update docs/fix_plan so future loops know the flags are supported.
Prereqs: Phase B code ready; editable install available for CLI tests.
Exit Criteria: Tests and documentation changes landed; supervisor command successfully runs PyTorch CLI and reaches simulator without flag errors.

**Parity risk reminder:** C instrumentation shows `DETECTOR_PIX0_VECTOR` emitted in meters even when using `-pix0_vector_mm`. During Phase C2 parity run, capture both C and PyTorch pix0 traces to confirm we are not double-converting the override.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| C1 | Add CLI regression tests | [D] | ✅ 2025-10-16 (commit b6c6a61). `tests/test_cli_flags.py` covers meters/mm aliases, mutual exclusion, override persistence (CPU/CUDA), dtype preservation, and `-nonoise` suppression. |
| C2 | Golden parity smoke | [D] | ✅ 2025-10-05: Supervisor command executed for both binaries. C max_I=446.254 (img.bin), PyTorch max_I≈1.15e5 (torch_img.bin). Logs + float images archived under `reports/2025-10-cli-flags/phase_c/parity/`. Intensity scale mismatch noted for follow-up. |
[2025-10-06T22:59:39] tokens used: 197,702
[2025-10-06T22:59:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:44] thinking

**Verifying plan update for gap bullet**
[2025-10-06T22:59:45] exec bash -lc "sed -n '1,60p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:46] bash -lc "sed -n '1,60p' plans/active/cli-noise-pix0/plan.md" succeeded in 746ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
[2025-10-06T22:59:46] tokens used: 199,350
[2025-10-06T22:59:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T22:59:53] thinking

**Reviewing plan update and preparing commit**
[2025-10-06T22:59:54] exec bash -lc 'git add input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T22:59:55] bash -lc 'git add input.md' succeeded in 715ms:

[2025-10-06T22:59:55] tokens used: 201,120
[2025-10-06T22:59:55] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:01] thinking

**Preparing commit message**
[2025-10-06T23:00:02] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 steering - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:03] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 steering - tests: not run"' succeeded in 707ms:
[feature/spec-based-2 da1a4e7] SUPERVISOR: CLI-FLAGS-003 steering - tests: not run
 1 file changed, 81 insertions(+), 58 deletions(-)
[2025-10-06T23:00:03] tokens used: 201,350
[2025-10-06T23:00:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:08] thinking

**Pushing committed changes**
[2025-10-06T23:00:08] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:11] bash -lc 'git push' succeeded in 2.37s:
To github.com:hoidn/nanoBragg.git
   b849205..da1a4e7  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T23:00:11] tokens used: 201,615
[2025-10-06T23:00:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:16] thinking

**Appending update to galph_memory.md**
[2025-10-06T23:00:22] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/galph_memory.md
@@ -1315 +1315,7 @@
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
[2025-10-06T23:00:22] apply_patch(auto_approved=true) exited 0 in 29ms:
Success. Updated the following files:
M galph_memory.md
[2025-10-06T23:00:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

[2025-10-06T23:00:22] tokens used: 202,545
[2025-10-06T23:00:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:28] thinking

**Evaluating git commit state**
[2025-10-06T23:00:28] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:29] bash -lc 'git status --short' succeeded in 906ms:
 M galph_memory.md
[2025-10-06T23:00:29] tokens used: 203,463
[2025-10-06T23:00:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:32] thinking

**Committing memory update changes**
[2025-10-06T23:00:32] exec bash -lc 'git add galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:33] bash -lc 'git add galph_memory.md' succeeded in 726ms:

[2025-10-06T23:00:33] tokens used: 203,673
[2025-10-06T23:00:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:36] thinking

**Committing with descriptive message**
[2025-10-06T23:00:36] exec bash -lc 'git commit -m "SUPERVISOR: memory update - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:37] bash -lc 'git commit -m "SUPERVISOR: memory update - tests: not run"' succeeded in 745ms:
[feature/spec-based-2 769cb00] SUPERVISOR: memory update - tests: not run
 1 file changed, 6 insertions(+)
[2025-10-06T23:00:37] tokens used: 203,836
[2025-10-06T23:00:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:40] thinking

**Pushing changes to remote**
[2025-10-06T23:00:41] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:43] bash -lc 'git push' succeeded in 2.21s:
To github.com:hoidn/nanoBragg.git
   da1a4e7..769cb00  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T23:00:43] tokens used: 204,126
[2025-10-06T23:00:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:45] thinking

**Checking git status**
[2025-10-06T23:00:47] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:48] bash -lc 'git status --short' succeeded in 801ms:

[2025-10-06T23:00:48] tokens used: 204,272
[2025-10-06T23:00:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:00:56] thinking

**Summarizing final response components**

I'll gather the key points for the final message: the deep analysis results from Step 1, the ranked hypotheses with confidence levels (highlighting the top one about missing MOSFLM rescale), and updates to the plan referencing specific line numbers in plan and docs files to guide next actions clearly.
[2025-10-06T23:00:58] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,240p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:00:59] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,240p'" succeeded in 877ms:
   200	| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
   201	| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
   202	| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
   203	
   204	#### Phase K3g — MOSFLM real-vector rescale implementation
   205	Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
   206	Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
   207	Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
   208	
   209	| ID | Task Description | State | How/Why & Guidance |
   210	| --- | --- | --- | --- |
   211	| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
   212	| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
   213	| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
   214	
   215	### Phase L — Final Parity & Regression Sweep
   216	Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
   217	Prereqs: Phases J–K complete; scaling regression tests green.
   218	Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
   219	
[2025-10-06T23:00:59] tokens used: 204,839
[2025-10-06T23:00:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:01:01] thinking

**Collecting fix_plan line numbers**
[2025-10-06T23:01:02] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T23:01:03] bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" succeeded in 744ms:
   440	- Immediate Next Actions (2025-10-15):
   441	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   442	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   443	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   444	- Attempts History: None — new item.
   445	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   446	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   447	
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
   458	 - Next Actions (2025-11-08 refresh):
   459	  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
[2025-10-06T23:01:03] tokens used: 206,145
[2025-10-06T23:01:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.


[2025-10-06T23:01:11] thinking

**Summarizing debugging hypotheses and next steps**

I'll outline two main hypotheses about the issue: the missing MOSFLM rescale causing incorrect real vectors (high confidence) and the need for additional tests to cover this regression (moderate confidence). I'll include clear next steps for each, mention updates to the fix plan and input instructions, and offer a concise bullet summary for the final message.
[2025-10-06T23:01:14] codex

**Loop Report**
- Base-lattice traces confirm PyTorch never rescales MOSFLM-provided reciprocal vectors: `Crystal.compute_cell_tensors` leaves `V≈1 Å^3`, so |a| ≈ 5.8×10³ Å and Δh ≈ 6 (compare `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/` to C trace).  
  Hypotheses:  
  1) Missing MOSFLM rescale in `Crystal.compute_cell_tensors` (high confidence). Next step: implement Phase K3g1 real-vector rebuild and rerun base trace diff.  
  2) Lack of regression coverage for MOSFLM cells lets this drift persist (medium confidence). Next step: add targeted assertions in `tests/test_cli_scaling.py` once K3g1 lands.
- CLI plan refreshed: Phase K3f marked complete and Phase K3g (implementation/regression tasks) added in `plans/active/cli-noise-pix0/plan.md:200-213`; docs fix-plan Next Actions now call out the MOSFLM rescale work (`docs/fix_plan.md:448-461`).
- Issued updated steering memo (`input.md`) directing Ralph to document the root cause, mirror nanoBragg’s MOSFLM pipeline, add scaling tests, regenerate traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c`.
- `galph_memory.md` now records today’s findings and the new focus so the next loop can pick up at Phase K3g.

Next steps for Ralph:
1. Finish K3f4 by appending the Root Cause section to `base_lattice/summary.md`.
2. Implement K3g1–K3g2 (MOSFLM rescale + regression), then run the targeted pytest command with the required env vars.
3. If parity holds, update scaling artifacts and log Attempt #46 before closing Phase K3c.
[2025-10-06T23:01:17] tokens used: 208,605
[2025-10-06T23:01:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 7c763b1c702edf69b5dba32a08fc632003cccaca..4650a44704eec5db41294492548ba5586b4d870e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- - Next Actions (2025-11-07 refresh, amended 2025-11-08):
-  1. Phase K3f1–K3f3 — Generate matching C/PyTorch baseline traces for MOSFLM vectors, real lattice vectors, and φ=0 scattering components under `reports/2025-10-cli-flags/phase_k/base_lattice/`, then diff them to pinpoint the first component deviating beyond 5e-4. While capturing the PyTorch trace, ensure the harness uses `detector.get_pixel_coords()` directly (no secondary subtraction of `pix0_vector`) so the scattering path matches the C geometry.
-  2. Phase K3f4 — Document the diagnosed root cause and planned remediation in the new `base_lattice/summary.md`, update this plan + fix_plan with the chosen implementation approach before touching simulator/detector code.
-  3. Phase K3c — After K3f resolves the Δk≈6 gap, rerun `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh normalization docs, and log the closure attempt.
+ - Next Actions (2025-11-08 refresh):
+  1. Phase K3f4 — Append a “Root Cause” section to `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` capturing the MOSFLM volume/rescale gap and outline the fix path; propagate the note into plan ⟶ docs/fix_plan (done once summary updated).
+  2. Phase K3g1/K3g2 — Implement the MOSFLM real-vector rebuild in `Crystal.compute_cell_tensors` (derive `V_cell`, real vectors, and updated reciprocal duals from the supplied A* matrix) and land the accompanying regression test under `tests/test_cli_scaling.py` (or sibling). Reference nanoBragg.c lines 3135-3210 in the code docstring per Core Rule #11.
+  3. Phase K3g3 (then K3c) — Re-run scaling evidence with `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `phase_k/f_latt_fix/` artifacts + nb-compare, and close Attempt #46 once Δh/Δk/Δl < 5e-4 and F_latt parity holds.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 739fd6945d50c4b24ddc585119e4e1a5fff3c9c5..8329a7fe295482d011086a9e217a93a842f45b01
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1313,3 +1313,9 @@
 - Chosen focus: CLI-FLAGS-003 Phase K3f base-lattice parity. Hypotheses recorded (primary: trace harness bug; secondary: confirm real/reciprocal vectors + scattering after harness fix). Next confirming step: capture corrected C/Py base traces per plan.
 - Authored Evidence-phase `input.md` directing Ralph to instrument `golden_suite_generator/nanoBragg.c`, rebuild, run the supervisor CLI command, and add a corrected PyTorch harness under `reports/2025-10-cli-flags/phase_k/base_lattice/` with comparison tooling.
 - No additional plan work required for vectorization yet; Phase A still pending once CLI parity unblocks bandwidth.
+
+## 2025-11-08 (galph loop — MOSFLM rescale implementation prep)
+- Verified base-lattice traces: PyTorch keeps placeholder `V≈1 Å^3` when MOSFLM A* is present, giving |a|≈5.8×10^3 Å and Δh≈6; C rescales with `V_cell≈2.4682×10^4 Å^3` before metric duality.
+- Updated `plans/active/cli-noise-pix0/plan.md` Phase K3f (rows marked `[D]`) and added Phase K3g tasks for implementing the MOSFLM rescale pipeline + regression coverage; docs/fix_plan Next Actions now call out K3g1–K3g3.
+- Issued Implementation-phase `input.md` (Do Now = K3g1) instructing Ralph to document root cause, mirror C’s MOSFLM real-vector rebuild, add scaling tests, refresh parity traces, and rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with the proper env vars.
+- Long-term goal #2 (vectorization) left untouched this loop; revisit after CLI parity is recovered.
diff --git a/input.md b/input.md
index c214111c14e6ef9e1fae3c20bfb9b34506e923f3..a1b629557802b88ec7e5508c48ca4ab174fdd3ee
--- a/input.md
+++ b/input.md
@@ -24,18 +24,29 @@
   - Cite the specific lines from `c_stdout.txt` and `trace_py.log` showing `V_cell` vs `V_python`.
   - Mention that PyTorch leaves `self.cell_a/b/c = 1 Å`, so `V = 1 Å^3`, which causes the mismatch.
 - Step 2 — Implement MOSFLM rescale (K3g1):
-  - In `Crystal.compute_cell_tensors`, locate the `mosflm_provided` branch.
-  - Insert a docstring block referencing nanoBragg.c 3135-3210 per Core Rule #11 before applying changes.
-  - Convert MOSFLM vectors to tensors (`torch.as_tensor(..., device=self.device, dtype=self.dtype)`).
-  - Compute `b_star_cross_c_star`, `c_star_cross_a_star`, `a_star_cross_b_star` using `torch.cross(..., dim=0)`.
-  - Calculate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
-  - Derive `V_cell = 1.0 / V_star`; ensure `V_star` is clamped away from zero to avoid numerical blow-ups.
-  - Multiply each cross product by `V_cell` to obtain real vectors in Å.
-  - Update `self.cell_a`, `self.cell_b`, `self.cell_c` to the magnitudes of those vectors (still Å) to keep sample clipping consistent.
-  - Convert real vectors to meters by multiplying by `1e-10` (Angstrom → meter) prior to storing in the dictionary.
-  - Recompute reciprocal vectors by taking cross products of real vectors (`a_cross_b = torch.cross(a_vec, b_vec, dim=0)` etc.) and scaling with `V_actual = torch.dot(a_vec, b_cross_c)` to preserve metric duality.
-  - Replace the previous assignment that left `V = 1 Å^3` with the actual `V_cell`/`V_actual` pair and store both if needed for logging.
-  - Ensure `_geometry_cache` is cleared or bypassed so subsequent property calls use the corrected tensors.
+  - In `Crystal.compute_cell_tensors`, locate the existing `mosflm_provided` conditional.
+  - Add a C-reference docstring citing nanoBragg.c lines 3135-3210 to satisfy Core Rule #11.
+  - Convert each MOSFLM reciprocal vector into a tensor via `torch.as_tensor(..., device=self.device, dtype=self.dtype)`.
+  - Compute `b_star_cross_c_star = torch.cross(b_star, c_star, dim=0)`.
+  - Compute `c_star_cross_a_star = torch.cross(c_star, a_star, dim=0)`.
+  - Compute `a_star_cross_b_star = torch.cross(a_star, b_star, dim=0)`.
+  - Evaluate `V_star = torch.dot(a_star, b_star_cross_c_star)`.
+  - Clamp `V_star` away from zero (e.g., `V_star = V_star.clamp_min(1e-18)`) to avoid blow-ups.
+  - Derive `V_cell = 1.0 / V_star` (Å³) just like C.
+  - Form `a_vec_ang = b_star_cross_c_star * V_cell` (Å).
+  - Form `b_vec_ang = c_star_cross_a_star * V_cell` (Å).
+  - Form `c_vec_ang = a_star_cross_b_star * V_cell` (Å).
+  - Update `self.cell_a = torch.norm(a_vec_ang)` (Å).
+  - Update `self.cell_b = torch.norm(b_vec_ang)` (Å).
+  - Update `self.cell_c = torch.norm(c_vec_ang)` (Å).
+  - Convert to meters: `a_vec = a_vec_ang * 1e-10`, same for `b_vec` and `c_vec`.
+  - Calculate `a_cross_b = torch.cross(a_vec, b_vec, dim=0)`.
+  - Calculate `b_cross_c = torch.cross(b_vec, c_vec, dim=0)`.
+  - Calculate `c_cross_a = torch.cross(c_vec, a_vec, dim=0)`.
+  - Compute `V_actual = torch.dot(a_vec, b_cross_c)` for metric duality.
+  - Rebuild reciprocal vectors: `a_star = b_cross_c / V_actual`, etc.
+  - Replace previous placeholder `V = 1 Å^3` with the actual `V_cell` (Å³) and keep `V_actual` (m³) as needed.
+  - Reset `_geometry_cache = {}` to invalidate cached tensors.
 - Step 3 — Regression coverage (K3g2):
   - Extend `tests/test_cli_scaling.py` (or add a new test module) to assert that PyTorch’s MOSFLM real vectors (converted back to Å) match the C trace within 5e-4 per component.
   - Load expected vectors directly from the plan (hard-coded constants) and include comments referencing `c_stdout.txt` for traceability.
@@ -85,3 +96,5 @@
 - If MOSFLM scaling parity succeeds, close Phase K3c documentation, then resume the vectorization initiative (plans/active/vectorization.md Phase A evidence).
 - If parity still fails, capture updated Δh/Δk/Δl metrics under `base_lattice/post_fix/` and request follow-up guidance before touching downstream phases.
 - After parity is stable, re-run the supervisor command end-to-end (per long-term goal) and archive nb-compare artifacts for final verification.
+- Record any lingering questions in docs/fix_plan Attempts so future loops retain context.
+- Once this goal completes, reassess long-term goal #2 (vectorization) to schedule Phase A baseline tasks.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 14f3f7380f0210c0aba17ee80aecad3b3b565d61..2645cde26f8feb270331d49cf4456ba92c5d5b04
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -14,6 +14,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
+- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -195,10 +196,21 @@
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| K3f1 | Capture C baseline for lattice + scattering | [ ] | Instrument `golden_suite_generator/nanoBragg.c` to dump `a_star/b_star/c_star`, real `a/b/c`, and φ=0 scattering vector components right after MOSFLM load and before phi loop. Rebuild via `make -C golden_suite_generator` and run supervisor command with `TRACE_C_BASE` lines redirected to `reports/2025-10-cli-flags/phase_k/base_lattice/c_trace.log`. |
-| K3f2 | Extend PyTorch trace harness with matching fields | [ ] | Update `reports/2025-10-cli-flags/phase_k/trace_harness.py` (or new helper) to emit `TRACE_PY_BASE` lines capturing the same quantities (MOSFLM vectors, real vectors pre-φ, scattering vector at φ=0). Use `detector.get_pixel_coords()` directly as the sample→pixel vector—do **not** subtract `pix0_vector`, because the coordinates already include that origin offset. Execute with `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/trace_harness.py --out reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log`. |
-| K3f3 | Diff base traces & isolate first divergence | [ ] | Author a comparison script (extend `scripts/compare_per_phi_traces.py` or add `compare_base_lattice.py`) that aligns C/Py logs and reports vector component deltas plus scattering-vector residuals. Store summary in `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` with tables highlighting the first component outside 5e-4 tolerance. |
-| K3f4 | Record root cause & fix outline | [ ] | Based on K3f3 results, document the failure mode (e.g., unit scaling, detector basis ordering) and map the remediation path (affected modules/tests) in `summary.md`. Update this plan and docs/fix_plan Next Actions with the chosen implementation steps before any code changes. |
+| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
+| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
+| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
+| K3f4 | Record root cause & fix outline | [P] | Update `base_lattice/summary.md` (append “Root Cause” section) explaining that `Crystal.compute_cell_tensors` keeps the placeholder `V=1 Å^3` when MOSFLM vectors are provided; C recomputes `V_cell≈2.4682×10^4 Å^3`, rescales `b*×c*`, then converts to meters. Outline remediation: derive `cell_a/b/c` + `V` from MOSFLM cross products before computing real vectors, add regression test around `plans/active/cli-noise-pix0` Phase K3g. Afterwards, sync docs/fix_plan Next Actions. |
+
+#### Phase K3g — MOSFLM real-vector rescale implementation
+Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
+Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
+Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [ ] | When `mosflm_*` present, compute `V_star = a*·(b*×c*)`, `V_cell = 1/V_star`, derive real vectors via `b*×c*·V_cell`, etc. Update `cell_a/b/c` tensors (Å), `V`, and subsequent reciprocal recalculation to match C pipeline before converting to meters. Include explicit C reference block (nanoBragg.c 3135-3210). |
+| K3g2 | Add regression coverage for MOSFLM cell rebuild | [ ] | Extend existing scaling tests (or add new `tests/test_cli_scaling.py::test_mosflm_cell_vectors`) to assert that PyTorch real vectors (converted to Å) match C within 5e-4 for the supervisor command configuration. Capture supporting artifacts under `phase_k/base_lattice/post_fix/`. |
+| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
 
 ### Phase L — Final Parity & Regression Sweep
 Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   769cb00..cedeeed  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=53...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=53
Updating cedeeed..64236fe
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   cedeeed..64236fe  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=53
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
error: cannot pull with rebase: You have unstaged changes.
error: Please commit or stash them.
