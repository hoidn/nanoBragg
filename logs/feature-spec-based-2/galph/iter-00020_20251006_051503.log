Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=20
To github.com:hoidn/nanoBragg.git
   035a894..4dab2ea  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T05:15:06] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T05:15:06] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
Phase Gate (Evidence): If the active plan phase is Evidence, Do Now SHALL be evidence‑only: run the authoritative reference reproduction commands and capture the required artifacts; at most run the project’s test discovery (no execution). Do not include runnable tests.

Validation Preflight (tests): Before listing any test file/identifier in Do Now, validate that it resolves via the project’s documented test discovery; if validation fails, omit tests and note “(none — evidence‑only this loop)” and add a TODO in docs/fix_plan.md documenting the missing mapping.

Human Summary (input.md header): Prepend a short summary block with the following lines (validated where applicable):
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>

Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it relate to? 
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? if not, fix. things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, this should be addressed. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
- Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
- Header: timestamp, current commit hash (short), author “galph”, and Active Focus summary.
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the authoritative pytest command/env. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

Rules:
- Ralph must not edit input.md. You (galph) are the single writer.
- If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T05:15:15] thinking

**Preparing to run git pull with rebase**
[2025-10-06T05:15:16] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:18] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.07s:
Already up to date.
[2025-10-06T05:15:18] tokens used: 12,562

[2025-10-06T05:15:26] thinking

**Preparing to review galph_memory.md**
[2025-10-06T05:15:27] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:28] bash -lc 'cat galph_memory.md' succeeded in 905ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T05:15:28] tokens used: 12,798

[2025-10-06T05:15:29] thinking

**Checking active plans directory**
[2025-10-06T05:15:30] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:30] bash -lc 'ls plans/active' succeeded in 730ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T05:15:30] tokens used: 15,604

[2025-10-06T05:15:38] thinking

**Planning documentation review**
[2025-10-06T05:15:47] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:47] bash -lc 'cat docs/index.md' succeeded in 724ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T05:15:47] tokens used: 16,143

[2025-10-06T05:15:48] thinking

**Opening next spec file**
[2025-10-06T05:15:49] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:50] bash -lc 'cat specs/spec-a.md' succeeded in 720ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T05:15:50] tokens used: 17,764

[2025-10-06T05:15:52] thinking

**Considering whether to read shards**
[2025-10-06T05:15:52] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:53] bash -lc 'cat arch.md' succeeded in 702ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T05:15:53] tokens used: 18,057

[2025-10-06T05:15:55] thinking

**Identifying config map for PyTorch**
[2025-10-06T05:15:55] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:56] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 709ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T05:15:56] tokens used: 38,289

[2025-10-06T05:15:57] thinking

**Reviewing debugging documentation**
[2025-10-06T05:15:58] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:15:58] bash -lc 'cat docs/debugging/debugging.md' succeeded in 683ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T05:15:58] tokens used: 40,236

[2025-10-06T05:16:01] thinking

**Checking file length**
[2025-10-06T05:16:01] exec bash -lc 'wc -l docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:02] bash -lc 'wc -l docs/fix_plan.md' succeeded in 679ms:
     938 docs/fix_plan.md
[2025-10-06T05:16:02] tokens used: 42,801

[2025-10-06T05:16:04] thinking

**Considering how to read large file**
[2025-10-06T05:16:04] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:05] bash -lc 'cat docs/fix_plan.md' succeeded in 785ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T05:16:05] tokens used: 43,032

[2025-10-06T05:16:07] thinking

**Reviewing testing strategy documentation**
[2025-10-06T05:16:07] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:08] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 696ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T05:16:08] tokens used: 45,968

[2025-10-06T05:16:11] thinking

**Preparing for plan analysis**
[2025-10-06T05:16:11] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:12] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 783ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.

### Phase A — Requirements & Trace Alignment
Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |

### Phase B — CLI & Config Wiring
Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
[2025-10-06T05:16:12] tokens used: 48,756

[2025-10-06T05:16:14] thinking

**Reviewing truncated plan**
[2025-10-06T05:16:15] exec bash -lc "sed -n '100,220p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:16] bash -lc "sed -n '100,220p' plans/active/cli-noise-pix0/plan.md" succeeded in 693ms:
| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
[2025-10-06T05:16:16] tokens used: 50,553

[2025-10-06T05:16:18] thinking

**Investigating missing chunk and reading specific lines**
[2025-10-06T05:16:19] exec bash -lc "sed -n '60,160p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:19] bash -lc "sed -n '60,160p' plans/active/cli-noise-pix0/plan.md" succeeded in 732ms:
Exit Criteria: Trace comparison identifies first divergent variable; findings logged in `reports/2025-10-cli-flags/phase_e/trace_comparison.md` and summarized in docs/fix_plan.md `[CLI-FLAGS-003]` Attempts.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| E0 | Verify beam vector parity | [D] | ✅ 2025-10-16: `reports/2025-10-cli-flags/phase_e/beam_vector_check.txt` shows PyTorch Detector beam direction `[0., 0., 1.]` vs C trace override `[0.00051387949, 0, -0.99999986]`; confirms CLI wiring gap. |
| E1 | Instrument C trace for peak pixel | [D] | ✅ 2025-10-16: `c_trace_beam.log` captured via instrumented binary (pixel 1039,685) with pix0, beam, scattering, h/k/l, F_latt entries. |
| E2 | Generate matching PyTorch trace | [D] | ✅ 2025-10-16: `pytorch_trace_beam.log` generated with `trace_harness.py` (double precision). Harness currently overrides beam vector manually to mimic the supervisor command. |
| E3 | Diff traces and identify first divergence | [D] | ✅ 2025-10-16: `trace_diff_beam.txt` + `trace_summary.md` pinpoint pix0 mismatch (1.14 mm Y error) and reveal lost crystal orientation + polarization delta. docs/fix_plan.md Attempts updated with evidence requirements for implementation phases. |

### Phase F — Detector Implementation (beam + pix0 parity)
Goal: Port CUSTOM detector wiring so CLI overrides reproduce C behavior without ad-hoc harness patches.
Prereqs: Phase E traces complete; docs/fix_plan.md Attempt log captures pix0/beam/orientation findings.
Exit Criteria: Detector trace matches C for pix0 and incident beam; CLI parity run no longer relies on manual overrides.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| F1 | Thread `custom_beam_vector` through Detector | [D] | ✅ 2025-10-05 (ralph): Refactored `_calculate_pix0_vector()` to use `self.beam_vector` property instead of hardcoded beam vectors (lines 438-440, 519-521). Beam vector now exactly matches C trace. Artifacts in `reports/2025-10-cli-flags/phase_f/`. See docs/fix_plan.md Attempt #11. |
| F2 | Port CUSTOM pix0 transform for overrides | [D] | ✅ 2025-10-05: CUSTOM pathway from nanoBragg.c:1739-1846 ported (pivot override, MOSFLM vs CUSTOM offsets, close_distance recompute). Validation report at `reports/2025-10-cli-flags/phase_f2/pix0_transform_refit.txt`. Follow-up: ensure downstream uses keep `close_distance` as a tensor (no `.item()` detaches) when further tuning detector gradients. |
| F3 | Re-run Phase C2 parity smoke | [P] | 2025-10-17 Attempt #12 captured C vs PyTorch artifacts under `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/`; correlation ≈−5e-06 confirms geometry still diverges. Defer rerun until Phase G (A* orientation) lands so parity failure isn’t repeated; once orientation is wired, rerun parity and refresh metrics. |

[2025-10-06T05:16:19] tokens used: 50,804

[2025-10-06T05:16:21] thinking

**Preparing to review vectorization plan**
[2025-10-06T05:16:22] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:22] bash -lc 'cat plans/active/vectorization.md' succeeded in 719ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references).

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py` (create minimal harness if missing) to capture CPU timings for 256² and 512² detectors; record outputs in `phase_a/tricubic_baseline.md`. |
| A3 | Record detector absorption baseline | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus a microbenchmark (`python scripts/benchmarks/sample_absorption_baseline.py`) so we have pre-refactor timings; store under `phase_a/absorption_baseline.md`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T05:16:22] tokens used: 52,467

[2025-10-06T05:16:27] thinking

**Preparing for detailed analysis**

I’m getting ready to deeply analyze the current code and plans against the long-term goals, especially about adding new CLI flags like -nonoise and -pix0_vector_mm. I want to review the relevant docs and commit history without modifying anything, focusing first on understanding the current status from `docs/fix_plan` and CLI flag details. Let’s explore those pieces carefully!
[2025-10-06T05:16:30] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:30] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 803ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T05:16:30] tokens used: 55,120

[2025-10-06T05:16:32] thinking

**Checking specific line section**
[2025-10-06T05:16:33] exec bash -lc "sed -n '448,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:33] bash -lc "sed -n '448,620p' docs/fix_plan.md" succeeded in 693ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
- Attempts History:
  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
    Metrics: C reference behavior captured for both flags via parallel command execution.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
    Observations/Hypotheses:
[2025-10-06T05:16:33] tokens used: 55,395

[2025-10-06T05:16:36] thinking

**Checking vectorization plan entry**
[2025-10-06T05:16:37] exec bash -lc "sed -n '260,340p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:37] bash -lc "sed -n '260,340p' docs/fix_plan.md" succeeded in 679ms:
    Observations/Hypotheses: **CRITICAL FINDING:** Single-iteration profiling run shows PyTorch only 1.25× slower (0.652s vs 0.524s), dramatically better than Phase A baseline (3.55× slower, 1.783s). Possible causes: (1) Measurement variation (5-iteration average vs single run), (2) Improved torch.compile state, (3) Cache/memory layout benefits. **Action required:** Re-run Phase A with `--iterations 1` to validate whether gap is truly ~1.25× (near target) or ~3.5× (needs optimization).
    Next Actions: (1) Re-run Phase A baseline with single iteration for consistency, (2) Complete Phase B task B4 (extract hotspot % from Chrome trace), (3) Run B5 (eager-mode SF profile at 1024²), (4) Decision point: if validated gap ≤1.2×, skip Phase C/D; if >1.2×, proceed with diagnostic experiments.
  * [2025-10-01] Attempt #31 (loop BL) — Result: Reconciliation study COMPLETE. Resolved 1.25× vs 3.55× measurement discrepancy by executing both 1-iter and 5-iter benchmarks at 4096².
    Metrics: **Current performance:** 1-iter: Py 0.609s vs C 0.528s (1.15× slower); 5-iter: Py 0.600s vs C 0.538s (1.11× slower). **Phase A baseline (for comparison):** Py 1.783s vs C 0.502s (3.55× slower). **Performance improvement:** 3.1× faster PyTorch (1.743s → 0.565s avg simulation time).
    Artifacts: `reports/benchmarks/20251001-014819-measurement-reconciliation/{reconciliation_summary.md, quick_comparison.md, timeline.md, benchmark_results_1iter.json, benchmark_results_5iter.json}`.
    Observations/Hypotheses: (1) Iteration count does NOT explain discrepancy—1-iter vs 5-iter differ by only 1.6%. (2) PyTorch improved 3.1× between Phase A (00:50:52) and Phase B (01:01:28), most likely due to warm torch.compile cache state. (3) Current performance 1.11-1.15× slower meets ≤1.2× target (within 10% margin). (4) Phase A baseline appears to be outlier with cold cache state.
    Next Actions: (1) Mark Phase B task B4 complete with reconciliation summary, (2) Update Phase B decision to reflect **TARGET NEARLY ACHIEVED** status, (3) Consider Phase C/D optional "polish" work given proximity to goal.
  * [2025-10-13] Attempt #32 — Result: supervisor audit (no code change). Detected newly added benchmark set reports/benchmarks/20251001-025148/ showing warm speedup_warm=0.299 (PyTorch 1.774s vs C 0.531s) — a return to the original 3.3× slowdown. This contradicts Attempt #31's 1.11× measurements and indicates the improvement is not yet reproducible.
    Metrics: 4096² warm totals — PyTorch 1.7738s, C 0.5306s.
    Artifacts: reports/benchmarks/20251001-025148/benchmark_results.json; reports/benchmarks/20251001-025010/profile_1024x1024/trace.json (B5 eager profile).
    Observations/Hypotheses: Warm speedup hinges on cache state; without disciplined B6 reproducibility the plan cannot claim Phase B complete. Need cache-cleared reruns plus analysis contrasting 014819 vs 025148 results.
    Next Actions: Run B6 with explicit cache clearing notes, capture regression memo comparing both datasets, then update plan tables before entering Phase C.
  * [2025-10-01] Attempt #33 (loop CA) — Result: Phase B task B6 COMPLETE. Reproducibility study confirms stable performance at 1.21× slowdown.
    Metrics: 10 runs (5-iter averages each): mean speedup 0.8280 ± 0.0326 (PyTorch 1.21× slower), CV=3.9% (high reproducibility), correlation=1.0 (perfect numerical accuracy).
    Artifacts: `reports/benchmarks/20251001-030128-4096-warm-repro/{B6_summary.md, reproducibility_results.json, run1.log...run10.log}`.
    Observations/Hypotheses: (1) Performance is highly stable (CV<5%) confirming measurements are reliable. (2) Mean slowdown 1.21× exceeds ≤1.2× target by small margin (0.01×). (3) No runs achieved speedup ≥1.0 (range: 0.78–0.88). (4) **Phase B complete—target NOT met, proceed to Phase C diagnostics.** This addresses supervisor's Attempt #32 concern—B6 provides the requested reproducibility data showing stable 1.21× slowdown, not the 3.3× regression detected in 025148. Core geometry tests 31/31 passed.
    Next Actions: Execute Phase C diagnostic experiments (C1-C7) to identify remaining bottlenecks before considering optimization work in Phase D.
  * [2025-10-13] Attempt #34 (galph loop CG) — Result: Phase B re-opened. New benchmark log `reports/benchmarks/20251001-025148/benchmark_results.json` shows warm speedup≈0.30 (PyTorch 1.7738 s vs C 0.5306 s) even with cache hits, contradicting Attempt #33’s 0.828±0.033 average. Investigation found `scripts/benchmarks/benchmark_detailed.py` mutates `NB_DISABLE_COMPILE` when `--disable-compile` is toggled while the simulator actually reads `NANOBRAGG_DISABLE_COMPILE`, so the flag is ignored and cached compiled simulators bleed across "eager" runs. Because the env var is also unset unconditionally, downstream callers inherit indeterminate compile state and benchmark logs lack mode metadata.
    Next Actions: (1) Implement Plan task B7 (push/pop `NANOBRAGG_DISABLE_COMPILE`, cache keyed by mode, compile-mode metadata). (2) Re-run the ten-run cold-process study per reopened B6 after patching the harness, capturing cache-hit + compile-mode flags in each artifact. (3) Draft reconciliation memo comparing the new roll-up against both the 025148 regression and 030128 reproducibility datasets, then update plan status before entering Phase C.
- Risks/Assumptions: 1024² CPU performance acceptable given GPU alternative; Phase 4 revisit only if future profiling identifies specific bottlenecks. Weighted-source tooling must be path-agnostic before P3.0c evidence is considered durable.
[2025-10-06T05:16:37] tokens used: 58,405

[2025-10-06T05:16:41] thinking

**Preparing to run coin toss in Python**
[2025-10-06T05:16:42] exec bash -lc "python - <<'PY'
import random
print('heads' if random.random()<0.5 else 'tails')
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:43] bash -lc "python - <<'PY'
import random
print('heads' if random.random()<0.5 else 'tails')
PY" succeeded in 814ms:
heads
[2025-10-06T05:16:43] tokens used: 61,156

[2025-10-06T05:16:45] thinking

**Reviewing recent commits for analysis**
[2025-10-06T05:16:46] exec bash -lc 'git log --oneline --decorate -n 12' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:47] bash -lc 'git log --oneline --decorate -n 12' succeeded in 819ms:
4dab2ea (HEAD -> feature/spec-based-2, origin/feature/spec-based-2) [SYNC i=20] actor=galph status=running
035a894 [SYNC i=20] actor=ralph → next=galph status=ok ralph_commit=b73f0e2
b73f0e2 CLI-FLAGS-003 Phase G3: Fix MOSFLM matrix transpose bug
10a40c0 [SYNC i=19] actor=ralph status=running
d7f4db5 [SYNC i=19] actor=galph → next=ralph status=ok galph_commit=2ae6079
2ae6079 SUPERVISOR: Phase G3 prep - tests: not run
6a0d252 [SYNC i=19] actor=galph status=running
bd94c53 [SYNC i=19] actor=ralph → next=galph status=ok ralph_commit=2bc6f4e
2bc6f4e [SYNC i=18] actor=ralph status=running
3691435 [SYNC i=18] actor=ralph status=running
aba84f4 [SYNC i=18] actor=galph → next=ralph status=ok galph_commit=d8bedc9
d8bedc9 SUPERVISOR: Phase G2 orientation prep - tests: not run
[2025-10-06T05:16:47] tokens used: 61,836

[2025-10-06T05:16:49] thinking

**Reviewing specific commit details**
[2025-10-06T05:16:50] exec bash -lc 'git show b73f0e2' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:50] bash -lc 'git show b73f0e2' succeeded in 720ms:
commit b73f0e25707fcd31228f5f1c9490164cc4e1218d
Author: ollie <ohoidn>
Date:   Sun Oct 5 22:14:22 2025 -0700

    CLI-FLAGS-003 Phase G3: Fix MOSFLM matrix transpose bug
    
    Root cause: C reads MOSFLM matrix in column-major order (each file row
    provides one component of all three vectors), while Python was reading
    row-major (each file row as complete vector).
    
    Fix:
    - src/nanobrag_torch/io/mosflm.py:88 - Added matrix.T transpose
    - reports/2025-10-cli-flags/phase_e/trace_harness.py:89-92 - Thread MOSFLM vectors to CrystalConfig
    
    Results:
    - Reciprocal vectors: Perfect match (9/9 components exact to 16 decimals)
    - Miller indices: (2,2,-13) match (was wrong (6,7,-3) before)
    - F_cell: 300.58 perfect match
    - Real vectors: Component [0] exact, [1][2] within 0.05Å (~0.2% error acceptable)
    
[2025-10-06T05:16:50] tokens used: 62,950

[2025-10-06T05:16:53] thinking

**Reviewing recent commits**
[2025-10-06T05:16:54] exec bash -lc 'git show 2bc6f4e --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:55] bash -lc 'git show 2bc6f4e --stat' succeeded in 744ms:
commit 2bc6f4ecaabb637f690a6f2f1775f738770ad954
Author: ollie <ohoidn>
Date:   Sun Oct 5 21:50:44 2025 -0700

    [SYNC i=18] actor=ralph status=running

 docs/fix_plan.md                            | 18 +++++-
 plans/active/cli-noise-pix0/plan.md         |  2 +-
 pyproject.toml                              |  6 +-
 reports/2025-10-cli-flags/phase_g/README.md | 85 +++++++++++++++++++++++++++
 src/nanobrag_torch/models/crystal.py        | 89 ++++++++++++++++++-----------
 5 files changed, 165 insertions(+), 35 deletions(-)
[2025-10-06T05:16:55] tokens used: 66,722

[2025-10-06T05:16:57] thinking

**Inspecting details for evaluation**
[2025-10-06T05:16:58] exec bash -lc 'git show 2bc6f4e' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:16:58] bash -lc 'git show 2bc6f4e' succeeded in 721ms:
commit 2bc6f4ecaabb637f690a6f2f1775f738770ad954
Author: ollie <ohoidn>
Date:   Sun Oct 5 21:50:44 2025 -0700

    [SYNC i=18] actor=ralph status=running

diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a9a8c1e..98724d0 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -728,8 +728,24 @@
       - Next phase requires Crystal to check for MOSFLM orientation and apply Core Rules 12-13 (misset pipeline + metric duality)
       - C reference: nanoBragg.c:3135-3278 shows full orientation handling including misset rotation and recalculation
     Next Actions: Execute Phase G2 per plan task: Update Crystal.__init__ to detect MOSFLM orientation in config, apply it instead of canonical build, integrate with misset rotation (Core Rule 12), and ensure metric duality (Core Rule 13). Then run Phase G3 trace verification.
+  * [2025-10-17] Attempt #17 (ralph) — Result: success (Phase G2 complete). **MOSFLM orientation ingestion implemented in Crystal.**
+    Metrics: Test suite: 26/26 passed (mapped CLI tests), 35/35 passed (crystal geometry tests). Metric duality perfect: a·a* = b·b* = c·c* = 1.000000000000. Runtime: 2.51s (mapped), 7.50s (crystal).
+    Artifacts:
+      - `src/nanobrag_torch/models/crystal.py:545-603` - Added MOSFLM orientation detection and tensor conversion
+      - `reports/2025-10-cli-flags/phase_g/README.md` - Complete Phase G2 implementation report
+      - Manual validation: `/tmp/test_mosflm_exact.py` demonstrates CLI→Config→Crystal pipeline with metric duality
[2025-10-06T05:16:58] tokens used: 67,692

[2025-10-06T05:17:05] thinking

**Assessing progress and planning next steps**

I’m analyzing recent code changes and logs to understand productivity and check for regressions, focusing on commits like b73f0e2 and 2bc6f4e. I’m also reviewing previous planning attempts and various reports to gather info before deciding if a plan update is needed or further multi-turn planning. This will help me produce a detailed analysis for the summary and plan updates.
[2025-10-06T05:17:07] exec bash -lc 'cat reports/2025-10-cli-flags/phase_g/README.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:17:08] bash -lc 'cat reports/2025-10-cli-flags/phase_g/README.md' succeeded in 762ms:
# Phase G2 - MOSFLM Orientation Ingestion

**Date:** 2025-10-17
**Task:** Teach Crystal to ingest MOSFLM orientation from CLI `-mat` flag
**Status:** ✅ Complete

## Implementation Summary

Modified `src/nanobrag_torch/models/crystal.py` to detect and use MOSFLM A* orientation vectors when provided in `CrystalConfig`, following Core Rules 12-13.

### Changes Made

1. **Crystal.compute_cell_tensors() modification** (lines 545-603)
   - Added conditional check for `mosflm_a_star`, `mosflm_b_star`, `mosflm_c_star` in config
   - If present, convert numpy arrays to tensors with proper device/dtype
   - Use MOSFLM vectors as initial reciprocal vectors instead of computing from cell parameters
   - Maintain same Core Rule 12-13 pipeline (misset → real-from-reciprocal → reciprocal-from-real)

### Core Rules Compliance

[2025-10-06T05:17:08] tokens used: 71,741

[2025-10-06T05:17:10] thinking

**Checking for pending tasks and relevant reports**
[2025-10-06T05:17:10] exec bash -lc 'cat reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:17:11] bash -lc 'cat reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md' succeeded in 722ms:
# Phase G3 Trace Comparison - MOSFLM Orientation (FIXED)

**Date:** 2025-10-06
**Pixel:** (1039, 685)
**Fix:** Transposed MOSFLM matrix reading to match C column-major convention

## Executive Summary

**STATUS: ROOT CAUSE IDENTIFIED AND FIXED**

The MOSFLM orientation matrix was being read with incorrect transpose. C code reads the matrix file in **column-major** order while PyTorch was reading it in **row-major** order.

### Fix Applied

**File:** `src/nanobrag_torch/io/mosflm.py:88`
```python
# Added transpose after reading matrix from file
matrix = matrix.T
```

[2025-10-06T05:17:11] tokens used: 72,850

[2025-10-06T05:17:16] thinking

**Reviewing project phases and tasks**
[2025-10-06T05:17:16] exec bash -lc ls in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:17:17] bash -lc ls succeeded in 771ms:
1.0
1e6
A.mat
AGENTS.md
AT012_TRACE_ANALYSIS.md
CLAUDE.md
COMMIT_MESSAGE.md
DEBUGGING_NIGHTMARE_PREVENTION_TOOLKIT.md
FINAL_DIAGNOSIS_REPORT.md
HYPOTHESIS_TESTING_RESULTS.md
HYPOTHESIS_TEST_RESULTS.md
LICENSE
Makefile
P1.hkl
PARALLEL_TEST_COMMANDS.md
PARALLEL_VALIDATION_ACCEPTANCE_TESTS.md
PERFORMANCE_ANALYSIS.md
PHASE_4_1_DIAGNOSTIC_REPORT.md
PHASE_5_FINAL_VALIDATION_REPORT.md
PHASE_5_IMPLEMENTATION_SUMMARY.md
[2025-10-06T05:17:17] tokens used: 75,302

[2025-10-06T05:17:25] thinking

**Assessing plan status and commits**

I'm reviewing the current plan phases and the presence of artifacts like `scaled.hkl.1`. I need to confirm if the active plan phase is Evidence for input writing and decide whether to update the existing plan based on new analysis or polarization tasks. I also plan to verify the nature of SYNC commits to distinguish them from real code changes while preparing to update documentation and memory files.
[2025-10-06T05:17:27] exec bash -lc 'git show 035a894' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:17:28] bash -lc 'git show 035a894' succeeded in 909ms:
commit 035a89445093b480f560a5f36023a2caab05c05b
Author: ollie <ohoidn>
Date:   Sun Oct 5 22:14:58 2025 -0700

    [SYNC i=20] actor=ralph → next=galph status=ok ralph_commit=b73f0e2

diff --git a/sync/state.json b/sync/state.json
index eb18407..fd9fd04 100644
--- a/sync/state.json
+++ b/sync/state.json
@@ -1,9 +1,9 @@
 {
-  "iteration": 19,
-  "expected_actor": "ralph",
-  "status": "running-ralph",
-  "last_update": "2025-10-06T04:59:10Z",
-  "lease_expires_at": "2025-10-06T05:09:10Z",
+  "iteration": 20,
+  "expected_actor": "galph",
+  "status": "complete",
[2025-10-06T05:17:28] tokens used: 77,203

[2025-10-06T05:17:29] thinking

**Checking earlier commits**
[2025-10-06T05:17:30] exec bash -lc 'git show 3691435 --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:17:31] bash -lc 'git show 3691435 --stat' succeeded in 706ms:
commit 3691435502e86dd372ea6c4954a7f5dbc2ddfa96
Author: ollie <ohoidn>
Date:   Sun Oct 5 21:41:08 2025 -0700

    [SYNC i=18] actor=ralph status=running

 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
[2025-10-06T05:17:31] tokens used: 77,752

[2025-10-06T05:17:43] thinking

**Evaluating recent commits and plan adjustments**
[2025-10-06T05:17:44] exec bash -lc 'rg "F_latt" reports/2025-10-cli-flags -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:17:44] bash -lc 'rg "F_latt" reports/2025-10-cli-flags -n' succeeded in 702ms:
reports/2025-10-cli-flags/phase_e/c_trace_full.log:185:TRACE_C: F_latt_a 35.8890618450812
reports/2025-10-cli-flags/phase_e/c_trace_full.log:186:TRACE_C: F_latt_b 38.6324938361129
reports/2025-10-cli-flags/phase_e/c_trace_full.log:187:TRACE_C: F_latt_c 25.7024842831081
reports/2025-10-cli-flags/phase_e/c_trace_full.log:188:TRACE_C: F_latt 35636.0822038919
reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md:76:| F_latt | 35636 | 62.68 | 0.0018 | ⚠️ Different |
reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md:81:- **F_latt mismatch** indicates lattice transform calculation differs
reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md:82:- **I_pixel mismatch** is consequence of F_latt error plus remaining geometry deltas
reports/2025-10-cli-flags/phase_e/trace_side_by_side.tsv:22:TRACE_C: F_latt_a 35.8890618450812	TRACE_PY: F_latt_a 34.0015310029289
reports/2025-10-cli-flags/phase_e/trace_side_by_side.tsv:23:TRACE_C: F_latt_b 38.6324938361129	TRACE_PY: F_latt_b 0.685748932705493
reports/2025-10-cli-flags/phase_e/trace_side_by_side.tsv:24:TRACE_C: F_latt_c 25.7024842831081	TRACE_PY: F_latt_c -0.242774862334505
reports/2025-10-cli-flags/phase_e/trace_side_by_side.tsv:25:TRACE_C: F_latt 35636.0822038919	TRACE_PY: F_latt -5.66066337829513
reports/2025-10-cli-flags/phase_d/intensity_gap.md:153:**Test needed:** Compare `F_latt` values for top-10 C peaks in PyTorch trace
reports/2025-10-cli-flags/phase_d/intensity_gap.md:160:   - Instrument C code to print pix0_vector, incident_beam_direction, scattering_vector, h/k/l, F_cell, F_latt, omega for pixel (1039, 685)
reports/2025-10-cli-flags/phase_d/intensity_gap.md:186:- If F_cell/F_latt wrong → Fix structure factor lookup/interpolation
reports/2025-10-cli-flags/phase_g/trace_summary_orientation.md:87:| F_latt | 35636 | -2.068 | Wrong sign! |
reports/2025-10-cli-flags/phase_e/pytorch_instrumentation_notes.md:35:10. F_latt_a/b/c, F_latt (lattice structure factors)
reports/2025-10-cli-flags/phase_e/trace_diff.txt:25:-TRACE_C: F_latt_a 35.8890618450812
reports/2025-10-cli-flags/phase_e/trace_diff.txt:26:-TRACE_C: F_latt_b 38.6324938361129
reports/2025-10-cli-flags/phase_e/trace_diff.txt:27:-TRACE_C: F_latt_c 25.7024842831081
reports/2025-10-cli-flags/phase_e/trace_diff.txt:28:-TRACE_C: F_latt 35636.0822038919
[2025-10-06T05:17:44] tokens used: 78,569

[2025-10-06T05:17:49] thinking

**Investigating large F_latt discrepancy**
[2025-10-06T05:17:49] exec bash -lc 'rg "F_latt" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:17:50] bash -lc 'rg "F_latt" docs/fix_plan.md' succeeded in 694ms:
    Next Actions: **MANDATORY parallel trace comparison** per `docs/debugging/debugging.md` §2.1 - instrument C to print pix0_vector, incident_beam_direction, scattering_vector, h/k/l, F_cell, F_latt, omega for pixel (1039,685); generate matching PyTorch trace; compare line-by-line to find first divergence. Only after trace identifies root cause should implementation fixes begin.
      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
[2025-10-06T05:17:50] tokens used: 81,499

[2025-10-06T05:17:56] thinking

**Analyzing F_latt difference and planning next steps**

I'm focusing on the persistent F_latt difference that orientation fixes haven't resolved, which suggests more investigation is needed, possibly doping or shape factor calculations. I want to check the code—especially in `src/nanobrag_torch/models/crystal.py`—to understand how F_latt is computed, and update the project plan to incorporate these new diagnosis tasks. There's also a need to reconsider the vectorization plan and whether current phases properly cover this issue.
[2025-10-06T05:17:59] exec bash -lc 'rg "F_latt" -n src' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:00] bash -lc 'rg "F_latt" -n src' succeeded in 720ms:
src/nanobrag_torch/simulator.py:219:        F_latt_a = sincg(torch.pi * (h - h0), Na)
src/nanobrag_torch/simulator.py:220:        F_latt_b = sincg(torch.pi * (k - k0), Nb)
src/nanobrag_torch/simulator.py:221:        F_latt_c = sincg(torch.pi * (l - l0), Nc)
src/nanobrag_torch/simulator.py:222:        F_latt = F_latt_a * F_latt_b * F_latt_c
src/nanobrag_torch/simulator.py:232:        F_latt = Na * Nb * Nc * 0.723601254558268 * sinc3(
src/nanobrag_torch/simulator.py:251:        F_latt = Na * Nb * Nc * torch.exp(-(rad_star_sqr / 0.63) * fudge)
src/nanobrag_torch/simulator.py:269:        F_latt = torch.where(inside_cutoff,
src/nanobrag_torch/simulator.py:276:    F_total = F_cell * F_latt
src/nanobrag_torch/simulator.py:710:                                    /* ... F_cell and F_latt calculation ... */
src/nanobrag_torch/simulator.py:713:                                    I += F_cell*F_cell*F_latt*F_latt;
src/nanobrag_torch/simulator.py:1274:                    # Calculate F_latt components (SQUARE shape assumed)
src/nanobrag_torch/simulator.py:1280:                    F_latt_a = sincg(torch.pi * torch.tensor(h - h0), Na).item()
src/nanobrag_torch/simulator.py:1281:                    F_latt_b = sincg(torch.pi * torch.tensor(k - k0), Nb).item()
src/nanobrag_torch/simulator.py:1282:                    F_latt_c = sincg(torch.pi * torch.tensor(l - l0), Nc).item()
src/nanobrag_torch/simulator.py:1283:                    F_latt = F_latt_a * F_latt_b * F_latt_c
src/nanobrag_torch/simulator.py:1285:                    print(f"TRACE_PY: F_latt_a {F_latt_a:.15g}")
src/nanobrag_torch/simulator.py:1286:                    print(f"TRACE_PY: F_latt_b {F_latt_b:.15g}")
src/nanobrag_torch/simulator.py:1287:                    print(f"TRACE_PY: F_latt_c {F_latt_c:.15g}")
src/nanobrag_torch/simulator.py:1288:                    print(f"TRACE_PY: F_latt {F_latt:.15g}")
src/nanobrag_torch/simulator.py:1299:                    I_before_scaling = (F_cell * F_latt) ** 2
[2025-10-06T05:18:00] tokens used: 82,089

[2025-10-06T05:18:02] thinking

**Investigating shape configuration**
[2025-10-06T05:18:03] exec bash -lc 'rg "CrystalShape" -n src' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:03] bash -lc 'rg "CrystalShape" -n src' succeeded in 717ms:
src/nanobrag_torch/__main__.py:24:    DetectorConvention, DetectorPivot, CrystalShape
src/nanobrag_torch/__main__.py:840:                shape=CrystalShape[config.get('crystal_shape', 'SQUARE')],
src/nanobrag_torch/simulator.py:12:from .config import BeamConfig, CrystalConfig, CrystalShape
src/nanobrag_torch/simulator.py:40:    crystal_shape: CrystalShape = CrystalShape.SQUARE,
src/nanobrag_torch/simulator.py:218:    if shape == CrystalShape.SQUARE:
src/nanobrag_torch/simulator.py:223:    elif shape == CrystalShape.ROUND:
src/nanobrag_torch/simulator.py:235:    elif shape == CrystalShape.GAUSS:
src/nanobrag_torch/simulator.py:252:    elif shape == CrystalShape.TOPHAT:
src/nanobrag_torch/config.py:87:class CrystalShape(Enum):
src/nanobrag_torch/config.py:148:    shape: CrystalShape = CrystalShape.SQUARE  # Crystal shape model for F_latt calculation
[2025-10-06T05:18:03] tokens used: 83,075

[2025-10-06T05:18:05] thinking

**Verifying CLI flag hookup**
[2025-10-06T05:18:06] exec bash -lc "sed -n '820,880p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:07] bash -lc "sed -n '820,880p' src/nanobrag_torch/__main__.py" succeeded in 715ms:
        device = torch.device(args.device)

        # Validate and convert arguments
        config = parse_and_validate_args(args)

        # Create configuration objects
        if 'cell_params' in config:
            crystal_config = CrystalConfig(
                cell_a=config['cell_params'][0],
                cell_b=config['cell_params'][1],
                cell_c=config['cell_params'][2],
                cell_alpha=config['cell_params'][3],
                cell_beta=config['cell_params'][4],
                cell_gamma=config['cell_params'][5],
                N_cells=(config.get('Na', 1), config.get('Nb', 1), config.get('Nc', 1)),  # Match C defaults
                phi_start_deg=config.get('phi_deg', 0.0),
                osc_range_deg=config.get('osc_deg', 0.0),
                phi_steps=config.get('phi_steps', 1),
                mosaic_spread_deg=config.get('mosaic_spread_deg', 0.0),
                mosaic_domains=config.get('mosaic_domains', 1),
[2025-10-06T05:18:07] tokens used: 83,511

[2025-10-06T05:18:11] thinking

**Investigating fudge factor and crystal shape differences**
[2025-10-06T05:18:12] exec bash -lc "sed -n '200,300p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:12] bash -lc "sed -n '200,300p' src/nanobrag_torch/simulator.py" succeeded in 723ms:
    k0 = torch.round(k)
    l0 = torch.round(l)

    # Look up structure factors
    F_cell = crystal_get_structure_factor(h0, k0, l0)

    # Ensure F_cell is on the same device as h (device-neutral implementation per Core Rule #16)
    # The crystal.get_structure_factor may return CPU tensors even when h0/k0/l0 are on CUDA
    if F_cell.device != h.device:
        F_cell = F_cell.to(device=h.device)

    # Calculate lattice structure factor
    Na = N_cells_a
    Nb = N_cells_b
    Nc = N_cells_c
    shape = crystal_shape
    fudge = crystal_fudge

    if shape == CrystalShape.SQUARE:
        F_latt_a = sincg(torch.pi * (h - h0), Na)
[2025-10-06T05:18:12] tokens used: 84,598

[2025-10-06T05:18:15] thinking

**Investigating F_latt discrepancy**
[2025-10-06T05:18:20] exec bash -lc 'rg "def sincg" -n src/nanobrag_torch/utils/physics.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:21] bash -lc 'rg "def sincg" -n src/nanobrag_torch/utils/physics.py' succeeded in 1.13s:
33:def sincg(u: torch.Tensor, N: torch.Tensor) -> torch.Tensor:
[2025-10-06T05:18:21] tokens used: 86,808
[2025-10-06T05:18:23] exec bash -lc "sed -n '1,120p' src/nanobrag_torch/utils/physics.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:23] bash -lc "sed -n '1,120p' src/nanobrag_torch/utils/physics.py" succeeded in 804ms:
"""
Vectorized physics utilities for nanoBragg PyTorch implementation.

This module contains PyTorch implementations of physical models and
calculations from the original C code.
"""

import torch


# Use different compile modes for CPU vs GPU to avoid CUDA graph issues
# On GPU, "max-autotune" avoids the nested compilation CUDA graph problem
# On CPU, "reduce-overhead" is faster
def _get_compile_decorator():
    """Get appropriate compile decorator based on available hardware."""
    import os
    disable_compile = os.environ.get("NANOBRAGG_DISABLE_COMPILE", "0") == "1"

    if disable_compile:
        # Return identity decorator when compilation is disabled (for gradient testing)
[2025-10-06T05:18:23] tokens used: 87,001

[2025-10-06T05:18:34] thinking

**Analyzing lattice factor discrepancies**
[2025-10-06T05:18:36] exec bash -lc 'cat reports/2025-10-cli-flags/phase_g/traces/trace_c.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:36] bash -lc 'cat reports/2025-10-cli-flags/phase_g/traces/trace_c.log' succeeded in 896ms:
TRACE_C: pix0_vector_meters -0.216475836204836 0.216343050492215 -0.230192414300537
TRACE_C: fdet_vec 0.999982004873912 -0.00599800002923425 -0.000118000000575132
TRACE_C: sdet_vec -0.0059979996566955 -0.999969942765222 -0.0049129997187971
TRACE_C: pixel_pos_meters -0.0996443642887915 0.0368472243540029 -0.231084742080328
TRACE_C: R_distance_meters 0.254336146269938
TRACE_C: omega_pixel_sr 4.15867865980257e-07
TRACE_C: close_distance_meters 0.231271826111781
TRACE_C: obliquity_factor 0.909315602613253
TRACE_C: diffracted_vec -0.391782158179886 0.14487608188769 -0.908580024779756
TRACE_C: incident_vec 0.000513879494092498 -0 -0.999999867963924
TRACE_C: lambda_meters 9.768e-11
TRACE_C: lambda_angstroms 0.9768
TRACE_C: scattering_vec_A_inv -4016134701.82206 1483170371.49559 935911580.509501
TRACE_C: rot_a_angstroms -14.3562690335399 -21.8805340763623 -5.5476578307123
TRACE_C: rot_b_angstroms -11.4986968432508 0.671588233999813 -29.1143056268565
TRACE_C: rot_c_angstroms 21.0699500320179 -24.4045855811067 -9.7143290320006
TRACE_C: rot_a_star_A_inv -0.0290510954135954 -0.0293958845208845 0.0107498771498771
TRACE_C: rot_b_star_A_inv -0.0031263923013923 0.0104376433251433 -0.0328566748566749
TRACE_C: rot_c_star_A_inv 0.0259604422604423 -0.014333015970516 -0.0106066134316134
TRACE_C: hkl_frac 2.00120331912649 1.99279793937568 -12.9907668789699
[2025-10-06T05:18:36] tokens used: 88,898

[2025-10-06T05:18:47] thinking

**Analyzing discrepancies in lattice factor calculations**

I'm comparing `hkl_frac` and other vector differences between the C version and PyTorch implementation, noticing subtle but potentially impactful mismatches in pixel positions and scattering vectors that could explain large lattice factor (`F_latt`) deviations; I’m thinking the next step is to verify the `F_latt` computation itself and consider introducing a debugging phase focused on shape factors before polarization, while also checking how `N_cells` are stored in the `CrystalConfig` dataclass for consistency.
[2025-10-06T05:18:49] exec bash -lc "sed -n '120,220p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:18:49] bash -lc "sed -n '120,220p' src/nanobrag_torch/config.py" succeeded in 885ms:
    misset_random: bool = False  # If True, generate random misset angles using seed
    misset_seed: Optional[int] = None  # Seed for random misset generation (C-compatible LCG)

    # MOSFLM matrix orientation (Phase G - CLI-FLAGS-003)
    # When -mat file is provided, these store the MOSFLM A* orientation in Å⁻¹
    # If None, Crystal uses canonical orientation from cell parameters
    mosflm_a_star: Optional[np.ndarray] = None  # MOSFLM a* reciprocal vector (Å⁻¹)
    mosflm_b_star: Optional[np.ndarray] = None  # MOSFLM b* reciprocal vector (Å⁻¹)
    mosflm_c_star: Optional[np.ndarray] = None  # MOSFLM c* reciprocal vector (Å⁻¹)

    # Spindle rotation parameters
    phi_start_deg: float = 0.0
    osc_range_deg: float = 0.0
    phi_steps: int = 1
    spindle_axis: Tuple[float, float, float] = (0.0, 0.0, 1.0)

    # Mosaicity parameters
    mosaic_spread_deg: float = 0.0
    mosaic_domains: int = 1
    mosaic_seed: Optional[int] = None
[2025-10-06T05:18:49] tokens used: 90,439

[2025-10-06T05:19:31] thinking

**Analyzing plan gaps and restructuring**

I'm analyzing discrepancies causing lattice structure factor differences, identifying a missing plan phase to address scattering vector alignment before polarization. I'll prepare to restructure the plan by inserting a new Phase H dedicated to lattice factor alignment and shifting polarization to Phase I, updating tasks, documentation, and references accordingly. This will ensure the plan systematically resolves key discrepancies before moving to polarization fixes.
[2025-10-06T05:19:33] exec bash -lc 'rg "Phase H" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:19:34] bash -lc 'rg "Phase H" docs/fix_plan.md' succeeded in 977ms:
- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
[2025-10-06T05:19:34] tokens used: 94,643

[2025-10-06T05:19:45] thinking

**Updating plan references and determining next action**

I'm aligning all mentions of Phase H to reflect the new lattice factor and polarization details, including exit criteria updates. I also need to pick the correct fix_plan item for the immediate "Do Now" task and clarify the exact testing or trace commands, especially since this evidence phase might not require traditional pytest runs. I'll review the tracing script next to nail the command.
[2025-10-06T05:19:48] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_e/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:19:49] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_e/trace_harness.py" succeeded in 821ms:
#!/usr/bin/env python3
"""
PyTorch trace harness for CLI-FLAGS-003 Phase E2.
Generates TRACE_PY output matching C trace format.
"""

import os
import sys
import torch
from pathlib import Path

# Set environment variable for MKL conflicts
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent / 'src'))

from nanobrag_torch.config import (
    DetectorConfig, CrystalConfig, BeamConfig,
    DetectorConvention, DetectorPivot, CrystalShape
[2025-10-06T05:19:49] tokens used: 96,448

[2025-10-06T05:19:57] thinking

**Updating harness and plan context**
[2025-10-06T05:20:02] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -4,3 +4,3 @@
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
[2025-10-06T05:20:02] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T05:20:02] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..2cbe047a65e00df40b7a379cc2c7b1e4717a375c
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment

[2025-10-06T05:20:02] tokens used: 98,960
[2025-10-06T05:20:02] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..2cbe047a65e00df40b7a379cc2c7b1e4717a375c
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment


[2025-10-06T05:20:08] thinking

**Updating Phase H and I sections**
[2025-10-06T05:20:20] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -90,5 +90,16 @@
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
@@ -97,4 +108,4 @@
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
[2025-10-06T05:20:20] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T05:20:20] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:20:20] tokens used: 100,988
[2025-10-06T05:20:20] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:20:26] thinking

**Updating fix_plan.md for new phases**
[2025-10-06T05:20:26] exec bash -lc "sed -n '448,540p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:20:27] bash -lc "sed -n '448,540p' docs/fix_plan.md" succeeded in 974ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
- Attempts History:
  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
    Metrics: C reference behavior captured for both flags via parallel command execution.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
    Observations/Hypotheses:
[2025-10-06T05:20:27] tokens used: 102,328
[2025-10-06T05:20:27] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:20:36] thinking

**Updating status lines and next actions**
[2025-10-06T05:20:39] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -450,3 +450,3 @@
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
@@ -457,3 +457,3 @@
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
[2025-10-06T05:20:39] apply_patch(auto_approved=true) exited 0 in 18ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T05:20:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..614132dfbaf21b07302f03988de55c7ec5bbdf7c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:20:39] tokens used: 105,809
[2025-10-06T05:20:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..614132dfbaf21b07302f03988de55c7ec5bbdf7c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:20:42] thinking

**Searching documentation for references**
[2025-10-06T05:20:42] exec bash -lc 'rg "Phase H" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:20:43] bash -lc 'rg "Phase H" -n docs/fix_plan.md' succeeded in 867ms:
458:- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
623:  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
761:      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
762:    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
764:- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
[2025-10-06T05:20:43] tokens used: 106,618
[2025-10-06T05:20:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..614132dfbaf21b07302f03988de55c7ec5bbdf7c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:20:46] thinking

**Planning text updates for new phases**
[2025-10-06T05:20:47] exec bash -lc "sed -n '600,780p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:20:47] bash -lc "sed -n '600,780p' docs/fix_plan.md" succeeded in 731ms:
      - Remaining pix0 discrepancy (~0.84mm Y) indicates Phase F2 (CUSTOM pix0 transform) still needed per plan
    Next Actions: Execute plan Phase F2 (port CUSTOM pix0 transform from nanoBragg.c:1730-1860), then Phase F3 parity rerun. After F2 complete, pix0 should match C within ≤1e-12 and geometry correlation should exceed 0.999.
    Next Actions: Update plan Phase E guidance to document beam-vector evidence (done) and prioritize implementation work that (1) threads `custom_beam_vector` into Detector/BeamConfig while preserving differentiability and device/dtype neutrality, and (2) re-runs Phase E traces to confirm both pix0 and beam vectors match before reattempting parity.
  * [2025-10-16] Attempt #7 (ralph) — Result: Phase E0 complete (evidence captured). Beam-vector divergence confirmed.
    Metrics: PyTorch beam_vector = `tensor([0., 0., 1.], dtype=torch.float64)` (CUSTOM/XDS default); C log reports user-supplied `-beam_vector 0.00051387949 0.0 -0.99999986`. Confirms CLI parser stores but does not thread `custom_beam_vector` through to detector instantiation.
    Artifacts: `reports/2025-10-cli-flags/phase_e/beam_vector_check.txt` (1 line: PyTorch beam_vector output).
    Observations/Hypotheses: CLI successfully parsed all flags including `-beam_vector`, `-pix0_vector_mm`, `-convention CUSTOM` inputs, but `Detector.__init__` ignores `custom_beam_vector` from config and falls back to convention defaults. This is the second geometry gap alongside the pix0 transform issue documented in Attempt #5 (Phase E). Running the evidence harness also created a duplicate copy of the structure-factor file (`scaled.hkl.1`, identical to `scaled.hkl`) in the repo root; treat it as an artefact that needs removal during the upcoming implementation pass so repo hygiene stays intact.
    Next Actions: (1) Execute plan Phase E tasks E1-E3 to generate full C/PyTorch traces with this configuration; (2) Implement detector fix to accept and use `custom_beam_vector` from config while maintaining differentiability/device-neutrality (documented in detector.md §5); (3) Re-run beam_vector_check to verify alignment before parity retry; (4) Delete the stray `scaled.hkl.1` artefact once the investigation concludes (confirm prior to Protected Assets scan).
  * [2025-10-05] Attempt #8 (ralph) — Result: success (Phase E1-E3 complete). **Crystal lattice orientation bug discovered as primary root cause.**
    Metrics: C pix0_vector = `-0.21648, 0.21634, -0.23019`; PyTorch pix0_vector = `-0.21634, 0.21521, -0.23020` (1.14 mm Y-axis error). C incident_beam = `0.000513879 0 -0.999999868` matches PyTorch `0.00051387949 0 -0.99999986` ✓. **CRITICAL:** C crystal vectors are fully populated triclinic (from A.mat file); PyTorch vectors are upper-triangular canonical form (default orientation), indicating A.mat not loaded or not applied.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_e/c_trace_beam.log` - Full C trace with 40 TRACE_C variables
      - `reports/2025-10-cli-flags/phase_e/pytorch_trace_beam.log` - Full PyTorch trace with 42 TRACE_PY variables
      - `reports/2025-10-cli-flags/phase_e/trace_diff_beam.txt` - Unified diff identifying divergences
      - `reports/2025-10-cli-flags/phase_e/trace_side_by_side.tsv` - Tab-separated side-by-side comparison
      - `reports/2025-10-cli-flags/phase_e/trace_summary.md` - Complete analysis with cascade table and next actions
    Observations/Hypotheses:
      - **PRIMARY BUG (NEW):** PyTorch crystal lattice vectors don't match C. PyTorch: `rot_a=[25.63, -9.11, 6.50]`, `rot_b=[0, 31.02, 10.55]`, `rot_c=[0, 0, 31.21]` (upper triangular). C: `rot_a=[-14.36, -21.88, -5.55]`, `rot_b=[-11.50, 0.67, -29.11]`, `rot_c=[21.07, -24.40, -9.71]` (general orientation from A.mat). This causes completely wrong reflections: C sees (2,2,-13), PyTorch sees (-11,5,3).
      - **SECONDARY BUG:** pix0_vector Y-component error of 1.14 mm (PyTorch uses raw input, C applies CUSTOM convention transform).
      - **TERTIARY BUG:** Polarization factor defaults to 1.0 in PyTorch vs 0.913 in C.
[2025-10-06T05:20:47] tokens used: 108,130
[2025-10-06T05:20:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..614132dfbaf21b07302f03988de55c7ec5bbdf7c
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:20:58] thinking

**Updating phase references and exit criteria**

I'm reorganizing the plan notes and exit criteria to reflect new phases: Phase H for lattice structure factor and Phase I for polarization. I'll revise mentions after attempt #9 and attempt #18 to align with this update and restructure exit steps to ensure proper sequencing and clarity without duplicates.
[2025-10-06T05:21:05] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -622,3 +622,3 @@
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
@@ -760,6 +760,6 @@
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
[2025-10-06T05:21:05] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T05:21:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:21:05] tokens used: 112,499
[2025-10-06T05:21:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:08] thinking

**Verifying status references on polarization alignment**
[2025-10-06T05:21:09] exec bash -lc 'rg "polarization alignment" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:10] bash -lc 'rg "polarization alignment" docs/fix_plan.md' succeeded in 921ms:
- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
[2025-10-06T05:21:10] tokens used: 114,461
[2025-10-06T05:21:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:14] thinking

**Reviewing plan and preparing analysis steps**
[2025-10-06T05:21:15] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:15] bash -lc 'git status --short' succeeded in 787ms:
 M docs/fix_plan.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T05:21:15] tokens used: 116,000
[2025-10-06T05:21:15] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:23] thinking

**Summarizing analysis and planning updates**

I'll organize what we've learned so far about the lattice alignment issues, lingering artifacts, and the manual beam vector override that needs removal. There’s progress on some fronts but still work to do on vectorization and cleaning up overrides, plus a need to review recent commits and project config changes before updating docs like input.md and memory files.
[2025-10-06T05:21:25] exec bash -lc 'git show 2bc6f4e -- pyproject.toml' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:26] bash -lc 'git show 2bc6f4e -- pyproject.toml' succeeded in 854ms:
commit 2bc6f4ecaabb637f690a6f2f1775f738770ad954
Author: ollie <ohoidn>
Date:   Sun Oct 5 21:50:44 2025 -0700

    [SYNC i=18] actor=ralph status=running

diff --git a/pyproject.toml b/pyproject.toml
index 75ca1f9..88eafff 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -10,7 +10,11 @@ ignore = ["E501"]
 
 [tool.pyrefly]
 project-includes = ["**/*"]
-project-excludes = ["**/*venv/**/*"]
+project-excludes = [
+    "**/node_modules",
+    "**/__pycache__",
+    "**/*venv/**/*",
+]
[2025-10-06T05:21:26] tokens used: 116,577
[2025-10-06T05:21:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:31] thinking

**Reviewing vectorization plan status**

I'm noting that the orientation fix looks good but some mismatches remain, so I want to check the vectorization plan details more closely—especially entry VECTOR-TRICUBIC-001 in docs/fix_plan.md—to confirm the status and identify any gaps for the new phase.
[2025-10-06T05:21:32] exec bash -lc "sed -n '340,450p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:33] bash -lc "sed -n '340,450p' docs/fix_plan.md" succeeded in 735ms:
    Artifacts: Pending re-run of Phase A logs (`reports/routing/<date>-loop-audit.txt`).
    Observations/Hypotheses: Regression likely came from local edits outside the routing plan; without the guard the engineer agent resumes unsupervised loops and may spam pushes.
    Next Actions: Follow `plans/active/routing-loop-guard/plan.md` Phase A (tasks A1–A3) to capture the regression audit before reapplying the guard from `ffd9a5c`.
  * [2025-10-01] Attempt #7 — Result: Phase A COMPLETE. Captured regression audit showing 40-iteration loop using `prompts/main.md` with unconditional push at commit 53d65a4.
    Metrics: n/a (audit task only).
    Artifacts: `reports/routing/20251001-loop-regression.txt` (includes snapshot, diff vs ffd9a5c baseline, commit context).
    Observations/Hypotheses: Current loop.sh lost (1) `timeout 30 git pull --rebase`, (2) single-execution `prompts/debug.md`, (3) conditional push logic. All three violations documented in diff output.
    Next Actions: Execute plan Phase B (tasks B1–B3) to restore guard from ffd9a5c baseline, then Phase C verification.
  * [2025-10-01] Attempt #8 — Result: Phase B and C COMPLETE. Restored guard from ffd9a5c baseline, verified compliance with dry-run and hygiene checks.
    Metrics: n/a (guard restoration only).
    Artifacts: `reports/routing/20251001-loop-dry-run-summary.txt`, `reports/routing/20251001-loop-hygiene.txt`, `reports/routing/20251001-loop-compliance.txt`, restored `loop.sh`.
    Observations/Hypotheses: All three guard elements now present: (1) timeout 30 git pull --rebase with fallback, (2) single execution of prompts/debug.md, (3) conditional push checking for commits. Script matches ffd9a5c baseline exactly.
    Next Actions: Commit changes (loop.sh, fix_plan updates, routing reports), push to remote, mark item as done pending supervisor review.
  * [2025-10-07] Attempt #3 — Result: regression worsening. Observed `loop.sh` running `prompts/main.md` in a `{1..40}` loop with unconditional `git push`. No audit artifact captured yet; Phase A still pending.
    Metrics: n/a
    Artifacts: Pending report under `reports/routing/` (plan tasks A1–A3).
    Observations/Hypotheses: Doubling of iterations amplifies routing violation and risk of spam pushes; confirms automation remains unsupervised.
    Next Actions: Execute plan Phase A immediately and block automation until evidence captured.
  * [2025-10-07] Attempt #4 — Result: still in violation. Current `loop.sh` (lines 11-19) continues to pipe `prompts/main.md` through Claude 40× with unconditional `git push || true`.
    Metrics: n/a — manual inspection only.
[2025-10-06T05:21:33] tokens used: 117,896
[2025-10-06T05:21:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:36] thinking

**Searching for vectorization entry**
[2025-10-06T05:21:36] exec bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:37] bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' succeeded in 674ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
863:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-06T05:21:37] tokens used: 119,358
[2025-10-06T05:21:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:21:40] exec bash -lc "sed -n '863,940p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:40] bash -lc "sed -n '863,940p' docs/fix_plan.md" succeeded in 701ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_planning (Phase A evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions:
  1. Execute plan Phase A tasks A1–A3 to capture baseline pytest logs and timing snippets under `reports/2025-10-vectorization/phase_a/` and record Attempt #1 in this entry.
  2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
  3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * (pending) — Capture Phase A baseline artifacts and update this log.
- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.
- Exit Criteria (quote thresholds from spec):
  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).
[2025-10-06T05:21:40] tokens used: 120,222
[2025-10-06T05:21:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:45] thinking

**Preparing input.md details**
[2025-10-06T05:21:45] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:46] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 697ms:
feature/spec-based-2
[2025-10-06T05:21:46] tokens used: 123,367
[2025-10-06T05:21:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:49] thinking

**Preparing input.md content structure**
[2025-10-06T05:21:50] exec bash -lc 'git rev-parse --short HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:51] bash -lc 'git rev-parse --short HEAD' succeeded in 706ms:
4dab2ea
[2025-10-06T05:21:51] tokens used: 123,603
[2025-10-06T05:21:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:21:53] thinking

**Getting current timestamp**
[2025-10-06T05:21:54] exec bash -lc "date -u '+%Y-%m-%d %H:%M UTC'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:21:54] bash -lc "date -u '+%Y-%m-%d %H:%M UTC'" succeeded in 735ms:
2025-10-06 05:21 UTC
[2025-10-06T05:21:54] tokens used: 123,799
[2025-10-06T05:21:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:22:24] thinking

**Planning structured memo content**
[2025-10-06T05:22:41] exec bash -lc "cat <<'EOF' > input.md
# 2025-10-06 05:21 UTC | 4dab2ea | galph | Active Focus: CLI-FLAGS-003 Phase H lattice alignment
Summary: Capture fresh C↔PyTorch traces without manual overrides to pinpoint the lattice/F_latt divergence before polarization work.
Phase: Evidence
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_h/

Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — Phase H1 trace refresh; run "'`env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py.log 2> reports/2025-10-cli-flags/phase_h/trace_py.stderr`

If Blocked: Document the blocker in `reports/2025-10-cli-flags/phase_h/blockers.md` and log an Attempt entry in docs/fix_plan.md before switching tasks.

Priorities & Rationale:
- Phase H1 requires a clean PyTorch trace without manual beam overrides so we can trust the `hkl_frac` deltas (plans/active/cli-noise-pix0/plan.md:110).
- docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
- `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
- Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.

How-To Map:
- `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
- Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
- Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
- After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
- Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
- Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
- Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
- Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
- If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.

Pitfalls To Avoid:
- Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
- Avoid `.item()` on tensors in the harness — traces must preserve gradients for later phases.
- Stay within Protected Assets policy: never move/delete files listed in docs/index.md (e.g., loop.sh, supervisor.sh, input.md).
- Do not rerun parity with polarization tweaks yet; Phase H isolates lattice math only.
- No ad-hoc scripts outside `reports/` or `scripts/`; keep new helpers under the phase_h directory.
- Refrain from editing C reference binaries; rely on existing `NB_C_BIN` artifacts.
- Maintain device/dtype neutrality if you touch simulator code — but today is evidence-only, so avoid implementation changes unless required for harness cleanup.
- Capture stderr (trace header lines) so future comparisons are reproducible.
- Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
- Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.

Pointers:
- plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
- docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
- reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
- docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
- docs/debugging/debugging.md: Parallel trace SOP for logging format.
- docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
- reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
- specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.

Next Up:
- 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
- 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:22:42] bash -lc "cat <<'EOF' > input.md
# 2025-10-06 05:21 UTC | 4dab2ea | galph | Active Focus: CLI-FLAGS-003 Phase H lattice alignment
Summary: Capture fresh C↔PyTorch traces without manual overrides to pinpoint the lattice/F_latt divergence before polarization work.
Phase: Evidence
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_h/

Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — Phase H1 trace refresh; run "'`env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py.log 2> reports/2025-10-cli-flags/phase_h/trace_py.stderr`

If Blocked: Document the blocker in `reports/2025-10-cli-flags/phase_h/blockers.md` and log an Attempt entry in docs/fix_plan.md before switching tasks.

Priorities & Rationale:
- Phase H1 requires a clean PyTorch trace without manual beam overrides so we can trust the `hkl_frac` deltas (plans/active/cli-noise-pix0/plan.md:110).
- docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
- `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
- Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.

How-To Map:
- `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
- Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
- Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
- After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
- Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
- Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
- Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
- Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
- If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.

Pitfalls To Avoid:
- Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
- Avoid `.item()` on tensors in the harness — traces must preserve gradients for later phases.
- Stay within Protected Assets policy: never move/delete files listed in docs/index.md (e.g., loop.sh, supervisor.sh, input.md).
- Do not rerun parity with polarization tweaks yet; Phase H isolates lattice math only.
- No ad-hoc scripts outside `reports/` or `scripts/`; keep new helpers under the phase_h directory.
- Refrain from editing C reference binaries; rely on existing `NB_C_BIN` artifacts.
- Maintain device/dtype neutrality if you touch simulator code — but today is evidence-only, so avoid implementation changes unless required for harness cleanup.
- Capture stderr (trace header lines) so future comparisons are reproducible.
- Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
- Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.

Pointers:
- plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
- docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
- reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
- docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
- docs/debugging/debugging.md: Parallel trace SOP for logging format.
- docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
- reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
- specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.

Next Up:
- 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
- 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
EOF
' succeeded in 889ms:

[2025-10-06T05:22:42] tokens used: 127,345
[2025-10-06T05:22:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:22:44] thinking

**Checking file line count**
[2025-10-06T05:22:45] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:22:45] bash -lc 'wc -l input.md' succeeded in 673ms:
      55 input.md
[2025-10-06T05:22:45] tokens used: 128,930
[2025-10-06T05:22:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:22:55] thinking

**Planning content expansion**
[2025-10-06T05:23:02] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -17,2 +17,14 @@
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
[2025-10-06T05:23:02] apply_patch(auto_approved=true) exited 0 in 19ms:
Success. Updated the following files:
M input.md
[2025-10-06T05:23:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..87a380b459be6cb9648c2f682e66f41fe770ccb8
--- a/input.md
+++ b/input.md
@@ -15,6 +15,18 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:23:02] tokens used: 130,146
[2025-10-06T05:23:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..87a380b459be6cb9648c2f682e66f41fe770ccb8
--- a/input.md
+++ b/input.md
@@ -15,6 +15,18 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:23:04] thinking

**Expanding How-To Map section**
[2025-10-06T05:23:13] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -33,6 +33,11 @@
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
@@ -41,2 +46,3 @@
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
[2025-10-06T05:23:13] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M input.md
[2025-10-06T05:23:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..48da9e7d52721541577ef538f0ecaaeba2f294e2
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:23:13] tokens used: 132,129
[2025-10-06T05:23:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..48da9e7d52721541577ef538f0ecaaeba2f294e2
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:23:15] thinking

**Expanding documentation sections**
[2025-10-06T05:23:25] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -59,2 +59,7 @@
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
@@ -65,3 +70,3 @@
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
@@ -69,2 +74,8 @@
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
[2025-10-06T05:23:25] apply_patch(auto_approved=true) exited 0 in 36ms:
Success. Updated the following files:
M input.md
[2025-10-06T05:23:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..f30c99aed0e9683950a1758a60d8464546d83af3
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
 
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
+
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,16 +57,27 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:23:25] tokens used: 135,339
[2025-10-06T05:23:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..f30c99aed0e9683950a1758a60d8464546d83af3
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
 
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
+
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,16 +57,27 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:23:28] thinking

**Adding new sections before Next Up**
[2025-10-06T05:23:35] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -81,2 +81,23 @@
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
@@ -84 +105,2 @@
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
[2025-10-06T05:23:35] apply_patch(auto_approved=true) exited 0 in 41ms:
Success. Updated the following files:
M input.md
[2025-10-06T05:23:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

[2025-10-06T05:23:35] tokens used: 138,197
[2025-10-06T05:23:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:23:38] thinking

**Checking line count**
[2025-10-06T05:23:38] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:23:39] bash -lc 'wc -l input.md' succeeded in 980ms:
     106 input.md
[2025-10-06T05:23:39] tokens used: 138,986
[2025-10-06T05:23:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:23:43] thinking

**Appending update summary to galph_memory.md**
[2025-10-06T05:23:52] tokens used: 140,055
[2025-10-06T05:23:52] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:23:56] thinking

**Checking file end for patching**
[2025-10-06T05:23:57] exec bash -lc 'tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:23:58] bash -lc 'tail -n 40 galph_memory.md' succeeded in 739ms:
- Added new fix-plan item `[VECTOR-TRICUBIC-001]` linking to the refreshed plan; status `in_planning` pending Phase A evidence.
- Refreshed `[CLI-FLAGS-003]` focus via input.md: Do Now = Phase F2 CUSTOM pix0 transform (pytest pix0 subset + parity rerun + pix0 vector artifact). Command scaffolding recorded for C & PyTorch runs under `reports/2025-10-cli-flags/phase_f/`.
- Outstanding follow-ups for Ralph: implement plan Phase F2, capture pix0/beam artifact, rerun parity harness, then progress to Phase G orientation once geometry aligns.
## 2025-10-17 (galph loop — Phase F3 parity prep)
- Stashed galph_memory to satisfy startup pull, repo synced clean, then restored local edits.
- Read required specs/arch/testing docs plus latest plan/memory; confirmed pix0 override still bypasses CUSTOM transform and -mat orientation remains absent.
- Updated `plans/active/cli-noise-pix0/plan.md` context to note F1/F2 completion and focus on F3 parity before Phase G; refreshed `[CLI-FLAGS-003]` status/next-actions in docs/fix_plan.md.
- Rewrote input.md directing Ralph to capture C & PyTorch parity runs (Phase F3) and log Attempt #12 artifacts; highlighted follow-up orientation and polarization tasks.
- Follow-up: Ralph to run the parity commands, store logs/images under `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/`, update docs/fix_plan Attempts, then proceed to plan Phase G. Clean up `scaled.hkl.1` once parity + documentation land together.

## 2025-10-06 (galph loop — F2 audit)
- Reviewed latest sync (commit 4c8bda2). Attempt #12 parity artifacts confirm near-zero correlation; geometry gap persists. Ralph’s Phase F2 change still emits the raw override vector and never recomputes `distance_corrected` after dotting pix0 with odet.
- Updated `plans/active/cli-noise-pix0/plan.md` to mark F2 as [P] and F3 as [P]; guidance now requires porting the full CUSTOM transform from nanoBragg.c:1739-1846 before rerunning parity.
- Refreshed `[CLI-FLAGS-003]` next actions in docs/fix_plan.md to mandate the F2 refit + parity redo prior to Phase G orientation work; added supervisor note flagging F2’s incomplete state.
- Issued new input.md directing Ralph to implement the transform, rerun pix0 tests, capture traces, and only then loop back to parity. No new plans required; vectorization roadmap unchanged.
- Feedback for Ralph: formality around parity artifacts is good, but we still need the CUSTOM transform and A* orientation before metrics improve.
## 2025-10-06 (galph loop — CLI Phase G prep)
- Synced clean (`git pull --rebase` up to date). Reviewed core docs plus plans; long-term focus stays on CLI parity + vectorization roadmap.
- Deep dive confirmed `[CLI-FLAGS-003]` now blocked on Phase G orientation: CLI still discards MOSFLM A* vectors, parity metrics remain ≈−5e-06 (reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json).
- Detected new regression from Phase F2: `Detector.close_distance` now stored via `.item()`, severing gradients. Logged remediation in docs/fix_plan.md:448 and updated plan Phase F row to flag tensor retention.
[2025-10-06T05:23:58] tokens used: 141,226
[2025-10-06T05:23:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:02] thinking

**Adjusting patch strategy**
[2025-10-06T05:24:08] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-06 (galph loop — Phase H lattice kickoff)
- Sync clean (4dab2ea). Reviewed required specs, architecture docs, testing strategy, "'`plans/active/*`, and `docs/fix_plan.md` per SOP before analysis.
- Goal 1 status: Orientation ingestion + MOSFLM transpose fixes landed (commits 2bc6f4e, b73f0e2), yet traces still show `hkl_frac` ≈ (2.098, 2.017, -12.871) vs C (2.001, 1.993, -12.991) and `F_latt` 62.68 vs 3.56e4, so intensity parity remains off by ~1e5×.
- Updated `plans/active/cli-noise-pix0/plan.md` to add Phase H (lattice structure factor alignment) with tasks H1–H3 and moved polarization to new Phase I. Context now calls out the lattice gap and sequencing (H before I).
- Refreshed `docs/fix_plan.md` `[CLI-FLAGS-003]` entry: status line now lists phases completed, Next Actions target Phase H artifacts under `reports/2025-10-cli-flags/phase_h/`, exit criteria include Phase H lattice + Phase I polarization.
- Coin flip=heads triggered a review of Ralph’s recent work: orientation ingestion commits solid (tests pass, MOSFLM parity proven) but Phase H remains unstarted; harness still overrides beam vector manually. Feedback: evidence first, no polarization tweaks yet.
- Vectorization goal unchanged — plan stays at Phase A evidence until CLI parity narrows the gap.
- Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
- Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:09] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-06 (galph loop — Phase H lattice kickoff)
- Sync clean (4dab2ea). Reviewed required specs, architecture docs, testing strategy, "'`plans/active/*`, and `docs/fix_plan.md` per SOP before analysis.
- Goal 1 status: Orientation ingestion + MOSFLM transpose fixes landed (commits 2bc6f4e, b73f0e2), yet traces still show `hkl_frac` ≈ (2.098, 2.017, -12.871) vs C (2.001, 1.993, -12.991) and `F_latt` 62.68 vs 3.56e4, so intensity parity remains off by ~1e5×.
- Updated `plans/active/cli-noise-pix0/plan.md` to add Phase H (lattice structure factor alignment) with tasks H1–H3 and moved polarization to new Phase I. Context now calls out the lattice gap and sequencing (H before I).
- Refreshed `docs/fix_plan.md` `[CLI-FLAGS-003]` entry: status line now lists phases completed, Next Actions target Phase H artifacts under `reports/2025-10-cli-flags/phase_h/`, exit criteria include Phase H lattice + Phase I polarization.
- Coin flip=heads triggered a review of Ralph’s recent work: orientation ingestion commits solid (tests pass, MOSFLM parity proven) but Phase H remains unstarted; harness still overrides beam vector manually. Feedback: evidence first, no polarization tweaks yet.
- Vectorization goal unchanged — plan stays at Phase A evidence until CLI parity narrows the gap.
- Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
- Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
EOF
' succeeded in 798ms:

[2025-10-06T05:24:09] tokens used: 143,312
[2025-10-06T05:24:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:11] thinking

**Checking git status for changes**
[2025-10-06T05:24:12] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:13] bash -lc 'git status --short' succeeded in 773ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T05:24:13] tokens used: 144,590
[2025-10-06T05:24:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:15] thinking

**Preparing to commit changes**
[2025-10-06T05:24:16] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:16] bash -lc 'git diff' succeeded in 702ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24..b83e1b1 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
[2025-10-06T05:24:16] tokens used: 144,734
[2025-10-06T05:24:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:20] thinking

**Verifying documentation update completeness**
[2025-10-06T05:24:21] exec bash -lc 'git diff docs/fix_plan.md | tail -n 40' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:21] bash -lc 'git diff docs/fix_plan.md | tail -n 40' succeeded in 708ms:
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
[2025-10-06T05:24:21] tokens used: 147,613
[2025-10-06T05:24:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:24] thinking

**Reviewing plan.md changes**
[2025-10-06T05:24:25] exec bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:26] bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' succeeded in 746ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a6..954ee3d 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@ Exit Criteria: Crystal trace (rotated a/b/c vectors) aligns with C for the super
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
[2025-10-06T05:24:26] tokens used: 150,023
[2025-10-06T05:24:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:29] thinking

**Reviewing input.md diff**
[2025-10-06T05:24:30] exec bash -lc 'git diff input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:30] bash -lc 'git diff input.md' succeeded in 724ms:
diff --git a/input.md b/input.md
index 1fb58c3..1788142 100644
--- a/input.md
+++ b/input.md
@@ -1,98 +1,106 @@
-Timestamp: 2025-10-06T04:55:24Z
-Commit: 6a0d252
-Author: galph
-Active Focus: [CLI-FLAGS-003] Phase G3 trace verification + parity rerun
+# 2025-10-06 05:21 UTC | 4dab2ea | galph | Active Focus: CLI-FLAGS-003 Phase H lattice alignment
+Summary: Capture fresh C↔PyTorch traces without manual overrides to pinpoint the lattice/F_latt divergence before polarization work.
+Phase: Evidence
+Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
+Branch: feature/spec-based-2
+Mapped tests: none — evidence-only
+Artifacts: reports/2025-10-cli-flags/phase_h/
 
-Do Now: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm (Phase G3) — env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_e/trace_harness.py > reports/2025-10-cli-flags/phase_g/traces/trace_py.log
+Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — Phase H1 trace refresh; run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py > reports/2025-10-cli-flags/phase_h/trace_py.log 2> reports/2025-10-cli-flags/phase_h/trace_py.stderr`
 
[2025-10-06T05:24:30] tokens used: 151,939
[2025-10-06T05:24:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:32] thinking

**Reviewing galph_memory changes**
[2025-10-06T05:24:33] exec bash -lc 'git diff galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:34] bash -lc 'git diff galph_memory.md' succeeded in 755ms:
diff --git a/galph_memory.md b/galph_memory.md
index 837dcf7..5356e21 100644
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1023,3 +1023,13 @@ Follow-ups for Ralph:
 - Updated docs/fix_plan.md Next Actions to focus on executing Phase G3, refreshing parity artifacts, and sequencing Phase H afterwards.
 - Authored new input.md guiding Ralph through MOSFLM-aware trace harness updates, regenerated C/Py traces, nb-compare parity rerun, regression tests, and docs/fix_plan Attempt #18 logging.
 - Determined no additional planning document required; vectorization roadmap stays queued until CLI parity artifacts turn green.
+
+## 2025-10-06 (galph loop — Phase H lattice kickoff)
+- Sync clean (4dab2ea). Reviewed required specs, architecture docs, testing strategy, `plans/active/*`, and `docs/fix_plan.md` per SOP before analysis.
+- Goal 1 status: Orientation ingestion + MOSFLM transpose fixes landed (commits 2bc6f4e, b73f0e2), yet traces still show `hkl_frac` ≈ (2.098, 2.017, -12.871) vs C (2.001, 1.993, -12.991) and `F_latt` 62.68 vs 3.56e4, so intensity parity remains off by ~1e5×.
+- Updated `plans/active/cli-noise-pix0/plan.md` to add Phase H (lattice structure factor alignment) with tasks H1–H3 and moved polarization to new Phase I. Context now calls out the lattice gap and sequencing (H before I).
+- Refreshed `docs/fix_plan.md` `[CLI-FLAGS-003]` entry: status line now lists phases completed, Next Actions target Phase H artifacts under `reports/2025-10-cli-flags/phase_h/`, exit criteria include Phase H lattice + Phase I polarization.
+- Coin flip=heads triggered a review of Ralph’s recent work: orientation ingestion commits solid (tests pass, MOSFLM parity proven) but Phase H remains unstarted; harness still overrides beam vector manually. Feedback: evidence first, no polarization tweaks yet.
+- Vectorization goal unchanged — plan stays at Phase A evidence until CLI parity narrows the gap.
+- Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
+- Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
[2025-10-06T05:24:34] tokens used: 154,888
[2025-10-06T05:24:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:46] thinking

**Staging and committing changes**
[2025-10-06T05:24:47] exec bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:48] bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md galph_memory.md' succeeded in 873ms:

[2025-10-06T05:24:48] tokens used: 155,827
[2025-10-06T05:24:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:50] thinking

**Committing initial lattice kickoff**
[2025-10-06T05:24:51] exec bash -lc 'git commit -m "SUPERVISOR: Phase H lattice kickoff - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:52] bash -lc 'git commit -m "SUPERVISOR: Phase H lattice kickoff - tests: not run"' succeeded in 720ms:
[feature/spec-based-2 5b82377] SUPERVISOR: Phase H lattice kickoff - tests: not run
 4 files changed, 129 insertions(+), 100 deletions(-)
[2025-10-06T05:24:52] tokens used: 156,098
[2025-10-06T05:24:52] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:24:54] thinking

**Pushing changes to repository**
[2025-10-06T05:24:55] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:24:57] bash -lc 'git push' succeeded in 2.21s:
To github.com:hoidn/nanoBragg.git
   4dab2ea..5b82377  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T05:24:57] tokens used: 156,376
[2025-10-06T05:24:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:25:02] thinking

**Checking working tree status**
[2025-10-06T05:25:03] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:25:04] bash -lc 'git status --short' succeeded in 730ms:

[2025-10-06T05:25:04] tokens used: 156,640
[2025-10-06T05:25:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:25:10] thinking

**Summarizing final response plan**
[2025-10-06T05:25:11] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,200p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:25:11] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,200p'" succeeded in 709ms:
     1	## Context
     2	- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
     3	- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
     4	- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
     5	- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
     6	- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
     7	
     8	### Phase A — Requirements & Trace Alignment
     9	Goal: Confirm the authoritative semantics for both flags and capture the C reference behavior (including unit expectations) before touching implementation.
    10	Prereqs: Ability to run instrumented C binary via `NB_C_BIN` and collect traces.
    11	Exit Criteria: Documented parity notes under `reports/2025-10-cli-flags/phase_a/` with explicit decisions on unit conversions and noise toggle ordering.
    12	
    13	| ID | Task Description | State | How/Why & Guidance |
    14	| --- | --- | --- | --- |
    15	| A1 | Extract C reference for `-nonoise` | [D] | ✅ 2025-10-05: Supervisor command captured with/without `-nonoise`; logs stored under `reports/2025-10-cli-flags/phase_a/`. |
    16	| A2 | Capture pix0 vector ground truth | [D] | ✅ 2025-10-05: Instrumented C trace recorded pix0 vector values; confirms outputs remain in meters even for `_mm` flag. |
    17	| A3 | Update findings memo | [D] | ✅ 2025-10-05: Phase A summary authored in `reports/2025-10-cli-flags/phase_a/README.md` documenting semantics and CUSTOM convention side effects. |
    18	
    19	### Phase B — CLI & Config Wiring
    20	Goal: Teach the PyTorch CLI to parse both flags, thread them through configs, and respect overrides in Detector/Noise handling without breaking existing behavior.
[2025-10-06T05:25:11] tokens used: 157,140
[2025-10-06T05:25:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:25:15] thinking

**Noting line numbers for changes**
[2025-10-06T05:25:16] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '448,540p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T05:25:16] bash -lc "nl -ba docs/fix_plan.md | sed -n '448,540p'" succeeded in 793ms:
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
   458	- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
   459	- Attempts History:
   460	  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
   461	    Metrics: C reference behavior captured for both flags via parallel command execution.
   462	    Artifacts:
   463	      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
   464	      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
   465	      - `reports/2025-10-cli-flags/phase_a/pix0_trace/trace.log` - pix0 vector analysis
   466	      - `reports/2025-10-cli-flags/phase_a/README.md` - Complete Phase A findings
   467	    Observations/Hypotheses:
[2025-10-06T05:25:16] tokens used: 158,815
[2025-10-06T05:25:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |


[2025-10-06T05:25:26] thinking

**Preparing detailed final message**

I'm organizing a comprehensive final summary that highlights plan updates, analysis insights, and progress on Ralph's work, referencing specific file paths where relevant. I'll clearly state that tests haven't been run and outline logical next steps, keeping the message concise yet thorough for clarity.
[2025-10-06T05:25:28] codex

Added a lattice-alignment phase before polarization in the CLI parity roadmap and synced the supervisor memo/history to push Ralph toward fresh trace evidence.

- Updated the active plan to call out the persistent `hkl_frac`/`F_latt` gap and inserted **Phase H — Lattice Structure Factor Alignment** plus a new Phase I for polarization (`plans/active/cli-noise-pix0/plan.md:5`, `plans/active/cli-noise-pix0/plan.md:96`).
- Mirrored those changes in the fix plan so Next Actions and exit criteria now require Phase H artifacts before any polarization work (`docs/fix_plan.md:451`, `docs/fix_plan.md:458`, `docs/fix_plan.md:768`).
- Input memo (106 lines) directs Ralph to clone the trace harness, remove the manual beam override, and store Phase H1 evidence under `reports/2025-10-cli-flags/phase_h/` with a reporting checklist to keep artifacts consistent (`input.md:1`).
- Repository journal captures today’s decisions and feedback: orientation fixes are solid, but the 3‑order‑of‑magnitude `F_latt` mismatch remains the blocker until Phase H evidence lands (`galph_memory.md:1027`).
- Analysis takeaways: current traces show PyTorch `F_latt≈6.3e1` vs C `3.56e4` and `hkl_frac` offsets (~0.1 along a/b), so the next confirming step is Phase H1 trace capture followed by diagnosing the sincg/NaNbNc path. Vectorization initiative stays parked at Phase A evidence until parity improves.

Next up for Ralph: follow the new Phase H1 instructions in `input.md`, refresh PyTorch traces without manual overrides, diff against the C baseline, and log the findings in docs/fix_plan.md. Once that evidence exists, proceed to Phase H2 diagnosis; polarization (Phase I) waits until lattice parity tightens.

Tests: not run.
[2025-10-06T05:25:32] tokens used: 162,878
[2025-10-06T05:25:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 75abb24c65a878763d8954244126d5bd6a0def01..b83e1b1182027a4569f084061920faf3e4f6ed3f
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -448,14 +448,14 @@
 ## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
 - Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
 - Priority: High
-- Status: in_progress (Phases A/B/C2/D3/E/F1/F2 ✅; Phase F3 parity + Phases G–H pending)
+- Status: in_progress (Phases A/B/C2/D3/E/F1/F2/G1/G2/G3 ✅; Phase F3 parity rerun + Phases H–I pending)
 - Owner/Date: ralph/2025-10-05
 - Plan Reference: `plans/active/cli-noise-pix0/plan.md`
 - Reproduction (C & PyTorch):
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Phase D3/E diagnostics (2025-10-16) confirm three blocking geometry gaps: (a) PyTorch applies the raw `-pix0_vector_mm` override without the CUSTOM transform used in C (1.14 mm Y error); (b) CLI ignores `-beam_vector`, leaving the incident ray at the convention default `[0,0,1]`; (c) `-mat A.mat` handling discards the MOSFLM orientation, so Crystal falls back to canonical upper-triangular vectors while C uses the supplied A*. Traces also show a polarization delta (C Kahn factor ≈0.9126 vs PyTorch 1.0) to revisit after geometry fixes.
-- Next Actions: (1) Execute plan Phase G3 by rerunning the Phase E trace harness and capturing fresh C↔Py lattice-vector comparisons plus a supervisor parity attempt under `reports/2025-10-cli-flags/phase_g/`; (2) Once traces and parity metrics are archived, unblock Phase F3 by updating the parity artifacts and fix_plan attempts, then close out Phase G; (3) With geometry verified, advance to Phase H polarization alignment (tasks H1–H3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
+- Next Actions: (1) Drive new plan Phase H (lattice structure factor alignment) by refreshing traces, fixing the `hkl_frac`/`F_latt` divergence, and capturing parity metrics under `reports/2025-10-cli-flags/phase_h/`; (2) After lattice parity improves, rerun Phase F3 parity smoke + update docs/fix_plan Attempts with the narrowed intensity gap; (3) With lattice resolved, proceed to Phase I polarization alignment (tasks I1–I3) and clean up residual artifacts such as `scaled.hkl.1` alongside documentation updates.
 - Attempts History:
   * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
     Metrics: C reference behavior captured for both flags via parallel command execution.
@@ -620,7 +620,7 @@
       - Beam vector incident direction **DOES match** in the trace because the harness explicitly sets `simulator.incident_beam_direction`; CLI wiring still ignores `custom_beam_vector` (see Attempt #7 evidence).
       - Intensity error (446 vs 4.5e-6) is consequence of wrong crystal orientation → wrong reflection → wrong structure factor (300.58 vs 42.98).
     Next Actions: (1) **URGENT:** Investigate A.mat loading in PyTorch - verify file is read, orientation matrix extracted, and applied to lattice vectors (compare with C TRACE lines 11-51 showing matrix loading); (2) Port CUSTOM pix0 transformation from C code; (3) Fix polarization calculation; (4) Re-run Phase E traces after fixes to verify alignment.
-  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), and polarization (Phase H) implementation tracks.
+  * [2025-10-16] Attempt #9 (galph) — Result: analysis update. Phase E artifacts reviewed; plan extended with detector (Phase F), orientation (Phase G), lattice structure factor (Phase H), and polarization (Phase I) implementation tracks.
     Metrics: `trace_summary.md` confirms PyTorch `rot_a=[25.63,-9.11,6.50]` vs C `rot_a=[-14.36,-21.88,-5.55]`; `trace_side_by_side.tsv` shows pix0 Y delta 1.1375e-3 m; `beam_vector_check.txt` still reports `[0.,0.,1.]` for CLI instantiation (manual override only in harness).
     Artifacts: No new runs; consumed `reports/2025-10-cli-flags/phase_e/trace_summary.md`, `trace_side_by_side.tsv`, `beam_vector_check.txt`.
     Observations/Hypotheses:
@@ -758,10 +758,10 @@
       - **Verification:** All 9 reciprocal vector components now match C trace exactly (rot_a_star, rot_b_star, rot_c_star).
       - **Real Vector Deltas:** ~0.05Å differences in components [1],[2] are likely due to numerical precision (C double vs PyTorch float64 intermediate ops) and order-of-operations in cross products. These are acceptable for crystallography (<0.2% error).
       - **Miller Index Parity:** Now correctly compute (2,2,-13) vs previous wrong (6,7,-3). F_cell match confirms we're indexing the same reflection.
-      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences and missing polarization (Phase H).
-    Next Actions: (1) Continue to Phase H polarization alignment (C Kahn=0.9126 vs Py=1.0) to complete intensity parity; (2) Update Phase G3 status in plan to ✅; (3) Close Phase G and transition to Phase H tasks H1-H3.
+      - **Intensity Parity:** Still divergent (F_latt 35636 vs 62.68, I_pixel 446.25 vs 0.00356) due to lattice transform differences (Phase H) and missing polarization (Phase I).
+    Next Actions: (1) Advance to Phase H lattice alignment to close the `hkl_frac`/`F_latt` gap before touching polarization; (2) Update Phase G3 status in plan to ✅; (3) Once lattice parity improves, transition to Phase I tasks I1–I3.
 - Risks/Assumptions: Must keep pix0 override differentiable (no `.detach()` / `.cpu()`); ensure skipping noise does not regress AT-NOISE tests; confirm CUSTOM vectors remain normalised. PyTorch implementation will IMPROVE on C by properly converting mm->m for `_mm` flag. **Intensity scale difference is a symptom of incorrect geometry - fix geometry first, then revalidate scaling.**
-- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase F3 parity rerun ❌ next loop; (xii) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌ blocked on Phase H polarization.
+- Exit Criteria: (i) Plan Phases A–C completed with artifacts referenced ✅; (ii) CLI regression tests covering both flags pass ✅; (iii) supervisor command executes end-to-end under PyTorch, producing float image and matching C pix0 trace within tolerance ✅ (C2 complete); (iv) Phase D3 evidence report completed with hypothesis and trace recipe ✅; **(v) Phase E trace comparison completed, first divergence documented** ✅; **(vi) Phase F1 beam_vector threading complete** ✅; **(vii) Phase F2 pix0 CUSTOM transform complete** ✅; **(viii) Phase F3 parity evidence captured** ✅ (Attempt #12); **(ix) Phase G2 MOSFLM orientation ingestion complete** ✅ (Attempt #17); **(x) Phase G3 trace verification complete with transpose fix** ✅ (Attempt #18); (xi) Phase H lattice structure factor alignment ❌ pending; (xii) Phase F3 parity rerun with lattice fix ❌; (xiii) Phase I polarization alignment ❌; (xiv) Parity validation shows correlation >0.999 and intensity ratio within 10% ❌.
 
 ### Completed Items — Key Reference
 (See `docs/fix_plan_archive.md` for the full historical ledger.)
diff --git a/input.md b/input.md
index 074004d4382c246d733a78005758227f624f0ad3..1788142c5d7200c8a19a07e510c924fb5d6ac541
--- a/input.md
+++ b/input.md
@@ -15,18 +15,36 @@
 - docs/development/c_to_pytorch_config_map.md stresses CUSTOM convention parity; lattice mismatches trace back to Na/Nb/Nc handling, so we need raw traces first.
 - `trace_summary_orientation_fixed.md` shows reciprocal parity yet F_latt differs by 3 orders; reproducing that gap is prerequisite to Phase H2 edits.
 - Long-term Goal #1 hinges on closing CLI parity before vectorization; without lattice evidence we risk guessing at fixes.
+- `reports/2025-10-cli-flags/phase_f/parity_after_detector_fix/metrics.json` already captured the pre-orientation correlation (~-5e-06); we need a new baseline after orientation to measure improvement.
+- Capturing evidence now keeps docs/fix_plan Attempts synchronized, preventing drift when we later commit implementation fixes.
+
+Context Notes:
+- The C trace at `reports/2025-10-cli-flags/phase_g/traces/trace_c.log` is authoritative; do not regenerate it unless we re-instrument the C code.
+- PyTorch trace currently lives in `phase_g/trace_py_fixed.log` and still shows `F_latt` off by ~5.7e2×.
+- The harness still forces `simulator.incident_beam_direction`; removing it lets Detector.apply_custom_vectors() run end-to-end.
+- `scaled.hkl.1` duplicates `scaled.hkl`; leave it untouched until Phase H3/H plan closure to avoid Protected Asset confusion.
+- C run uses BEAM pivot because distance is specified; verify PyTorch trace logs the same pivot selection after your edits.
+- Oversample=1 in the supervisor command — note in trace summary if you see accidental oversample toggles.
+- Keep phi/osc/phisteps consistent with C (0, 0.1, 10); double-check the harness doesn’t revert to defaults.
+- Ensure the harness still writes float image to avoid lazy evaluation; `simulator.run()` must execute.
 
 How-To Map:
 - `mkdir -p reports/2025-10-cli-flags/phase_h` before writing new outputs.
 - Copy the existing harness for edits: `cp reports/2025-10-cli-flags/phase_e/trace_harness.py reports/2025-10-cli-flags/phase_h/trace_harness.py` (edit the copy to remove the manual `simulator.incident_beam_direction` override and to write outputs under phase_h/).
+- In the copied harness, update output paths so any intermediate dumps land in `phase_h/` (protect prior artifacts).
+- Strip the manual incident-beam override and add an inline comment noting that Detector now consumes CLI vectors directly.
 - Verify the harness imports `CrystalConfig` MOSFLM vectors from `read_mosflm_matrix` so Phase G fixes stay in play.
+- Sanity-check the harness still loads `scaled.hkl` (not `.1`) and the same A.mat; log their `stat` output in the summary.
 - After editing, run `env AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_h/trace_harness.py` and redirect stdout/stderr as in Do Now.
 - Capture a unified diff vs the latest C trace using `diff -u reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > reports/2025-10-cli-flags/phase_h/trace_diff.log`.
-- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities.
+- Generate a TSV with key variables (`paste` or custom script) to make `hkl_frac` and `F_latt` comparisons easy: `paste reports/2025-10-cli-flags/phase_g/traces/trace_c.log reports/2025-10-cli-flags/phase_h/trace_py.log > ...` (optional but useful).
+- Summarize findings (first divergence, metrics) in `reports/2025-10-cli-flags/phase_h/trace_comparison.md` — include `F_latt_a/b/c`, `hkl_frac`, intensities, and note beam vector equality.
+- Add a short bullet to the summary covering detector pivot, oversample setting, and phi-step count taken from the new trace.
 - Update docs/fix_plan.md Attempts with Phase H1 evidence once artifacts exist (reference the new files explicitly).
 - Leave the old Phase E harness intact; Phase H should stand alone so we can archive it later.
 - Keep environment variable `KMP_DUPLICATE_LIB_OK=TRUE` set ahead of any torch import to avoid MKL crashes.
 - If CUDA is available, note whether harness runs CPU-only; GPU runs are optional for this evidence pass but record device in the summary.
+- Save command transcripts (e.g., `reports/.../commands.txt`) so future loops can repeat the evidence precisely.
 
 Pitfalls To Avoid:
 - Do not restore the manual beam-direction override; we need the CLI wiring to drive the detector.
@@ -39,17 +57,50 @@
 - Capture stderr (trace header lines) so future comparisons are reproducible.
 - Keep attempts history synchronized: if the loop fails, log the failure in docs/fix_plan.md before moving on.
 - Don’t delete `scaled.hkl.1` this loop; document it during plan closure when parity succeeds.
+- Avoid switching to vectorization work mid-loop; Phase H evidence must land before plan hopping.
+- Don’t drop the `AUTHORITATIVE_CMDS_DOC` env var — we need the command provenance recorded.
+- Resist editing `reports/2025-10-cli-flags/phase_g/` artifacts; they remain the comparison baseline.
+- If you need to tweak harness imports, preserve relative paths so the script works after repository moves.
+- Do not commit without attaching artifacts; incomplete evidence breaks supervisor audit trails.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md:96 — Phase H tasks and exit criteria.
 - docs/fix_plan.md:448 — Next Actions + exit criteria for CLI-FLAGS-003.
 - reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md — reference reciprocal parity baseline.
 - docs/development/c_to_pytorch_config_map.md — CUSTOM beam/pix0 rules.
-- docs/debugging/debugging.md: Parallel trace SOP for logging format.
+- docs/debugging/debugging.md — Parallel trace SOP for logging format.
 - docs/architecture/detector.md#L210 — CUSTOM convention geometry expectations.
 - reports/2025-10-cli-flags/phase_e/trace_harness.py:108 — remove the manual incident beam override when cloning.
 - specs/spec-a-cli.md — CLI semantics for -nonoise, -pix0_vector_mm, -beam_vector.
+- docs/architecture/pytorch_design.md#vectorization-strategy — vectorization guardrails to keep in mind when adjusting lattice code later.
+- reports/2025-10-cli-flags/phase_f/pix0_transform_refit.txt — reminder of current pix0 state used by Phase H.
+- docs/architecture/c_parameter_dictionary.md — cross-check Na/Nb/Nc interpretation.
+- reports/2025-10-cli-flags/phase_f/beam_vector_check.md — baseline for incident beam vectors after Phase F1.
+- docs/development/testing_strategy.md#parallel-validation-matrix — artifacts expectations for trace comparisons.
+- plans/active/vectorization.md:8 — context on future tricubic work; note we pause until CLI parity lands.
 
+Reference Metrics:
+- C `F_latt`: 35636.0822038919 (reports/2025-10-cli-flags/phase_g/traces/trace_c.log).
+- PyTorch `F_latt` (current): 62.6805702411159 (reports/2025-10-cli-flags/phase_g/traces/trace_py_fixed.log).
+- C `hkl_frac`: (2.0012033, 1.9927979, -12.9907669).
+- PyTorch `hkl_frac` (current): (2.0979805, 2.0171122, -12.8706105).
+- Peak intensities: C 446.254, PyTorch 3.56e-03 (polarization still 1.0 in PyTorch).
+- Detector pix0: C -0.216475836, PyTorch -0.216336293 (0.14 mm delta yet to reconcile).
+- Beam vector: both `[0.00051387949, 0.0, -0.99999986]` after Phase F1 fix.
+- Oversample: both 1; mosaic domains currently 1.
+- Keep these numbers in the Phase H summary to track improvements.
+
+Reporting Checklist:
+- [ ] Trace harness copy created under `reports/2025-10-cli-flags/phase_h/`.
+- [ ] Manual beam override removed; comment noting rationale added.
+- [ ] `trace_py.log`, `trace_py.stderr`, and `trace_diff.log` captured.
+- [ ] `trace_comparison.md` summarizing key deltas committed.
+- [ ] docs/fix_plan.md Attempts updated with Phase H1 details (metrics + artifact paths).
+- [ ] commands.txt (or equivalent) listing executed commands stored beside trace artifacts.
+- [ ] Any harness edits respect device/dtype neutrality (no `.item()`), confirmed via quick inspection.
+- [ ] Supervisor note: record whether the harness runs faster/slower post-orientation for future perf context.
+
 Next Up:
 - 1) Phase H2 — Diagnose sincg/NaNbNc mismatch once trace evidence is logged.
 - 2) Phase H3 — Parity rerun without polarization to validate lattice fix.
+- 3) Optional stretch: prep a TODO list for polarization (Phase I) but do not implement yet.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 67375a66d7a3912d3ca995e09b2662796dcf4479..954ee3d3c0dc34434dcf45030b784aeada626d49
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -2,7 +2,7 @@
 - Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
 - Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
 - Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding, and C traces continue to show the MOSFLM orientation missing because `-mat` still collapses to canonical vectors. Polarization (C Kahn ≈0.913 vs PyTorch 1.0) stays deferred until geometry parity lands.
+- Current gap snapshot (2025-10-17 refresh): Phase F1/F2 delivered custom beam-vector wiring and the full CUSTOM pix0 transform, with validation artifacts under `reports/2025-10-cli-flags/phase_f*/`. The parity rerun (F3) remains outstanding. Traces now confirm MOSFLM orientation parity, but `hkl_frac` and lattice structure factor terms still diverge (PyTorch `F_latt≈6.3e1` vs C `3.6e4`). We must align the scattering/lattice pipeline (new Phase H) before tackling polarization (Phase I) where C’s Kahn factor ≈0.913 vs PyTorch 1.0.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Current harness injects the custom beam vector manually; CLI parity requires native wiring.
 
 ### Phase A — Requirements & Trace Alignment
@@ -88,13 +88,24 @@
 | G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
 | G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |
 
-### Phase H — Polarization Alignment (follow-up)
-Goal: Match C’s Kahn polarization factor once geometry aligns.
-Prereqs: Phases F and G complete; traces confirm geometry parity.
+### Phase H — Lattice Structure Factor Alignment
+Goal: Bring scattering vector (`hkl_frac`) and lattice structure factor (`F_latt*`) parity in line with C so intensity mismatches narrow before polarization work.
+Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
+Exit Criteria: Trace comparison shows `h`, `k`, `l` fractional components within 1e-3 of C, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| H1 | Refresh trace evidence post-orientation | [ ] | Re-run `reports/2025-10-cli-flags/phase_e/trace_harness.py` (updated to drop manual beam override) so the PyTorch trace reflects current CLI wiring. Store diff under `reports/2025-10-cli-flags/phase_h/trace_comparison.md`, highlighting `hkl_frac` and `F_latt*` deltas. |
+| H2 | Diagnose & fix lattice mismatch | [ ] | Compare C lattice pipeline (`nanoBragg.c:3005-3178`) with `Simulator._compute_intensity()` to pinpoint the divergence (likely sincg input or Na/Nb/Nc scaling). Implement fix preserving vectorization/device neutrality; capture rationale in `phase_h/implementation_notes.md`. |
+| H3 | Validate lattice parity | [ ] | Re-run C/PyTorch parity (float image + trace) without polarization, confirm `F_latt` components align within tolerance and intensity gap narrows (<10×). Update docs/fix_plan Attempt log with findings and artifacts under `phase_h/parity_after_lattice_fix/`. |
+
+### Phase I — Polarization Alignment (follow-up)
+Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
+Prereqs: Phases F–H complete; traces show `F_latt` parity.
 Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| H1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
-| H2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
-| H3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |
+| I1 | Audit polarization inputs | [ ] | Review CLI defaults/flags (`-polar`, `-nopolar`) and C calculations (nanoBragg.c:2080-2155); map them to PyTorch simulator inputs. |
+| I2 | Implement polarization parity | [ ] | Update simulator polarization handling to compute Kahn factor per spec/C reference. Document conversions and add targeted regression tests. |
+| I3 | Final parity sweep | [ ] | Rerun supervisor command traces verifying polarization parity; update docs/fix_plan.md with closure summary and archive plan. |

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   5b82377..fbdd869  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=20...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=20
Updating fbdd869..bbc4850
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   fbdd869..bbc4850  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=20
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
error: cannot pull with rebase: You have unstaged changes.
error: Please commit or stash them.
error: cannot pull with rebase: You have unstaged changes.
error: Please commit or stash them.
error: cannot pull with rebase: You have unstaged changes.
error: Please commit or stash them.
error: cannot pull with rebase: You have unstaged changes.
error: Please commit or stash them.
error: cannot pull with rebase: You have unstaged changes.
error: Please commit or stash them.
error: cannot pull with rebase: Your index contains uncommitted changes.
error: Please commit or stash them.
From github.com:hoidn/nanoBragg
   bbc4850..d150858  feature/spec-based-2 -> origin/feature/spec-based-2
Rebasing (1/1)
Successfully rebased and updated refs/heads/feature/spec-based-2.
Current branch feature/spec-based-2 is up to date.
Current branch feature/spec-based-2 is up to date.
Current branch feature/spec-based-2 is up to date.
From github.com:hoidn/nanoBragg
   d150858..d2565ed  feature/spec-based-2 -> origin/feature/spec-based-2
Rebasing (1/1)
Successfully rebased and updated refs/heads/feature/spec-based-2.
[sync] state: actor=galph status=complete iter=21
Ralph completed iteration 20; proceeding to 21
