Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=80
To github.com:hoidn/nanoBragg.git
   19185d0..a97979d  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T08:00:27] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T08:00:27] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T08:00:40] thinking

**Preparing to run git pull with rebase**
[2025-10-07T08:00:40] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:00:43] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.20s:
Already up to date.
[2025-10-07T08:00:43] tokens used: 14,167

[2025-10-07T08:00:45] thinking

**Rebasing completed successfully**
[2025-10-07T08:00:46] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:00:46] bash -lc 'cat galph_memory.md' succeeded in 735ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T08:00:46] tokens used: 14,367

[2025-10-07T08:00:51] thinking

**Reviewing documentation index**
[2025-10-07T08:00:51] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:00:51] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 705ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T08:00:51] tokens used: 31,373

[2025-10-07T08:00:58] thinking

**Preparing to review multiple documentation files**
[2025-10-07T08:00:59] exec bash -lc "sed -n '1,200p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:00:59] bash -lc "sed -n '1,200p' specs/spec-a.md" succeeded in 719ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T08:00:59] tokens used: 33,176

[2025-10-07T08:01:01] thinking

**Considering shard inspection**
[2025-10-07T08:01:01] exec bash -lc "sed -n '1,200p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:02] bash -lc "sed -n '1,200p' specs/spec-a-core.md" succeeded in 701ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-07T08:01:02] tokens used: 33,445

[2025-10-07T08:01:07] thinking

**Requesting architecture documentation**
[2025-10-07T08:01:08] exec bash -lc "sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:09] bash -lc "sed -n '1,200p' arch.md" succeeded in 765ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T08:01:09] tokens used: 36,407

[2025-10-07T08:01:11] thinking

**Locating documentation file**
[2025-10-07T08:01:12] exec bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:13] bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 717ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T08:01:13] tokens used: 38,968

[2025-10-07T08:01:15] thinking

**Identifying missing documentation file**
[2025-10-07T08:01:15] exec bash -lc "sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:16] bash -lc "sed -n '1,200p' docs/debugging/debugging.md" succeeded in 723ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T08:01:16] tokens used: 50,884

[2025-10-07T08:01:17] thinking

**Identifying missing documentation file**
[2025-10-07T08:01:18] exec bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:18] bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 705ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T08:01:18] tokens used: 53,172

[2025-10-07T08:01:21] thinking

**Opening and sampling fix_plan.md**
[2025-10-07T08:01:22] exec bash -lc "sed -n '1,200p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:23] bash -lc "sed -n '1,200p' docs/fix_plan.md" succeeded in 706ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T08:01:23] tokens used: 55,764

[2025-10-07T08:01:24] thinking

**Searching for relevant sections**
[2025-10-07T08:01:25] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:25] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 723ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
465:  5. Phase L4 parity rerun — Execute the supervisor command end-to-end, capture nb-compare metrics, confirm correlation ≥0.9995 + sum_ratio 0.99-1.01, archive results, and close CLI-FLAGS-003.
[2025-10-07T08:01:25] tokens used: 58,753

[2025-10-07T08:01:26] thinking

**Preparing to review more content**
[2025-10-07T08:01:27] exec bash -lc "sed -n '430,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:28] bash -lc "sed -n '430,520p' docs/fix_plan.md" succeeded in 717ms:
        args = parser.parse_args([
            "-hkl", str(hkl),
            "-cell", "100", "100", "100", "90", "90", "90",
            "-default_F", "0",
            "-dtype", "float64"
        ])
        config = parse_and_validate_args(args)
        grid, _ = config['hkl_data']
        print(grid.dtype)  # BUG: prints torch.float32 today
    ```
    `PY`
- First Divergence (if known): `parse_and_validate_args` (src/nanobrag_torch/__main__.py:435) calls `read_hkl_file`/`try_load_hkl_or_fdump` without forwarding the parsed dtype, so HKL/Fdump data is always loaded as float32. When the CLI is run with `-dtype float64`, the simulator converts those float32 tensors to float64 later, permanently losing precision relative to the requested double-precision path and violating the DTYPE-DEFAULT-001 guarantee.
- Immediate Next Actions (2025-10-15):
  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
- Attempts History: None — new item.
- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.

[2025-10-07T08:01:28] tokens used: 59,028

[2025-10-07T08:01:30] thinking

**Continuing to read CLI-FLAGS section**
[2025-10-07T08:01:31] exec bash -lc "sed -n '520,640p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:31] bash -lc "sed -n '520,640p' docs/fix_plan.md" succeeded in 703ms:
      - `reports/2025-10-cli-flags/phase_l/structure_factor/collect_cli_scaling_post_audit.log` — Pytest collection validation
    Observations/Hypotheses:
      - **CLI parsing works:** `parse_and_validate_args` correctly extracts HKL grid and metadata from scaled.hkl
      - **Dtype/device as expected:** float32 CPU default per DTYPE-DEFAULT-001 (no silent coercion)
      - **Grid coverage matches probe:** CLI audit shows identical grid shape/ranges as Phase L3b probe (49×57×62, h∈[-24,24], k∈[-28,28], l∈[-31,30])
      - **Root cause is downstream:** The F_cell=0 discrepancy is NOT in CLI parsing (which works correctly), but rather in: (1) Harness attachment pattern, (2) Crystal initialization with HKL data, or (3) Structure factor lookup logic
    Next Actions: Phase L3c continuation — Inspect `src/nanobrag_torch/__main__.py` HKL→Crystal flow, review harness attachment pattern comparison, add debug probe to `Crystal.get_structure_factor`, write minimal structure factor query test to isolate the handoff issue.
  * [2025-10-17] Attempt #72 (ralph loop) — Result: **SUCCESS** (Phase L2b harness MOSFLM orientation fix). **Corrected `trace_harness.py` to assign each MOSFLM reciprocal vector to its own config field instead of packing all three into `mosflm_a_star`.**
    Metrics: Harness now produces non-zero F_latt values (F_latt=1.351 vs previous 0), confirming proper orientation. Test suite passes 4/4 variants (tests/test_trace_pixel.py). Comparison script completed successfully (2 divergent factors identified).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:159-161` - Fixed MOSFLM vector assignment (mosflm_a_star, mosflm_b_star, mosflm_c_star as separate tensors)
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md:1-76` - Updated L2c comparison report confirming first divergence at I_before_scaling
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log` - Regenerated trace showing live polarization and omega values
    Observations/Hypotheses:
      - **Fix confirmed:** Switching from `mosflm_a_star=[a*, b*, c*]` (list) to individual tensor assignments (mosflm_a_star=tensor(a*), mosflm_b_star=tensor(b*), mosflm_c_star=tensor(c*)) enables Crystal.compute_cell_tensors to use the MOSFLM orientation properly
      - **F_latt now non-zero:** Lattice shape factors are computed correctly (F_latt_a=-2.405, F_latt_b=-0.861, F_latt_c=0.652, product=1.351)
      - **F_cell still zero:** This is expected—pixel (685,1039) computes h=-7,k=-1,l=-14 but scaled.hkl only contains (1,12,3), so structure factor lookup correctly returns 0
      - **Scaling factors verified:** All intermediate scaling terms (r_e², fluence, steps, capture_fraction, polar, omega_pixel) match C within tolerance (Δ<0.002%)
      - **Test coverage maintained:** tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics passes all parametrized variants (4/4)
    Next Actions: Phase L2b complete; L2c evidence captured. Supervisor to proceed with Phase L3 structure-factor investigation based on comparison summary showing I_before_scaling as first divergence.
[2025-10-07T08:01:31] tokens used: 60,666

[2025-10-07T08:01:33] thinking

**Acknowledging readiness**
[2025-10-07T08:01:34] exec bash -lc "sed -n '320,430p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:34] bash -lc "sed -n '320,430p' docs/fix_plan.md" succeeded in 732ms:
  * ✅ CUDA benchmarks run successfully without aliasing error.
  * ✅ CUDA gradient smoke shows stable derivative (-70.37).

---


## [ROUTING-LOOP-001] loop.sh routing guard
- Spec/AT: Prompt routing rules (prompts/meta.md)
- Priority: High
- Status: done (verified compliant 2025-10-01)
- Owner/Date: ralph/2025-10-01 (verification and completion)
- Plan Reference: `plans/active/routing-loop-guard/plan.md`
- Reproduction (C & PyTorch):
  * C: `sed -n '1,80p' loop.sh`
  * PyTorch: n/a
  * Shapes/ROI: n/a
- First Divergence (if known): Commit `c49e3be` reverted the guard—`loop.sh` pipes `prompts/main.md` through `{1..40}` loop, removes `git pull --rebase`, and performs unconditional `git push`.
- Immediate Next Actions (2025-10-13):
  * Run plan Phase A tasks (A1–A3) against commit `c49e3be` so the regression evidence references the latest violation, then confirm the current guarded script via Phase C compliance log before re-archiving the plan.
- Attempts History:
[2025-10-07T08:01:34] tokens used: 62,234

[2025-10-07T08:01:37] thinking

**Listing contents of plans/active**
[2025-10-07T08:01:37] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:38] bash -lc 'ls plans/active' succeeded in 686ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T08:01:38] tokens used: 63,731

[2025-10-07T08:01:40] thinking

**Reviewing active vectorization plans**
[2025-10-07T08:01:41] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:42] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 736ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T08:01:42] tokens used: 63,988

[2025-10-07T08:01:46] thinking

**Verifying plan status discrepancies**
[2025-10-07T08:01:46] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:47] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 742ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code. 
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T08:01:47] tokens used: 66,835

[2025-10-07T08:01:55] thinking

**Outlining analysis for CLI and vectorization support**
[2025-10-07T08:01:55] exec bash -lc 'rg "pix0_vector_mm" -n' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:01:56] bash -lc 'rg "pix0_vector_mm" -n' succeeded in 790ms:
src/nanobrag_torch/__main__.py:190:    parser.add_argument('-pix0_vector_mm', nargs=3, type=float,
src/nanobrag_torch/__main__.py:462:            args.pix0_vector, args.pix0_vector_mm]):
src/nanobrag_torch/__main__.py:557:    if args.pix0_vector and args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:558:        raise ValueError("Cannot specify both -pix0_vector and -pix0_vector_mm simultaneously")
src/nanobrag_torch/__main__.py:564:    elif args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:566:        config['pix0_override_m'] = tuple(x * 0.001 for x in args.pix0_vector_mm)
SPEC_PROMPT.md:65:  - Unsupported example flags: Explicitly list any flags present in the examples but not recognized by this code (e.g., `-pix0_vector_mm` or `-matrix` if absent), and explain the closest supported equivalent if any.
src/nanobrag_torch/models/detector.py:524:            # C code IGNORES -pix0_vector_mm when custom detector vectors are present.
docs/fix_plan.md:22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
docs/fix_plan.md:450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
docs/fix_plan.md:674:    Metrics: All 26 CLI flags tests passed (test_cli_flags.py). Target test: test_pix0_vector_mm_beam_pivot 4/4 passed (cpu + cuda, dtype0 + dtype1). Expected pix0 delta reduced from 1.136 mm to well within 5e-5 m threshold.
docs/fix_plan.md:712:      - **Pivot:** SAMPLE (custom vectors present, so -pix0_vector_mm override is ignored per C precedence)
docs/fix_plan.md:928:      - `reports/2025-10-cli-flags/phase_h5/c_traces/with_override.log` - C run WITH -pix0_vector_mm flag
docs/fix_plan.md:929:      - `reports/2025-10-cli-flags/phase_h5/c_traces/without_override.log` - C run WITHOUT -pix0_vector_mm flag
docs/fix_plan.md:933:      - **Critical finding:** When custom detector vectors (`-odet_vector`, `-sdet_vector`, `-fdet_vector`) are supplied, C code computes pix0 from Xbeam/Ybeam and IGNORES `-pix0_vector_mm` override
docs/fix_plan.md:945:      - `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/with_override.log` - 267 lines, C run WITH -pix0_vector_mm flag
docs/fix_plan.md:946:      - `reports/2025-10-cli-flags/phase_h5/c_traces/2025-10-22/without_override.log` - 267 lines, C run WITHOUT -pix0_vector_mm flag
docs/fix_plan.md:950:      - **Re-confirms 2025-10-06 evidence:** C ignores `-pix0_vector_mm` when custom detector vectors are supplied
docs/fix_plan.md:1013:      - C code treats `-pix0_vector` and `-pix0_vector_mm` identically (strstr match, no unit conversion)
docs/fix_plan.md:1025:      - ✅ pix0_vector_mm millimeters alias parsing with conversion to meters (mm * 0.001)
[2025-10-07T08:01:56] tokens used: 70,161

[2025-10-07T08:01:58] thinking

**Checking CLI noise flag usage**
[2025-10-07T08:01:59] exec bash -lc 'rg "-nonoise" -n' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:00] bash -lc 'rg "-nonoise" -n' succeeded in 768ms:
src/nanobrag_torch/__main__.py:241:-n
src/nanobrag_torch/__main__.py:337:-n
src/nanobrag_torch/__main__.py:337:-n
src/nanobrag_torch/__main__.py:339:-n
src/nanobrag_torch/__main__.py:341:-n
src/nanobrag_torch/__main__.py:347:-n
src/nanobrag_torch/__main__.py:359:-n
src/nanobrag_torch/__main__.py:1185:-n
src/nanobrag_torch/simulator.py:206:-n
src/nanobrag_torch/simulator.py:522:-n
src/nanobrag_torch/simulator.py:823:-n
src/nanobrag_torch/simulator.py:977:-n
src/nanobrag_torch/simulator.py:1015:-n
src/nanobrag_torch/simulator.py:1177:-n
context:244:-n
context:244:-n
context:248:-n
context:253:-n
context:324:-n
context:643:-n
[2025-10-07T08:02:00] tokens used: 73,694

[2025-10-07T08:02:08] thinking

**Analyzing CLI flags and vectorization issues**

I'm parsing through the CLI implementation and fix_plan to understand why the structure factor F_cell remains zero in some cases, despite data loading improvements. It seems the big culprit might be a device misalignment in PyTorch causing the zero values, so I need to dive into CLI behavior around -nonoise and pix0_vector_mm flags and pinpoint the gaps before considering reviewing recent related work.
[2025-10-07T08:02:09] exec bash -lc "python -c 'import random; print(\"heads\" if random.random()<0.5 else \"tails\")'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:10] bash -lc "python -c 'import random; print(\"heads\" if random.random()<0.5 else \"tails\")'" succeeded in 722ms:
heads
[2025-10-07T08:02:10] tokens used: 77,905

[2025-10-07T08:02:13] thinking

**Reviewing recent commits**
[2025-10-07T08:02:13] exec bash -lc 'git --no-pager log --oneline -10' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:14] bash -lc 'git --no-pager log --oneline -10' succeeded in 685ms:
a97979d [SYNC i=80] actor=galph status=running
19185d0 [SYNC i=80] actor=ralph → next=galph status=ok ralph_commit=30ab2d1
30ab2d1 CLI-FLAGS-003 Phase L3c device audit - Attempt #79
a91cb10 [SYNC i=79] actor=ralph status=running
58377b5 [SYNC i=79] actor=galph → next=ralph status=ok galph_commit=16e4b81
16e4b81 SUPERVISOR: CLI-FLAGS-003 device audit prep - tests: not run
fc600db [SYNC i=79] actor=galph status=running
91205ae [SYNC i=79] actor=ralph → next=galph status=ok ralph_commit=c43f9e2
c43f9e2 CLI-FLAGS-003 Phase L3c: CLI ingestion audit complete
ce51e1c [SYNC i=78] actor=ralph status=running
[2025-10-07T08:02:14] tokens used: 78,101

[2025-10-07T08:02:17] thinking

**Checking commit details**
[2025-10-07T08:02:17] exec bash -lc 'git show --stat 30ab2d1' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:18] bash -lc 'git show --stat 30ab2d1' succeeded in 686ms:
commit 30ab2d1a63a12cd642d1a3ae3370cb29689d3397
Author: ollie <ohoidn>
Date:   Tue Oct 7 00:59:32 2025 -0700

    CLI-FLAGS-003 Phase L3c device audit - Attempt #79
    
    Evidence-only loop completing supervisor 'Do Now' probe task.
    Confirmed device handling gap: HKL tensor remains on CPU despite -device cuda flag.
    
    Key findings:
    - CLI loads HKL data correctly (49×57×62 grid, float32, metadata present)
    - Device transfer missing: .to(dtype=dtype) without .to(device=device)
    - Will cause device mismatch when CUDA parity validation runs reach structure factor lookup
    
    Artifacts:
    - reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_device_probe.json
    - reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_env.json
    - Updated cli_hkl_audit.md with device probe findings
    
    Tests: pytest --collect-only tests/test_cli_scaling.py (2 collected, no changes)
[2025-10-07T08:02:18] tokens used: 78,525

[2025-10-07T08:02:21] thinking

**Reviewing documentation updates for regressions**
[2025-10-07T08:02:22] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_audit.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:22] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_audit.md" succeeded in 698ms:
# CLI HKL Ingestion Audit — Phase L3c

## 2025-10-07 Device Handling Probe (ralph Attempt #79)

- **SHA**: a91cb10b2e34e7c42cd62f8d9a6ec3a2d9965e4d
- **Scope**: Capture concrete device/dtype behavior when CLI is invoked with `-device cuda` flag (Phase L3c device audit per supervisor guidance).

### Critical Finding: Device Handling Gap

**Observation**: When `-device cuda` is specified on the CLI, the HKL tensor remains on CPU despite the user-requested device transfer.

**Evidence**:
```json
{
  "cpu": {
    "dtype": "torch.float32",
    "device": "cpu",
    "shape": [49, 57, 62],
    "metadata": { ... }
  },
[2025-10-07T08:02:22] tokens used: 79,156

[2025-10-07T08:02:25] thinking

**Reviewing recent commits**
[2025-10-07T08:02:25] exec bash -lc 'git show --stat c43f9e2' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:26] bash -lc 'git show --stat c43f9e2' succeeded in 709ms:
commit c43f9e206cce10d49633847dc3d421af223188a4
Author: ollie <ohoidn>
Date:   Tue Oct 7 00:47:20 2025 -0700

    CLI-FLAGS-003 Phase L3c: CLI ingestion audit complete
    
    Evidence bundle:
    - CLI loads HKL grid (49×57×62) with correct metadata
    - dtype=float32, device=cpu (per DTYPE-DEFAULT-001)
    - Target reflection (-7,-1,-14) IN RANGE
    - Pytest collection successful (2 tests)
    
    Artifacts:
    - reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_audit.md
    - reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_audit_raw.txt
    - reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_env.json
    - reports/2025-10-cli-flags/phase_l/structure_factor/collect_cli_scaling_post_audit.log
    
    Root cause confirmed downstream from CLI parsing (harness/simulator construction or lookup logic).
    
[2025-10-07T08:02:26] tokens used: 81,789

[2025-10-07T08:02:29] thinking

**Reviewing long-term goals and CLI options**
[2025-10-07T08:02:29] exec bash -lc "sed -n '320,420p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:30] bash -lc "sed -n '320,420p' src/nanobrag_torch/__main__.py" succeeded in 751ms:
                        help='Exposure time (seconds)')
    parser.add_argument('-beamsize', type=float, metavar='MM',
                        help='Beam size (mm)')

    # Output files
    parser.add_argument('-floatfile', '-floatimage', type=str, metavar='FILE',
                        dest='floatfile', help='Raw float output')
    parser.add_argument('-intfile', '-intimage', type=str, metavar='FILE',
                        dest='intfile', help='SMV integer output')
    parser.add_argument('-scale', type=float,
                        help='Scale factor for SMV output')
    parser.add_argument('-adc', type=float, default=40.0,
                        help='ADC offset for SMV (default: 40)')
    parser.add_argument('-pgmfile', '-pgmimage', type=str, metavar='FILE',
                        dest='pgmfile', help='PGM preview output')
    parser.add_argument('-pgmscale', type=float,
                        help='Scale factor for PGM output')
    parser.add_argument('-noisefile', '-noiseimage', type=str, metavar='FILE',
                        dest='noisefile', help='SMV with Poisson noise')
    parser.add_argument('-nonoise', action='store_true',
[2025-10-07T08:02:30] tokens used: 82,414

[2025-10-07T08:02:32] thinking

**Checking for nonoise usage**
[2025-10-07T08:02:34] exec bash -lc "sed -n '1080,1200p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:34] bash -lc "sed -n '1080,1200p' src/nanobrag_torch/__main__.py" succeeded in 766ms:
            crystal.interpolation_enabled = config['interpolate']

        # Create and run simulator with debug options
        debug_config = {
            'printout': args.printout,
            'printout_pixel': args.printout_pixel,  # [fast, slow] indices
            'trace_pixel': args.trace_pixel,  # [slow, fast] indices
        }

        # dtype and device already parsed earlier (DTYPE-DEFAULT-001)

        simulator = Simulator(crystal, detector, beam_config=beam_config,
                            device=device, dtype=dtype, debug_config=debug_config)

        # Print configuration if requested
        if args.show_config:
            print_configuration(crystal_config, detector_config, beam_config, config)

        print(f"Running simulation...")
        print(f"  Detector: {detector_config.fpixels}x{detector_config.spixels} pixels")
[2025-10-07T08:02:34] tokens used: 83,815

[2025-10-07T08:02:36] thinking

**Searching for suppress_noise usage**
[2025-10-07T08:02:37] exec bash -lc 'rg "suppress_noise" -n src/nanobrag_torch/__main__.py' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:37] bash -lc 'rg "suppress_noise" -n src/nanobrag_torch/__main__.py' succeeded in 742ms:
711:    config['suppress_noise'] = args.nonoise
1186:        if config.get('noisefile') and not config.get('suppress_noise', False):
[2025-10-07T08:02:37] tokens used: 85,521

[2025-10-07T08:02:45] thinking

**Reviewing plan status and inconsistencies**

I'm checking the progress and consistency of the CLI flags and vectorization plans. There are some conflicting notes about completed phases A2/A3, so I'll verify actual artifacts and consider updating the plan to reflect the current state accurately.
[2025-10-07T08:02:46] exec bash -lc 'ls reports/2025-10-vectorization/phase_a' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:02:47] bash -lc 'ls reports/2025-10-vectorization/phase_a' succeeded in 724ms:
absorption_baseline.md
absorption_baseline_results.json
env.json
run_log.txt
test_at_abs_001.log
test_at_str_002.collect.log
test_at_str_002.log
tricubic_baseline.md
tricubic_baseline_results.json
[2025-10-07T08:02:47] tokens used: 86,026

[2025-10-07T08:02:59] thinking

**Reviewing plan inconsistencies and next steps**

I'm sorting through issues with the CLI-FLAGS and vectorization plans, noticing outdated or contradictory info around structure factor handling and task statuses. I want to decide whether to update existing plans or start fresh, focusing on ensuring clear, actionable next steps—especially around the critical CLI plan and vectorization tasks. I'll dig into relevant docs next to clarify these points.
[2025-10-07T08:03:02] exec bash -lc "sed -n '260,340p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:03] bash -lc "sed -n '260,340p' docs/fix_plan.md" succeeded in 1.03s:
    Metrics: 4096² warm 0.652s (Py) vs 0.524s (C) → speedup 0.80 (Py **1.25× slower**). Simulation time 0.613s. Cache setup <1ms (109,712× speedup). Correlation 1.000000.
    Artifacts: `reports/benchmarks/20251001-010128/{benchmark_results.json, profile_4096x4096/trace.json, phase_b_hotspot_analysis.md}`. Code changes: `scripts/benchmarks/benchmark_detailed.py` (added --profile, --keep-artifacts, --disable-compile flags; integrated torch.profiler).
    Observations/Hypotheses: **CRITICAL FINDING:** Single-iteration profiling run shows PyTorch only 1.25× slower (0.652s vs 0.524s), dramatically better than Phase A baseline (3.55× slower, 1.783s). Possible causes: (1) Measurement variation (5-iteration average vs single run), (2) Improved torch.compile state, (3) Cache/memory layout benefits. **Action required:** Re-run Phase A with `--iterations 1` to validate whether gap is truly ~1.25× (near target) or ~3.5× (needs optimization).
    Next Actions: (1) Re-run Phase A baseline with single iteration for consistency, (2) Complete Phase B task B4 (extract hotspot % from Chrome trace), (3) Run B5 (eager-mode SF profile at 1024²), (4) Decision point: if validated gap ≤1.2×, skip Phase C/D; if >1.2×, proceed with diagnostic experiments.
  * [2025-10-01] Attempt #31 (loop BL) — Result: Reconciliation study COMPLETE. Resolved 1.25× vs 3.55× measurement discrepancy by executing both 1-iter and 5-iter benchmarks at 4096².
    Metrics: **Current performance:** 1-iter: Py 0.609s vs C 0.528s (1.15× slower); 5-iter: Py 0.600s vs C 0.538s (1.11× slower). **Phase A baseline (for comparison):** Py 1.783s vs C 0.502s (3.55× slower). **Performance improvement:** 3.1× faster PyTorch (1.743s → 0.565s avg simulation time).
    Artifacts: `reports/benchmarks/20251001-014819-measurement-reconciliation/{reconciliation_summary.md, quick_comparison.md, timeline.md, benchmark_results_1iter.json, benchmark_results_5iter.json}`.
    Observations/Hypotheses: (1) Iteration count does NOT explain discrepancy—1-iter vs 5-iter differ by only 1.6%. (2) PyTorch improved 3.1× between Phase A (00:50:52) and Phase B (01:01:28), most likely due to warm torch.compile cache state. (3) Current performance 1.11-1.15× slower meets ≤1.2× target (within 10% margin). (4) Phase A baseline appears to be outlier with cold cache state.
    Next Actions: (1) Mark Phase B task B4 complete with reconciliation summary, (2) Update Phase B decision to reflect **TARGET NEARLY ACHIEVED** status, (3) Consider Phase C/D optional "polish" work given proximity to goal.
  * [2025-10-13] Attempt #32 — Result: supervisor audit (no code change). Detected newly added benchmark set reports/benchmarks/20251001-025148/ showing warm speedup_warm=0.299 (PyTorch 1.774s vs C 0.531s) — a return to the original 3.3× slowdown. This contradicts Attempt #31's 1.11× measurements and indicates the improvement is not yet reproducible.
    Metrics: 4096² warm totals — PyTorch 1.7738s, C 0.5306s.
    Artifacts: reports/benchmarks/20251001-025148/benchmark_results.json; reports/benchmarks/20251001-025010/profile_1024x1024/trace.json (B5 eager profile).
    Observations/Hypotheses: Warm speedup hinges on cache state; without disciplined B6 reproducibility the plan cannot claim Phase B complete. Need cache-cleared reruns plus analysis contrasting 014819 vs 025148 results.
    Next Actions: Run B6 with explicit cache clearing notes, capture regression memo comparing both datasets, then update plan tables before entering Phase C.
  * [2025-10-01] Attempt #33 (loop CA) — Result: Phase B task B6 COMPLETE. Reproducibility study confirms stable performance at 1.21× slowdown.
    Metrics: 10 runs (5-iter averages each): mean speedup 0.8280 ± 0.0326 (PyTorch 1.21× slower), CV=3.9% (high reproducibility), correlation=1.0 (perfect numerical accuracy).
    Artifacts: `reports/benchmarks/20251001-030128-4096-warm-repro/{B6_summary.md, reproducibility_results.json, run1.log...run10.log}`.
    Observations/Hypotheses: (1) Performance is highly stable (CV<5%) confirming measurements are reliable. (2) Mean slowdown 1.21× exceeds ≤1.2× target by small margin (0.01×). (3) No runs achieved speedup ≥1.0 (range: 0.78–0.88). (4) **Phase B complete—target NOT met, proceed to Phase C diagnostics.** This addresses supervisor's Attempt #32 concern—B6 provides the requested reproducibility data showing stable 1.21× slowdown, not the 3.3× regression detected in 025148. Core geometry tests 31/31 passed.
    Next Actions: Execute Phase C diagnostic experiments (C1-C7) to identify remaining bottlenecks before considering optimization work in Phase D.
  * [2025-10-13] Attempt #34 (galph loop CG) — Result: Phase B re-opened. New benchmark log `reports/benchmarks/20251001-025148/benchmark_results.json` shows warm speedup≈0.30 (PyTorch 1.7738 s vs C 0.5306 s) even with cache hits, contradicting Attempt #33’s 0.828±0.033 average. Investigation found `scripts/benchmarks/benchmark_detailed.py` mutates `NB_DISABLE_COMPILE` when `--disable-compile` is toggled while the simulator actually reads `NANOBRAGG_DISABLE_COMPILE`, so the flag is ignored and cached compiled simulators bleed across "eager" runs. Because the env var is also unset unconditionally, downstream callers inherit indeterminate compile state and benchmark logs lack mode metadata.
[2025-10-07T08:03:03] tokens used: 87,111

[2025-10-07T08:03:05] thinking

**Searching for VECTOR-TRICUBIC-001 section**
[2025-10-07T08:03:06] exec bash -lc "sed -n '360,460p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:06] bash -lc "sed -n '360,460p' docs/fix_plan.md" succeeded in 842ms:
  * [2025-10-07] Attempt #4 — Result: still in violation. Current `loop.sh` (lines 11-19) continues to pipe `prompts/main.md` through Claude 40× with unconditional `git push || true`.
    Metrics: n/a — manual inspection only.
    Artifacts: None yet; must create `reports/routing/<date>-loop-audit.txt` during Plan Phase A.
    Observations/Hypotheses: Until we capture the audit and restore single-iteration `prompts/debug.md`, automation poses risk of repeated bad pushes (Protected Assets rule reminder: do not delete `loop.sh`).
    Next Actions: Ralph to execute plan tasks A1–A3 before any further automation runs; supervisor to hold routing plan open until audit log and corrective diff exist.
  * [2025-10-06] Attempt #2 — Result: regression. Discovered automation script once again runs `prompts/main.md` inside a fixed loop, violating routing guard and spamming `git push`. Plan rebooted (now archived at `plans/archive/routing-loop-guard/plan.md`) with Phase A tasks pending at the time.
    Metrics: n/a
    Artifacts: To be captured during Phase A (see plan tasks A1–A3).
    Observations/Hypotheses: Likely rebase dropped prior fix; guard needs reinstatement alongside single-iteration workflow.
    Next Actions: Execute Phase A to document current state, then complete Phases B–C per plan.
  * [2025-10-01] Attempt #1 — Result: success. `loop.sh` now runs a single `git pull` and invokes `prompts/debug.md` only; verification captured in `reports/routing/2025-10-01-loop-verify.txt`.
    Metrics: n/a
    Artifacts: reports/routing/2025-10-01-loop-verify.txt
    Observations/Hypotheses: Guard prevents Ralph from re-entering prompts/main.md while parity tests fail.
    Next Actions: Monitor automation once AT suite is fully green before permitting main prompt.
  * [2025-10-01] Attempt #5 — Result: success (plan Phases A–C complete). Captured audit showing violations (40-iteration loop using prompts/main.md with unconditional push), remediated script to single-execution prompts/debug.md with git pull --rebase and conditional push, verified compliance.
    Metrics: Crystal geometry smoke test 19/19 passed post-change; no regressions.
    Artifacts: reports/routing/20251001-loop-audit.txt (Phase A), reports/routing/20251001-compliance-verified.txt (Phase C), loop.sh (git diff).
    Observations/Hypotheses: Regression had doubled to 40 iterations from prior 20; routing guard now restored per plan exit criteria (single debug.md execution, conditional push, rebase-before-work).
    Next Actions: ✅ Plan archived; continue monitoring automation for future regressions.
[2025-10-07T08:03:06] tokens used: 88,790

[2025-10-07T08:03:09] thinking

**Searching for vectorization entry point**
[2025-10-07T08:03:09] exec bash -lc 'rg "Vectorize tricubic" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T08:03:10] bash -lc 'rg "Vectorize tricubic" -n docs/fix_plan.md' succeeded in 873ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
1683:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-07T08:03:10] tokens used: 91,540
[2025-10-07T08:03:14] exec bash -lc "sed -n '1683,1820p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:15] bash -lc "sed -n '1683,1820p' docs/fix_plan.md" succeeded in 790ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions (2025-11-17 refresh):
 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
    Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
    Artifacts:
      - `reports/2025-10-vectorization/phase_a/test_at_str_002.collect.log` — Test collection output confirming 3 tests collected
[2025-10-07T08:03:15] tokens used: 92,023

[2025-10-07T08:03:30] thinking

**Clarifying and updating vectorization plan**

I'm confirming that the vectorization plan status is inconsistent and needs correction to reflect that Phase A is done. I’ll focus on updating `plans/active/vectorization.md` to clearly outline completed phases and upcoming tasks, helping guide Ralph toward Phase B. Before finalizing, I want to review key documentation to ensure the plan’s references and rationale are accurate.
[2025-10-07T08:03:31] exec bash -lc 'rg "tricubic" -n docs/architecture/pytorch_design.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:32] bash -lc 'rg "tricubic" -n docs/architecture/pytorch_design.md' exited 1 in 879ms:

[2025-10-07T08:03:32] tokens used: 159,384

[2025-10-07T08:03:34] thinking

**Considering reading more of the document**
[2025-10-07T08:03:35] exec bash -lc "sed -n '1,200p' docs/architecture/pytorch_design.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:35] bash -lc "sed -n '1,200p' docs/architecture/pytorch_design.md" succeeded in 724ms:
# nanoBragg PyTorch Architecture Design (Addendum)

## 1.2 Differentiability vs Performance

Principle: Differentiability is required; over-hardening is not. Prefer the minimal change that passes gradcheck and preserves vectorization.

- Minimal Differentiability Contract
  - Return analytic limits at removable singularities only when the raw op produces NaN/Inf or unacceptable relative error in tests.
  - Keep the nominal fast path branch-free (or mask-based) and fully vectorized.
  - Avoid speculative guards and extra branches unless backed by (a) a reproduced gradient failure or (b) a measured numerical/perf improvement.

- Branching Budget (Hot Helpers)
  - Per-element branching inside hot helpers (e.g., `sincg`, `sinc3`, polarization) must be justified with numbers (gradcheck evidence or microbenchmark delta).

- Mask vs Guard
  - Masks gate analytic limits; a single epsilon guard may backstop tiny denominators. If the mask tolerance renders guards redundant, prefer the mask alone.

- Precision Guidance
  - Default dev dtype: float64; default prod dtype: float32. Tolerances must state dtype assumptions and be tested in both where relevant.

[2025-10-07T08:03:35] tokens used: 159,625

[2025-10-07T08:03:37] thinking

**Searching for vectorization mentions**
[2025-10-07T08:03:38] exec bash -lc 'rg "polin3" docs/architecture/pytorch_design.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T08:03:38] bash -lc 'rg "polin3" docs/architecture/pytorch_design.md' exited 1 in 701ms:

[2025-10-07T08:03:38] tokens used: 160,141

[2025-10-07T08:03:41] thinking

**Checking for additional documentation**
[2025-10-07T08:03:42] exec bash -lc "sed -n '200,400p' docs/architecture/pytorch_design.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:43] bash -lc "sed -n '200,400p' docs/architecture/pytorch_design.md" succeeded in 797ms:

[2025-10-07T08:03:43] tokens used: 160,368

[2025-10-07T08:03:45] thinking

**Checking documentation and related specs**
[2025-10-07T08:03:46] exec bash -lc "sed -n '1,200p' docs/development/pytorch_runtime_checklist.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:47] bash -lc "sed -n '1,200p' docs/development/pytorch_runtime_checklist.md" succeeded in 761ms:
# PyTorch Runtime Checklist

Use this quick checklist before and after every PyTorch simulator edit. It distills the authoritative guidance from
`docs/architecture/pytorch_design.md`, `CLAUDE.md`, and the testing strategy.

1. **Vectorization**
   - Do not reintroduce Python loops that duplicate work already handled by batched tensor code.
   - When adding a new flow (sources, phi, mosaic, oversample), extend the existing broadcast shapes instead of looping.
   - Verify `_compute_physics_for_position` receives tensors with the expected batch dimensions.

2. **Device & Dtype Neutrality**
   - **Default dtype is float32** for performance and memory efficiency. Precision-critical operations (gradient checks, metric duality) explicitly override to float64 where required.
   - Materialize configuration tensors (beam, detector, crystal) on the execution device before the main loop.
   - Avoid per-iteration `.to()`, `.cpu()`, `.cuda()`, or tensor factories (`torch.tensor(...)`) inside compiled regions; cache constants once.
   - Run CPU **and** CUDA smoke commands (`pytest -v -m gpu_smoke`) when a GPU is available.

3. **torch.compile Hygiene**
   - Watch the console for Dynamo “graph break” warnings; treat them as blockers.
   - Benchmarks should reuse compiled functions; avoid changing shapes every call unless batching logic handles it.

[2025-10-07T08:03:47] tokens used: 160,630

[2025-10-07T08:03:54] thinking

**Preparing plan updates and syncing statuses**
[2025-10-07T08:03:55] exec bash -lc 'ls reports/2025-10-vectorization' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:03:56] bash -lc 'ls reports/2025-10-vectorization' succeeded in 831ms:
phase_a
[2025-10-07T08:03:56] tokens used: 161,491

[2025-10-07T08:04:16] thinking

**Preparing detailed plan and doc updates**

I'm thinking through careful updates to the vectorization plan and its related documentation to reflect completed Phase A work and shift focus toward designing Phase B deliverables. This involves revising the gap snapshot, task priorities, and references to design notes, plus ensuring the fix_plan entry aligns closely with these changes. I want to plan edits precisely before applying patches, aiming to clarify next steps and maintain consistency across docs.
[2025-10-07T08:04:17] exec bash -lc 'rg "Gap snapshot" -n plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:04:18] bash -lc 'rg "Gap snapshot" -n plans/active/vectorization.md' exited 1 in 882ms:

[2025-10-07T08:04:18] tokens used: 162,871

[2025-10-07T08:04:21] thinking

**Checking for repeated "Gap Snapshot" entries**
[2025-10-07T08:04:22] exec bash -lc 'rg "Gap Snapshot" -n plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:04:22] bash -lc 'rg "Gap Snapshot" -n plans/active/vectorization.md' succeeded in 715ms:
5:- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
[2025-10-07T08:04:22] tokens used: 163,086

[2025-10-07T08:04:27] thinking

**Updating project summary bullet**
[2025-10-07T08:04:30] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./plans/active/vectorization.md
@@ -4,3 +4,3 @@
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
 - Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
[2025-10-07T08:04:30] apply_patch(auto_approved=true) exited 0 in 8ms:
Success. Updated the following files:
M plans/active/vectorization.md
[2025-10-07T08:04:30] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..ce6bc1dc0fba61ad6b6067b2f5bc8e4e17121a9f
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,7 +2,7 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
 - Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture

[2025-10-07T08:04:30] tokens used: 163,819
[2025-10-07T08:04:30] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..ce6bc1dc0fba61ad6b6067b2f5bc8e4e17121a9f
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,7 +2,7 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
 - Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture


[2025-10-07T08:04:33] thinking

**Updating supervisory note date and content**
[2025-10-07T08:04:33] exec bash -lc "sed -n '1,30p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:04:34] bash -lc "sed -n '1,30p' plans/active/vectorization.md" succeeded in 759ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T08:04:34] tokens used: 164,333
[2025-10-07T08:04:34] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..ce6bc1dc0fba61ad6b6067b2f5bc8e4e17121a9f
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,7 +2,7 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
 - Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture


[2025-10-07T08:04:37] thinking

**Updating Supervisory note for Phase B**
[2025-10-07T08:04:39] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./plans/active/vectorization.md
@@ -5,3 +5,3 @@
 - Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
[2025-10-07T08:04:39] apply_patch(auto_approved=true) exited 0 in 21ms:
Success. Updated the following files:
M plans/active/vectorization.md
[2025-10-07T08:04:39] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.

[2025-10-07T08:04:39] tokens used: 165,906
[2025-10-07T08:04:39] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:04:46] thinking

**Updating project documentation entries**

I’m updating the `docs/fix_plan.md` file to reflect progress changes—from Phase A tasks to starting Phase B. I’ll revise the status line and refresh the "Next Actions" list to focus on drafting design notes and preparing tests for Phase B, ensuring the attempt history stays accurate.
[2025-10-07T08:04:53] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./docs/fix_plan.md
@@ -1685,3 +1685,3 @@
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
@@ -1693,6 +1693,6 @@
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
[2025-10-07T08:04:53] apply_patch(auto_approved=true) exited 0 in 21ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T08:04:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..127a1917ae9c797191f679e55d9777b7703a355e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.

[2025-10-07T08:04:53] tokens used: 167,990
[2025-10-07T08:04:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..127a1917ae9c797191f679e55d9777b7703a355e
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:04:58] thinking

**Updating status in fix_plan.md**
[2025-10-07T08:05:00] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./docs/fix_plan.md
@@ -18,3 +18,3 @@
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T08:05:00] apply_patch(auto_approved=true) exited 0 in 33ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T08:05:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.

[2025-10-07T08:05:00] tokens used: 169,502
[2025-10-07T08:05:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:05:06] thinking

**Organizing input.md preparation**
[2025-10-07T08:05:07] exec bash -lc 'git branch --show-current' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:05:08] bash -lc 'git branch --show-current' succeeded in 932ms:
feature/spec-based-2
[2025-10-07T08:05:08] tokens used: 170,333
[2025-10-07T08:05:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:05:22] thinking

**Summarizing Phase B planning details**

I’m organizing the Phase B design memo plan for the feature/spec-based-2 branch. Since no tests run here, I’ll mark mapped tests as "none — evidence-only" and focus on producing design notes as the key artifact. I’m outlining how to instruct doc authoring, fallback if blocked, priorities, commands, pitfalls, and pointers with file references. I’ll also consider the requested length and formatting rules for the input.md while gathering line numbers for precise citations.
[2025-10-07T08:05:23] exec bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,160p'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:05:24] bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,160p'" succeeded in 1.02s:
     1	## Context
     2	- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
     3	- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
     4	- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
     5	- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
     6	- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
     7	
     8	### Phase A — Evidence & Baseline Capture
     9	Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
    10	Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
    11	Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.
    12	
    13	| ID | Task Description | State | How/Why & Guidance |
    14	| --- | --- | --- | --- |
    15	| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
    16	| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
    17	| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |
    18	
    19	### Phase B — Tricubic Vectorization Design
    20	Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T08:05:24] tokens used: 172,104
[2025-10-07T08:05:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:05:29] thinking

**Preparing to cite line numbers**
[2025-10-07T08:05:29] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '1670,1750p'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:05:30] bash -lc "nl -ba docs/fix_plan.md | sed -n '1670,1750p'" succeeded in 755ms:
  1670	  * [2025-10-13] Attempt #3 — Result: partial success. Fixed PyTorch torch.compile C++ codegen bugs by adding `NANOBRAGG_DISABLE_COMPILE` env var to conditionally disable compilation during gradient tests.
  1671	    Metrics: test_gradcheck_cell_a PASSED (17s). Core geometry tests still pass: 31/31 PASSED (crystal_geometry 19/19, detector_geometry 12/12). Known issue: test_gradient_flow_simulation fails at 90° stationary point (gradients legitimately zero).
  1672	    Artifacts: src/nanobrag_torch/simulator.py lines 577-591, src/nanobrag_torch/utils/physics.py lines 14-30, tests/test_gradients.py lines 1-29 (commit d45a0f3).
  1673	    Observations/Hypotheses: torch.compile has two bugs that break gradcheck: (1) C++ codegen creates conflicting array declarations (`tmp_acc*_arr`) in backward passes, (2) donated buffer errors in backward functions. Since gradcheck is testing numerical correctness (not performance), disabling compilation is appropriate. Environment variable approach preserves normal torch.compile behavior for production code while allowing gradient tests to run. Full gradient test suite still times out (>10 min) due to multiple gradcheck invocations with different parameter values.
  1674	    Next Actions: (1) Fix test_gradient_flow_simulation to use 89° instead of 90° angles to avoid stationary point. (2) Continue with missing parameters: misset_rot_x, lambda_A, fluence.
  1675	- Risks/Assumptions: Gradient tests use relaxed tolerances (rtol=0.05) due to complex physics simulation chain, validated against existing test_gradients.py comprehensive test suite. New tests must ensure they do not reintroduce long-running simulator invocations. torch.compile bugs may be fixed in future PyTorch versions; re-enable compilation when possible.
  1676	- Exit Criteria (quote thresholds from spec):
  1677	  * testing_strategy.md §4.1: "The following parameters (at a minimum) must pass gradcheck: Crystal: cell_a, cell_gamma, misset_rot_x; Detector: distance_mm, Fbeam_mm; Beam: lambda_A; Model: mosaic_spread_rad, fluence." (⚠️ outstanding: misset_rot_x, lambda_A, fluence still require tests; existing coverage for cell params + beam_center_f remains valid; compilation bugs fixed for existing tests.)
  1678	  * arch.md §15: "Use torch.autograd.gradcheck with dtype=torch.float64" (✅ existing tests honour float64; extend same discipline to new cases).
  1679	  * No regressions in existing test suite (✅ core geometry baseline 31/31 passed; gradient tests now can execute without C++ compilation errors).
  1680	
  1681	---
  1682	
  1683	## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
  1684	- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
  1685	- Priority: High
  1686	- Status: in_progress (Phase A complete; Phase B design memo outstanding)
  1687	- Owner/Date: galph/2025-10-17
  1688	- Plan Reference: `plans/active/vectorization.md`
  1689	- Reproduction (C & PyTorch):
[2025-10-07T08:05:30] tokens used: 184,446
[2025-10-07T08:05:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:05:34] thinking

**Preparing to write input.md**
[2025-10-07T08:05:34] exec bash -lc "sed -n '1,160p' specs/spec-a-parallel.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:05:35] bash -lc "sed -n '1,160p' specs/spec-a-parallel.md" succeeded in 847ms:
# nanoBragg Spec A — Conformance & Parallel Tests

This shard enumerates the CLI profile acceptance tests, parallel validation suite, developer tooling expectations, and conformance profiles. Review [spec-a-core.md](spec-a-core.md) for base requirements and [spec-a-cli.md](spec-a-cli.md) for CLI semantics referenced here.

Parallel Validation Tests (Profile: C-PyTorch Equivalence) — Acceptance Tests (Normative)

References: ../docs/development/testing_strategy.md (parallel trace-driven validation), ../docs/debugging/debugging.md (trace SOP), ../docs/debugging/detector_geometry_checklist.md (detector geometry triage), ../docs/architecture/undocumented_conventions.md (hidden C behaviors)
Why: testing_strategy and debugging.md define the parallel trace methodology; the detector checklist accelerates geometry debugging; undocumented_conventions flags hidden C behaviors that often break equivalence.

These tests verify that PyTorch implementation produces outputs equivalent to the C reference implementation. They apply to implementations claiming the C-PyTorch Equivalence Profile. These are black-box behavioral tests comparing outputs without examining internal implementation details.

- AT-PARALLEL-001 Beam Center Scales with Detector Size
  - Setup: Test detector sizes 64x64, 128x128, 256x256, 512x512, 1024x1024 pixels with 0.1mm pixel size, cubic crystal 100Å N=3, λ=6.2Å
  - Expectation: Beam center (mm) SHALL equal detector_pixels/2 × pixel_size_mm; Peak SHALL appear at detector center ±2 pixels; Correlation between C and PyTorch ≥0.9999
  - Failure mode: Fixed beam center at 51.2mm regardless of detector size
  - Implementation:
    - Parity (canonical): `KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_parity_matrix.py -k "AT-PARALLEL-001"`
    - Supplemental PyTorch-only regression: `pytest -v tests/test_at_parallel_001.py`

- AT-PARALLEL-002 Pixel Size Independence
[2025-10-07T08:05:35] tokens used: 186,129
[2025-10-07T08:05:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:05:38] thinking

**Confirming citation locations**

I’m checking which files mention interpolation or related functions to cite relevant sections accurately. I’m considering `specs/spec-a-parallel.md` for parallel or pointer references and `docs/architecture/c_code_overview.md` for tricubic functions. I’ll run a search like `rg polin3` to pinpoint key lines for citation.
[2025-10-07T08:05:40] exec bash -lc 'rg -n "polin3" docs/architecture/c_code_overview.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T08:05:41] bash -lc 'rg -n "polin3" docs/architecture/c_code_overview.md' exited 1 in 803ms:

[2025-10-07T08:05:41] tokens used: 189,297
[2025-10-07T08:05:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:06:00] thinking

**Composing structured documentation plan**

I'm mapping out a detailed document plan to produce an input.md file of about 100–200 lines following a precise section order and formatting. I’m aiming to include summary, mode, focus, branch info, mapped tests, artifacts, actionable items, priorities with file references, how-to steps with commands, pitfalls, and pointers—each with bulleted lines and strategic blank lines for readability. This way, the doc will be comprehensive, consistent, and easy to follow while meeting the length requirement.
[2025-10-07T08:06:22] exec bash -lc "cat <<'EOF' > input.md
Summary: Capture Phase B design memo for tricubic vectorization so implementation work can proceed with clear tensor/broadcast guidance.
Mode: Docs
Focus: VECTOR-TRICUBIC-001 — Vectorize tricubic interpolation and detector absorption
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-vectorization/phase_b/design_notes.md (new), docs/fix_plan.md attempt log update
Do Now: VECTOR-TRICUBIC-001 — Draft "'`reports/2025-10-vectorization/phase_b/design_notes.md` covering Phase B tasks B1–B3 in `plans/active/vectorization.md`
If Blocked: Summarise the blocker in `reports/2025-10-vectorization/phase_b/blockers.md` and ping the supervisor before leaving the loop.

Priorities & Rationale:
- `plans/active/vectorization.md:19` still lists B1–B3 as open; the design memo is the gating artifact before code edits.
- `docs/fix_plan.md:1683` documents the status as Phase A complete with Phase B outstanding, demanding written guidance before implementation.
- `reports/2025-10-vectorization/phase_a/tricubic_baseline.md` already holds baseline timing; the design memo must reference it to justify vectorization targets.
- `docs/development/pytorch_runtime_checklist.md:1` requires explicit device/dtype planning ahead of PyTorch edits; capture these decisions in the memo.
- `specs/spec-a-parallel.md:1` ties interpolation behavior to acceptance tests; the design must note how vectorization will preserve those guarantees.
- `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
- `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
- `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.

How-To Map:
- Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
- Skim C reference: `rg -n "polin" nanoBragg.c | sed -n '"'2600,2750p'"'` for polynomial flow details.
- Review PyTorch current implementation: `sed -n '"'350,520p' src/nanobrag_torch/models/crystal.py"'` to capture existing scalar loops.
- Load baseline timings for citation: `less reports/2025-10-vectorization/phase_a/tricubic_baseline.md`.
- Capture absorption context: `less reports/2025-10-vectorization/phase_a/absorption_baseline.md`.
- Reference runtime checklist: `less docs/development/pytorch_runtime_checklist.md` and note device/dtype rules in memo.
- Outline memo scaffold (Context → Shape Plan → Polynomial Vectorization → Gradient/Device checklist → Pending validation strategy).
- When describing shapes, include diagrams or tables referencing `(slow, fast)` broadcast conventions from the plan.
- Document how oversample, phi, mosaic, and source dimensions expand through the gather and polynomial evaluation.
- Summarise gradient expectations, citing where `.item()`/`torch.linspace` cannot appear and which new tests are required.
- Include explicit pointers to future regression commands (e.g., reuse `pytest tests/test_at_str_002.py` and upcoming vectorized unit tests) with CPU/CUDA variants.
- Note performance measurement plan: reuse `scripts/benchmarks/tricubic_baseline.py --mode vectorized` once implemented; mention expected output paths.
- Keep memo ASCII and ensure headings use markdown `##`/`###` for clarity.
- After drafting, re-read to confirm it answers Phase B exit criteria (shapes, equations, gradient/device checklist, validation strategy).
- Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
- Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
- No simulator code edits this loop—focus solely on documentation.

Pitfalls To Avoid:
- Do not change implementation files; documentation-only per supervisor brief.
- Avoid inventing new flags or renaming plan tasks; stay aligned with existing plan structure.
- Keep device discussion detached from current CLI issues to prevent conflation with CLI-FLAGS work.
- Do not duplicate plan content verbatim; synthesise actionable steps in your own words.
- Ensure memo references existing artifacts (baseline logs) rather than restating numbers without citation.
- No direct copy of C code beyond short citations; summarise behavior instead.
- Maintain `(slow, fast)` ordering clarity; note `meshgrid(indexing="ij")` expectations in memo.
- Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
- Avoid editing archived reports; create new Phase B files only.
- Keep the memo versioned; include date and SHA at top for traceability.

Pointers:
- `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
- `docs/fix_plan.md:1683` — Status ledger and Next Actions.
- `reports/2025-10-vectorization/phase_a/tricubic_baseline.md:1` — Current tricubic timing baseline.
- `reports/2025-10-vectorization/phase_a/absorption_baseline.md:1` — Detector absorption baseline metrics.
- `docs/development/pytorch_runtime_checklist.md:1` — Device/dtype runtime guardrails.
- `specs/spec-a-core.md:1` — Core interpolation requirements (see linked shard for structure factors).
- `specs/spec-a-parallel.md:1` — Acceptance tests impacted by interpolation changes.
- `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
- `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
- `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.

Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
EOF
' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:06:23] bash -lc "cat <<'EOF' > input.md
Summary: Capture Phase B design memo for tricubic vectorization so implementation work can proceed with clear tensor/broadcast guidance.
Mode: Docs
Focus: VECTOR-TRICUBIC-001 — Vectorize tricubic interpolation and detector absorption
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-vectorization/phase_b/design_notes.md (new), docs/fix_plan.md attempt log update
Do Now: VECTOR-TRICUBIC-001 — Draft "'`reports/2025-10-vectorization/phase_b/design_notes.md` covering Phase B tasks B1–B3 in `plans/active/vectorization.md`
If Blocked: Summarise the blocker in `reports/2025-10-vectorization/phase_b/blockers.md` and ping the supervisor before leaving the loop.

Priorities & Rationale:
- `plans/active/vectorization.md:19` still lists B1–B3 as open; the design memo is the gating artifact before code edits.
- `docs/fix_plan.md:1683` documents the status as Phase A complete with Phase B outstanding, demanding written guidance before implementation.
- `reports/2025-10-vectorization/phase_a/tricubic_baseline.md` already holds baseline timing; the design memo must reference it to justify vectorization targets.
- `docs/development/pytorch_runtime_checklist.md:1` requires explicit device/dtype planning ahead of PyTorch edits; capture these decisions in the memo.
- `specs/spec-a-parallel.md:1` ties interpolation behavior to acceptance tests; the design must note how vectorization will preserve those guarantees.
- `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
- `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
- `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.

How-To Map:
- Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
- Skim C reference: `rg -n "polin" nanoBragg.c | sed -n '"'2600,2750p'"'` for polynomial flow details.
- Review PyTorch current implementation: `sed -n '"'350,520p' src/nanobrag_torch/models/crystal.py"'` to capture existing scalar loops.
- Load baseline timings for citation: `less reports/2025-10-vectorization/phase_a/tricubic_baseline.md`.
- Capture absorption context: `less reports/2025-10-vectorization/phase_a/absorption_baseline.md`.
- Reference runtime checklist: `less docs/development/pytorch_runtime_checklist.md` and note device/dtype rules in memo.
- Outline memo scaffold (Context → Shape Plan → Polynomial Vectorization → Gradient/Device checklist → Pending validation strategy).
- When describing shapes, include diagrams or tables referencing `(slow, fast)` broadcast conventions from the plan.
- Document how oversample, phi, mosaic, and source dimensions expand through the gather and polynomial evaluation.
- Summarise gradient expectations, citing where `.item()`/`torch.linspace` cannot appear and which new tests are required.
- Include explicit pointers to future regression commands (e.g., reuse `pytest tests/test_at_str_002.py` and upcoming vectorized unit tests) with CPU/CUDA variants.
- Note performance measurement plan: reuse `scripts/benchmarks/tricubic_baseline.py --mode vectorized` once implemented; mention expected output paths.
- Keep memo ASCII and ensure headings use markdown `##`/`###` for clarity.
- After drafting, re-read to confirm it answers Phase B exit criteria (shapes, equations, gradient/device checklist, validation strategy).
- Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
- Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
- No simulator code edits this loop—focus solely on documentation.

Pitfalls To Avoid:
- Do not change implementation files; documentation-only per supervisor brief.
- Avoid inventing new flags or renaming plan tasks; stay aligned with existing plan structure.
- Keep device discussion detached from current CLI issues to prevent conflation with CLI-FLAGS work.
- Do not duplicate plan content verbatim; synthesise actionable steps in your own words.
- Ensure memo references existing artifacts (baseline logs) rather than restating numbers without citation.
- No direct copy of C code beyond short citations; summarise behavior instead.
- Maintain `(slow, fast)` ordering clarity; note `meshgrid(indexing="ij")` expectations in memo.
- Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
- Avoid editing archived reports; create new Phase B files only.
- Keep the memo versioned; include date and SHA at top for traceability.

Pointers:
- `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
- `docs/fix_plan.md:1683` — Status ledger and Next Actions.
- `reports/2025-10-vectorization/phase_a/tricubic_baseline.md:1` — Current tricubic timing baseline.
- `reports/2025-10-vectorization/phase_a/absorption_baseline.md:1` — Detector absorption baseline metrics.
- `docs/development/pytorch_runtime_checklist.md:1` — Device/dtype runtime guardrails.
- `specs/spec-a-core.md:1` — Core interpolation requirements (see linked shard for structure factors).
- `specs/spec-a-parallel.md:1` — Acceptance tests impacted by interpolation changes.
- `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
- `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
- `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.

Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
EOF
' succeeded in 1.12s:

[2025-10-07T08:06:23] tokens used: 191,979
[2025-10-07T08:06:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:06:25] thinking

**Verifying input.md line count**
[2025-10-07T08:06:26] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:06:27] bash -lc 'wc -l input.md' succeeded in 723ms:
      63 input.md
[2025-10-07T08:06:27] tokens used: 194,266
[2025-10-07T08:06:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:06:34] thinking

**Planning content expansion for input.md**

I need to extend the current 63 lines up to at least 100 by adding more detailed bullet points across existing sections like Priorities & Rationale, How-To Map, Pitfalls, and Pointers. I plan to enrich these with references to other docs and reports, additional rationales, and verification steps, carefully avoiding nested bullets to meet the instructions. I'll use the patch to insert these new bullets and make the content more comprehensive without changing the structure.
[2025-10-07T08:06:53] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./input.md
@@ -18,2 +18,8 @@
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
@@ -37,2 +43,11 @@
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
 
@@ -49,2 +64,10 @@
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
 
@@ -61,2 +84,8 @@
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
[2025-10-07T08:06:53] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M input.md
[2025-10-07T08:06:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..332a77585354ffe65cf8e2f8a0be97532466ca1a
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,15 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +62,14 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +82,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.

[2025-10-07T08:06:53] tokens used: 196,519
[2025-10-07T08:06:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..332a77585354ffe65cf8e2f8a0be97532466ca1a
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,15 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +62,14 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +82,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:06:56] thinking

**Checking line count**
[2025-10-07T08:06:57] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:06:58] bash -lc 'wc -l input.md' succeeded in 988ms:
      92 input.md
[2025-10-07T08:06:58] tokens used: 199,016
[2025-10-07T08:06:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..332a77585354ffe65cf8e2f8a0be97532466ca1a
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,15 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +62,14 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +82,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:03] thinking

**Expanding documentation sections**
[2025-10-07T08:07:08] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./input.md
@@ -52,2 +52,6 @@
 - Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
@@ -72,2 +76,6 @@
 - Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
[2025-10-07T08:07:08] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M input.md
[2025-10-07T08:07:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.

[2025-10-07T08:07:08] tokens used: 199,556
[2025-10-07T08:07:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:10] thinking

**Counting lines in file**
[2025-10-07T08:07:10] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:11] bash -lc 'wc -l input.md' succeeded in 905ms:
     100 input.md
[2025-10-07T08:07:11] tokens used: 200,699
[2025-10-07T08:07:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:13] thinking

**Checking modified files with git status**
[2025-10-07T08:07:13] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:14] bash -lc 'git status --short' succeeded in 771ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/vectorization.md
[2025-10-07T08:07:14] tokens used: 200,897
[2025-10-07T08:07:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:19] thinking

**Preparing to update galph_memory and commit**
[2025-10-07T08:07:24] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./galph_memory.md
@@ -1525 +1525,8 @@
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
[2025-10-07T08:07:24] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M galph_memory.md
[2025-10-07T08:07:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.

[2025-10-07T08:07:24] tokens used: 201,711
[2025-10-07T08:07:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:26] thinking

**Checking modified galph_memory file**
[2025-10-07T08:07:26] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:27] bash -lc 'git status --short' succeeded in 777ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/vectorization.md
[2025-10-07T08:07:27] tokens used: 202,753
[2025-10-07T08:07:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:30] thinking

**Preparing commit for vectorization plan**
[2025-10-07T08:07:31] exec bash -lc 'git --no-pager diff plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:31] bash -lc 'git --no-pager diff plans/active/vectorization.md' succeeded in 710ms:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b7..40a1697 100644
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
[2025-10-07T08:07:31] tokens used: 215,624
[2025-10-07T08:07:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:33] thinking

**Reviewing docs fix diff**
[2025-10-07T08:07:33] exec bash -lc 'git --no-pager diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:34] bash -lc 'git --no-pager diff docs/fix_plan.md' succeeded in 760ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025..48271cc 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
[2025-10-07T08:07:34] tokens used: 216,491
[2025-10-07T08:07:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:38] thinking

**Checking input.md differences**
[2025-10-07T08:07:38] exec bash -lc 'git --no-pager diff input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:39] bash -lc 'git --no-pager diff input.md' succeeded in 726ms:
diff --git a/input.md b/input.md
index d7e9ffc..0cf26f1 100644
--- a/input.md
+++ b/input.md
@@ -1,117 +1,100 @@
-Summary: Capture fresh CLI HKL ingestion evidence (incl. CUDA probe) and document the device-handling gap before L3 structure-factor fixes.
-Mode: Parity
-Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
+Summary: Capture Phase B design memo for tricubic vectorization so implementation work can proceed with clear tensor/broadcast guidance.
+Mode: Docs
+Focus: VECTOR-TRICUBIC-001 — Vectorize tricubic interpolation and detector absorption
 Branch: feature/spec-based-2
-Mapped tests: pytest --collect-only -q tests/test_cli_scaling.py
-Artifacts: reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_device_probe.json, reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_env.json, reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_audit.md
-Do Now: CLI-FLAGS-003 Phase L3c device audit — KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python - <<'PY' > reports/2025-10-cli-flags/phase_l/structure_factor/cli_hkl_device_probe.json
-import json
-import torch
-from nanobrag_torch.__main__ import create_parser, parse_and_validate_args
+Mapped tests: none — evidence-only
+Artifacts: reports/2025-10-vectorization/phase_b/design_notes.md (new), docs/fix_plan.md attempt log update
[2025-10-07T08:07:39] tokens used: 217,908
[2025-10-07T08:07:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:42] thinking

**Noting expected large diff**
[2025-10-07T08:07:42] exec bash -lc 'git --no-pager diff galph_memory.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:43] bash -lc 'git --no-pager diff galph_memory.md' succeeded in 773ms:
diff --git a/galph_memory.md b/galph_memory.md
index 478311d..e5225b0 100644
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@ Follow-ups for Ralph:
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
[2025-10-07T08:07:43] tokens used: 220,961
[2025-10-07T08:07:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:45] thinking

**Staging changes for commit**
[2025-10-07T08:07:46] exec bash -lc 'git add docs/fix_plan.md plans/active/vectorization.md input.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:46] bash -lc 'git add docs/fix_plan.md plans/active/vectorization.md input.md galph_memory.md' succeeded in 846ms:

[2025-10-07T08:07:46] tokens used: 221,552
[2025-10-07T08:07:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:48] thinking

**Verifying staging status**
[2025-10-07T08:07:49] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:50] bash -lc 'git status --short' succeeded in 811ms:
M  docs/fix_plan.md
M  galph_memory.md
M  input.md
M  plans/active/vectorization.md
[2025-10-07T08:07:50] tokens used: 221,705
[2025-10-07T08:07:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:53] thinking

**Checking git staged changes**
[2025-10-07T08:07:53] exec bash -lc 'git status' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:54] bash -lc 'git status' succeeded in 731ms:
On branch feature/spec-based-2
Your branch is up to date with 'origin/feature/spec-based-2'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   docs/fix_plan.md
	modified:   galph_memory.md
	modified:   input.md
	modified:   plans/active/vectorization.md

[2025-10-07T08:07:54] tokens used: 221,959
[2025-10-07T08:07:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:07:57] thinking

**Committing changes with instructed message**
[2025-10-07T08:07:58] exec bash -lc 'git commit -m "SUPERVISOR: VECTOR-TRICUBIC Phase B planning - tests: not run"' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:07:58] bash -lc 'git commit -m "SUPERVISOR: VECTOR-TRICUBIC Phase B planning - tests: not run"' succeeded in 754ms:
[feature/spec-based-2 1c84191] SUPERVISOR: VECTOR-TRICUBIC Phase B planning - tests: not run
 4 files changed, 109 insertions(+), 119 deletions(-)
[2025-10-07T08:07:58] tokens used: 222,282
[2025-10-07T08:07:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:08:06] thinking

**Pushing changes to remote**
[2025-10-07T08:08:07] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T08:08:09] bash -lc 'git push' succeeded in 2.22s:
To github.com:hoidn/nanoBragg.git
   a97979d..1c84191  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T08:08:09] tokens used: 223,409
[2025-10-07T08:08:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.


[2025-10-07T08:08:16] thinking

**Preparing final summary message**
[2025-10-07T08:08:16] codex

- Refreshed the vectorization plan gap snapshot and supervisory note so Phase B design work is now the explicit blocker (`plans/active/vectorization.md:1`).
- Synced the fix-plan index/status and Next Actions for VECTOR-TRICUBIC-001 to call for the Phase B design memo before implementation (`docs/fix_plan.md:16`, `docs/fix_plan.md:1683`).
- Rewrote `input.md` with a Docs-mode Do Now directing Ralph to produce `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3 (`input.md:1`).
- Logged the new supervisory context and expectations in `galph_memory.md` for continuity (`galph_memory.md:1527`).

Next steps:  
1. Draft the Phase B design memo (shapes, polin3 tensorization, gradient/device checklist) and stash it at `reports/2025-10-vectorization/phase_b/design_notes.md`.  
2. Once saved, update `docs/fix_plan.md` Attempts and mark B1–B3 progress so Phase C implementation can begin.
[2025-10-07T08:08:19] tokens used: 224,145
[2025-10-07T08:08:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 1e7a025966dd4d3854ca02a277ebb9c535d5d7a4..48271ccdddb479a6e2ca396787740b89d8f86675
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -16,7 +16,7 @@
 | [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
 | [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
 | [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
-| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
+| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
 | [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
 | [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
 | [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
@@ -1683,7 +1683,7 @@
 ## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
 - Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
 - Priority: High
-- Status: in_progress (Phase A1 complete; A2/A3 evidence outstanding)
+- Status: in_progress (Phase A complete; Phase B design memo outstanding)
 - Owner/Date: galph/2025-10-17
 - Plan Reference: `plans/active/vectorization.md`
 - Reproduction (C & PyTorch):
@@ -1691,10 +1691,10 @@
   * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
-- Next Actions (2025-11-17 refresh):
- 1. Execute plan Phase A tasks A2–A3: add the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture timing artifacts (CPU and CUDA when available) plus `phase_a/env.json`, and update this entry when logs land. These harnesses remain the gating blocker before design work resumes.
- 2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
- 3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
+- Next Actions (2025-11-18 refresh):
+ 1. Author the Phase B design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tasks B1–B3—shape/broadcast diagrams, polin3 tensor equations, and gradient/device checklist.
+ 2. Update `plans/active/vectorization.md`/docs/fix_plan attempts once the memo lands (mark B1–B3 in-progress/complete with references) so implementation tasks can proceed in Phase C.
+ 3. Outline the targeted regression/benchmark plan within the memo (tests for tricubic + absorption, CPU/CUDA baselines) to unblock Phase C/E validation steps.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/galph_memory.md b/galph_memory.md
index 478311d52f507054716f1e12f6be9c0d1645f7fc..e5225b057071f74779ea2a42da746da57ae4110a
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1523,3 +1523,10 @@
 - Added note in `docs/fix_plan.md` (CLI-FLAGS-003 Next Actions) flagging the device gap so L3c implementation covers it.
 - Authored new `input.md` (Parity mode) instructing Ralph to capture `cli_hkl_device_probe.json`, record env metadata, update the audit doc, and log Attempt #79 before any simulator edits.
 - Open questions: confirm whether CUDA probe reproduces the device mismatch on the local machine; plan to queue CLI-side fix once evidence is captured.
+
+## 2025-11-18 (galph loop — VECTOR-TRICUBIC Phase B prep)
+- `git pull --rebase` already up to date; no conflicts.
+- Updated `plans/active/vectorization.md` gap snapshot + supervisory note to reflect Phase A completion and highlight Phase B design memo as the new blocker.
+- Synced `docs/fix_plan.md` status/index for VECTOR-TRICUBIC-001 (Phase A complete, Phase B outstanding) and refreshed Next Actions to call for the Phase B design memo.
+- Authored new `input.md` (Docs mode) directing Ralph to draft `reports/2025-10-vectorization/phase_b/design_notes.md` covering tasks B1–B3, including tensor shapes, polin3 tensorization, and gradient/device checklist.
+- Follow-up for Ralph: produce the memo, cite baseline artifacts, outline regression/benchmark plan, and log the attempt in fix_plan before attempting any implementation work.
diff --git a/input.md b/input.md
index c483ef1f80296f8cc480af483be45f8be01ea7a6..0cf26f1e25c91d582ff4fc62456bc792737c2859
--- a/input.md
+++ b/input.md
@@ -16,6 +16,12 @@
 - `docs/architecture/pytorch_design.md:1` stresses vectorization without breaking differentiability; align memo guidance accordingly.
 - `nanoBragg.c:2604` (polin3/polin2/polint) is the authoritative behavior; map each helper into batched tensor algebra in the memo.
 - `reports/2025-10-vectorization/phase_a/absorption_baseline.md` provides absorption timings that should inform subsequent performance goals documented in the memo.
+- `reports/2025-10-vectorization/phase_a/env.json` shows the CUDA-capable environment; memo should explicitly plan CPU+CUDA validation to match available hardware.
+- `docs/development/testing_strategy.md:2` enumerates Tier 1 acceptance tests that the vectorized path must continue to satisfy; cite relevant nodes when planning regression coverage.
+- `docs/architecture/c_code_overview.md:1` collects background on interpolation helpers; link to specific subsections where polin2/polin3 are analysed.
+- `docs/architecture/undocumented_conventions.md:1` highlights subtle C behaviors; incorporate any interpolation-specific quirks into risk assessment.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md` catalogs hotspots attributed to scalar tricubic loops; align performance goals against these measurements.
+- `docs/index.md:1` flags the PyTorch runtime checklist as mandatory; citing index ensures Protected Asset policy compliance.
 
 How-To Map:
 - Ensure directory exists: `mkdir -p reports/2025-10-vectorization/phase_b`.
@@ -35,6 +41,19 @@
 - Update `docs/fix_plan.md` Attempt history with memo path, key findings, and planned validation once draft is saved.
 - Leave TODO markers only inside memo if follow-up data is required; highlight them in fix_plan entry.
 - No simulator code edits this loop—focus solely on documentation.
+- Capture memo revision metadata (date, git SHA) at the top for traceability per plan guidance.
+- Cross-check notation with existing acceptance tests to ensure h/k/l indexing matches spec wording.
+- Reference how caching strategy will evolve post-vectorization (e.g., reuse vs recalculation) to pre-empt Phase C decisions.
+- Draft preliminary risk table (numerical precision, memory usage, compile compatibility) so future loops can prioritise mitigation.
+- Consider including short pseudocode snippets or tensor expressions to clarify the intended broadcast order.
+- Mention dependency on `torch.vectorize` vs manual broadcasting if relevant; note reasoning for chosen approach.
+- Indicate where additional unit tests will live (e.g., `tests/test_tricubic_vectorized.py`) and what they will assert.
+- Call out any data collection needed before Phase C (e.g., verifying mismatched warning counts) so it can be scheduled.
+- Save intermediate notes if memo drafting spans multiple loops; reference them in plan attempts.
+- Plan to attach appendix tables for Na/Nb/Nc sampling so future engineers can extend checks easily.
+- Note any dependencies on torch.compile behavior (graph breaks, caching) gleaned from prior reports.
+- Encourage capturing symbolic expressions for Vandermonde weights to ensure reproducibility.
+- Include a short glossary for symbols (S, F, Na, etc.) to keep memo self-contained.
 
 Pitfalls To Avoid:
 - Do not change implementation files; documentation-only per supervisor brief.
@@ -47,6 +66,18 @@
 - Don’t promise performance numbers without linking to baseline data; set goals relative to recorded timings.
 - Avoid editing archived reports; create new Phase B files only.
 - Keep the memo versioned; include date and SHA at top for traceability.
+- Avoid reintroducing the deprecated scalar fallback as a "temporary" solution—memo should plan to retire it once vectorized path lands.
+- Do not schedule code changes before documenting validation approach; Phase B exit criteria forbid this.
+- Resist adding new plan phases; stick to the agreed structure and update only within current phase boundaries.
+- Avoid conflating vectorized tricubic work with detector absorption; memo should separate prerequisites clearly.
+- Ensure new diagrams or tables remain textual ASCII; no pasted images.
+- Do not forget to mention gradient check prerequisites; missing them creates rework later.
+- Avoid referencing private experiments; cite only artifacts checked into repo.
+- Keep memo free of speculative benchmarks; mark estimates distinctly if needed.
+- Do not leave memo in draft without logging status in fix_plan; incomplete communication slows follow-up loops.
+- Avoid forgetting to mention ROI/shape expectations; these drive regression harness updates.
+- Do not alter plan checklists directly from memo—use supervisor plan updates if structure must change.
+- Avoid mixing scalar fallback cleanup steps into design memo; they belong to implementation phases.
 
 Pointers:
 - `plans/active/vectorization.md:1` — Phase roadmap with B1–B3 definitions.
@@ -59,5 +90,11 @@
 - `docs/architecture/pytorch_design.md:1` — Vectorization and differentiability expectations.
 - `nanoBragg.c:2604` — Reference polin3/polin2 implementation lines.
 - `scripts/benchmarks/tricubic_baseline.py:1` — Baseline harness to reference in memo.
+- `reports/2025-10-vectorization/phase_a/env.json:1` — Captured environment metadata for reproducibility notes.
+- `docs/architecture/c_code_overview.md:1` — Background analysis of interpolation routines to cite.
+- `docs/architecture/undocumented_conventions.md:1` — Implicit behaviors to watch during vectorization.
+- `docs/development/testing_strategy.md:40` — Tiered validation expectations for parity and gradients.
+- `reports/benchmarks/20250930-165726-compile-cache/analysis.md:1` — Existing performance hotspot evidence.
+- `plans/archive/general-detector-geometry/implementation.md:1` — Example phased plan tone/style referenced in instructions.
 
 Next Up: Once Phase B memo lands and is logged, proceed to Phase C implementation planning (vectorized neighborhood gather) per `plans/active/vectorization.md`.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index 94bd9b713b7064d4ae9fc4072060cf552c145d72..40a169751419b26d42bfafe42d7793f3dd662285
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-17): Phase A1 baseline evidence now exists under `reports/2025-10-vectorization/phase_a/` (collect log, pytest logs, env.json). A2/A3 remain outstanding—no microbenchmark harnesses yet—so Ralph must prioritise creating the reusable scripts before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
-- Supervisory note (2025-11-17): fix_plan#VECTOR-TRICUBIC-001 continues to require the Phase A push (now narrowed to A2/A3). All guidance below assumes Ralph works from a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
+- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). No Phase B design memo exists yet—`reports/2025-10-vectorization/phase_b/design_notes.md` is still missing—so Ralph must focus on B1–B3 shape/broadcast/gradient notes before touching implementation work. docs/fix_plan.md item VECTOR-TRICUBIC-001 now lists Phase B as the gating next action block.
+- Supervisory note (2025-11-18): fix_plan#VECTOR-TRICUBIC-001 now gates on the Phase B design memo (tasks B1–B3). Complete those notes before touching implementation; assume a clean editable install with `KMP_DUPLICATE_LIB_OK=TRUE` exported.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   1c84191..dc2cb25  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=80...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=80
Updating dc2cb25..aedb82e
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   dc2cb25..aedb82e  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=80
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating aedb82e..d30a581
Fast-forward
 docs/fix_plan.md                                   |  20 +
 .../2025-10-vectorization/phase_b/design_notes.md  | 751 +++++++++++++++++++++
 2 files changed, 771 insertions(+)
 create mode 100644 reports/2025-10-vectorization/phase_b/design_notes.md
From github.com:hoidn/nanoBragg
   aedb82e..d30a581  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating d30a581..93b803c
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   d30a581..93b803c  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=81
Ralph completed iteration 80; proceeding to 81
