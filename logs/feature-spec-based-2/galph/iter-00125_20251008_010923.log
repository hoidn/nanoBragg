Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=125
To github.com:hoidn/nanoBragg.git
   6c2a591..efbef29  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-08T01:09:27] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-08T01:09:27] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
<4>
run pyrefly check src/. triage the errors and delegate the fixing of them to ralph. be careful about test suite regressions.
</4>
<5>
delegate to ralph a full run of the test suite and triage of the failing test. review, classing various errors as either implementation bugs or consequences of test deprecation. then systematically fix the failing tests.
</5>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-08T01:09:30] thinking

**Preparing to run git pull with timeout**
[2025-10-08T01:09:31] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:33] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.54s:
Already up to date.
[2025-10-08T01:09:33] tokens used: 14,185

[2025-10-08T01:09:35] thinking

**Preparing to read galph_memory.md**
[2025-10-08T01:09:36] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:36] bash -lc 'cat galph_memory.md' succeeded in 758ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-08T01:09:36] tokens used: 14,416

[2025-10-08T01:09:40] thinking

**Preparing to read required documentation files**
[2025-10-08T01:09:40] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:41] bash -lc 'cat docs/index.md' succeeded in 696ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-08T01:09:41] tokens used: 31,645

[2025-10-08T01:09:43] thinking

**Reviewing large spec file**
[2025-10-08T01:09:44] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:44] bash -lc 'cat specs/spec-a.md' succeeded in 704ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-08T01:09:44] tokens used: 33,350

[2025-10-08T01:09:46] thinking

**Preparing to read architecture file**
[2025-10-08T01:09:46] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:47] bash -lc 'cat arch.md' succeeded in 682ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-08T01:09:47] tokens used: 33,630

[2025-10-08T01:09:50] thinking

**Opening c_to_pytorch_config_map documentation**
[2025-10-08T01:09:50] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:51] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 685ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-08T01:09:51] tokens used: 36,322

[2025-10-08T01:09:54] thinking

**Opening debugging documentation**
[2025-10-08T01:09:55] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:55] bash -lc 'cat docs/debugging/debugging.md' succeeded in 674ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-08T01:09:55] tokens used: 38,257

[2025-10-08T01:09:58] thinking

**Checking fix_plan file location**
[2025-10-08T01:09:58] exec bash -lc ls in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:09:59] bash -lc ls succeeded in 687ms:
1.0
1e6
A.mat
AGENTS.md
AT012_TRACE_ANALYSIS.md
CLAUDE.md
COMMIT_MESSAGE.md
DEBUGGING_NIGHTMARE_PREVENTION_TOOLKIT.md
FINAL_DIAGNOSIS_REPORT.md
HYPOTHESIS_TESTING_RESULTS.md
HYPOTHESIS_TEST_RESULTS.md
LICENSE
Makefile
P1.hkl
PARALLEL_TEST_COMMANDS.md
PARALLEL_VALIDATION_ACCEPTANCE_TESTS.md
PERFORMANCE_ANALYSIS.md
PHASE_4_1_DIAGNOSTIC_REPORT.md
PHASE_5_FINAL_VALIDATION_REPORT.md
PHASE_5_IMPLEMENTATION_SUMMARY.md
[2025-10-08T01:09:59] tokens used: 40,809

[2025-10-08T01:10:01] thinking

**Verifying fix plan file path**
[2025-10-08T01:10:02] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:03] bash -lc 'cat docs/fix_plan.md' succeeded in 710ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-08T01:10:03] tokens used: 42,413

[2025-10-08T01:10:04] thinking

**Preparing to read testing strategy**
[2025-10-08T01:10:05] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:06] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 646ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-08T01:10:06] tokens used: 45,332

[2025-10-08T01:10:10] thinking

**Preparing for deep codebase analysis**
[2025-10-08T01:10:12] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:12] bash -lc 'ls plans/active' succeeded in 687ms:
cli-noise-pix0
cli-phi-parity-shim
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-08T01:10:12] tokens used: 48,001

[2025-10-08T01:10:15] thinking

**Reviewing active plan files**
[2025-10-08T01:10:15] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:16] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 691ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-08T01:10:16] tokens used: 48,374

[2025-10-08T01:10:21] thinking

**Organizing long-term goals and initial focus**

I’m laying out the user’s long-term goals involving CLI commands with -nonoise and -pix0 support, checking for related bugs, reviewing vectorization plans, running pyrefly, and executing full tests. Since priority seems to be on the CLI flags, I’ll look for the CLI-FLAGS-003 section in the docs or fix_plan to understand current progress. Using a search tool like `rg` will help locate that specific info.
[2025-10-08T01:10:23] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:23] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 709ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
512:      - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
692:  * [2025-10-22] Attempt #116 (ralph loop CLI-FLAGS-003 L3k.3c.3) — Result: **VG-1 LOCKED** ✅ (**Phase L3k.3c.3 COMPLETE**). Updated test expectations with 10-digit spec baselines and ≤1e-6 tolerances.
822:      - C trace evidence indicates state carryover within the reference implementation. Until we either patch the C code or emulate this behavior, PyTorch must conform to the reference output to unblock CLI-FLAGS-003.
2183:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
[2025-10-08T01:10:23] tokens used: 84,678

[2025-10-08T01:10:25] thinking

**Locating relevant section**
[2025-10-08T01:10:26] exec bash -lc "sed -n '450,800p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:27] bash -lc "sed -n '450,800p' docs/fix_plan.md" succeeded in 721ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-27 refresh → galph loop i=118):
1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-08T01:10:27] tokens used: 85,196

[2025-10-08T01:10:30] thinking

**Reviewing analysis and goals overview**
[2025-10-08T01:10:31] exec bash -lc 'rg "nonoise" -n src docs tests plans -g"*"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:32] bash -lc 'rg "nonoise" -n src docs tests plans -g"*"' succeeded in 730ms:
src/nanobrag_torch/__main__.py:339:    parser.add_argument('-nonoise', action='store_true',
src/nanobrag_torch/__main__.py:722:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1198:        # CLI-FLAGS-003: Honor -nonoise flag
docs/fix_plan.md:22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
docs/fix_plan.md:450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
docs/fix_plan.md:457:  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
docs/fix_plan.md:458:  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
docs/fix_plan.md:1547:      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
docs/fix_plan.md:1548:      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
docs/fix_plan.md:1552:      - `-nonoise` suppresses noise parameters section AND noise image generation (noiseimage.img not written)
docs/fix_plan.md:1553:      - Float/int/PGM images still generated when -nonoise is active
docs/fix_plan.md:1574:      - ✅ -nonoise suppresses noisefile generation (suppress_noise=True)
docs/fix_plan.md:1575:      - ✅ -nonoise doesn't mutate adc default (40.0) or seed handling
docs/fix_plan.md:1576:      - ✅ -noisefile without -nonoise enables noise generation (suppress_noise=False)
docs/fix_plan.md:1577:      - ✅ -nonoise valid without -noisefile (no-op but accepted)
docs/fix_plan.md:1629:      - `-nonoise` flag successfully suppressed noise file generation in both implementations
docs/fix_plan.md:2564:  * C: `"$NB_C_BIN" -mat A.mat -floatfile c_abs.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 2 -oversample_thick -detector_abs 320 -detector_thick 500 -detector_thicksteps 5 -distance 231.274660 -lambda 0.9768 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527` (restrict ROI in plan to keep runtime manageable).
docs/fix_plan.md:2585:  * C: `"$NB_C_BIN" -mat A.mat -floatfile c_weight.bin -sourcefile reports/2025-11-source-weights/fixtures/two_sources.txt -distance 231.274660 -lambda 0.9768 -pixel 0.172 -detpixels_x 256 -detpixels_y 256 -nonoise -nointerpolate`.
docs/repomix-output.xml:521:| `-nonoise` | `calculate_noise` | `int` | Flag | `0` | Disables the Poisson noise calculation and `noisefile` output. |
docs/bugs/verified_c_bugs.md:23:  -nopgm -nonoise -noprogress > docs/bugs/artifacts/c-impl-bug-002.txt
[2025-10-08T01:10:32] tokens used: 92,052

[2025-10-08T01:10:35] thinking

**Reviewing -nonoise support and phi 0 bug status**
[2025-10-08T01:10:35] exec bash -lc "sed -n '150,220p' docs/bugs/verified_c_bugs.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:36] bash -lc "sed -n '150,220p' docs/bugs/verified_c_bugs.md" succeeded in 693ms:
  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-with-hkl.txt

# Second run: no -hkl, automatically reads the cache
./golden_suite_generator/nanoBragg -cell 70 70 70 90 90 90 -N 0 \
  -distance 100 -detpixels 2 -pixel 0.1 \
  -floatfile /tmp/cache2_float.bin -intfile /tmp/cache2_int.img -noisefile /tmp/cache2_noise.img \
  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-no-hkl.txt
```
The follow-up log contains `reading Fs from Fdump.bin`, demonstrating the implicit dependency.

**Relevant code:**
- `golden_suite_generator/nanoBragg.c:1297-1304` — attempts to open `Fdump.bin` whenever `-hkl` is absent.
- `golden_suite_generator/nanoBragg.c:2355-2368` — rehydrates the cached structure factors silently.

---

### C-PARITY-001 — φ=0 Uses Stale Crystal Vectors (Medium)
**Summary:** Inside the φ loop, the rotated vectors `ap/bp/cp` are only updated when `phi != 0.0`; otherwise, they retain the previous state (often from the prior pixel’s final φ step). This produces step-0 Miller fractions that mirror the previous pixel rather than the unrotated lattice.

**Reproduction:**
[2025-10-08T01:10:36] tokens used: 94,349

[2025-10-08T01:10:42] thinking

**Identifying key goals and initial steps**
[2025-10-08T01:10:42] exec bash -lc 'rg "phi" -n specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:43] bash -lc 'rg "phi" -n specs/spec-a-core.md' succeeded in 677ms:
211:                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
248:    - Define steps = (number of sources) · (number of mosaic domains) · (phisteps) · (oversample^2).
414:        - Steps = (#accepted divergence points) × dispsteps × mosaic_domains × phisteps ×
507:    - For each of horizontal divergence, vertical divergence, spectral dispersion, phi, and detector thickness sampling, missing combinations of count/range/step SHALL be resolved per the rules in “Sources, Divergence & Dispersion” and “Sampling & Accumulation”, resulting in:
575:    - Setup: sources=1; mosaic_domains=1; oversample=1; phisteps=2 with identical physics across steps (e.g., zero mosaic and symmetric phi so F_cell and F_latt identical); disable thickness/polar/omega oversample toggles.
[2025-10-08T01:10:43] tokens used: 95,723

[2025-10-08T01:10:45] thinking

**Checking spec around line 211**
[2025-10-08T01:10:46] exec bash -lc "sed -n '190,240p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:46] bash -lc "sed -n '190,240p' specs/spec-a-core.md" succeeded in 678ms:
enabled, an alternative spherical mapping is used: start at distance along b and rotate about s and
f by small angles Sdet/distance and Fdet/distance respectively.
            - Diffracted unit vector d = unit(P); airpath R = ||P||.
            - Solid angle per subpixel:
                - ω = pixel^2 / R^2 · (close_distance / R).
                - If point-pixel mode: ω = 1 / R^2.
            - Absorption per thickness layer (if enabled):
                - Parallax factor: ρ = d·o.
                - Capture fraction for this layer: exp(−t·Δz·μ/ρ) − exp(−(t+1)·Δz·μ/ρ), where Δz =
thickness/steps.
            - For each source:
                - Incident unit vector i = −source_dir (unitized); wavelength λ from source.
                - q = (d − i) / λ (m^-1). stol = 0.5·||q||.
                - If dmin > 0 and stol > 0 and dmin > 0.5/stol: skip this subpath.
                - Polarization factor (if enabled; Kahn model):
                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
the Kahn factor from -polar.
[2025-10-08T01:10:46] tokens used: 96,151

[2025-10-08T01:10:49] thinking

**Preparing for detailed analysis**
[2025-10-08T01:10:49] exec bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:50] bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' succeeded in 724ms:
## Context
- Initiative: CLI-FLAGS-003 (`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
- Dependencies:
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).

### Phase A — Spec Baseline Confirmation (Prerequisite)
Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T01:10:50] tokens used: 97,447

[2025-10-08T01:10:52] thinking

**Checking vectorization plan status**
[2025-10-08T01:10:53] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:10:54] bash -lc 'cat plans/active/vectorization.md' succeeded in 686ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-27): Phases A–C complete with gather vectorization merged (commit 12742e5). Phase D1 worksheet captured under `reports/2025-10-vectorization/phase_d/polynomial_validation.md`; polynomial helpers remain scalar (D2–D4 pending) and detector absorption is still looped. Phase D is the active gate before parity/perf validation (Phase E) and absorption work (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T01:10:54] tokens used: 99,645

[2025-10-08T01:11:01] thinking

**Organizing analysis and initial steps**

I'm outlining the plan to produce a deep analysis of issues and gaps related to the long-term goals, making sure to follow the given sequential instructions. I'm gathering relevant documentation and task statuses to inform the summary and preparing to perform the Step 2 Python coin toss after finishing the analysis.
[2025-10-08T01:11:02] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:03] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 738ms:
tails
[2025-10-08T01:11:03] tokens used: 102,860

[2025-10-08T01:11:08] thinking

**Evaluating step-by-step plan and goals**
[2025-10-08T01:11:09] exec bash -lc "sed -n '1070,1140p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:09] bash -lc "sed -n '1070,1140p' src/nanobrag_torch/models/crystal.py" succeeded in 706ms:
        # in docs/bugs/verified_c_bugs.md:166-204. An opt-in parity shim will be added in
        # Phase L3k.3c.4 for validation harnesses that need to reproduce the C bug.
        #
        # Shape: (N_phi, 3)

        # Apply rotation to base vectors for all φ angles
        # When phi=0, rotate_axis applies identity rotation, yielding base vectors
        a_phi = rotate_axis(
            self.a.unsqueeze(0).expand(config.phi_steps, -1),
            spindle_axis.unsqueeze(0).expand(config.phi_steps, -1),
            phi_rad
        )
        b_phi = rotate_axis(
            self.b.unsqueeze(0).expand(config.phi_steps, -1),
            spindle_axis.unsqueeze(0).expand(config.phi_steps, -1),
            phi_rad
        )
        c_phi = rotate_axis(
            self.c.unsqueeze(0).expand(config.phi_steps, -1),
            spindle_axis.unsqueeze(0).expand(config.phi_steps, -1),
[2025-10-08T01:11:09] tokens used: 103,277
[2025-10-08T01:11:12] exec bash -lc "sed -n '1140,1195p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:12] bash -lc "sed -n '1140,1195p' src/nanobrag_torch/models/crystal.py" succeeded in 689ms:
        # When phi_carryover_mode=="c-parity", replace φ=0 vectors with cached "stale" values
        # from a simulated previous pixel's final φ step, matching the C bug.
        #
        # C-Code Implementation Reference (from nanoBragg.c, lines 3044-3058):
        # ```c
        # if( phi != 0.0 )
        # {
        #     /* rotate about spindle if neccesary */
        #     if(fpixel==512 && spixel==512 && source==0 && phi_tic==0) {
        #         printf("TRACE: Phi rotation (phi=%g degrees):\n", phi*RTD);
        #         printf("TRACE:   spindle_vector = [%g, %g, %g]\n", spindle_vector[1], spindle_vector[2], spindle_vector[3]);
        #         printf("TRACE:   Before phi rotation:\n");
        #         printf("TRACE:     a0 = [%g, %g, %g] |a0| = %g\n", a0[1], a0[2], a0[3], a0[0]);
        #         printf("TRACE:     b0 = [%g, %g, %g] |b0| = %g\n", b0[1], b0[2], b0[3], b0[0]);
        #         printf("TRACE:     c0 = [%g, %g, %g] |c0| = %g\n", c0[1], c0[2], c0[3], c0[0]);
        #     }
        #
        #     rotate_axis(a0,ap,spindle_vector,phi);
        #     rotate_axis(b0,bp,spindle_vector,phi);
        #     rotate_axis(c0,cp,spindle_vector,phi);
[2025-10-08T01:11:12] tokens used: 104,522

[2025-10-08T01:11:16] thinking

**Reviewing parity shim and planning next steps**
[2025-10-08T01:11:16] exec bash -lc 'rg "pyrefly" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:17] bash -lc 'rg "pyrefly" -n' succeeded in 758ms:
src/nanobrag_torch/models/detector.py:146:        # Initialize attributes used by pyrefly only if not already set
docs/ralph.md:171:- [https://pyrefly.org/](https://pyrefly.org/)
pyproject.toml:11:[tool.pyrefly]
prompts/supervisor.md:23:run pyrefly check src/. triage the errors and delegate the fixing of them to ralph. be careful about test suite regressions.
prompts/pyrefly.md:4:- Execute a single, fast loop to run configured static analysis (pyrefly) over `src/`, fix a small set of high‑confidence issues, validate with targeted tests, and commit. Keeps changes minimal and portable.
prompts/pyrefly.md:12:- Tooling must be configured in‑repo. If `pyrefly` is not installed/available or `[tool.pyrefly]` is missing in `pyproject.toml`, do not introduce new tools in this loop. Instead, record a TODO in `docs/fix_plan.md` with a proposed dev/CI integration and exit after docs update.
prompts/pyrefly.md:20:- No new tools: use `pyrefly` only if already configured/available.
prompts/pyrefly.md:24:- Version control hygiene: never commit runtime artifacts (logs, reports); store under `reports/pyrefly/<date>/` locally.
prompts/pyrefly.md:31:- Verify preconditions: `rg -n "^\[tool\.pyrefly\]" pyproject.toml` and `command -v pyrefly`.
prompts/pyrefly.md:37:  - Primary: `pyrefly check src` (or the configured command) and save stdout/stderr to `reports/pyrefly/<date>/pyrefly.log`.
prompts/pyrefly.md:38:  - If pyrefly is unavailable but repo linters exist, you MAY run configured linters (e.g., `ruff`, `flake8`, `mypy`) for context only; do not add new tools.
prompts/pyrefly.md:60:  - Update `docs/fix_plan.md` Attempts History: include a short summary of findings fixed, the exact command(s) run, and artifact paths under `reports/pyrefly/<date>/`.
prompts/pyrefly.md:61:  - Commit: `git add -A && git commit -m "static-analysis: pyrefly fixes (suite: pass)"` (or `docs-only` when no code changed). Then `git push` (resolve conflicts if needed).
prompts/pyrefly.md:65:- Problem statement: “Ran pyrefly; fixed high‑confidence findings.”
prompts/pyrefly.md:66:- Mapped commands executed (pyrefly + pytest nodes).
prompts/pyrefly.md:71:- Next actions (e.g., integrate pyrefly in CI; follow‑up items).
prompts/debug.md:114:- Static analysis (if configured): Run `pyrefly check src` to catch obvious issues before parity/regression tests. Address high‑confidence findings that relate to the changed scope. Do not introduce or install new tools mid‑loop; skip this step if pyrefly is not already configured for this repo.
[2025-10-08T01:11:17] tokens used: 105,720

[2025-10-08T01:11:32] thinking

**Evaluating next focus and action type**
[2025-10-08T01:11:33] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:33] bash -lc 'ls reports/2025-10-cli-flags/phase_l' succeeded in 731ms:
hkl_parity
nb_compare_phi_fix
parity_shim
per_phi
rot_vector
scaling_audit
scaling_validation
structure_factor
[2025-10-08T01:11:33] tokens used: 107,682

[2025-10-08T01:11:36] thinking

**Checking parity_shim directory**
[2025-10-08T01:11:37] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:37] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim' succeeded in 709ms:
20251007T232657Z
20251008T005247Z
[2025-10-08T01:11:37] tokens used: 108,396

[2025-10-08T01:11:40] thinking

**Preparing to run script with fresh output**
[2025-10-08T01:11:40] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:41] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z' succeeded in 666ms:
c_trace_phi.log
comparison_summary.md
delta_metrics.json
per_phi_summary_c_parity.txt
per_phi_summary_spec.txt
pytest_phi0.log
sha256.txt
trace_py_c_parity.log
trace_py_c_parity_per_phi.json
trace_py_spec.log
trace_py_spec_per_phi.json
[2025-10-08T01:11:41] tokens used: 109,234

[2025-10-08T01:11:44] thinking

**Verifying trace generation status**
[2025-10-08T01:11:44] exec bash -lc 'python scripts/compare_per_phi_traces.py --help' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:45] bash -lc 'python scripts/compare_per_phi_traces.py --help' exited 1 in 721ms:
Usage: python compare_per_phi_traces.py <pytorch_json> <c_log>
[2025-10-08T01:11:45] tokens used: 110,312

[2025-10-08T01:11:48] thinking

**Checking for log generation scripts**
[2025-10-08T01:11:49] exec bash -lc 'ls scripts' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:49] bash -lc 'ls scripts' succeeded in 701ms:
__init__.py
__pycache__
analyze_at012_plateau.py
analyze_correlation_fix.py
analyze_peak_displacement_at012.py
analyze_pix0_discrepancy.py
analyze_radial_intensity.py
analyze_rotation_offset.py
analyze_simple_cubic_gap.py
analyze_tilted_correlation.py
analyze_tilted_mismatch.py
analyze_triclinic_correlation.py
benchmarks
c_reference_runner.py
c_reference_utils.py
check_detector_pix0.py
compare_c_py_intensity_scaling.py
compare_c_python_pix0.py
compare_detector_geometry.py
compare_per_phi_traces.py
[2025-10-08T01:11:49] tokens used: 151,465

[2025-10-08T01:11:52] thinking

**Inspecting log generation script**
[2025-10-08T01:11:53] exec bash -lc 'python scripts/trace_per_phi.py --help' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:11:55] bash -lc 'python scripts/trace_per_phi.py --help' succeeded in 2.87s:
usage: trace_per_phi.py [-h] [--outdir OUTDIR] [--pixel-s PIXEL_S]
                        [--pixel-f PIXEL_F]

CLI-FLAGS-003 Phase K3e: Per-φ Miller index parity

options:
  -h, --help         show this help message and exit
  --outdir OUTDIR    Output directory for per-φ traces
  --pixel-s PIXEL_S  Slow pixel coordinate (default: 133, from Phase K traces)
  --pixel-f PIXEL_F  Fast pixel coordinate (default: 134, from Phase K traces)
[2025-10-08T01:11:55] tokens used: 153,727

[2025-10-08T01:12:00] thinking

**Reviewing phi-carryover handling**
[2025-10-08T01:12:01] exec bash -lc "sed -n '1,200p' scripts/trace_per_phi.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:01] bash -lc "sed -n '1,200p' scripts/trace_per_phi.py" succeeded in 694ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Per-φ Miller Index Parity

This script captures Miller index + lattice factor traces for each φ step
(φ_tic=0…9) to diagnose the φ-grid mismatch between C and PyTorch.

Context: PyTorch reports k≈1.9997 (φ=0°) while C reports k≈1.9928 (φ=0.09°),
causing a 21.6% F_latt_b inflation. This per-φ dump will isolate the first φ
where Δk exceeds tolerance.

Usage:
    PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/trace_per_phi.py \\
        --outdir reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/

Output:
    - per_phi_pytorch.json: Full per-φ trace data (PyTorch)
    - per_phi_summary.md: Comparison summary with first divergence
    - (C trace expected from instrumented nanoBragg.c separately)
"""
[2025-10-08T01:12:01] tokens used: 154,045

[2025-10-08T01:12:07] thinking

**Investigating parity mode scripts**
[2025-10-08T01:12:11] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/comparison_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:11] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/comparison_summary.md' succeeded in 680ms:
# CLI-FLAGS-003 Phase K3e: Per-φ Parity Comparison

**PyTorch:** `trace_py_c_parity_per_phi.json`  
**C:**       `c_trace_phi.log`  

## Comparison Table

| φ_tic | φ (deg) | C k_frac | PyTorch k_frac | Δk | Status |
|-------|---------|----------|----------------|-------|--------|
| 0 | 0.000000 | -0.607256 | -0.607227 | 2.845147e-05 | ✅ |
| 1 | 0.010000 | -0.591178 | -0.591149 | 2.830201e-05 | ✅ |
| 2 | 0.020000 | -0.593188 | -0.593159 | 2.832070e-05 | ✅ |
| 3 | 0.030000 | -0.595198 | -0.595169 | 2.833938e-05 | ✅ |
| 4 | 0.040000 | -0.597208 | -0.597179 | 2.835807e-05 | ✅ |
| 5 | 0.050000 | -0.599217 | -0.599189 | 2.837675e-05 | ✅ |
| 6 | 0.060000 | -0.601227 | -0.601199 | 2.839543e-05 | ✅ |
| 7 | 0.070000 | -0.603237 | -0.603208 | 2.841411e-05 | ✅ |
| 8 | 0.080000 | -0.605246 | -0.605218 | 2.843279e-05 | ✅ |
| 9 | 0.090000 | -0.607256 | -0.607227 | 2.845147e-05 | ✅ |

[2025-10-08T01:12:11] tokens used: 156,765

[2025-10-08T01:12:16] thinking

**Checking validation scripts**
[2025-10-08T01:12:16] exec bash -lc 'ls scripts/validation' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:17] bash -lc 'ls scripts/validation' succeeded in 691ms:
README.md
analyze_fdump_layout.py
compare_scaling_traces.py
compare_structure_factors.py
[2025-10-08T01:12:17] tokens used: 157,641

[2025-10-08T01:12:22] thinking

**Analyzing trace generation scripts**
[2025-10-08T01:12:22] exec bash -lc "sed -n '200,400p' scripts/trace_per_phi.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:23] bash -lc "sed -n '200,400p' scripts/trace_per_phi.py" succeeded in 672ms:
    device = 'cpu'

    print("="*80)
    print("CLI-FLAGS-003 Phase K3e: Per-φ Miller Index Parity")
    print("="*80)
    print()
    print(f"Configuration:")
    print(f"  Output directory: {args.outdir}")
    print(f"  Target pixel: ({args.pixel_s}, {args.pixel_f})")
    print(f"  Dtype: {dtype}")
    print(f"  Device: {device}")
    print()

    # Supervisor command parameters
    mat_file = repo_root / "A.mat"
    wavelength_A = 0.976800

    # Load MOSFLM orientation matrix
    a_star, b_star, c_star = read_mosflm_matrix(str(mat_file), wavelength_A)
    cell_params = reciprocal_to_real_cell(a_star, b_star, c_star)
[2025-10-08T01:12:23] tokens used: 158,045

[2025-10-08T01:12:30] thinking

**Analyzing parity mode support and tracing scripts**

I'm checking how parity mode is handled since the current script uses default config without `phi_carryover_mode` set to `'c-parity'`. I suspect the right way involves using an actual CLI or different script to produce trace logs, possibly controlled via environment variables or CLI flags. I'll explore related scripts and design docs to clarify how to generate the needed parity shim traces for the C4 plan.
[2025-10-08T01:12:31] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:32] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md" succeeded in 701ms:
# φ=0 Carryover Parity Shim — Design Note

**Date**: 2025-10-07
**Phase**: CLI-FLAGS-003 L3k.3c.4
**Plan Reference**: `plans/active/cli-phi-parity-shim/plan.md`
**Supervisor Memo**: `input.md:1-36`

---

## Executive Summary

This design note defines an **opt-in parity shim** to reproduce the documented φ=0 carryover bug (C-PARITY-001) in the PyTorch implementation, enabling C↔PyTorch equivalence testing while preserving the spec-compliant default path.

**Key Design Principles**:
- Spec-compliant behavior remains the **default**
- Parity mode is **opt-in only** (explicit flag/config required)
- Implementation preserves vectorization, gradient flow, and device/dtype neutrality
- No regression to existing spec-compliant tests

---
[2025-10-08T01:12:32] tokens used: 160,454

[2025-10-08T01:12:37] thinking

**Investigating trace generation commands**
[2025-10-08T01:12:38] exec bash -lc 'rg "phi_carryover_mode" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:39] bash -lc 'rg "phi_carryover_mode" -n' succeeded in 761ms:
src/nanobrag_torch/__main__.py:859:                phi_carryover_mode=args.phi_carryover_mode
input.md:5:Mapped tests: tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior; tests/test_cli_scaling_phi0.py::TestPhiZeroParity
input.md:17:- Harness (add `--phi-mode` if missing by threading a new argparse choice into trace_harness.py that injects `phi_carryover_mode` into `params['crystal']`):
input.md:23:- Tests: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v > "$outdir/pytest_phi_carryover.log"` and `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v > "$outdir/pytest_phi0.log"`.
input.md:41:- tests/test_phi_carryover_mode.py:1-200 — Existing parity-mode tests you must keep green.
src/nanobrag_torch/models/crystal.py:1140:        # When phi_carryover_mode=="c-parity", replace φ=0 vectors with cached "stale" values
src/nanobrag_torch/models/crystal.py:1168:        if config.phi_carryover_mode == "c-parity":
docs/fix_plan.md:461:1. **Phase L3k.3c.4 (parity shim evidence capture)** — Follow `plans/active/cli-phi-parity-shim/plan.md` Phase C4 to rerun `scripts/compare_per_phi_traces.py` for both spec and `--phi-carryover-mode c-parity`; store logs, delta metrics, and SHA256 hashes under a new `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/` directory and confirm VG-1 tolerances (Δrot_b_y, Δk ≤ 1e-6) in parity mode. Include targeted pytest output (`tests/test_phi_carryover_mode.py`, `tests/test_cli_scaling_phi0.py`) alongside traces.
docs/fix_plan.md:548:      - **Config plumbing**: `CrystalConfig.phi_carryover_mode` field; parser updates in `__main__.py`
docs/fix_plan.md:564:    Metrics: Targeted tests PASSED (6/6 in 4.25s). Smoke tests: test_cli_scaling_phi0.py 2/2 passed, test_at_geo_001.py 1/1 passed, test_at_crystal_absolute.py 3/3 passed. Config validation: phi_carryover_mode invalid rejection working. No regressions detected.
docs/fix_plan.md:566:      - `src/nanobrag_torch/config.py:56-59` — Added `phi_carryover_mode: str = "spec"` field to CrystalConfig
docs/fix_plan.md:577:      - **Default is spec-compliant**: phi_carryover_mode="spec" produces fresh rotations; validates against C-PARITY-001 documentation
src/nanobrag_torch/config.py:154:    phi_carryover_mode: str = "spec"
src/nanobrag_torch/config.py:164:        # Validate phi_carryover_mode
src/nanobrag_torch/config.py:165:        if self.phi_carryover_mode not in ["spec", "c-parity"]:
src/nanobrag_torch/config.py:167:                f"phi_carryover_mode must be 'spec' or 'c-parity', got '{self.phi_carryover_mode}'"
plans/active/cli-phi-parity-shim/plan.md:34:| B2 | Choose API & config plumbing | [D] | ✅ Documented in `design.md` §2-3: CLI flag `--phi-carryover-mode`, `CrystalConfig.phi_carryover_mode` field (default="spec"), parser updates in `__main__.py`. Unambiguous naming; no flag collision. |
plans/active/cli-phi-parity-shim/plan.md:45:| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
plans/active/cli-phi-parity-shim/plan.md:46:| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
plans/active/cli-noise-pix0/plan.md:311:| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
[2025-10-08T01:12:39] tokens used: 169,875

[2025-10-08T01:12:41] thinking

**Reviewing input.md for phi-mode instructions**
[2025-10-08T01:12:42] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:42] bash -lc 'cat input.md' succeeded in 666ms:
Summary: Capture Phase L3k.3c.4 parity evidence—per-φ traces and targeted pytest logs for spec vs c-parity modes—so CLI-FLAGS-003 can advance to nb-compare.
Mode: Parity
Focus: CLI-FLAGS-003 — Phase L3k.3c.4 parity shim evidence capture
Branch: feature/spec-based-2
Mapped tests: tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior; tests/test_cli_scaling_phi0.py::TestPhiZeroParity
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_spec.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_c_parity.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/c_trace_phi.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_spec.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_summary_c_parity.txt; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/delta_metrics.json
Do Now: CLI-FLAGS-003 Phase L3k.3c.4 – run the parity trace harness twice (spec + c-parity) via `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode <mode> --out reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_<mode>.log`, then collect a fresh C reference (`NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg ... -trace_pixel 685 1039`) and compare with `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py <py_json> <c_log> | tee reports/.../per_phi_summary_<mode>.txt`.
If Blocked: Capture the failing command + stderr to `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/attempt_fail.log`, note whether the harness needs refactoring (e.g., add `--phi-mode` plumbing), and log an Attempt under CLI-FLAGS-003 before pausing.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:306-314 marks L3k.3c.4 as [D] except for Phase C4 evidence; completing these traces unblocks Phase L3k.3c.5 docs/tests.
- plans/active/cli-phi-parity-shim/plan.md:47-55 requires per-φ comparisons for both modes plus Δk/Δb tolerances ≤1e-6.
- docs/fix_plan.md:450-470 now calls for parity shim evidence capture ahead of documentation updates.
- docs/bugs/verified_c_bugs.md:166-204 describes the C-PARITY-001 baseline the parity mode must reproduce.
- tests/test_cli_scaling_phi0.py:1-120 keeps spec-mode assertions locked; we must prove parity mode matches C without regressing spec.
How-To Map:
- Prep directory: `timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"`.
- Harness (add `--phi-mode` if missing by threading a new argparse choice into trace_harness.py that injects `phi_carryover_mode` into `params['crystal']`):
  - Spec run: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"`.
  - Parity run: same command with `--phi-mode c-parity` and output to `trace_py_c_parity.log`.
  - Each invocation should emit a per-φ JSON (e.g., trace_py_per_phi.json) and env/config snapshots; copy them into `$outdir`.
[2025-10-08T01:12:42] tokens used: 173,903

[2025-10-08T01:12:45] thinking

**Checking for --phi-mode in trace harness**
[2025-10-08T01:12:45] exec bash -lc 'python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --help' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:46] bash -lc 'python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --help' exited -1 in 0ms:
sandbox error: command was killed by a signal
[2025-10-08T01:12:46] tokens used: 176,911

[2025-10-08T01:12:48] thinking

**Checking script structure**
[2025-10-08T01:12:49] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:49] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 716ms:
#!/usr/bin/env python
"""
Phase L3h MOSFLM Matrix Probe Harness

Extends the scaling trace harness to log MOSFLM reciprocal vectors at key stages:
- Before misset rotation
- After reciprocal→real reconstruction
- After real→reciprocal re-derivation

This captures the evidence needed to diagnose the Y-component drift in real-space
vectors identified in Phase L3f/L3g.

Date: 2025-10-07 (replayed from galph loop i=92)
Engineer: Ralph (evidence-only mode per input.md)
Plan Reference: plans/active/cli-noise-pix0/plan.md Phase L3h
"""

import argparse
import json
import sys
[2025-10-08T01:12:49] tokens used: 177,067

[2025-10-08T01:12:52] thinking

**Continuing JSON output verification**
[2025-10-08T01:12:52] exec bash -lc "sed -n '200,400p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:53] bash -lc "sed -n '200,400p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 719ms:
    config_snapshot = {
        'crystal': {
            'N_cells': crystal_config.N_cells,
            'phi_start_deg': crystal_config.phi_start_deg,
            'osc_range_deg': crystal_config.osc_range_deg,
            'phi_steps': crystal_config.phi_steps,
            'mosaic_spread_deg': crystal_config.mosaic_spread_deg,
            'mosaic_domains': crystal_config.mosaic_domains,
            'spindle_axis': crystal_config.spindle_axis.tolist()
        },
        'detector': {
            'distance_mm': detector_config.distance_mm,
            'pixel_size_mm': detector_config.pixel_size_mm,
            'spixels': detector_config.spixels,
            'fpixels': detector_config.fpixels,
            'beam_center_s': detector_config.beam_center_s,
            'beam_center_f': detector_config.beam_center_f,
            'convention': str(detector_config.detector_convention),
            'pivot': str(detector_config.detector_pivot),
            'oversample': detector_config.oversample
[2025-10-08T01:12:53] tokens used: 179,638

[2025-10-08T01:12:56] thinking

**Ensuring JSON output**
[2025-10-08T01:12:57] exec bash -lc "sed -n '400,520p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:12:58] bash -lc "sed -n '400,520p' reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py" succeeded in 707ms:

        # Write structured JSON
        json_name = args.out.replace('.log', '_per_phi.json')
        json_path = Path('reports/2025-10-cli-flags/phase_l/per_phi') / json_name

        timestamp = datetime.utcnow().isoformat() + 'Z'
        json_output = {
            'timestamp': timestamp,
            'pixel': {'slow': slow, 'fast': fast},
            'config': args.config,
            'device': str(device),
            'dtype': args.dtype,
            'per_phi_entries': per_phi_data
        }

        with open(json_path, 'w') as f:
            json.dump(json_output, f, indent=2)

        print(f"Per-φ trace written to {phi_trace_path}")
        print(f"Per-φ JSON written to {json_path}")
[2025-10-08T01:12:58] tokens used: 182,771

[2025-10-08T01:13:11] thinking

**Planning test harness execution and output handling**

I see the harness already supports the needed `--phi-mode` option, so I want to run the spec and c-parity harness commands with proper environment variables and timestamped output directories. After running, I’ll copy the generated per-φ JSON files and environment/config snapshots into those directories with unique names to avoid overwrites. Then I’ll run the C tracing command and hash the outputs. Finally, I plan to use the compare_per_phi_traces.py script to analyze differences between spec and parity outputs, checking what files it generates and captures. This setup will help me gather all the outputs in an organized way for review.
[2025-10-08T01:13:14] exec bash -lc "sed -n '1,200p' scripts/compare_per_phi_traces.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:13:15] bash -lc "sed -n '1,200p' scripts/compare_per_phi_traces.py" succeeded in 930ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Compare C vs PyTorch per-φ traces

Identifies the first φ where Δk exceeds tolerance (5e-4) to isolate the φ-grid mismatch.
"""

import json
import sys
from pathlib import Path

def parse_c_trace(log_file):
    """Parse C trace log file."""
    traces = []
    with open(log_file) as f:
        for line in f:
            if line.startswith('TRACE_C_PHI'):
                parts = line.split()
                traces.append({
                    'phi_tic': int(parts[1].split('=')[1]),
[2025-10-08T01:13:15] tokens used: 184,165

[2025-10-08T01:13:24] thinking

**Planning output files and evidence gathering**

I'm considering how to produce the expected output files—especially `delta_metrics.json` which the script doesn't create—and how to organize summaries by copying and renaming them to the output directory to avoid duplicates. I’ll write a Python script to compute deltas from JSON data, run targeted tests with logs, gather hashes, and then possibly update the plan to mark completed tasks and reference new evidence, all starting by creating a timestamped output directory.
[2025-10-08T01:13:25] exec bash -lc 'timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"; echo $timestamp' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:13:26] bash -lc 'timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"; echo $timestamp' succeeded in 708ms:
20251008T011326Z
[2025-10-08T01:13:26] tokens used: 197,639

[2025-10-08T01:13:31] thinking

**Handling timestamp environment variable**
[2025-10-08T01:13:32] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:13:44] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"' succeeded in 11.93s:
/Users/ollie/Documents/nanoBragg3/reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py:131: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  'timestamp_iso': datetime.utcnow().isoformat() + 'Z'
/Users/ollie/Documents/nanoBragg3/src/nanobrag_torch/models/crystal.py:1057: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  spindle_axis = torch.tensor(
/Users/ollie/Documents/nanoBragg3/reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py:405: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  timestamp = datetime.utcnow().isoformat() + 'Z'
MOSFLM matrix probe written to reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log
Captured 12 MOSFLM probe lines
Per-φ trace written to reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec_per_phi.log
Per-φ JSON written to reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec_per_phi.json
Captured 10 TRACE_PY_PHI lines
Main trace written to reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log
Environment snapshot: reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json
Config snapshot: reports/2025-10-cli-flags/phase_l/rot_vector/config_snapshot.json
Captured 43 TRACE_PY lines

Pixel (685, 1039) final intensity: 2.38140349778213e-07
[2025-10-08T01:13:44] tokens used: 198,469

[2025-10-08T01:13:50] thinking

**Organizing and copying report files**
[2025-10-08T01:13:52] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; srcpath=reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$srcpath/trace_py_spec_per_phi.log" "$outdir/trace_py_spec_per_phi.log"; cp "$srcpath/trace_py_spec_per_phi.json" "$outdir/trace_py_spec_per_phi.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json "$outdir/trace_py_spec_env.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/config_snapshot.json "$outdir/trace_py_spec_config_snapshot.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log "$outdir/mosflm_matrix_probe_spec.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:13:53] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; srcpath=reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$srcpath/trace_py_spec_per_phi.log" "$outdir/trace_py_spec_per_phi.log"; cp "$srcpath/trace_py_spec_per_phi.json" "$outdir/trace_py_spec_per_phi.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json "$outdir/trace_py_spec_env.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/config_snapshot.json "$outdir/trace_py_spec_config_snapshot.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log "$outdir/mosflm_matrix_probe_spec.log"' succeeded in 693ms:

[2025-10-08T01:13:53] tokens used: 200,373

[2025-10-08T01:13:55] thinking

**Considering cleanup after copying files**
[2025-10-08T01:13:56] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode c-parity --out "$outdir/trace_py_c_parity.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:02] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode c-parity --out "$outdir/trace_py_c_parity.log"' succeeded in 5.53s:
/Users/ollie/Documents/nanoBragg3/reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py:131: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  'timestamp_iso': datetime.utcnow().isoformat() + 'Z'
/Users/ollie/Documents/nanoBragg3/src/nanobrag_torch/models/crystal.py:1057: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
  spindle_axis = torch.tensor(
/Users/ollie/Documents/nanoBragg3/reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py:405: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  timestamp = datetime.utcnow().isoformat() + 'Z'
MOSFLM matrix probe written to reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log
Captured 12 MOSFLM probe lines
Per-φ trace written to reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_per_phi.log
Per-φ JSON written to reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_per_phi.json
Captured 10 TRACE_PY_PHI lines
Main trace written to reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log
Environment snapshot: reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json
Config snapshot: reports/2025-10-cli-flags/phase_l/rot_vector/config_snapshot.json
Captured 43 TRACE_PY lines

Pixel (685, 1039) final intensity: 2.7907574142844e-07
[2025-10-08T01:14:02] tokens used: 201,439

[2025-10-08T01:14:06] thinking

**Preparing files for parity output**
[2025-10-08T01:14:08] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; srcpath=reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$srcpath/trace_py_c_parity_per_phi.log" "$outdir/trace_py_c_parity_per_phi.log"; cp "$srcpath/trace_py_c_parity_per_phi.json" "$outdir/trace_py_c_parity_per_phi.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json "$outdir/trace_py_c_parity_env.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/config_snapshot.json "$outdir/trace_py_c_parity_config_snapshot.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log "$outdir/mosflm_matrix_probe_c_parity.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:09] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; srcpath=reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$srcpath/trace_py_c_parity_per_phi.log" "$outdir/trace_py_c_parity_per_phi.log"; cp "$srcpath/trace_py_c_parity_per_phi.json" "$outdir/trace_py_c_parity_per_phi.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json "$outdir/trace_py_c_parity_env.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/config_snapshot.json "$outdir/trace_py_c_parity_config_snapshot.json"; cp reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log "$outdir/mosflm_matrix_probe_c_parity.log"' succeeded in 816ms:

[2025-10-08T01:14:09] tokens used: 206,884

[2025-10-08T01:14:13] thinking

**Considering cleaning nested directories**
[2025-10-08T01:14:14] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/per_phi' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:15] bash -lc 'ls reports/2025-10-cli-flags/phase_l/per_phi' succeeded in 733ms:
comparison_summary_20251119.md
per_phi_py_20251007.json
reports
trace_py_per_phi_20251007.log
trace_py_rot_vector_per_phi.json
trace_py_rot_vector_per_phi.log
trace_py_scaling_20251119_per_phi.json
trace_py_scaling_20251119_per_phi.log
[2025-10-08T01:14:15] tokens used: 207,432

[2025-10-08T01:14:17] thinking

**Planning removal of reports directory**
[2025-10-08T01:14:18] exec bash -lc 'rm -rf reports/2025-10-cli-flags/phase_l/per_phi/reports' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:18] bash -lc 'rm -rf reports/2025-10-cli-flags/phase_l/per_phi/reports' succeeded in 681ms:

[2025-10-08T01:14:18] tokens used: 207,661

[2025-10-08T01:14:28] thinking

**Preparing to run C binary trace command**
[2025-10-08T01:14:32] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg -mat A.mat -floatfile "$outdir/c_phi.bin" -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -trace_pixel 685 1039 > "$outdir/c_trace_phi.log" 2>&1' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:36] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg -mat A.mat -floatfile "$outdir/c_phi.bin" -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -trace_pixel 685 1039 > "$outdir/c_trace_phi.log" 2>&1' succeeded in 3.76s:

[2025-10-08T01:14:36] tokens used: 208,640

[2025-10-08T01:14:39] thinking

**Preparing trace comparison command**
[2025-10-08T01:14:39] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_spec.txt"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:40] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_spec.txt"' succeeded in 714ms:
================================================================================
CLI-FLAGS-003 Phase K3e: Per-φ Parity Comparison
================================================================================

PyTorch: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec_per_phi.json
C:       reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log

--------------------------------------------------------------------------------
φ_tic   φ (deg)    Δk              ΔF_latt_b       Status    
--------------------------------------------------------------------------------

================================================================================
Summary
================================================================================

✅ All φ steps within tolerance (Δk < 5e-4)
   Max Δk = 0.000000e+00

✅ Comparison summary saved to: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/comparison_summary.md

[2025-10-08T01:14:40] tokens used: 209,381

[2025-10-08T01:14:46] thinking

**Investigating spec mode JSON consistency**
[2025-10-08T01:14:46] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec_per_phi.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:47] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec_per_phi.json' succeeded in 700ms:
{
  "timestamp": "2025-10-08T01:13:44.282941Z",
  "pixel": {
    "slow": 685,
    "fast": 1039
  },
  "config": "supervisor",
  "device": "cpu",
  "dtype": "float64",
  "per_phi_entries": [
    {
      "phi_tic": 0,
      "phi_deg": 0.0,
      "k_frac": -0.589139352775903,
      "F_latt_b": -0.861431104849688,
      "F_latt": 1.3517866940893
    },
    {
      "phi_tic": 1,
      "phi_deg": 0.01,
[2025-10-08T01:14:47] tokens used: 213,496

[2025-10-08T01:14:49] thinking

**Checking C log values**
[2025-10-08T01:14:50] exec bash -lc 'grep "TRACE_C_PHI" -n reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:51] bash -lc 'grep "TRACE_C_PHI" -n reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log | head' succeeded in 717ms:

[2025-10-08T01:14:51] tokens used: 214,520

[2025-10-08T01:14:55] thinking

**Verifying presence of TRACE_C_PHI in logs**
[2025-10-08T01:14:56] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:14:57] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z' succeeded in 719ms:
c_trace_phi.log
comparison_summary.md
delta_metrics.json
per_phi_summary_c_parity.txt
per_phi_summary_spec.txt
pytest_phi0.log
sha256.txt
trace_py_c_parity.log
trace_py_c_parity_per_phi.json
trace_py_spec.log
trace_py_spec_per_phi.json
[2025-10-08T01:14:57] tokens used: 214,941

[2025-10-08T01:15:02] thinking

**Assessing instrumentation and log validity**
[2025-10-08T01:15:03] exec bash -lc 'grep "TRACE_C_PHI" reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/c_trace_phi.log | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:04] bash -lc 'grep "TRACE_C_PHI" reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/c_trace_phi.log | head' succeeded in 667ms:
TRACE_C_PHI phi_tic=0 phi_deg=0 k_frac=-0.607255839576692 F_latt_b=1.05079664302326 F_latt=-2.38319665299058
TRACE_C_PHI phi_tic=1 phi_deg=0.01 k_frac=-0.591177727127411 F_latt_b=-0.650897255741202 F_latt=1.09860741704307
TRACE_C_PHI phi_tic=2 phi_deg=0.02 k_frac=-0.593187745641004 F_latt_b=-0.385020463934971 F_latt=0.679724660042308
TRACE_C_PHI phi_tic=3 phi_deg=0.03 k_frac=-0.595197691574922 F_latt_b=-0.0844254727339029 F_latt=0.155482072719562
TRACE_C_PHI phi_tic=4 phi_deg=0.04 k_frac=-0.597207564867936 F_latt_b=0.224723979612609 F_latt=-0.430675460925897
TRACE_C_PHI phi_tic=5 phi_deg=0.05 k_frac=-0.599217365458823 F_latt_b=0.515419354922621 F_latt=-1.02559631818979
TRACE_C_PHI phi_tic=6 phi_deg=0.06 k_frac=-0.601227093286361 F_latt_b=0.762161832840823 F_latt=-1.57135079979647
TRACE_C_PHI phi_tic=7 phi_deg=0.07 k_frac=-0.60323674828933 F_latt_b=0.943193755044476 F_latt=-2.01093178282
TRACE_C_PHI phi_tic=8 phi_deg=0.08 k_frac=-0.605246330406512 F_latt_b=1.04241217237842 F_latt=-2.29416161853174
TRACE_C_PHI phi_tic=9 phi_deg=0.09 k_frac=-0.607255839576692 F_latt_b=1.05079664302326 F_latt=-2.38319665299058
[2025-10-08T01:15:04] tokens used: 215,475

[2025-10-08T01:15:13] thinking

**Evaluating C instrumentation logs**
[2025-10-08T01:15:14] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_per_phi.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:15] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_per_phi.json' succeeded in 695ms:
{
  "timestamp": "2025-10-08T01:14:02.040154Z",
  "pixel": {
    "slow": 685,
    "fast": 1039
  },
  "config": "supervisor",
  "device": "cpu",
  "dtype": "float64",
  "per_phi_entries": [
    {
      "phi_tic": 0,
      "phi_deg": 0.0,
      "k_frac": -0.607227388110849,
      "F_latt_b": 1.051325983228,
      "F_latt": -2.35189941276007
    },
    {
      "phi_tic": 1,
      "phi_deg": 0.01,
[2025-10-08T01:15:15] tokens used: 216,672

[2025-10-08T01:15:21] thinking

**Comparing spec and parity JSON data**
[2025-10-08T01:15:22] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/c_trace_phi.log "$outdir/c_trace_phi.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:23] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/c_trace_phi.log "$outdir/c_trace_phi.log"' succeeded in 668ms:

[2025-10-08T01:15:23] tokens used: 217,984

[2025-10-08T01:15:26] thinking

**Repeating comparison commands**
[2025-10-08T01:15:28] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_spec.txt"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:29] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_spec.txt"' succeeded in 690ms:
================================================================================
CLI-FLAGS-003 Phase K3e: Per-φ Parity Comparison
================================================================================

PyTorch: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec_per_phi.json
C:       reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log

--------------------------------------------------------------------------------
φ_tic   φ (deg)    Δk              ΔF_latt_b       Status    
--------------------------------------------------------------------------------
0       0.000000   1.811649e-02    1.912228        DIVERGE   
1       0.010000   2.830201e-05    0.003376        OK        
2       0.020000   2.832070e-05    0.004040        OK        
3       0.030000   2.833938e-05    0.004359        OK        
4       0.040000   2.835807e-05    0.004288        OK        
5       0.050000   2.837675e-05    0.003853        OK        
6       0.060000   2.839543e-05    0.003076        OK        
7       0.070000   2.841411e-05    0.002016        OK        
8       0.080000   2.843279e-05    0.000782        OK        
9       0.090000   2.845147e-05    0.000529        OK        
[2025-10-08T01:15:29] tokens used: 218,298

[2025-10-08T01:15:32] thinking

**Running parity comparison**
[2025-10-08T01:15:33] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_c_parity_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_c_parity.txt"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:33] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_c_parity_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_c_parity.txt"' succeeded in 693ms:
================================================================================
CLI-FLAGS-003 Phase K3e: Per-φ Parity Comparison
================================================================================

PyTorch: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_per_phi.json
C:       reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log

--------------------------------------------------------------------------------
φ_tic   φ (deg)    Δk              ΔF_latt_b       Status    
--------------------------------------------------------------------------------
0       0.000000   2.845147e-05    0.000529        OK        
1       0.010000   2.830201e-05    0.003376        OK        
2       0.020000   2.832070e-05    0.004040        OK        
3       0.030000   2.833938e-05    0.004359        OK        
4       0.040000   2.835807e-05    0.004288        OK        
5       0.050000   2.837675e-05    0.003853        OK        
6       0.060000   2.839543e-05    0.003076        OK        
7       0.070000   2.841411e-05    0.002016        OK        
8       0.080000   2.843279e-05    0.000782        OK        
9       0.090000   2.845147e-05    0.000529        OK        
[2025-10-08T01:15:33] tokens used: 219,246

[2025-10-08T01:15:41] thinking

**Handling comparison summaries carefully**

I see that parity results haven't met the threshold yet, and the summary file gets overwritten each run. I’ll rerun the spec comparison, save its summary to a unique file, then rerun parity, and save that summary separately to keep both results clear.
[2025-10-08T01:15:42] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" > "$outdir/per_phi_summary_spec.txt"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:43] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_spec_per_phi.json" "$outdir/c_trace_phi.log" > "$outdir/per_phi_summary_spec.txt"' succeeded in 703ms:

[2025-10-08T01:15:43] tokens used: 220,377

[2025-10-08T01:15:45] thinking

**Copying comparison_summary.md**
[2025-10-08T01:15:46] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$outdir/comparison_summary.md" "$outdir/comparison_summary_spec.md"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:46] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$outdir/comparison_summary.md" "$outdir/comparison_summary_spec.md"' succeeded in 698ms:

[2025-10-08T01:15:46] tokens used: 221,148

[2025-10-08T01:15:49] thinking

**Running parity comparison again**
[2025-10-08T01:15:50] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_c_parity_per_phi.json" "$outdir/c_trace_phi.log" > "$outdir/per_phi_summary_c_parity.txt"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:51] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_c_parity_per_phi.json" "$outdir/c_trace_phi.log" > "$outdir/per_phi_summary_c_parity.txt"' succeeded in 712ms:

[2025-10-08T01:15:51] tokens used: 222,076

[2025-10-08T01:15:54] thinking

**Copying summary**
[2025-10-08T01:15:54] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$outdir/comparison_summary.md" "$outdir/comparison_summary_c_parity.md"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:15:55] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cp "$outdir/comparison_summary.md" "$outdir/comparison_summary_c_parity.md"' succeeded in 687ms:

[2025-10-08T01:15:55] tokens used: 223,131

[2025-10-08T01:15:58] thinking

**Generating metric JSON for summaries**
[2025-10-08T01:16:03] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; python - <<'"'PY'
import json, pathlib
outdir = pathlib.Path('reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z')

c_lines = []
with open(outdir/'c_trace_phi.log') as f:
    for line in f:
        if line.startswith('TRACE_C_PHI'):
            parts = dict(part.split('=') for part in line.strip().split()[1:])
            c_lines.append({
                'phi_tic': int(parts['phi_tic']),
                'phi_deg': float(parts['phi_deg']),
                'k_frac': float(parts['k_frac']),
                'F_latt_b': float(parts['F_latt_b']),
            })

results = {}
for mode in ['spec', 'c_parity']:
    py_path = outdir/f'trace_py_{mode}_per_phi.json'
    with open(py_path) as f:
        data = json.load(f)
    py_entries = data.get('per_phi_entries', data.get('traces', []))
    deltas = []
    for py, c in zip(py_entries, c_lines):
        deltas.append({
            'phi_tic': py['phi_tic'],
            'phi_deg': py['phi_deg'],
            'delta_k': abs(py['k_frac'] - c['k_frac']),
            'delta_F_latt_b': abs(py['F_latt_b'] - c['F_latt_b']),
        })
    max_delta_k = max((d['delta_k'] for d in deltas), default=0.0)
    max_delta_fb = max((d['delta_F_latt_b'] for d in deltas), default=0.0)
    results[mode] = {
        'max_delta_k': max_delta_k,
        'max_delta_F_latt_b': max_delta_fb,
        'deltas': deltas,
    }

with open(outdir/'delta_metrics.json', 'w') as f:
    json.dump(results, f, indent=2)
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:04] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; python - <<'"'PY'
import json, pathlib
outdir = pathlib.Path('reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z')

c_lines = []
with open(outdir/'c_trace_phi.log') as f:
    for line in f:
        if line.startswith('TRACE_C_PHI'):
            parts = dict(part.split('=') for part in line.strip().split()[1:])
            c_lines.append({
                'phi_tic': int(parts['phi_tic']),
                'phi_deg': float(parts['phi_deg']),
                'k_frac': float(parts['k_frac']),
                'F_latt_b': float(parts['F_latt_b']),
            })

results = {}
for mode in ['spec', 'c_parity']:
    py_path = outdir/f'trace_py_{mode}_per_phi.json'
    with open(py_path) as f:
        data = json.load(f)
    py_entries = data.get('per_phi_entries', data.get('traces', []))
    deltas = []
    for py, c in zip(py_entries, c_lines):
        deltas.append({
            'phi_tic': py['phi_tic'],
            'phi_deg': py['phi_deg'],
            'delta_k': abs(py['k_frac'] - c['k_frac']),
            'delta_F_latt_b': abs(py['F_latt_b'] - c['F_latt_b']),
        })
    max_delta_k = max((d['delta_k'] for d in deltas), default=0.0)
    max_delta_fb = max((d['delta_F_latt_b'] for d in deltas), default=0.0)
    results[mode] = {
        'max_delta_k': max_delta_k,
        'max_delta_F_latt_b': max_delta_fb,
        'deltas': deltas,
    }

with open(outdir/'delta_metrics.json', 'w') as f:
    json.dump(results, f, indent=2)
PY" succeeded in 697ms:

[2025-10-08T01:16:04] tokens used: 223,939

[2025-10-08T01:16:08] thinking

**Verifying metrics**
[2025-10-08T01:16:09] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:10] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json' succeeded in 717ms:
{
  "spec": {
    "max_delta_k": 0.018116486800789033,
    "max_delta_F_latt_b": 1.9122277478729481,
    "deltas": [
      {
        "phi_tic": 0,
        "phi_deg": 0.0,
        "delta_k": 0.018116486800789033,
        "delta_F_latt_b": 1.9122277478729481
      },
      {
        "phi_tic": 1,
        "phi_deg": 0.01,
        "delta_k": 2.830200878900513e-05,
        "delta_F_latt_b": 0.0033762176981319003
      },
      {
        "phi_tic": 2,
        "phi_deg": 0.02,
[2025-10-08T01:16:10] tokens used: 224,859

[2025-10-08T01:16:14] thinking

**Preparing targeted pytest run**
[2025-10-08T01:16:15] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v > "$outdir/pytest_phi_carryover.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:18] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v > "$outdir/pytest_phi_carryover.log"' succeeded in 3.13s:

[2025-10-08T01:16:18] tokens used: 226,585

[2025-10-08T01:16:23] thinking

**Verifying test results**
[2025-10-08T01:16:24] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v > "$outdir/pytest_phi0.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:27] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v > "$outdir/pytest_phi0.log"' succeeded in 3.00s:

[2025-10-08T01:16:27] tokens used: 227,098

[2025-10-08T01:16:31] thinking

**Checking test logs**
[2025-10-08T01:16:31] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; tail -n 20 "$outdir/pytest_phi0.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:32] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; tail -n 20 "$outdir/pytest_phi0.log"' succeeded in 662ms:
============================= test session starts ==============================
platform darwin -- Python 3.13.1, pytest-8.4.1, pluggy-1.5.0 -- /Users/ollie/miniconda3/bin/python
cachedir: .pytest_cache
rootdir: /Users/ollie/Documents/nanoBragg3
configfile: pyproject.toml
plugins: anyio-4.9.0, dials_data-2.4.127
collecting ... collected 2 items

tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c PASSED [ 50%]
tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_phi0_matches_c PASSED [100%]

============================== 2 passed in 1.20s ===============================
[2025-10-08T01:16:32] tokens used: 227,393

[2025-10-08T01:16:36] thinking

**Preparing to capture test logs**
[2025-10-08T01:16:38] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; tail -n 20 "$outdir/pytest_phi_carryover.log"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:38] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; tail -n 20 "$outdir/pytest_phi_carryover.log"' succeeded in 684ms:
cachedir: .pytest_cache
rootdir: /Users/ollie/Documents/nanoBragg3
configfile: pyproject.toml
plugins: anyio-4.9.0, dials_data-2.4.127
collecting ... collected 12 items

tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_spec_mode_fresh_rotation[cpu-dtype0] PASSED [  8%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_spec_mode_fresh_rotation[cpu-dtype1] PASSED [ 16%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_spec_mode_fresh_rotation[cuda-dtype2] SKIPPED [ 25%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_spec_mode_fresh_rotation[cuda-dtype3] SKIPPED [ 33%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_c_parity_mode_stale_carryover[cpu-dtype0] PASSED [ 41%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_c_parity_mode_stale_carryover[cpu-dtype1] PASSED [ 50%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_c_parity_mode_stale_carryover[cuda-dtype2] SKIPPED [ 58%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_c_parity_mode_stale_carryover[cuda-dtype3] SKIPPED [ 66%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_modes_differ_at_phi_zero[cpu-dtype0] PASSED [ 75%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_modes_differ_at_phi_zero[cpu-dtype1] PASSED [ 83%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_modes_differ_at_phi_zero[cuda-dtype2] SKIPPED [ 91%]
tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior::test_modes_differ_at_phi_zero[cuda-dtype3] SKIPPED [100%]

========================= 6 passed, 6 skipped in 1.28s =========================
[2025-10-08T01:16:38] tokens used: 227,873

[2025-10-08T01:16:41] thinking

**Preparing SHA256 checksums**
[2025-10-08T01:16:43] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; (cd "$outdir" && shasum -a 256 trace_py_spec.log trace_py_c_parity.log trace_py_spec_per_phi.json trace_py_c_parity_per_phi.json c_trace_phi.log per_phi_summary_spec.txt per_phi_summary_c_parity.txt comparison_summary_spec.md comparison_summary_c_parity.md delta_metrics.json pytest_phi_carryover.log pytest_phi0.log > sha256.txt)' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:43] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; (cd "$outdir" && shasum -a 256 trace_py_spec.log trace_py_c_parity.log trace_py_spec_per_phi.json trace_py_c_parity_per_phi.json c_trace_phi.log per_phi_summary_spec.txt per_phi_summary_c_parity.txt comparison_summary_spec.md comparison_summary_c_parity.md delta_metrics.json pytest_phi_carryover.log pytest_phi0.log > sha256.txt)' succeeded in 732ms:

[2025-10-08T01:16:43] tokens used: 229,650

[2025-10-08T01:16:47] thinking

**Checking output directory contents**
[2025-10-08T01:16:47] exec bash -lc 'timestamp=20251008T011326Z; ls reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:16:48] bash -lc 'timestamp=20251008T011326Z; ls reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp' succeeded in 720ms:
c_phi.bin
c_trace_phi.log
comparison_summary.md
comparison_summary_c_parity.md
comparison_summary_spec.md
delta_metrics.json
mosflm_matrix_probe_c_parity.log
mosflm_matrix_probe_spec.log
per_phi_summary_c_parity.txt
per_phi_summary_spec.txt
pytest_phi0.log
pytest_phi_carryover.log
sha256.txt
trace_py_c_parity.log
trace_py_c_parity_config_snapshot.json
trace_py_c_parity_env.json
trace_py_c_parity_per_phi.json
trace_py_c_parity_per_phi.log
trace_py_spec.log
trace_py_spec_config_snapshot.json
[2025-10-08T01:16:48] tokens used: 230,500

[2025-10-08T01:16:57] thinking

**Planning summary and documentation updates**

I’m organizing notes about the parity check failure in Phase C4, tracking that the tolerance wasn’t met and success isn’t achieved yet. I plan to update various documentation and plans to record new metrics, mark progress but not completion, and capture attempt histories. I’m preparing to generate a summary file that details the observed metrics, reused logs, and next steps as part of Phase C5’s instructions.
[2025-10-08T01:17:05] exec bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cat <<'"'EOF' > \""'$outdir/summary.md"
# Phase L3k.3c.4 Parity Shim Evidence (2025-10-08T01:13:26Z)

## Scope
- Re-ran `trace_harness.py` for supervisor configuration at pixel (685, 1039) with `phi_carryover_mode` set to `spec` and `c-parity`.
- Captured per-φ traces/JSON, targeted pytest logs, and SHA256 fingerprints under this directory.
- Reused the previously instrumented C trace (`c_trace_phi.log` from 20251008T005247Z) because the current golden binary no longer emits `TRACE_C_PHI` lines.

## Findings
- **Spec mode** remains spec-compliant: φ=0 drift persists (Δk = 1.8116e-02, ΔF_latt_b ≈ 1.91). Tests `TestPhiZeroParity` continue to pass (2/2).
- **C-parity mode** still diverges beyond the tightened VG-1 tolerance: max Δk = 2.8451e-05 (> 1e-6 target). ΔF_latt_b peaks at 4.36e-03; tolerances need to reach ≤1e-6 and ≤1e-4 respectively.
- Device coverage: CPU float64 only (CUDA cases skipped by existing tests); document in fix_plan that GPU evidence is still outstanding.
- Harness now threads `phi-mode` correctly; spec/c-parity pairs captured in `trace_py_*` outputs.

## Artifacts
- `trace_py_spec.log`, `trace_py_spec_per_phi.json`
- `trace_py_c_parity.log`, `trace_py_c_parity_per_phi.json`
- `c_trace_phi.log` (copied from 20251008T005247Z instrumentation run)
- `per_phi_summary_spec.txt`, `per_phi_summary_c_parity.txt`
- `comparison_summary_spec.md`, `comparison_summary_c_parity.md`
- `delta_metrics.json`
- `pytest_phi_carryover.log`, `pytest_phi0.log`
- `sha256.txt`

## Next Steps
1. Investigate why c-parity shim plateaus at Δk ≈ 2.84e-05 (suspect residual rounding in reciprocal recomputation).
2. Re-run the C trace with fresh instrumentation once `TRACE_C_PHI` logging is restored; update evidence when available.
3. Tighten shim logic/tests until VG-1 thresholds (≤1e-6) are met, then revisit Phase L3k.3c.5 documentation tasks.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:05] bash -lc 'timestamp=20251008T011326Z; outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; cat <<'"'EOF' > \""'$outdir/summary.md"
# Phase L3k.3c.4 Parity Shim Evidence (2025-10-08T01:13:26Z)

## Scope
- Re-ran `trace_harness.py` for supervisor configuration at pixel (685, 1039) with `phi_carryover_mode` set to `spec` and `c-parity`.
- Captured per-φ traces/JSON, targeted pytest logs, and SHA256 fingerprints under this directory.
- Reused the previously instrumented C trace (`c_trace_phi.log` from 20251008T005247Z) because the current golden binary no longer emits `TRACE_C_PHI` lines.

## Findings
- **Spec mode** remains spec-compliant: φ=0 drift persists (Δk = 1.8116e-02, ΔF_latt_b ≈ 1.91). Tests `TestPhiZeroParity` continue to pass (2/2).
- **C-parity mode** still diverges beyond the tightened VG-1 tolerance: max Δk = 2.8451e-05 (> 1e-6 target). ΔF_latt_b peaks at 4.36e-03; tolerances need to reach ≤1e-6 and ≤1e-4 respectively.
- Device coverage: CPU float64 only (CUDA cases skipped by existing tests); document in fix_plan that GPU evidence is still outstanding.
- Harness now threads `phi-mode` correctly; spec/c-parity pairs captured in `trace_py_*` outputs.

## Artifacts
- `trace_py_spec.log`, `trace_py_spec_per_phi.json`
- `trace_py_c_parity.log`, `trace_py_c_parity_per_phi.json`
- `c_trace_phi.log` (copied from 20251008T005247Z instrumentation run)
- `per_phi_summary_spec.txt`, `per_phi_summary_c_parity.txt`
- `comparison_summary_spec.md`, `comparison_summary_c_parity.md`
- `delta_metrics.json`
- `pytest_phi_carryover.log`, `pytest_phi0.log`
- `sha256.txt`

## Next Steps
1. Investigate why c-parity shim plateaus at Δk ≈ 2.84e-05 (suspect residual rounding in reciprocal recomputation).
2. Re-run the C trace with fresh instrumentation once `TRACE_C_PHI` logging is restored; update evidence when available.
3. Tighten shim logic/tests until VG-1 thresholds (≤1e-6) are met, then revisit Phase L3k.3c.5 documentation tasks.
EOF
' succeeded in 688ms:

[2025-10-08T01:17:05] tokens used: 232,637

[2025-10-08T01:17:11] thinking

**Updating plan document states**
[2025-10-08T01:17:14] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-phi-parity-shim/plan.md
@@ -46,3 +46,3 @@
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
[2025-10-08T01:17:14] apply_patch(auto_approved=true) exited 0 in 10ms:
Success. Updated the following files:
M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T01:17:14] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff

[2025-10-08T01:17:14] tokens used: 234,420
[2025-10-08T01:17:14] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:18] thinking

**Preparing to update attempt history**
[2025-10-08T01:17:18] exec bash -lc 'rg "Attempt #" -n docs/fix_plan.md | grep "CLI-FLAGS-003" | tail' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:19] bash -lc 'rg "Attempt #" -n docs/fix_plan.md | grep "CLI-FLAGS-003" | tail' succeeded in 694ms:
692:  * [2025-10-22] Attempt #116 (ralph loop CLI-FLAGS-003 L3k.3c.3) — Result: **VG-1 LOCKED** ✅ (**Phase L3k.3c.3 COMPLETE**). Updated test expectations with 10-digit spec baselines and ≤1e-6 tolerances.
2183:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
[2025-10-08T01:17:19] tokens used: 235,455
[2025-10-08T01:17:19] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:22] thinking

**Checking context near line 2183**
[2025-10-08T01:17:23] exec bash -lc "sed -n '2120,2240p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:24] bash -lc "sed -n '2120,2240p' docs/fix_plan.md" succeeded in 723ms:
      - **Phase L2b (blocked)** — Instrumentation required to extract real `polar`, `omega_pixel`, `I_before_scaling` from Simulator.run(). Must patch `src/nanobrag_torch/simulator.py` to surface actual computed values instead of placeholders, gated behind `trace_pixel` debug flag.
      - **Phase L2b blocker noted** — Cannot verify incident beam direction without adding `TRACE_PY: incident_vec` output. Add to instrumentation requirements.
      - **Phase L2c (pending L2b)** — Once real scaling factors are available, build `compare_scaling_traces.py` to diff TRACE_C vs TRACE_PY and identify first divergence.
      - **Phase L3 (pending L2c)** — Root cause zero intensity (likely geometry/lattice mismatch causing pixel to fall outside Bragg condition) and fix normalization chain.
  * [2025-10-07] Attempt #88 (ralph loop) — Result: **SUCCESS** (Phase L3f rotation-vector audit COMPLETE per input.md "Do Now"). **Captured PyTorch rotation vectors at φ=0, extracted metric invariants (volume, a·a* duality), built component-level comparison, and documented hypotheses for Y-component drift.**
    Metrics: Evidence-only loop; no production code changes. Pytest collection stable (652 tests collected). Trace harness execution successful (40 TRACE_PY lines + 10 TRACE_PY_PHI lines captured). Volume discrepancy +3.35e-03 Å³, metric duality deltas O(1e-4) (PyTorch achieves a·a* ≈ 1.0 within 7.5e-05, C shows O(1e-3) deviations). Real-space Y-component drift: b_y +6.8% (largest), a_y -0.04%, c_y -0.06%.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log` — PyTorch rotation vector trace (40 lines captured from harness stdout)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/invariant_probe.md` — Metric duality summary table (volume, a·a*, b·b*, c·c* comparisons)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Component-level delta table for all 6 vectors (real a/b/c, reciprocal a*/b*/c*) with percentage deltas
      - `reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md` — Phase L3g hypothesis document identifying Y-component systematic drift and proposing spindle-axis normalization / volume-actual usage as primary suspects
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py:273-275` — Fixed output path handling (use Path(args.out) directly instead of prepending hardcoded directory)
    Observations/Hypotheses:
      - **Reciprocal vectors EXCELLENT:** All reciprocal components match C within O(1e-09) Å⁻¹ (nanometer-scale precision), indicating initial reciprocal vector construction is identical between implementations
      - **Real-space Y-component drift:** Systematic Y-axis discrepancies in all three real vectors (a_y: -8.74e-03 Å, b_y: +4.573e-02 Å [+6.8%], c_y: -1.529e-02 Å) suggest error accumulates during real→reciprocal recalculation or spindle-axis rotation
      - **Z-component moderate drift:** a_z +0.62%, b_z -0.004%, c_z +0.39%
      - **X-component EXCELLENT:** All X deltas <1.4e-06 Å (<0.0001%)
      - **Metric duality interpretation:** PyTorch achieves near-perfect a·a* ≈ 1.0 (within 7.5e-05) per crystallographic convention; C shows O(1e-3) deviations (a·a*=1.000626, b·b*=0.999559, c·c*=0.999813), suggesting accumulated drift in C's reciprocal recalculation pipeline
      - **Primary hypothesis (H1 — spindle axis normalization):** Y-component drift pattern matches spindle-axis orientation (spec default [0,1,0]); if PyTorch normalizes spindle vector before φ rotation while C uses raw input, magnitude errors amplify into real-space Y drift after cross-product reconstruction
      - **Secondary hypothesis (H2 — V_actual vs V_formula):** Volume delta +3.3e-03 Å³ suggests different volume usage; CLAUDE Rule #13 mandates V_actual = a·(b×c) for reconstruction; if C uses formula volume while PyTorch uses V_actual, cross-products acquire systematic bias
[2025-10-08T01:17:24] tokens used: 235,824
[2025-10-08T01:17:24] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:28] thinking

**Determining placement and numbering for new attempt**
[2025-10-08T01:17:29] exec bash -lc 'rg "Attempt #" docs/fix_plan.md | tail -n 1' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:29] bash -lc 'rg "Attempt #" docs/fix_plan.md | tail -n 1' succeeded in 670ms:
  * [2025-10-07] Attempt #11 (ralph loop, Mode: Perf) — Result: **Phase D4 COMPLETE** (CPU/CUDA pytest evidence captured with timings). Evidence-only loop per input.md guidance.
[2025-10-08T01:17:29] tokens used: 237,504
[2025-10-08T01:17:29] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:33] thinking

**Identifying latest attempt number in CLI-FLAGS**
[2025-10-08T01:17:34] exec bash -lc 'rg "Attempt #" docs/fix_plan.md | grep "CLI-FLAGS-003" | sort -u' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:35] bash -lc 'rg "Attempt #" docs/fix_plan.md | grep "CLI-FLAGS-003" | sort -u' succeeded in 698ms:
  * [2025-10-22] Attempt #116 (ralph loop CLI-FLAGS-003 L3k.3c.3) — Result: **VG-1 LOCKED** ✅ (**Phase L3k.3c.3 COMPLETE**). Updated test expectations with 10-digit spec baselines and ≤1e-6 tolerances.
  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
[2025-10-08T01:17:35] tokens used: 237,876
[2025-10-08T01:17:35] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:39] thinking

**Investigating attempt entries**
[2025-10-08T01:17:39] exec bash -lc "sed -n '520,730p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:40] bash -lc "sed -n '520,730p' docs/fix_plan.md" succeeded in 662ms:
      4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
  * [2025-10-07] Attempt #118 (ralph loop i=118, Mode: Parity/Evidence) — Result: ✅ **SUCCESS** (Phase L3k.3c.3 φ=0 spec baseline evidence COMPLETE). **No code changes.**
    Metrics: Evidence-only loop. Tests PASSED (2/2 in 2.14s). Spec baselines locked: rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/metadata.txt` — Environment metadata (torch 2.8.0+cu128, CUDA available, git SHA 4cb561b, CPU device)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/pytest_phi0.log` — Test execution output (2 passed)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/sha256.txt` — Cryptographic hashes (eea25db..., 84bd30b...)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/comparison_summary.md` — Full evidence summary with interpretation, C-PARITY-001 note, next actions
    Observations/Hypotheses:
      - **Spec compliance confirmed**: Both tests pass, proving φ=0 rotation is identity transformation per specs/spec-a-core.md:211-214
      - **test_rot_b_matches_c PASSED**: rot_b[0,0,1] Y component = 0.7173197865 Å at φ=0, confirming base vector unchanged by identity rotation
      - **test_k_frac_phi0_matches_c PASSED**: k_frac = 1.6756687164 at φ=0 for pixel (685,1039), confirming Miller indices use base vectors
      - **C-PARITY-001 divergence documented**: C binary produces rot_b_y=0.6715882339 Å and k_frac=-0.607256 due to stale vector carryover bug (docs/bugs/verified_c_bugs.md:166-204)
      - **VG-1 gate satisfied**: Both spec baselines locked with ≤1e-6 tolerances on CPU (CUDA smoke test deferred to next loop per input.md pitfall guidance)
      - **Mode: Parity/Evidence** — Tests exist and pass; no code changes needed this loop per input.md:1-8 "Do Now" directive
    First Divergence: N/A (spec-compliant behavior validated; C-parity divergence is documented bug, not PyTorch regression)
    Next Actions:
      1. ✅ Phase L3k.3c.3 complete — spec baselines locked with evidence artifacts
      2. → Phase L3k.3c.4 — Design opt-in C-parity shim for validation harnesses (defer to next implementation loop)
      3. → Phase L3k.3d — Resolve nb-compare ROI parity (VG-3/VG-4) after shim work
[2025-10-08T01:17:40] tokens used: 238,363
[2025-10-08T01:17:40] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:45] thinking

**Determining insertion point for new attempt entry**
[2025-10-08T01:17:46] exec bash -lc 'rg "Attempt #120" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:46] bash -lc 'rg "Attempt #120" -n docs/fix_plan.md' succeeded in 683ms:
563:  * [2025-10-07] Attempt #120 (ralph loop i=120) — Result: ✅ **SUCCESS** (Phase C1-C2 parity shim implementation COMPLETE). **Opt-in φ=0 carryover mode implemented with batched tensor operations, CLI flag wired, validation complete.**
[2025-10-08T01:17:46] tokens used: 241,669
[2025-10-08T01:17:46] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:50] thinking

**Checking for existing attempt number**
[2025-10-08T01:17:51] exec bash -lc 'rg "Attempt #121" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:52] bash -lc 'rg "Attempt #121" -n docs/fix_plan.md' succeeded in 762ms:
589:  * [2025-10-08] Attempt #121 (ralph loop i=124, Mode: Parity/Evidence) — Result: ✅ **SUCCESS** (Phase C4 parity shim evidence capture COMPLETE). **Dual-mode per-φ traces captured; spec mode diverges at φ=0 as expected; c-parity mode achieves full C parity (Δk≤2.8e-5).**
[2025-10-08T01:17:52] tokens used: 241,981
[2025-10-08T01:17:52] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:17:57] thinking

**Reviewing attempt history and tolerance levels**
[2025-10-08T01:17:57] exec bash -lc 'rg "Attempt #122" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:17:58] bash -lc 'rg "Attempt #122" -n docs/fix_plan.md' exited 1 in 697ms:

[2025-10-08T01:17:58] tokens used: 242,294
[2025-10-08T01:17:58] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:18:01] thinking

**Preparing to log new attempt**
[2025-10-08T01:18:02] exec bash -lc "sed -n '560,640p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:18:02] bash -lc "sed -n '560,640p' docs/fix_plan.md" succeeded in 698ms:
      3. → Phase L3k.3c.5 — Dual-mode documentation/tests after implementation
      4. → Phase L3k.3d — nb-compare ROI parity (VG-3/VG-4) using c-parity mode
      4. Update `plans/active/cli-noise-pix0/plan.md` L3k.3c.3 state from [ ] to [D] with this attempt reference
  * [2025-10-07] Attempt #120 (ralph loop i=120) — Result: ✅ **SUCCESS** (Phase C1-C2 parity shim implementation COMPLETE). **Opt-in φ=0 carryover mode implemented with batched tensor operations, CLI flag wired, validation complete.**
    Metrics: Targeted tests PASSED (6/6 in 4.25s). Smoke tests: test_cli_scaling_phi0.py 2/2 passed, test_at_geo_001.py 1/1 passed, test_at_crystal_absolute.py 3/3 passed. Config validation: phi_carryover_mode invalid rejection working. No regressions detected.
    Artifacts:
      - `src/nanobrag_torch/config.py:56-59` — Added `phi_carryover_mode: str = "spec"` field to CrystalConfig
      - `src/nanobrag_torch/config.py:69-73` — Added validation in `__post_init__` to reject invalid modes
      - `src/nanobrag_torch/models/crystal.py:1080-1128` — Implemented parity shim using `torch.index_select` for batched φ=0 replacement (lines 1109-1128)
      - `src/nanobrag_torch/models/crystal.py:1084-1103` — Added C-code reference (nanoBragg.c:3044-3058) per CLAUDE Rule #11
      - `src/nanobrag_torch/__main__.py:377-385` — Added `--phi-carryover-mode {spec,c-parity}` CLI flag with help text
      - `src/nanobrag_torch/__main__.py:859` — Wired flag through to CrystalConfig instantiation
      - Test logs: `/tmp/phi0_test.log` (2 passed), smoke test output (6 passed, 3 warnings)
    Observations/Hypotheses:
      - **Batched implementation verified**: Uses `torch.index_select` on phi dimension (dim=0) to replace index 0 with index -1; no Python loops
      - **Gradient flow preserved**: No `.detach()`, `.item()`, or `.cpu()` calls in shim; gradients flow through index_select
      - **Device/dtype neutral**: Indices tensor created on same device as input (`a_final.device`); dtype long for indices
      - **Default is spec-compliant**: phi_carryover_mode="spec" produces fresh rotations; validates against C-PARITY-001 documentation
      - **C-code reference included**: Lines 1084-1103 contain exact C code from nanoBragg.c per CLAUDE Rule #11
      - **Validation working**: Invalid mode "invalid" correctly rejected with ValueError
[2025-10-08T01:18:02] tokens used: 242,471
[2025-10-08T01:18:02] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:18:07] thinking

**Adding new Attempt #122 details**
[2025-10-08T01:18:20] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -613,2 +613,20 @@
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
[2025-10-08T01:18:20] apply_patch(auto_approved=true) exited 0 in 17ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-08T01:18:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff

[2025-10-08T01:18:20] tokens used: 247,522
[2025-10-08T01:18:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:18:24] thinking

**Verifying plan updates**
[2025-10-08T01:18:25] exec bash -lc "sed -n '300,340p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:18:26] bash -lc "sed -n '300,340p' plans/active/cli-noise-pix0/plan.md" succeeded in 707ms:
| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |

#### L3k.3c Tasks — Restore φ=0 Parity with C Reference

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
| L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
| L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |

### Phase L4 — Supervisor Command Parity Rerun
Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T01:18:26] tokens used: 249,653
[2025-10-08T01:18:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:18:31] thinking

**Updating plan state to partial**
[2025-10-08T01:18:34] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -309,3 +309,3 @@
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
[2025-10-08T01:18:34] apply_patch(auto_approved=true) exited 0 in 37ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-08T01:18:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff

[2025-10-08T01:18:34] tokens used: 251,567
[2025-10-08T01:18:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:18:57] thinking

**Preparing next engineer instructions**
[2025-10-08T01:18:58] exec bash -lc 'rg "compare_rotation" -n scripts' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:18:59] bash -lc 'rg "compare_rotation" -n scripts' exited 1 in 694ms:

[2025-10-08T01:18:59] tokens used: 253,780
[2025-10-08T01:18:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:19:05] thinking

**Identifying comparison script**
[2025-10-08T01:19:06] exec bash -lc 'python scripts/compare_rotation_matrices.py --help' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:19:07] bash -lc 'python scripts/compare_rotation_matrices.py --help' succeeded in 780ms:
Rotation Matrix Comparison Tool for Phase 4.1
============================================================
❌ C trace file not found: c_pix0_trace_enhanced.log
   Run: ./run_enhanced_c_trace.sh
[2025-10-08T01:19:07] tokens used: 254,587
[2025-10-08T01:19:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:19:30] thinking

**Preparing detailed input instructions**
[2025-10-08T01:19:45] exec bash -lc "cat <<'EOF' > input.md
Summary: Bring the c-parity shim within VG-1 by eliminating the 2.845e-05 residual Δk drift vs the C trace.
Mode: Parity
Focus: CLI-FLAGS-003 — Phase L3k.3c.4 parity shim evidence capture
Branch: feature/spec-based-2
Mapped tests: tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior; tests/test_cli_scaling_phi0.py::TestPhiZeroParity
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_spec*.{log,json}; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_c_parity*.{log,json}; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/c_trace_phi.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/delta_metrics.json; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/pytest_phi*.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/sha256.txt
Do Now: CLI-FLAGS-003 Phase L3k.3c.4 — after fixing the φ carryover logic, rerun the parity trace harness for both modes via "'`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode <mode> --out reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_<mode>.log` and regenerate the matching `TRACE_C_PHI` log, then recompute `delta_metrics.json`.
If Blocked: Capture failing command + stderr to `<outdir>/attempt_fail.log`, keep the tree untouched, and document the blocker + hypothesis in docs/fix_plan.md Attempt history before stopping.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:309 marks L3k.3c.4 as [P]; VG-1 requires Δk, ΔF_latt_b ≤1e-6/1e-4 before we can advance to documentation and nb-compare phases.
- plans/active/cli-phi-parity-shim/plan.md:47-55 calls for ≤1e-6 parity in c-parity mode; today’s run (20251008T011326Z) still sits at 2.845e-05, so shim logic needs refinement.
- docs/fix_plan.md Attempt #122 records the regression and the missing TRACE_C_PHI instrumentation; resolving both is prerequisite for credible parity evidence.
- docs/bugs/verified_c_bugs.md:166-204 defines the C reference behavior—use it to ensure the optional shim matches the bug without altering the spec-default path.
- specs/spec-a-core.md:211-214 keep the primary contract (identity rotation at φ=0); any fix must leave spec mode untouched while tightening the parity mode.
How-To Map:
- Restore TRACE_C instrumentation if needed: `pushd golden_suite_generator && patch -p1 < ../c_instrumentation.patch && make && popd` (or re-apply the existing TRACE_C_PHI edits manually, then rebuild). Confirm `TRACE_C_PHI` appears before re-running comparisons.
- Prepare outdir: `timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"`.
- Spec run: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"`.
- C-parity run: same command with `--phi-mode c-parity` and output `trace_py_c_parity.log`.
- Copy per-φ JSON/log/env/config into `$outdir` (rename with `_spec` / `_c_parity` suffixes) before the second run overwrites them.
- Fresh C trace: `NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg ... -trace_pixel 685 1039 > "$outdir/c_trace_phi.log" 2>&1` (use the supervisor command arguments exactly as in docs/fix_plan.md).
- Comparisons: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_<mode>_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_<mode>.txt"` for both modes; follow with a small Python snippet to rebuild `$outdir/delta_metrics.json` capturing max deltas.
- Tests: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v > "$outdir/pytest_phi_carryover.log"` and `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v > "$outdir/pytest_phi0.log"`.
- Hashes: `(cd "$outdir" && shasum -a 256 *.log *.json *.txt > sha256.txt)`.
Pitfalls To Avoid:
- Do not loosen VG-1 tolerances; fixing the shim must hit ≤1e-6 without altering the spec-default branch.
- Keep spec mode untouched; any quick fix that regresses TestPhiZeroParity will be backed out.
- Ensure all tensors stay device/dtype neutral—no hard-coded `.cpu()` / `.double()` calls when adjusting phi rotation.
- Don’t rely on the stale 20251008T005247Z C log; regenerate TRACE_C_PHI so evidence reflects the current binary.
- Avoid deleting or renaming protected assets referenced in docs/index.md (trace harness, reports directories, loop scripts).
- Preserve vectorization inside `Crystal.get_rotated_real_vectors`; no per-φ Python loops to patch the carryover path.
- Re-run only the mapped targeted tests; defer nb-compare until VG-1 tolerances pass.
- Document any shim adjustments with updated CLAUDE Rule #11 citations if you touch the core function.
- Capture both CPU and (if available) CUDA behavior when adding diagnostics; note skips explicitly in logs.
- Keep the worktree clean; log intermediate artifacts under `reports/` rather than leaving temp files elsewhere.
Pointers:
- docs/fix_plan.md:450-574 — CLI-FLAGS-003 context + latest Attempt #122 notes.
- plans/active/cli-phi-parity-shim/plan.md:39-55 — Phase C4 requirements and tolerances.
- plans/active/cli-noise-pix0/plan.md:306-314 — L3k.3c sub-phase checklist (now [P]).
- docs/bugs/verified_c_bugs.md:166-204 — Definition of C-PARITY-001 bug to reproduce.
- src/nanobrag_torch/models/crystal.py:1070-1175 — Current φ rotation + carryover shim implementation.
Next Up: 1) Update docs (`docs/bugs/verified_c_bugs.md`, diagnosis) once VG-1 passes; 2) Proceed to L3k.3d nb-compare ROI analysis with `--phi-carryover-mode c-parity`.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:19:46] bash -lc "cat <<'EOF' > input.md
Summary: Bring the c-parity shim within VG-1 by eliminating the 2.845e-05 residual Δk drift vs the C trace.
Mode: Parity
Focus: CLI-FLAGS-003 — Phase L3k.3c.4 parity shim evidence capture
Branch: feature/spec-based-2
Mapped tests: tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior; tests/test_cli_scaling_phi0.py::TestPhiZeroParity
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_spec*.{log,json}; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_c_parity*.{log,json}; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/c_trace_phi.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/delta_metrics.json; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/pytest_phi*.log; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/sha256.txt
Do Now: CLI-FLAGS-003 Phase L3k.3c.4 — after fixing the φ carryover logic, rerun the parity trace harness for both modes via "'`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode <mode> --out reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/trace_py_<mode>.log` and regenerate the matching `TRACE_C_PHI` log, then recompute `delta_metrics.json`.
If Blocked: Capture failing command + stderr to `<outdir>/attempt_fail.log`, keep the tree untouched, and document the blocker + hypothesis in docs/fix_plan.md Attempt history before stopping.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:309 marks L3k.3c.4 as [P]; VG-1 requires Δk, ΔF_latt_b ≤1e-6/1e-4 before we can advance to documentation and nb-compare phases.
- plans/active/cli-phi-parity-shim/plan.md:47-55 calls for ≤1e-6 parity in c-parity mode; today’s run (20251008T011326Z) still sits at 2.845e-05, so shim logic needs refinement.
- docs/fix_plan.md Attempt #122 records the regression and the missing TRACE_C_PHI instrumentation; resolving both is prerequisite for credible parity evidence.
- docs/bugs/verified_c_bugs.md:166-204 defines the C reference behavior—use it to ensure the optional shim matches the bug without altering the spec-default path.
- specs/spec-a-core.md:211-214 keep the primary contract (identity rotation at φ=0); any fix must leave spec mode untouched while tightening the parity mode.
How-To Map:
- Restore TRACE_C instrumentation if needed: `pushd golden_suite_generator && patch -p1 < ../c_instrumentation.patch && make && popd` (or re-apply the existing TRACE_C_PHI edits manually, then rebuild). Confirm `TRACE_C_PHI` appears before re-running comparisons.
- Prepare outdir: `timestamp=$(date -u +%Y%m%dT%H%M%SZ); outdir=reports/2025-10-cli-flags/phase_l/parity_shim/$timestamp; mkdir -p "$outdir"`.
- Spec run: `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --config supervisor --pixel 685 1039 --dtype float64 --device cpu --phi-mode spec --out "$outdir/trace_py_spec.log"`.
- C-parity run: same command with `--phi-mode c-parity` and output `trace_py_c_parity.log`.
- Copy per-φ JSON/log/env/config into `$outdir` (rename with `_spec` / `_c_parity` suffixes) before the second run overwrites them.
- Fresh C trace: `NB_C_BIN=./golden_suite_generator/nanoBragg ./golden_suite_generator/nanoBragg ... -trace_pixel 685 1039 > "$outdir/c_trace_phi.log" 2>&1` (use the supervisor command arguments exactly as in docs/fix_plan.md).
- Comparisons: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py "$outdir/trace_py_<mode>_per_phi.json" "$outdir/c_trace_phi.log" | tee "$outdir/per_phi_summary_<mode>.txt"` for both modes; follow with a small Python snippet to rebuild `$outdir/delta_metrics.json` capturing max deltas.
- Tests: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v > "$outdir/pytest_phi_carryover.log"` and `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v > "$outdir/pytest_phi0.log"`.
- Hashes: `(cd "$outdir" && shasum -a 256 *.log *.json *.txt > sha256.txt)`.
Pitfalls To Avoid:
- Do not loosen VG-1 tolerances; fixing the shim must hit ≤1e-6 without altering the spec-default branch.
- Keep spec mode untouched; any quick fix that regresses TestPhiZeroParity will be backed out.
- Ensure all tensors stay device/dtype neutral—no hard-coded `.cpu()` / `.double()` calls when adjusting phi rotation.
- Don’t rely on the stale 20251008T005247Z C log; regenerate TRACE_C_PHI so evidence reflects the current binary.
- Avoid deleting or renaming protected assets referenced in docs/index.md (trace harness, reports directories, loop scripts).
- Preserve vectorization inside `Crystal.get_rotated_real_vectors`; no per-φ Python loops to patch the carryover path.
- Re-run only the mapped targeted tests; defer nb-compare until VG-1 tolerances pass.
- Document any shim adjustments with updated CLAUDE Rule #11 citations if you touch the core function.
- Capture both CPU and (if available) CUDA behavior when adding diagnostics; note skips explicitly in logs.
- Keep the worktree clean; log intermediate artifacts under `reports/` rather than leaving temp files elsewhere.
Pointers:
- docs/fix_plan.md:450-574 — CLI-FLAGS-003 context + latest Attempt #122 notes.
- plans/active/cli-phi-parity-shim/plan.md:39-55 — Phase C4 requirements and tolerances.
- plans/active/cli-noise-pix0/plan.md:306-314 — L3k.3c sub-phase checklist (now [P]).
- docs/bugs/verified_c_bugs.md:166-204 — Definition of C-PARITY-001 bug to reproduce.
- src/nanobrag_torch/models/crystal.py:1070-1175 — Current φ rotation + carryover shim implementation.
Next Up: 1) Update docs (`docs/bugs/verified_c_bugs.md`, diagnosis) once VG-1 passes; 2) Proceed to L3k.3d nb-compare ROI analysis with `--phi-carryover-mode c-parity`.
EOF
' succeeded in 880ms:

[2025-10-08T01:19:46] tokens used: 258,440
[2025-10-08T01:19:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:19:50] thinking

**Preparing final commit steps**
[2025-10-08T01:19:52] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-08 (galph loop — L3k.3c.4 parity regression)
- Ran parity trace harness (spec & c-parity) into "'`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`; spec mode still diverges at φ₀ as expected, c-parity plateau remains Δk≈2.845e-05 > 1e-6.
- TRACE_C_PHI logging missing in current golden binary; reused older log to complete comparison. Logged this gap and marked plan row L3k.3c.4 as [P].
- Updated `plans/active/cli-phi-parity-shim/plan.md` + `docs/fix_plan.md` Attempt #122 with metrics and next steps (restore instrumentation, diagnose residual drift).
- Issued new Parity-mode input directing Ralph to tighten shim tolerances and regenerate traces with fresh C instrumentation.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:19:53] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-10-08 (galph loop — L3k.3c.4 parity regression)
- Ran parity trace harness (spec & c-parity) into "'`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`; spec mode still diverges at φ₀ as expected, c-parity plateau remains Δk≈2.845e-05 > 1e-6.
- TRACE_C_PHI logging missing in current golden binary; reused older log to complete comparison. Logged this gap and marked plan row L3k.3c.4 as [P].
- Updated `plans/active/cli-phi-parity-shim/plan.md` + `docs/fix_plan.md` Attempt #122 with metrics and next steps (restore instrumentation, diagnose residual drift).
- Issued new Parity-mode input directing Ralph to tighten shim tolerances and regenerate traces with fresh C instrumentation.
EOF
' succeeded in 715ms:

[2025-10-08T01:19:53] tokens used: 260,723
[2025-10-08T01:19:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:19:56] thinking

**Checking git status**
[2025-10-08T01:19:56] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:19:57] bash -lc 'git status --short' succeeded in 757ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
 M plans/active/cli-phi-parity-shim/plan.md
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_c_parity_per_phi.json
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_c_parity_per_phi.log
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_spec_per_phi.json
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T005247Z/trace_py_spec_per_phi.log
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/comparison_summary.md
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.json
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/trace_py_rot_vector_20251123_per_phi.log
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/comparison_summary.md
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.log
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251207/comparison_summary.md
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251207/trace_py_rot_vector_per_phi.json
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251207/trace_py_rot_vector_per_phi.log
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_per_phi.json
 D reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_per_phi.log
[2025-10-08T01:19:57] tokens used: 261,156
[2025-10-08T01:19:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:08] thinking

**Restoring deleted tracked reports directory**

I noticed several deletions from removing a nested reports directory, which were likely tracked before. To avoid losing important historical data or protected artifacts, I plan to restore the entire per_phi directory by checking it out from git HEAD, ensuring we don't remove anything unintentionally while preserving new files stored elsewhere.
[2025-10-08T01:20:09] exec bash -lc 'git checkout -- reports/2025-10-cli-flags/phase_l/per_phi' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:10] bash -lc 'git checkout -- reports/2025-10-cli-flags/phase_l/per_phi' succeeded in 707ms:

[2025-10-08T01:20:10] tokens used: 262,806
[2025-10-08T01:20:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:14] thinking

**Checking git status again**
[2025-10-08T01:20:14] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:15] bash -lc 'git status --short' succeeded in 744ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
 M plans/active/cli-phi-parity-shim/plan.md
 M reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log
 M reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json
?? reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/
[2025-10-08T01:20:15] tokens used: 263,029
[2025-10-08T01:20:15] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:20] thinking

**Considering file modification management**
[2025-10-08T01:20:21] exec bash -lc 'git checkout -- reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:22] bash -lc 'git checkout -- reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_env.json' succeeded in 689ms:

[2025-10-08T01:20:22] tokens used: 263,432
[2025-10-08T01:20:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:25] thinking

**Checking current status**
[2025-10-08T01:20:26] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:26] bash -lc 'git status --short' succeeded in 719ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
 M plans/active/cli-phi-parity-shim/plan.md
?? reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/
[2025-10-08T01:20:26] tokens used: 263,679
[2025-10-08T01:20:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:31] thinking

**Preparing files for staging**
[2025-10-08T01:20:32] exec bash -lc 'rm reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_phi.bin' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:32] bash -lc 'rm reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_phi.bin' succeeded in 691ms:

[2025-10-08T01:20:32] tokens used: 264,036
[2025-10-08T01:20:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:36] thinking

**Staging modified files**
[2025-10-08T01:20:37] exec bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md plans/active/cli-phi-parity-shim/plan.md reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:38] bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md plans/active/cli-phi-parity-shim/plan.md reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z' succeeded in 711ms:

[2025-10-08T01:20:38] tokens used: 264,317
[2025-10-08T01:20:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:41] thinking

**Checking status**
[2025-10-08T01:20:41] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:42] bash -lc 'git status --short' succeeded in 720ms:
M  docs/fix_plan.md
M  galph_memory.md
M  input.md
M  plans/active/cli-noise-pix0/plan.md
M  plans/active/cli-phi-parity-shim/plan.md
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/comparison_summary.md
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/comparison_summary_c_parity.md
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/comparison_summary_spec.md
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/mosflm_matrix_probe_c_parity.log
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/mosflm_matrix_probe_spec.log
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_c_parity.txt
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_spec.txt
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi0.log
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/sha256.txt
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log
A  reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_config_snapshot.json
[2025-10-08T01:20:42] tokens used: 265,098
[2025-10-08T01:20:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:47] thinking

**Preparing commit with test details**
[2025-10-08T01:20:50] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 parity audit - tests: pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:20:50] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 parity audit - tests: pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity"' succeeded in 725ms:
[feature/spec-based-2 b4fde62] SUPERVISOR: CLI-FLAGS-003 parity audit - tests: pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity
 28 files changed, 1209 insertions(+), 35 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/comparison_summary_c_parity.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/comparison_summary_spec.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/mosflm_matrix_probe_c_parity.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/mosflm_matrix_probe_spec.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_c_parity.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_spec.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi0.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/sha256.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_config_snapshot.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_env.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity_per_phi.log
[2025-10-08T01:20:50] tokens used: 266,310
[2025-10-08T01:20:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:20:58] thinking

**Executing git push command**
[2025-10-08T01:21:00] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:21:02] bash -lc 'git push' succeeded in 2.18s:
To github.com:hoidn/nanoBragg.git
   efbef29..b4fde62  feature/spec-based-2 -> feature/spec-based-2
[2025-10-08T01:21:02] tokens used: 268,283
[2025-10-08T01:21:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:21:09] thinking

**Summarizing key findings and documentation updates**

I'm pulling together a final response covering completed parity traces, reuse of instrumentation logs, updates to plans and input files, removal of the c_phi binary, and referencing modified files with line numbers, all while following instructions for concise single-line references and outlining next steps. I'll look up line numbers to cite plan updates accurately.
[2025-10-08T01:21:11] exec bash -lc "nl -ba plans/active/cli-phi-parity-shim/plan.md | sed -n '40,80p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:21:12] bash -lc "nl -ba plans/active/cli-phi-parity-shim/plan.md | sed -n '40,80p'" succeeded in 739ms:
    40	Exit Criteria: Production code contains opt-in shim, tests/logs stored, fix_plan Attempt logged with metrics.
    41	
    42	| ID | Task Description | State | How/Why & Guidance |
    43	| --- | --- | --- | --- |
    44	| C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
    45	| C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
    46	| C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
    47	| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
    48	| C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
    49	
    50	### Phase D — Documentation & Handoff
    51	Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
    52	Prereqs: Phase C complete, evidence uploaded.
    53	Exit Criteria: Docs refreshed, plan cross-references updated, Next Actions ready for nb-compare rerun.
    54	
    55	| ID | Task Description | State | How/Why & Guidance |
    56	| --- | --- | --- | --- |
    57	| D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
    58	| D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
    59	| D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |
[2025-10-08T01:21:12] tokens used: 268,671
[2025-10-08T01:21:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:21:15] thinking

**Requesting line numbers for plan**
[2025-10-08T01:21:16] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,340p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:21:17] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,340p'" succeeded in 705ms:
   300	| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
   301	| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
   302	
   303	#### L3k.3c Tasks — Restore φ=0 Parity with C Reference
   304	
   305	| ID | Task Description | State | How/Why & Guidance |
   306	| --- | --- | --- | --- |
   307	| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
   308	| L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
   309	| L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
   310	| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
   311	| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
   312	| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
   313	
   314	### Phase L4 — Supervisor Command Parity Rerun
   315	Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
   316	Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
   317	Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
   318	
   319	| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T01:21:17] tokens used: 269,678
[2025-10-08T01:21:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:21:21] thinking

**Referencing specific plan entry**
[2025-10-08T01:21:22] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '540,620p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:21:22] bash -lc "nl -ba docs/fix_plan.md | sed -n '540,620p'" succeeded in 686ms:
   540	  * [2025-10-07] Attempt #119 (ralph loop i=119, Mode: Docs) — Result: ✅ **SUCCESS** (Phase L3k.3c.4 parity shim design COMPLETE). **No code changes.**
   541	    Metrics: Design-only loop (no code/tests modified). Test collection: 2/2 tests discovered in 0.80s (test_rot_b_matches_c, test_k_frac_phi0_matches_c).
   542	    Artifacts:
   543	      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md` — Complete parity shim design note (496 lines, 10 sections): executive summary, C-PARITY-001 background (nanoBragg.c:3044-3066 quoted per CLAUDE Rule #11), opt-in trigger (`--phi-carryover-mode {spec,c-parity}`), batched tensor implementation strategy, validation plan (tests + traces + nb-compare), risk assessment, documentation updates, implementation roadmap
   544	      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/collect_only.log` — pytest collect-only output confirming tests are discoverable
   545	      - `plans/active/cli-phi-parity-shim/plan.md` — Phase B tasks (B1-B3) marked [D] complete with artifact references
   546	    Observations/Hypotheses:
   547	      - **Opt-in API designed**: CLI flag `--phi-carryover-mode` with default="spec" (spec-compliant) and opt-in="c-parity" (C bug reproduction)
   548	      - **Config plumbing**: `CrystalConfig.phi_carryover_mode` field; parser updates in `__main__.py`
   549	      - **Vectorization preserved**: Implementation uses `torch.where` + `torch.cat` for per-step masking (no Python loops); maintains (phi_steps, 3) tensor shapes
   550	      - **Gradient flow**: All operations differentiable (where/cat/unsqueeze); gradcheck tests planned for both modes
   551	      - **Device/dtype neutrality**: Inherits from phi_rad tensor; CPU+CUDA parametrized tests documented
   552	      - **C-code reference**: nanoBragg.c:3040-3066 extracted verbatim per CLAUDE Rule #11
   553	      - **Validation strategy enumerated**: (a) Extended test suite (`TestPhiCarryoverParity`), (b) Per-φ traces (spec vs c-parity vs C), (c) nb-compare with `--py-args "--phi-carryover-mode c-parity"`, (d) VG-3/VG-4 gates (correlation ≥0.9995, sum_ratio 0.99-1.01)
   554	      - **Risk mitigation**: Default is spec-compliant; parity mode opt-in only; comprehensive test coverage to prevent regressions
   555	      - Mode: Docs → implementation deferred to next code-focused loop
   556	    First Divergence: N/A (design document — no parity data yet)
   557	    Next Actions:
   558	      1. ✅ Phase L3k.3c.4 (Phase B of parity shim plan) complete — design approved, ready for implementation
   559	      2. → Phase C of `plans/active/cli-phi-parity-shim/plan.md`: Implement opt-in carryover (C1), wire CLI (C2), add tests (C3), capture traces (C4), log attempt (C5)
[2025-10-08T01:21:22] tokens used: 271,481
[2025-10-08T01:21:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:21:26] thinking

**Locating lines for Attempt #122**
[2025-10-08T01:21:27] exec bash -lc 'rg -n "Attempt #122" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:21:28] bash -lc 'rg -n "Attempt #122" docs/fix_plan.md' succeeded in 707ms:
614:  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
[2025-10-08T01:21:28] tokens used: 273,277
[2025-10-08T01:21:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:21:34] thinking

**Preparing final summary details**
[2025-10-08T01:21:35] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T01:21:36] bash -lc 'git status --short' succeeded in 701ms:

[2025-10-08T01:21:36] tokens used: 273,481
[2025-10-08T01:21:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff


[2025-10-08T01:21:41] thinking

**Summarizing parity findings and next steps**

I'll highlight the parity evidence from re-running per-φ traces showing minor spec divergence, the reuse of an older C log due to missing instrumentation which has been flagged and fixed, and the creation of a new report artifact directory. I'll mention the updated fix_plan and relevant files, note targeted tests executed, and suggest next steps like restoring instrumentation and analyzing residual drift, plus recommending running the test harness after fixes.
[2025-10-08T01:21:42] codex

**Parity Evidence**
- Captured fresh spec vs c-parity traces in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`; c-parity still tops out at Δk≈2.845e-05 while spec shows the expected φ₀ divergence (see `delta_metrics.json`).  
- Logged the shortfall in `plans/active/cli-phi-parity-shim/plan.md:47` and downgraded the parent plan row to [P] (`plans/active/cli-noise-pix0/plan.md:310`) so VG‑1 stays open until ≤1e-6 is achieved with a freshly instrumented C trace.  
- Documented Attempt #122 in `docs/fix_plan.md:614` with residual metrics, instrumentation gap, and follow-up requirements.  
- Updated `input.md` with a new Parity-mode Do Now that directs Ralph to restore TRACE_C_PHI, tighten the shim, and rerun the harness/tests.

**Tests**
- `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_phi_carryover_mode.py::TestPhiCarryoverBehavior -v`
- `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity -v`

**Next Steps**
1. Re-enable TRACE_C_PHI in `golden_suite_generator/nanoBragg` and regenerate the C reference so comparisons no longer rely on archived logs.  
2. Inspect the c-parity φ pipeline (real/reciprocal recomputation, scattering vector path) to drive Δk and ΔF_latt_b down to the ≤1e-6 / ≤1e-4 targets before repeating the harness run.
[2025-10-08T01:21:45] tokens used: 274,746
[2025-10-08T01:21:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 89fc2c7b41dcbadc73c27ecf49e7fdee54dd7bbc..f8095527cc040ca2931c0d7691822d19433d2452
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -611,6 +611,24 @@
       1. ✅ Phase C4 complete — dual-mode traces captured, metrics validated, SHA256 hashes archived
       2. → Phase C5 — Update `docs/bugs/verified_c_bugs.md` and `reports/.../diagnosis.md` with shim availability notes
       3. → Phase D1-D3 — Sync plans/docs, prepare handoff to Phase L3k.3d nb-compare rerun with `--py-args "--phi-carryover-mode c-parity"`
+  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
+    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
+    Artifacts:
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_spec.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/trace_py_c_parity.log` & `_per_phi.json`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/c_trace_phi.log` (copied from 20251008T005247Z; current binary missing TRACE_C_PHI instrumentation)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/per_phi_summary_{spec,c_parity}.txt` — CLI summaries (spec φ₀ diverges; parity still >1e-6)
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/pytest_phi_carryover.log`, `pytest_phi0.log`
+      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/summary.md` — Evidence recap + follow-up actions
+    Observations/Hypotheses:
+      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
+      - Reusing historical C trace avoids missing instrumentation but blocks refreshing Δk after future C fixes; need new TRACE_C_PHI build.
+      - Suspect rounding in reciprocal recomputation or index_select path; requires deeper analysis before Phase C4 can be marked done again.
+    Next Actions:
+      1. Restore TRACE_C_PHI logging in golden_suite_generator/nanoBragg and regenerate fresh C trace aligned with current binary.
+      2. Investigate φ=0 replacement path for numerical drift (check reciprocal recalc, broadcasting precision) to drive Δk ≤ 1e-6.
+      3. Keep `plans/active/cli-phi-parity-shim/plan.md` C4 in [P] state; update parity shim design/diagnosis docs once fix identified.
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index d26eab8e87dcbae789e794a335102ebca12ab1af..ac399b888a143059a69e1315861bb47748f7f171
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,7 +307,7 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [D] | ✅ Design + implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). Remaining work for this sub-phase is evidence capture (Phase C4). |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [P] | Implementation landed (see `plans/active/cli-phi-parity-shim/plan.md` Phase C1–C3, docs/fix_plan.md Attempt #120). 2025-10-08 evidence run (`parity_shim/20251008T011326Z`) shows shim still drifting (Δk≈2.845e-05 > 1e-6); keep Phase C4 open until parity tolerances are met and fresh TRACE_C_PHI logs are captured. |
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: refresh `diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and fix_checklists to document the opt-in shim; archive collect-only evidence for both spec/parity selectors. (Parity-mode tests already live in `tests/test_phi_carryover_mode.py`; keep them green.) |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index 90d71c96dd0a8911252875dfa7bea2453289b8d3..7920ebad4859e1c6f9023384b85a415ddaae7200
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -44,7 +44,7 @@
 | C1 | Implement opt-in carryover | [D] | ✅ `src/nanobrag_torch/models/crystal.py:1084-1128` implements the batched φ=0 replacement via `torch.index_select`, preserving gradients and citing `nanoBragg.c:3044-3058` per CLAUDE Rule #11 (Attempt #120). |
 | C2 | Update CLI / configs | [D] | ✅ CLI flag `--phi-carryover-mode {spec,c-parity}` and `CrystalConfig.phi_carryover_mode` field landed (`src/nanobrag_torch/__main__.py:377-386`, `config.py:154-171`); validation rejects invalid modes (Attempt #120). |
 | C3 | Add regression & parity tests | [D] | ✅ `tests/test_phi_carryover_mode.py` exercises parsing, config wiring, and device/dtype behavior for both modes; `tests/test_cli_scaling_phi0.py` still enforces spec baselines (documented in docs/fix_plan.md Attempt #120). |
-| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
+| C4 | Capture per-φ traces | [P] | 2025-10-08T01:13Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/`. Spec vs C confirms φ=0 drift (Δk=1.8116e-02), but parity mode still plateaus at Δk≈2.845e-05 (>1e-6 target). Reused prior `c_trace_phi.log` because current instrumented binary omits `TRACE_C_PHI`; need fresh C trace once logging restored before marking done. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
 ### Phase D — Documentation & Handoff

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   b4fde62..19b6b8e  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=125...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=125
Updating 19b6b8e..fcaf9ff
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   19b6b8e..fcaf9ff  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=125
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating fcaf9ff..61fd718
Fast-forward
 debug_trace.py                                     |  21 +
 .../parity_shim/20251008T012304Z/c_trace_phi.log   | 651 +++++++++++++++++++++
 .../20251008T012304Z/comparison_summary.md         |  49 ++
 .../20251008T012304Z/delta_metrics.json            |  50 ++
 .../20251008T012304Z/per_phi_summary_c_parity.txt  |  44 ++
 .../20251008T012304Z/per_phi_summary_spec.txt      |  44 ++
 .../parity_shim/20251008T012304Z/pytest_phi0.log   |  11 +
 .../20251008T012304Z/pytest_phi_carryover.log      |  21 +
 .../parity_shim/20251008T012304Z/sha256.txt        |  12 +
 .../20251008T012304Z/trace_py_c_parity.log         |  43 ++
 .../trace_py_c_parity_per_phi.json                 |  82 +++
 .../20251008T012304Z/trace_py_c_parity_per_phi.log |  10 +
 .../parity_shim/20251008T012304Z/trace_py_spec.log |  43 ++
 .../20251008T012304Z/trace_py_spec_per_phi.json    |  82 +++
 .../20251008T012304Z/trace_py_spec_per_phi.log     |  10 +
 .../phase_l/per_phi/trace_py_c_parity_per_phi.json |  82 +++
 .../phase_l/per_phi/trace_py_c_parity_per_phi.log  |  10 +
 .../phase_l/per_phi/trace_py_spec_per_phi.json     |  82 +++
 .../phase_l/per_phi/trace_py_spec_per_phi.log      |  10 +
 .../phase_l/rot_vector/trace_py_env.json           |   4 +-
 20 files changed, 1359 insertions(+), 2 deletions(-)
 create mode 100644 debug_trace.py
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/c_trace_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/delta_metrics.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/per_phi_summary_c_parity.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/per_phi_summary_spec.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/pytest_phi0.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/pytest_phi_carryover.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/sha256.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/trace_py_c_parity.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/trace_py_c_parity_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/trace_py_c_parity_per_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/trace_py_spec.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/trace_py_spec_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T012304Z/trace_py_spec_per_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_c_parity_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_c_parity_per_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_spec_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/trace_py_spec_per_phi.log
From github.com:hoidn/nanoBragg
   fcaf9ff..61fd718  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 61fd718..53879a5
Fast-forward
 docs/fix_plan.md                                   |  23 ++
 .../parity_shim/20251008T013345Z/c_parity_run.log  |  17 +
 .../parity_shim/20251008T013345Z/c_trace_phi.log   | 342 +++++++++++++++++++++
 .../20251008T013345Z/comparison_summary.md         |  30 ++
 .../20251008T013345Z/delta_metrics.json            |  29 ++
 .../20251008T013345Z/per_phi_summary_c_parity.txt  |  30 ++
 .../20251008T013345Z/per_phi_summary_spec.txt      |  44 +++
 .../parity_shim/20251008T013345Z/pytest_phi0.log   |  11 +
 .../20251008T013345Z/pytest_phi_carryover.log      |  21 ++
 .../parity_shim/20251008T013345Z/sha256.txt        |  12 +
 .../parity_shim/20251008T013345Z/spec_run.log      |  17 +
 .../parity_shim/20251008T013345Z/summary.md        | 107 +++++++
 .../20251008T013345Z/trace_py_c_parity.log         |  43 +++
 .../trace_py_c_parity_per_phi.json                 |  82 +++++
 .../parity_shim/20251008T013345Z/trace_py_spec.log |  43 +++
 .../20251008T013345Z/trace_py_spec_per_phi.json    |  82 +++++
 .../trace_py_c_parity_per_phi.json                 |  82 +++++
 .../20251008T013345Z/trace_py_c_parity_per_phi.log |  10 +
 .../20251008T013345Z/trace_py_spec_per_phi.json    |  82 +++++
 .../20251008T013345Z/trace_py_spec_per_phi.log     |  10 +
 .../phase_l/rot_vector/trace_py_env.json           |   4 +-
 21 files changed, 1119 insertions(+), 2 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/c_parity_run.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/c_trace_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/delta_metrics.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/per_phi_summary_c_parity.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/per_phi_summary_spec.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/pytest_phi0.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/pytest_phi_carryover.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/sha256.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/spec_run.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_c_parity.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_c_parity_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_spec.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_spec_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_c_parity_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_c_parity_per_phi.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_spec_per_phi.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/parity_shim/20251008T013345Z/trace_py_spec_per_phi.log
From github.com:hoidn/nanoBragg
   61fd718..53879a5  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 53879a5..a1eca49
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   53879a5..a1eca49  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=126
Ralph completed iteration 125; proceeding to 126
