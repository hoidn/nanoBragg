Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=116
To github.com:hoidn/nanoBragg.git
   38814c6..b9b3045  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T22:24:16] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T22:24:16] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T22:24:19] thinking

**Preparing to run git pull command**
[2025-10-07T22:24:20] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:22] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.53s:
Already up to date.
[2025-10-07T22:24:22] tokens used: 14,101

[2025-10-07T22:24:24] thinking

**Preparing to read galph_memory.md**
[2025-10-07T22:24:24] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:25] bash -lc 'cat galph_memory.md' succeeded in 672ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T22:24:25] tokens used: 14,228

[2025-10-07T22:24:29] thinking

**Preparing to review key documentation**
[2025-10-07T22:24:29] exec bash -lc 'wc -l docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:30] bash -lc 'wc -l docs/index.md' succeeded in 697ms:
      90 docs/index.md
[2025-10-07T22:24:30] tokens used: 17,419

[2025-10-07T22:24:31] thinking

**Preparing to view file contents**
[2025-10-07T22:24:31] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:32] bash -lc 'cat docs/index.md' succeeded in 707ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T22:24:32] tokens used: 17,661

[2025-10-07T22:24:33] thinking

**Checking specs/spec-a.md size**
[2025-10-07T22:24:34] exec bash -lc 'wc -l specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:34] bash -lc 'wc -l specs/spec-a.md' succeeded in 684ms:
       9 specs/spec-a.md
[2025-10-07T22:24:34] tokens used: 19,364

[2025-10-07T22:24:36] thinking

**Observing brief input**
[2025-10-07T22:24:36] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:37] bash -lc 'cat specs/spec-a.md' succeeded in 700ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T22:24:37] tokens used: 38,449

[2025-10-07T22:24:38] thinking

**Evaluating documentation needs**
[2025-10-07T22:24:39] exec bash -lc 'wc -l arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:39] bash -lc 'wc -l arch.md' succeeded in 664ms:
     416 arch.md
[2025-10-07T22:24:39] tokens used: 38,796

[2025-10-07T22:24:42] thinking

**Deciding how to read large file**
[2025-10-07T22:24:42] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:43] bash -lc 'cat arch.md' succeeded in 663ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T22:24:43] tokens used: 39,073

[2025-10-07T22:24:46] thinking

**Handling truncated command output**
[2025-10-07T22:24:47] exec bash -lc "sed -n '200,416p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:47] bash -lc "sed -n '200,416p' arch.md" succeeded in 654ms:
```

## 6) Execution Flow (pseudocode)

1. Parse CLI and headers [IMPLEMENTED], resolve precedence; build CrystalConfig, DetectorConfig, BeamConfig.
2. Instantiate Detector (meters) and Crystal (Å). Optionally load HKL or Fdump.
3. Compute `pix0_vector` per pivot and convention; compute basis rotations; cache pixel coords in meters, convert to Å for physics.
4. Build sampling sets: phi (phi_steps), mosaic (mosaic_domains), sources (divergence/dispersion), subpixels (oversample^2), thickness steps.
5. For each pixel/subpixel/thickness/source/phi/mosaic:
   - pos = D0 + Fdet·f + Sdet·s (+ Odet·o if thick); d = unit(pos); R=|pos|; Ω = pixel^2/R^2·(close_distance/R) or 1/R^2 if point-pixel.
   - i = −source_dir; λ from source; q = (d−i)/λ; stol=0.5·|q|; cull if dmin>0 and stol>0 and dmin>0.5/stol.
   - Rotate (a,b,c) by phi about spindle; apply mosaic rotation; compute h=a·q, k=b·q, l=c·q.
   - h0,k0,l0 = ceil(x−0.5) (nearest int); F_latt via selected lattice model.
   - F_cell via tricubic (if enabled and in-bounds) else nearest or default_F per spec fallback.
   - Polarization per Kahn model unless -nopolar.
   - Accumulate I_term = (F_cell^2)·(F_latt^2) with oversample_* caveats (last-value vs per-term multiply).
6. Final scaling per pixel: S = r_e^2 · fluence · I / steps; if oversample_* toggles are off, multiply S once by the last computed capture/polarization/Ω per spec. Add background I_bg if enabled. Write outputs.

## 7) Geometry Model & Conventions

[2025-10-07T22:24:47] tokens used: 41,970

[2025-10-07T22:24:49] thinking

**Preparing to review config map documentation**
[2025-10-07T22:24:50] exec bash -lc 'wc -l docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:50] bash -lc 'wc -l docs/development/c_to_pytorch_config_map.md' succeeded in 657ms:
      75 docs/development/c_to_pytorch_config_map.md
[2025-10-07T22:24:50] tokens used: 45,036

[2025-10-07T22:24:52] thinking

**Noticing a brief note**
[2025-10-07T22:24:53] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:53] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 707ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T22:24:53] tokens used: 45,293

[2025-10-07T22:24:55] thinking

**Opening debugging documentation**
[2025-10-07T22:24:56] exec bash -lc 'wc -l docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:56] bash -lc 'wc -l docs/debugging/debugging.md' succeeded in 709ms:
     275 docs/debugging/debugging.md
[2025-10-07T22:24:56] tokens used: 72,425

[2025-10-07T22:24:58] thinking

**Preparing to read relevant sections**
[2025-10-07T22:24:59] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:24:59] bash -lc 'cat docs/debugging/debugging.md' succeeded in 683ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T22:24:59] tokens used: 72,643

[2025-10-07T22:25:01] thinking

**Checking length of fix_plan.md**
[2025-10-07T22:25:02] exec bash -lc 'wc -l docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:02] bash -lc 'wc -l docs/fix_plan.md' succeeded in 697ms:
    2509 docs/fix_plan.md
[2025-10-07T22:25:02] tokens used: 77,017

[2025-10-07T22:25:07] thinking

**Preparing to analyze large file**

I’m dealing with a very large file, so I’ll focus on pulling out relevant sections related to the task instead of reading everything. I plan to use tools like `head` and `ripgrep` to find references to important item IDs, and I’ll review the required documentation on testing strategy first to get important context.
[2025-10-07T22:25:09] exec bash -lc 'wc -l docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:09] bash -lc 'wc -l docs/development/testing_strategy.md' succeeded in 668ms:
     467 docs/development/testing_strategy.md
[2025-10-07T22:25:09] tokens used: 106,786

[2025-10-07T22:25:11] thinking

**Reading initial file segment**
[2025-10-07T22:25:13] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:14] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 735ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T22:25:14] tokens used: 106,977

[2025-10-07T22:25:16] thinking

**Preparing for deep codebase analysis**
[2025-10-07T22:25:17] exec bash -lc 'rg "nonoise" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:17] bash -lc 'rg "nonoise" -n docs/fix_plan.md' succeeded in 683ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
457:  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
458:  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
1413:      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
1414:      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
1418:      - `-nonoise` suppresses noise parameters section AND noise image generation (noiseimage.img not written)
1419:      - Float/int/PGM images still generated when -nonoise is active
1440:      - ✅ -nonoise suppresses noisefile generation (suppress_noise=True)
1441:      - ✅ -nonoise doesn't mutate adc default (40.0) or seed handling
1442:      - ✅ -noisefile without -nonoise enables noise generation (suppress_noise=False)
1443:      - ✅ -nonoise valid without -noisefile (no-op but accepted)
1495:      - `-nonoise` flag successfully suppressed noise file generation in both implementations
2395:  * C: `"$NB_C_BIN" -mat A.mat -floatfile c_abs.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 2 -oversample_thick -detector_abs 320 -detector_thick 500 -detector_thicksteps 5 -distance 231.274660 -lambda 0.9768 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527` (restrict ROI in plan to keep runtime manageable).
2416:  * C: `"$NB_C_BIN" -mat A.mat -floatfile c_weight.bin -sourcefile reports/2025-11-source-weights/fixtures/two_sources.txt -distance 231.274660 -lambda 0.9768 -pixel 0.172 -detpixels_x 256 -detpixels_y 256 -nonoise -nointerpolate`.
[2025-10-07T22:25:17] tokens used: 109,926

[2025-10-07T22:25:21] thinking

**Inspecting CLI-FLAGS-003 section**
[2025-10-07T22:25:23] exec bash -lc "sed -n '420,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:23] bash -lc "sed -n '420,520p' docs/fix_plan.md" succeeded in 685ms:
    ```python
    import tempfile
    from pathlib import Path
    import torch
    from nanobrag_torch.__main__ import create_parser, parse_and_validate_args

    with tempfile.TemporaryDirectory() as tmp:
        hkl = Path(tmp) / "dtype_precision.hkl"
        hkl.write_text("0 0 0 1.23456789012345\n")
        parser = create_parser()
        args = parser.parse_args([
            "-hkl", str(hkl),
            "-cell", "100", "100", "100", "90", "90", "90",
            "-default_F", "0",
            "-dtype", "float64"
        ])
        config = parse_and_validate_args(args)
        grid, _ = config['hkl_data']
        print(grid.dtype)  # BUG: prints torch.float32 today
    ```
[2025-10-07T22:25:23] tokens used: 110,746

[2025-10-07T22:25:28] thinking

**Reviewing long-term goals and CLI plan**

I'll focus on understanding the main goals around supporting CLI flags, parallel testing, fixing the phi 0 bug, and vectorization. Checking the detailed plan for CLI noise and pix0 will help me align with the roadmap. Let's explore that plan file closely to get specifics.
[2025-10-07T22:25:30] exec bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:31] bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' succeeded in 726ms:
     321 plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:25:31] tokens used: 112,428

[2025-10-07T22:25:33] thinking

**Reviewing relevant sections**
[2025-10-07T22:25:34] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:35] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 774ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-07T22:25:35] tokens used: 112,690

[2025-10-07T22:25:36] thinking

**Consulting vectorization plan**
[2025-10-07T22:25:37] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:38] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 762ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-27): Phases A–C complete with gather vectorization merged (commit 12742e5). Polynomial helpers still scalar; detector absorption remains looped. Phase D is the active gate before parity/perf validation (Phase E) and absorption work (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-07T22:25:38] tokens used: 115,728

[2025-10-07T22:25:43] thinking

**Preparing for deep codebase analysis**
[2025-10-07T22:25:43] exec bash -lc 'rg "phi" -n docs/bugs/verified_c_bugs.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:44] bash -lc 'rg "phi" -n docs/bugs/verified_c_bugs.md' succeeded in 760ms:
167:**Summary:** Inside the φ loop, the rotated vectors `ap/bp/cp` are only updated when `phi != 0.0`; otherwise, they retain the previous state (often from the prior pixel’s final φ step). This produces step-0 Miller fractions that mirror the previous pixel rather than the unrotated lattice.
173:  -phi 0 -osc 0.09 -phisteps 10 -trace_pixel 0 0 \
174:  -floatfile /tmp/phi_float.bin -intfile /tmp/phi_int.img -noisefile /tmp/phi_noise.img \
180:- `golden_suite_generator/nanoBragg.c:3042-3059` — rotation only applied when `phi != 0.0`; no reset path exists.
203:4. Reset `ap/bp/cp` when `phi == 0.0` so the first φ slice uses the unrotated lattice.
[2025-10-07T22:25:44] tokens used: 118,611

[2025-10-07T22:25:46] thinking

**Opening relevant section**
[2025-10-07T22:25:47] exec bash -lc "sed -n '140,220p' docs/bugs/verified_c_bugs.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:48] bash -lc "sed -n '140,220p' docs/bugs/verified_c_bugs.md" succeeded in 702ms:
### C-DESIGN-FLAW-005 — Silent HKL Cache (`Fdump.bin`) Reuse (Medium)
**Summary:** When `-hkl` is omitted, the simulator silently loads `Fdump.bin` from the working directory, reusing cached structure factors without informing the user.

**Reproduction:**
```bash
# First run: generates Fdump.bin
./golden_suite_generator/nanoBragg -cell 70 70 70 90 90 90 \
  -hkl docs/bugs/artifacts/test_small.hkl -N 0 \
  -distance 100 -detpixels 2 -pixel 0.1 \
  -floatfile /tmp/cache_float.bin -intfile /tmp/cache_int.img -noisefile /tmp/cache_noise.img \
  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-with-hkl.txt

# Second run: no -hkl, automatically reads the cache
./golden_suite_generator/nanoBragg -cell 70 70 70 90 90 90 -N 0 \
  -distance 100 -detpixels 2 -pixel 0.1 \
  -floatfile /tmp/cache2_float.bin -intfile /tmp/cache2_int.img -noisefile /tmp/cache2_noise.img \
  -nopgm -nonoise -noprogress > docs/bugs/artifacts/design-flaw-005-no-hkl.txt
```
The follow-up log contains `reading Fs from Fdump.bin`, demonstrating the implicit dependency.

[2025-10-07T22:25:48] tokens used: 132,427

[2025-10-07T22:25:51] thinking

**Searching for "phi" in specifications**
[2025-10-07T22:25:52] exec bash -lc 'rg "phi" -n specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:52] bash -lc 'rg "phi" -n specs/spec-a-core.md' succeeded in 682ms:
211:                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
248:    - Define steps = (number of sources) · (number of mosaic domains) · (phisteps) · (oversample^2).
414:        - Steps = (#accepted divergence points) × dispsteps × mosaic_domains × phisteps ×
507:    - For each of horizontal divergence, vertical divergence, spectral dispersion, phi, and detector thickness sampling, missing combinations of count/range/step SHALL be resolved per the rules in “Sources, Divergence & Dispersion” and “Sampling & Accumulation”, resulting in:
575:    - Setup: sources=1; mosaic_domains=1; oversample=1; phisteps=2 with identical physics across steps (e.g., zero mosaic and symmetric phi so F_cell and F_latt identical); disable thickness/polar/omega oversample toggles.
[2025-10-07T22:25:52] tokens used: 134,057

[2025-10-07T22:25:54] thinking

**Extending view to capture details**
[2025-10-07T22:25:54] exec bash -lc "sed -n '200,240p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:55] bash -lc "sed -n '200,240p' specs/spec-a-core.md" succeeded in 668ms:
            - For each source:
                - Incident unit vector i = −source_dir (unitized); wavelength λ from source.
                - q = (d − i) / λ (m^-1). stol = 0.5·||q||.
                - If dmin > 0 and stol > 0 and dmin > 0.5/stol: skip this subpath.
                - Polarization factor (if enabled; Kahn model):
                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
the Kahn factor from -polar.
                - Crystal orientation:
                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
about u by φ to get (ap,bp,cp).
                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
(a,b,c).
                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
                - Lattice factor F_latt:
                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
where
[2025-10-07T22:25:55] tokens used: 146,764

[2025-10-07T22:25:58] thinking

**Verifying rotation logic in specs**
[2025-10-07T22:25:58] exec bash -lc 'rg "carryover" -n specs' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:25:59] bash -lc 'rg "carryover" -n specs' exited 1 in 692ms:

[2025-10-07T22:25:59] tokens used: 147,926

[2025-10-07T22:26:06] thinking

**Analyzing project goals and outstanding issues**
[2025-10-07T22:26:07] exec bash -lc 'head -n 120 docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:26:07] bash -lc 'head -n 120 docs/fix_plan.md' succeeded in 677ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T22:26:07] tokens used: 148,448

[2025-10-07T22:26:11] thinking

**Assessing long-term task priorities**
[2025-10-07T22:26:12] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:26:13] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 750ms:
tails
[2025-10-07T22:26:13] tokens used: 150,319

[2025-10-07T22:26:16] thinking

**Assessing multi-turn planning need**
[2025-10-07T22:26:17] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:26:18] bash -lc 'ls plans/active' succeeded in 717ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T22:26:18] tokens used: 150,557

[2025-10-07T22:26:27] thinking

**Evaluating phi 0 bug plan alignment**

I’m figuring out whether the existing CLI plan adequately addresses the phi 0 bug spec alignment or if a new specialized plan is needed. I want to verify the instructions for Ralph, ensure no outdated tasks conflict with long-term goals, and decide if the focus should be on reviewing, planning, or other action types. Checking the fix_plan.md in detail will help me confirm if updates or clearer directives are necessary.
[2025-10-07T22:26:29] exec bash -lc "sed -n '520,720p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:26:30] bash -lc "sed -n '520,720p' docs/fix_plan.md" succeeded in 1.08s:
      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
      4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
  * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
    Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
    Artifacts:
      - `src/nanobrag_torch/models/crystal.py:1008-1035` — Fixed φ rotation implementation (Step 1: rotate only real vectors; Step 2: recompute reciprocal via cross products and V_actual)
      - `src/nanobrag_torch/models/crystal.py:1010-1013` — Added C-code reference comment (nanoBragg.c:3056-3058)
      - Test results: tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c PASSED (5.79s)
      - Test results: 57 crystal/geometry tests PASSED (test_at_geo*.py, test_crystal_geometry.py, test_at_crystal_absolute.py)
      - Collection: 653 tests collected successfully
  * [2025-10-07] Attempt #98 (ralph loop i=107, Mode: Parity/Evidence) — Result: **EVIDENCE CAPTURED** (Phase L3k.3c.2 φ=0 carryover evidence collection COMPLETE). **BLOCKED** awaiting C trace generation (Phase L3k.3b).
    Metrics: Evidence-only loop (no tests executed; pytest collection: 655 tests collected successfully).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log` — PyTorch φ=0 state probe (SHA256: ef946e94..., b_base_y=0.7173197865486145, rot_b_phi0_y=0.7173197865486145, rot_b_phi1_y=0.7122385501861572, k_frac_placeholder=980.31396484375)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json` — Status: BLOCKED (C trace missing)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/phi0_state_analysis.md` — Detailed analysis with interpretation
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/commands.txt` — Reproduction commands
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/sha256.txt` — Cryptographic hashes
      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` — Updated with dated Phase L3k.3c.2 section, proposed vectorized remediation, references to C semantics (nanoBragg.c:3040)
    Observations/Hypotheses:
[2025-10-07T22:26:30] tokens used: 151,361

[2025-10-07T22:26:43] thinking

**Evaluating need for updated plan**
[2025-10-07T22:26:44] exec bash -lc 'rg "carryover" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:26:45] bash -lc 'rg "carryover" -n plans/active/cli-noise-pix0/plan.md' succeeded in 914ms:
5:- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
6:- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
298:| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Regression alert:** Attempt #102 rewrote `tests/test_cli_scaling_phi0.py` to treat the PyTorch base-vector output as canonical, masking the failing VG-1 gate. Attempt #103 restored the C-aligned assertions; keep them red until VG-1 passes. With the C trace refreshed (L3k.3b), implement the carryover fix, rerun the per-φ harness, ensure k_frac span ≤1e-6 and rot_b_y relative error ≤1e-6, and update `comparison_summary.md` plus `per_phi_postfix/` artifacts before flipping VG-1 rows to ✅. |
308:| L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
309:| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
[2025-10-07T22:26:45] tokens used: 156,027

[2025-10-07T22:26:55] thinking

**Clarifying plan contradictions and updating phases**

I’m noticing a contradiction between the plan’s bug emulation step and the long-term goal to eliminate that bug, so I’m preparing to update the plan structure to clearly separate parity (bug replication) from the final spec-compliant fix, following the required phased doc style. To do this properly, I’ll review and list relevant docs to reference before revising the plan.
[2025-10-07T22:26:58] exec bash -lc 'rg "pix0" -n docs/architecture/detector.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:26:58] bash -lc 'rg "pix0" -n docs/architecture/detector.md' succeeded in 704ms:
35:## 5. Logic Flow: `pix0_vector` Calculation
37:The calculation of the detector's origin vector (`pix0_vector`) depends on the `detector_pivot` mode:
42:    B -- BEAM --> C["Calculate pix0_vector using BEAM formula<br/>(pivots around beam spot on detector)"];
43:    B -- SAMPLE --> D["Calculate pix0_vector using SAMPLE formula<br/>(pivots around sample position)"];
44:    C --> E[pix0_vector = -Fbeam*fdet - Sbeam*sdet + distance*beam_vec];
45:    D --> F[pix0_vector = detector_origin + pixel_offsets];
53:pix0_vector = -Fbeam * fdet_vec - Sbeam * sdet_vec + distance * beam_vector
64:pix0_vector = detector_origin + s_offset * sdet_vec + f_offset * fdet_vec
86:- `pix0_vector` changes
209:2. **Pixel Coordinate Consistency:** Check `pixel[0,0] == pix0_vector`
[2025-10-07T22:26:58] tokens used: 157,946

[2025-10-07T22:27:00] thinking

**Considering reading relevant parts**
[2025-10-07T22:27:01] exec bash -lc "sed -n '30,120p' docs/architecture/detector.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:27:02] bash -lc "sed -n '30,120p' docs/architecture/detector.md" succeeded in 698ms:

## 4. Rotation Order and Transformations (pointer)

Rotation order and axis selection are specified in the spec/arch. This component follows those contracts without deviation.

## 5. Logic Flow: `pix0_vector` Calculation

The calculation of the detector's origin vector (`pix0_vector`) depends on the `detector_pivot` mode:

```mermaid
graph TD
    A[Start: Calculate Rotated Basis Vectors] --> B{Detector Pivot Mode?};
    B -- BEAM --> C["Calculate pix0_vector using BEAM formula<br/>(pivots around beam spot on detector)"];
    B -- SAMPLE --> D["Calculate pix0_vector using SAMPLE formula<br/>(pivots around sample position)"];
    C --> E[pix0_vector = -Fbeam*fdet - Sbeam*sdet + distance*beam_vec];
    D --> F[pix0_vector = detector_origin + pixel_offsets];
    E --> G[Final Detector Geometry];
    F --> G;
```

[2025-10-07T22:27:02] tokens used: 158,397

[2025-10-07T22:27:14] thinking

**Organizing plan updates and documentation references**

I’m mapping out the documentation needed to support planned changes, focusing on clarifying spec compliance versus parity shim tasks. I want to carefully restructure the plan with new subtasks reflecting spec-aligned behavior and an optional parity mode, ensuring the plan’s task lists and tables remain consistent while preparing to edit the detailed section.
[2025-10-07T22:27:16] exec bash -lc "sed -n '260,350p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:27:17] bash -lc "sed -n '260,350p' plans/active/cli-noise-pix0/plan.md" succeeded in 744ms:

### Phase L3 — Normalization Fix Implementation
Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L3a | Verify structure-factor coverage for supervisor pixel | [D] | ✅ 2025-11-17 Attempt #77: `reports/2025-10-cli-flags/phase_l/structure_factor/probe.py` recorded `probe_20251117.log` showing scaled.hkl returns `F_cell=190.270004` for hkl=(-7,-1,-14). Keep the log + timestamped copies alongside a brief summary in `analysis.md`, then proceed to L3c to thread the same attachment pattern through the harness/CLI path. |
| L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
| L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
| L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
| L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
| L3g | Fractional Miller alignment plan | [D] | ✅ 2025-10-07 Attempt #91: Instrumented simulator.py:1313-1322 to emit `spindle_axis_raw/normalized/magnitude`, reran φ=0 trace (43 TRACE_PY lines), confirmed Δ(magnitude)=0.0 (tolerance ≤5e-4). H1 **RULED OUT**: spindle is exact unit vector [-1,0,0], normalization is no-op. H3 (MOSFLM matrix semantics) promoted to primary suspect. Artifacts: `rot_vector/spindle_audit.log`, `analysis.md` (updated with H3 ranking). |
| L3h | MOSFLM matrix probe & diff | [D] | ✅ Attempt #92 (2025-10-07, ralph evidence loop i=92): Created `trace_harness.py` in rot_vector/, captured 12 MOSFLM probe lines (post-misset reciprocals, reconstructed reals, re-derived reciprocals), proved V_formula ≈ V_actual (Δ=1.5e-11 Å³), **ruled out Hypothesis H2**. Reciprocal re-derivation exact to 15 digits. Artifacts: `mosflm_matrix_probe.md` (primary doc), `mosflm_matrix_probe_output.log`, `trace_harness.py`, `harness_run.log`. pytest: 579 tests collected. Next: Phase L3i C instrumentation to complete C vs PyTorch diff. |
| L3i | C instrumentation & diff | [D] | ✅ Attempt #93 (2025-10-07, ralph loop i=93): Captured full C MOSFLM pipeline trace (291 lines) via instrumented `golden_suite_generator/nanoBragg.c:2050-2199`, executed supervisor command, performed component-level diff. **H3 (MOSFLM transpose) RULED OUT** — real-space b_Y matches to O(1e-7) Å. Artifacts: `c_trace_mosflm.log`, `c_trace_extract.txt`, `mosflm_matrix_diff.md`, `analysis.md` (updated with H5-H7 hypotheses). pytest: 652 tests collected. Next: L3j fix checklist focusing on H5 (phi rotation) verification. |
| L3j.1 | Refresh correction memo | [D] | ✅ 2025-10-07 Attempt #94 (ralph, documentation loop): Extended `mosflm_matrix_correction.md` with "Post-L3i Findings" section citing H3 ruling (b_Y matches C at φ=0 to 1.35e-07 Å), promoted H5 (φ rotation application) as primary suspect, documented quantitative deltas (b_Y +6.8%, k_frac Δ≈0.018, I_ratio 0.755), and spelled out φ samples (0°, 0.05°, 0.1°) with supervisor command context. Artifact: `mosflm_matrix_correction.md` lines 57-208. |
| L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
| L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-11-21 Attempt #96: Updated `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #96 entry documenting Phase L3k.1 completion (implementation memo), artifact paths, root cause analysis, proposed fix strategy, and next actions for code implementation loop. Documented Mode: Docs constraint (no code changes this loop). Updated this plan to mark L3k.1 complete. pytest --collect-only deferred to implementation loop. |
[2025-10-07T22:27:17] tokens used: 160,590

[2025-10-07T22:27:33] thinking

**Planning updates to L3k.3c tasks**

I'm reorganizing the L3k.3c subtasks to emphasize spec-compliant φ rotation, replacing the carryover emulation, and adding new entries for a parity shim and related testing. I'll carefully edit the task table rows and descriptions to keep formatting and states consistent, then plan a patch to apply these changes.
[2025-10-07T22:27:44] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -308,3 +308,5 @@
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
[2025-10-07T22:27:44] apply_patch(auto_approved=true) exited 0 in 17ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:27:44] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T22:27:44] tokens used: 163,775
[2025-10-07T22:27:44] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T22:27:50] thinking

**Updating fix_plan.md to match new tasks**
[2025-10-07T22:27:51] exec bash -lc "sed -n '440,520p' docs/fix_plan.md'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:27:52] bash -lc "sed -n '440,520p' docs/fix_plan.md'" exited 2 in 911ms:
bash: -c: line 1: unexpected EOF while looking for matching `''
[2025-10-07T22:27:52] tokens used: 165,459
[2025-10-07T22:27:52] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T22:27:54] thinking

**Correcting quoting error**
[2025-10-07T22:27:55] exec bash -lc "sed -n '440,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:27:56] bash -lc "sed -n '440,520p' docs/fix_plan.md" succeeded in 727ms:
    `PY`
- First Divergence (if known): `parse_and_validate_args` (src/nanobrag_torch/__main__.py:435) calls `read_hkl_file`/`try_load_hkl_or_fdump` without forwarding the parsed dtype, so HKL/Fdump data is always loaded as float32. When the CLI is run with `-dtype float64`, the simulator converts those float32 tensors to float64 later, permanently losing precision relative to the requested double-precision path and violating the DTYPE-DEFAULT-001 guarantee.
- Immediate Next Actions (2025-10-15):
  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
- Attempts History: None — new item.
- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.

## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
[2025-10-07T22:27:56] tokens used: 165,732
[2025-10-07T22:27:56] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T22:28:00] thinking

**Updating Next Actions bullets**
[2025-10-07T22:28:06] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -459,7 +459,7 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
[2025-10-07T22:28:06] apply_patch(auto_approved=true) exited 0 in 27ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T22:28:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T22:28:06] tokens used: 168,575
[2025-10-07T22:28:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T22:28:15] thinking

**Finalizing plan details and preparing input.md**

I’m making sure the plan’s bullet numbering is consistent and considering whether to mention new tasks in the attempt history, but probably not. I’ve updated the plan and fix_plan to include relevant docs references as per Step 3.2, although a documented list might appear later in the final output to satisfy the instruction. Now I’m choosing the Mode flag for this iteration—“Parity” seems most suitable because tasks focus on parity fixes and spec compliance. Before writing `input.md` in Step 3.5, I’ll double-check the current branch and plan to gather any needed snippets or test info.
[2025-10-07T22:28:18] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:28:19] bash -lc 'git status --short' succeeded in 979ms:
 M docs/fix_plan.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:28:19] tokens used: 170,634
[2025-10-07T22:28:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T22:28:25] thinking

**Preparing instructions and test strategy**

I’m outlining detailed steps for the φ rotation spec implementation, planning to include targeted tests and environment setup. I’ll also check the current git branch to document it properly in the input.md header.
[2025-10-07T22:28:26] exec bash -lc 'git branch --show-current' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:28:27] bash -lc 'git branch --show-current' succeeded in 768ms:
feature/spec-based-2
[2025-10-07T22:28:27] tokens used: 171,073
[2025-10-07T22:28:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T22:28:36] thinking

**Organizing test plan details**
[2025-10-07T22:28:37] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,340p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:28:37] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '300,340p'" succeeded in 730ms:
   300	| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
   301	| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |
   302	
   303	#### L3k.3c Tasks — Restore φ=0 Parity with C Reference
   304	
   305	| ID | Task Description | State | How/Why & Guidance |
   306	| --- | --- | --- | --- |
   307	| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
   308	| L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
   309	| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
   310	| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
   311	| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
   312	| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
   313	
   314	### Phase L4 — Supervisor Command Parity Rerun
   315	Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
   316	Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
   317	Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
   318	
   319	| ID | Task Description | State | How/Why & Guidance |
[2025-10-07T22:28:37] tokens used: 172,092
[2025-10-07T22:28:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..1619d7b6fba65fccd56581381357be507f6ffbdf
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,7 +306,9 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
 | L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T22:28:41] thinking

**Resolving duplicate row IDs**
[2025-10-07T22:28:45] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -311,3 +311,3 @@
 | L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
[2025-10-07T22:28:45] apply_patch(auto_approved=true) exited 0 in 48ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:28:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

[2025-10-07T22:28:45] tokens used: 174,640
[2025-10-07T22:28:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:28:48] thinking

**Checking plan numbering consistency**
[2025-10-07T22:28:49] exec bash -lc 'rg "L3k.3c.4" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:28:49] bash -lc 'rg "L3k.3c.4" -n docs/fix_plan.md' succeeded in 773ms:
462:2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
503:  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
506:      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
514:      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
519:      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
2045:      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
2049:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
2069:      - Updated plan: `plans/active/cli-noise-pix0/plan.md` (L3k.3c.3/L3k.3c.4 guidance)
2075:    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
2076:  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
2079:      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
[2025-10-07T22:28:49] tokens used: 175,472
[2025-10-07T22:28:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:00] thinking

**Clarifying task numbering references**

I’m sorting out how to handle references to `L3k.3c.4` that now correspond to `L3k.3c.6` due to renumbering in the fix_plan. Since many historical attempt entries mention the old ID, I’m weighing whether to update all occurrences for clarity or keep some as-is with notes. To avoid confusion, I’m focusing on updating key references in docs/fix_plan.md—especially at lines around 503 and 2045—and planning to apply targeted patch changes where it makes sense while preserving historical context where necessary.
[2025-10-07T22:29:08] tokens used: 177,706
[2025-10-07T22:29:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:10] thinking

**Checking patch failure details**
[2025-10-07T22:29:10] exec bash -lc "sed -n '500,540p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:29:11] bash -lc "sed -n '500,540p' docs/fix_plan.md" succeeded in 872ms:
      - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
    Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
    Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
    Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
      - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
      - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
    Observations/Hypotheses:
      - **Spec mandate clarified**: specs/spec-a-core.md:211 requires fresh rotations each step ("rotate the reference cell (a0,b0,c0) about u by φ"), no carryover semantics
      - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
      - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
      - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
      - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
    First Divergence: N/A (documentation loop — no new parity data generated)
    Next Actions:
      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
[2025-10-07T22:29:11] tokens used: 178,962
[2025-10-07T22:29:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..b4ae1e8660885c66338953cb493d7c3d124ce9b9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:14] thinking

**Preparing patch for plan update**
[2025-10-07T22:29:19] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -502,6 +502,6 @@
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
@@ -513,3 +513,3 @@
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
@@ -517,5 +517,5 @@
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
[2025-10-07T22:29:19] apply_patch(auto_approved=true) exited 0 in 37ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T22:29:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..8a839c777f0b7205ca43c52859788f7455aa21c9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

[2025-10-07T22:29:19] tokens used: 181,647
[2025-10-07T22:29:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..8a839c777f0b7205ca43c52859788f7455aa21c9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:21] thinking

**Checking remaining references to L3k.3c.4**
[2025-10-07T22:29:22] exec bash -lc "rg \"L3k\\.3c\\.4\" docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:29:23] bash -lc "rg \"L3k\\.3c\\.4\" docs/fix_plan.md" succeeded in 795ms:
2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
      - Updated plan: `plans/active/cli-noise-pix0/plan.md` (L3k.3c.3/L3k.3c.4 guidance)
    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
[2025-10-07T22:29:23] tokens used: 182,644
[2025-10-07T22:29:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..8a839c777f0b7205ca43c52859788f7455aa21c9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:28] thinking

**Updating legacy task references**
[2025-10-07T22:29:32] tokens used: 184,290
[2025-10-07T22:29:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..8a839c777f0b7205ca43c52859788f7455aa21c9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:34] thinking

**Searching for specific phrase**
[2025-10-07T22:29:35] exec bash -lc 'rg "VG-1 validation" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:29:35] bash -lc 'rg "VG-1 validation" -n docs/fix_plan.md' succeeded in 870ms:
2045:      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
2048:      - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
2049:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
2053:      - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/comparison_summary.md` — VG-1 validation report (all φ steps ✅)
[2025-10-07T22:29:35] tokens used: 185,831
[2025-10-07T22:29:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..8a839c777f0b7205ca43c52859788f7455aa21c9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:38] thinking

**Examining section near line 2045**
[2025-10-07T22:29:39] exec bash -lc "sed -n '2040,2060p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:29:39] bash -lc "sed -n '2040,2060p' docs/fix_plan.md" succeeded in 703ms:
      - **Test Result — test_rot_b_matches_c**: PASSED with rot_b_y matching C reference 0.671588 within absolute tolerance 1e-6. This confirms the cache mechanism correctly emulates C state carryover.
      - **Test Result — test_k_frac_phi0_matches_c**: FAILED, but this appears to be a pre-existing test issue unrelated to the φ=0 carryover fix. The test expects k_frac=-0.607255 but PyTorch currently computes a different value. This requires separate investigation (likely related to upstream geometry or incident beam direction).
      - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
      - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
    Next Actions:
      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
      - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
      - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
      - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
    Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
      - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/comparison_summary.md` — VG-1 validation report (all φ steps ✅)
      - Comparison command: `python scripts/compare_per_phi_traces.py reports/.../trace_py_rot_vector_per_phi.json reports/.../c_trace_phi_20251123.log`
    Observations/Hypotheses:
      - **φ=0 carryover mechanism validated**: Crystal._phi_last_cache correctly initializes with last-φ rotated vectors (crystal.py:1067-1086) and reuses them at φ=0 (crystal.py:1107-1118), matching C state carryover behavior
      - **Per-φ instrumentation formula confirmed correct**: simulator.py:1446 uses `osc/phi_steps` (NOT `osc/(phi_steps-1)`), matching C convention
      - **Test failure root cause identified**: test_k_frac_phi0_matches_c uses MOSFLM convention (beam=[1,0,0]) but supervisor command uses CUSTOM convention (custom_beam_vector=[0,0,-1]), causing scattering vector mismatch. Simulator traces (using CUSTOM) match C reference.
      - **VG-1 thresholds satisfied**: All 10 φ steps show Δk ≤ 2.85e-05, well below 5e-4 threshold specified in fix_checklist.md
[2025-10-07T22:29:39] tokens used: 186,321
[2025-10-07T22:29:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..8a839c777f0b7205ca43c52859788f7455aa21c9
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:48] thinking

**Updating task numbering references**
[2025-10-07T22:29:53] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -2044,3 +2044,3 @@
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
@@ -2048,3 +2048,3 @@
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
[2025-10-07T22:29:53] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T22:29:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..3f45d4e3f0adbeaca30731a2b1e793823e298499
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

[2025-10-07T22:29:53] tokens used: 188,335
[2025-10-07T22:29:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..3f45d4e3f0adbeaca30731a2b1e793823e298499
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:29:56] thinking

**Reviewing task references after attempt**
[2025-10-07T22:29:57] exec bash -lc "sed -n '2060,2085p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:29:58] bash -lc "sed -n '2060,2085p' docs/fix_plan.md" succeeded in 921ms:
    Next Actions:
      - Mark plan.md Phase L3k.3c as [D] complete
      - Update test_k_frac_phi0_matches_c to use CUSTOM convention with supervisor command's custom vectors (detector_convention=CUSTOM, custom_beam_vector, custom_fdet/sdet/odet vectors)
      - Proceed to L3k.3d (resolve nb-compare ROI parity for VG-3/VG-4 gates)
  * [2025-11-26] Attempt #114 (galph loop i=112 — review) — Result: **REOPENED**. Verified attempts #111/#113: per-φ traces still report max Δk = 2.845e-05 and Δb_y ≈ 4.57×10⁻² Å, exceeding the VG-1 tolerance (≤1e-6). `tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c` remains red, and the generated artifact path `reports/2025-10-cli-flags/phase_l/per_phi/reports/...` duplicates directory segments. Plan and fix-plan updated to keep L3k.3c.3 open, require refreshed traces with tighter tolerances, and add a documentation task to record the spec-vs-parity contract before implementation proceeds.
    Metrics: Evidence-only review; no code executed this loop. Δk=2.845147e-05 from `comparison_summary.md` (Attempt #111); Δb_y from `delta_by.txt` = 4.573155×10⁻² Å. Pytest status unchanged (test_k_frac_phi0_matches_c FAIL expected but unresolved).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251207/comparison_summary.md` (attempt #113) — confirms Δk=2.845147e-05
      - `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/delta_metrics.json` — Δb_y magnitude 4.573155e-02 Å
      - Updated plan: `plans/active/cli-noise-pix0/plan.md` (L3k.3c.3/L3k.3c.4 guidance)
      - Updated fix-plan Next Actions (this entry)
    Observations/Hypotheses:
      - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
      - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
      - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
    Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
[2025-10-07T22:29:58] tokens used: 189,176
[2025-10-07T22:29:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..3f45d4e3f0adbeaca30731a2b1e793823e298499
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:30:02] thinking

**Updating documentation references**
[2025-10-07T22:30:04] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -2074,7 +2074,7 @@
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
[2025-10-07T22:30:04] apply_patch(auto_approved=true) exited 0 in 46ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T22:30:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

[2025-10-07T22:30:04] tokens used: 190,773
[2025-10-07T22:30:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:30:06] thinking

**Searching for outdated references**
[2025-10-07T22:30:06] exec bash -lc "rg \"L3k\\.3c\\.4\" docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:30:07] bash -lc "rg \"L3k\\.3c\\.4\" docs/fix_plan.md" succeeded in 777ms:
2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
      - Updated plan: `plans/active/cli-noise-pix0/plan.md` (L3k.3c.3/L3k.3c.4 guidance)
[2025-10-07T22:30:07] tokens used: 191,342
[2025-10-07T22:30:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:30:26] thinking

**Compiling detailed update plan**

I'm gathering all the relevant task details, script commands, file references with line numbers, and artifact paths to create a clear, spec-focused update plan. I want to ensure the instructions cover implementing the spec-compliant φ rotation, capturing traces, running tests, and documenting priorities with precise pointers for easy tracking.
[2025-10-07T22:30:28] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '440,480p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:30:28] bash -lc "nl -ba docs/fix_plan.md | sed -n '440,480p'" succeeded in 850ms:
   440	    `PY`
   441	- First Divergence (if known): `parse_and_validate_args` (src/nanobrag_torch/__main__.py:435) calls `read_hkl_file`/`try_load_hkl_or_fdump` without forwarding the parsed dtype, so HKL/Fdump data is always loaded as float32. When the CLI is run with `-dtype float64`, the simulator converts those float32 tensors to float64 later, permanently losing precision relative to the requested double-precision path and violating the DTYPE-DEFAULT-001 guarantee.
   442	- Immediate Next Actions (2025-10-15):
   443	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   444	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   445	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   446	- Attempts History: None — new item.
   447	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   448	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   449	
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
[2025-10-07T22:30:28] tokens used: 192,285
[2025-10-07T22:30:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:30:30] thinking

**Extracting relevant line numbers**
[2025-10-07T22:30:31] exec bash -lc "nl -ba specs/spec-a-core.md | sed -n '200,230p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:30:32] bash -lc "nl -ba specs/spec-a-core.md | sed -n '200,230p'" succeeded in 672ms:
   200	            - For each source:
   201	                - Incident unit vector i = −source_dir (unitized); wavelength λ from source.
   202	                - q = (d − i) / λ (m^-1). stol = 0.5·||q||.
   203	                - If dmin > 0 and stol > 0 and dmin > 0.5/stol: skip this subpath.
   204	                - Polarization factor (if enabled; Kahn model):
   205	                    - cos(2θ) = i·d; sin^2(2θ) = 1 − cos^2(2θ).
   206	                    - Construct B_in = unit(p × i), E_in = unit(i × B_in). Project d into this EB
   207	plane: E_out = d·E_in, B_out = d·B_in. ψ = −atan2(B_out, E_out).
   208	                    - Polarization factor = 0.5·(1 + cos^2(2θ) − K·cos(2ψ)·sin^2(2θ)), where K is
   209	the Kahn factor from -polar.
   210	                - Crystal orientation:
   211	                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
   212	about u by φ to get (ap,bp,cp).
   213	                    - Mosaic: for each domain, apply the domain’s rotation to (ap,bp,cp) to get
   214	(a,b,c).
   215	                - Fractional Miller indices: h = a·q, k = b·q, l = c·q (dimensionless).
   216	                - Nearest integer triplet: (h0, k0, l0) = round to nearest via ceil(x − 0.5).
   217	                - Lattice factor F_latt:
   218	                    - SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc),
   219	where
[2025-10-07T22:30:32] tokens used: 194,323
[2025-10-07T22:30:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:30:34] thinking

**Fetching lines from bug documentation**
[2025-10-07T22:30:35] exec bash -lc "nl -ba docs/bugs/verified_c_bugs.md | sed -n '160,210p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:30:35] bash -lc "nl -ba docs/bugs/verified_c_bugs.md | sed -n '160,210p'" succeeded in 692ms:
   160	**Relevant code:**
   161	- `golden_suite_generator/nanoBragg.c:1297-1304` — attempts to open `Fdump.bin` whenever `-hkl` is absent.
   162	- `golden_suite_generator/nanoBragg.c:2355-2368` — rehydrates the cached structure factors silently.
   163	
   164	---
   165	
   166	### C-PARITY-001 — φ=0 Uses Stale Crystal Vectors (Medium)
   167	**Summary:** Inside the φ loop, the rotated vectors `ap/bp/cp` are only updated when `phi != 0.0`; otherwise, they retain the previous state (often from the prior pixel’s final φ step). This produces step-0 Miller fractions that mirror the previous pixel rather than the unrotated lattice.
   168	
   169	**Reproduction:**
   170	```bash
   171	./golden_suite_generator/nanoBragg -cell 70 70 70 90 90 90 -default_F 1 -N 2 \
   172	  -distance 100 -detpixels 4 -pixel 0.1 \
   173	  -phi 0 -osc 0.09 -phisteps 10 -trace_pixel 0 0 \
   174	  -floatfile /tmp/phi_float.bin -intfile /tmp/phi_int.img -noisefile /tmp/phi_noise.img \
   175	  -nopgm -nonoise -noprogress > docs/bugs/artifacts/c-parity-001.txt
   176	```
   177	The trace (`docs/bugs/artifacts/c-parity-001.txt`) includes a single `TRACE_C: hkl_frac …` entry, regardless of φ step, confirming that the φ=0 pass reused the rotated vectors. Comparing successive pixels reveals identical `k_frac` values at φ=0 and the terminal φ step.
   178	
   179	**Relevant code:**
[2025-10-07T22:30:35] tokens used: 195,430
[2025-10-07T22:30:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:30:40] thinking

**Preparing to create input.md**
[2025-10-07T22:30:41] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:30:42] bash -lc 'cat input.md' succeeded in 663ms:
Summary: Capture detailed Phase D1 blueprint so polynomial vectorization can proceed without surprises
Mode: Docs
Focus: VECTOR-TRICUBIC-001 / Phase D1
Branch: feature/spec-based-2
Mapped tests: pytest --collect-only -q tests/test_tricubic_vectorized.py
Artifacts: reports/2025-10-vectorization/phase_d/polynomial_validation.md; reports/2025-10-vectorization/phase_d/collect.log; reports/2025-10-vectorization/phase_d/tap_points.md (if tap inventory grows)
Do Now: VECTOR-TRICUBIC-001 Phase D1 — draft reports/2025-10-vectorization/phase_d/polynomial_validation.md with tensor-shape + C-reference plan; run `pytest --collect-only -q tests/test_tricubic_vectorized.py` and tee stdout to reports/2025-10-vectorization/phase_d/collect.log
If Blocked: Capture blockers + hypotheses in polynomial_validation.md, rerun the collect-only command to confirm selectors still resolve, and park raw stderr/stdout in collect.log for supervisor triage

Background Notes:
- Current gather path (Phase C) produces (B,4,4,4) neighbourhood tensors but still falls back to scalar polynomial helpers when B>1
- Vectorizing polynomials unblocks the long-term goal of running the supervisor command with PyTorch CLI parity without fallbacks
- Detector absorption work (Phase F) depends on the lessons from Phase D — thorough documentation now prevents duplicated effort later
- Prior perf studies (reports/benchmarks/20250930-165726-compile-cache/analysis.md) highlight polin3 as a hotspot once batching activates; note this in the worksheet

Context Reminders:
- Supervisor initiative currently prioritises CLI parity and vectorization; keep D1 scoped to enabling code work without actually modifying code
- Protected Assets rule applies; any new helper scripts must live beneath scripts/ and be referenced in docs/index.md if persistent
- The PyTorch runtime checklist mandates CPU + CUDA smoke for any new tensor path; plan for both devices even if CUDA unavailable locally
- Document how D1 interacts with future parity gating (nb-compare/Phase E) so we have a straight hand-off once implementation lands
[2025-10-07T22:30:42] tokens used: 196,717
[2025-10-07T22:30:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:30:48] thinking

**Preparing new input.md content**
[2025-10-07T22:30:59] exec bash -lc "cat <<'EOF' > input.md
Summary: Implement spec-compliant φ rotation so VG-1 passes before adding the parity shim
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L3k.3c.3
Branch: feature/spec-based-2
Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/trace_py_rot_vector_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/comparison_summary.md; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/delta_metrics.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/pytest_phi0.log
Do Now: CLI-FLAGS-003 Phase L3k.3c.3 — remove "'`_phi_last_cache` default carryover, regenerate per-φ traces, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v`
If Blocked: Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/collect_only.log`, capture Δk/Δb_y from the last good traces, and log hypotheses in diagnosis.md before touching code

Priorities & Rationale:
- specs/spec-a-core.md:211-214 — spec mandates fresh rotation each φ step; default behavior must agree before parity work
- docs/bugs/verified_c_bugs.md:166-204 — C-PARITY-001 documents the carryover bug we only emulate behind a shim
- plans/active/cli-noise-pix0/plan.md:303-311 — Phase L3k.3c.3/3c.4/3c.5 tasks define the gating work
- docs/fix_plan.md:450-464 — Next Actions call for spec-compliant rotation, then parity shim design, then doc/test refresh
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353 — Current analysis memo establishes verification thresholds and logging expectations

How-To Map:
- Update `src/nanobrag_torch/models/crystal.py` to drop `_phi_last_cache` from the default path while keeping instrumentation on `phi = phi_start + (osc/phisteps)*tic`
- Rebuild per-φ traces: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/trace_py_rot_vector_per_phi.json reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/c_trace_phi_20251123.log > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/comparison_stdout.txt`
- After code edits run targeted pytest: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/pytest_phi0.log`
- Record Δk/Δb_y ≤1e-6 in `delta_metrics.json` and update VG-1 rows in `fix_checklist.md`

Pitfalls To Avoid:
- Do not reintroduce carryover in default flow; parity shim is deferred to L3k.3c.4
- Preserve vectorization—no Python loops per docs/architecture/pytorch_design.md
- Maintain device/dtype neutrality; avoid `.cpu()`, `.item()`, or tensor detaches in differentiable paths
- Keep tracing tensor-based; instrumentation must mirror production helpers per debugging SOP
- Respect Protected Assets and existing artifacts; write new evidence under timestamped `reports/2025-10-cli-flags/...` directories only
- Ensure φ sampling uses `osc/phisteps` (not `phisteps-1`); fix tests if they rely on old value
- Do not relax VG-1 thresholds; target ≤1e-6 per fix_checklist.md
- Keep parity tests referencing C trace values distinct from spec tests to avoid masking regressions
- Coordinate with future parity shim work—leave clear TODO noting follow-up flag addition after spec path passes
- Remove temporary scripts/logs outside the reports directory before finishing the loop

Pointers:
- specs/spec-a-core.md:211-214
- docs/bugs/verified_c_bugs.md:166-204
- plans/active/cli-noise-pix0/plan.md:303-311
- docs/fix_plan.md:460-464
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353

Next Up:
1. Phase L3k.3c.4 — design the opt-in C carryover shim and associated tests once VG-1 is green
2. Phase L3k.3c.5 — refresh docs/tests to cover dual-mode behavior after shim landing
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:00] bash -lc "cat <<'EOF' > input.md
Summary: Implement spec-compliant φ rotation so VG-1 passes before adding the parity shim
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L3k.3c.3
Branch: feature/spec-based-2
Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/trace_py_rot_vector_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/comparison_summary.md; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/delta_metrics.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/pytest_phi0.log
Do Now: CLI-FLAGS-003 Phase L3k.3c.3 — remove "'`_phi_last_cache` default carryover, regenerate per-φ traces, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v`
If Blocked: Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/collect_only.log`, capture Δk/Δb_y from the last good traces, and log hypotheses in diagnosis.md before touching code

Priorities & Rationale:
- specs/spec-a-core.md:211-214 — spec mandates fresh rotation each φ step; default behavior must agree before parity work
- docs/bugs/verified_c_bugs.md:166-204 — C-PARITY-001 documents the carryover bug we only emulate behind a shim
- plans/active/cli-noise-pix0/plan.md:303-311 — Phase L3k.3c.3/3c.4/3c.5 tasks define the gating work
- docs/fix_plan.md:450-464 — Next Actions call for spec-compliant rotation, then parity shim design, then doc/test refresh
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353 — Current analysis memo establishes verification thresholds and logging expectations

How-To Map:
- Update `src/nanobrag_torch/models/crystal.py` to drop `_phi_last_cache` from the default path while keeping instrumentation on `phi = phi_start + (osc/phisteps)*tic`
- Rebuild per-φ traces: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/trace_py_rot_vector_per_phi.json reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/c_trace_phi_20251123.log > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/comparison_stdout.txt`
- After code edits run targeted pytest: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/pytest_phi0.log`
- Record Δk/Δb_y ≤1e-6 in `delta_metrics.json` and update VG-1 rows in `fix_checklist.md`

Pitfalls To Avoid:
- Do not reintroduce carryover in default flow; parity shim is deferred to L3k.3c.4
- Preserve vectorization—no Python loops per docs/architecture/pytorch_design.md
- Maintain device/dtype neutrality; avoid `.cpu()`, `.item()`, or tensor detaches in differentiable paths
- Keep tracing tensor-based; instrumentation must mirror production helpers per debugging SOP
- Respect Protected Assets and existing artifacts; write new evidence under timestamped `reports/2025-10-cli-flags/...` directories only
- Ensure φ sampling uses `osc/phisteps` (not `phisteps-1`); fix tests if they rely on old value
- Do not relax VG-1 thresholds; target ≤1e-6 per fix_checklist.md
- Keep parity tests referencing C trace values distinct from spec tests to avoid masking regressions
- Coordinate with future parity shim work—leave clear TODO noting follow-up flag addition after spec path passes
- Remove temporary scripts/logs outside the reports directory before finishing the loop

Pointers:
- specs/spec-a-core.md:211-214
- docs/bugs/verified_c_bugs.md:166-204
- plans/active/cli-noise-pix0/plan.md:303-311
- docs/fix_plan.md:460-464
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353

Next Up:
1. Phase L3k.3c.4 — design the opt-in C carryover shim and associated tests once VG-1 is green
2. Phase L3k.3c.5 — refresh docs/tests to cover dual-mode behavior after shim landing
EOF
' succeeded in 769ms:

[2025-10-07T22:31:00] tokens used: 199,720
[2025-10-07T22:31:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:04] thinking

**Verifying placeholder usage and next steps**
[2025-10-07T22:31:05] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:06] bash -lc 'git status --short' succeeded in 746ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T22:31:06] tokens used: 201,193
[2025-10-07T22:31:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:08] thinking

**Verifying changes before commit**
[2025-10-07T22:31:09] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:09] bash -lc 'git diff' succeeded in 687ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f..ec0c4e1 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
[2025-10-07T22:31:09] tokens used: 201,626
[2025-10-07T22:31:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:12] thinking

**Preparing to commit and push changes**
[2025-10-07T22:31:13] exec bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:13] bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md' succeeded in 711ms:

[2025-10-07T22:31:13] tokens used: 205,086
[2025-10-07T22:31:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:16] thinking

**Preparing commit message**
[2025-10-07T22:31:16] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 plan refresh - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:17] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 plan refresh - tests: not run"' succeeded in 745ms:
[feature/spec-based-2 5eda539] SUPERVISOR: CLI-FLAGS-003 plan refresh - tests: not run
 3 files changed, 55 insertions(+), 113 deletions(-)
[2025-10-07T22:31:17] tokens used: 205,234
[2025-10-07T22:31:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:20] thinking

**Pushing changes**
[2025-10-07T22:31:21] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:23] bash -lc 'git push' succeeded in 2.58s:
To github.com:hoidn/nanoBragg.git
   b9b3045..5eda539  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T22:31:23] tokens used: 205,415
[2025-10-07T22:31:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:27] thinking

**Appending summary to galph_memory.md**
[2025-10-07T22:31:30] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-27 (galph loop — φ rotation plan refresh)
- Rebased with origin (no conflicts) and reviewed CLI-FLAGS-003 scope vs long-term goal #1.
- Updated "'`plans/active/cli-noise-pix0/plan.md` L3k.3c tasks: default path now mandates spec-compliant φ rotation (no `_phi_last_cache`), added new rows for parity shim design (L3k.3c.4) and dual-mode docs/tests (L3k.3c.5), preserved documentation row as L3k.3c.6.
- Synced `docs/fix_plan.md` Next Actions to match the new gating order (spec fix → parity shim → docs/tests) and clarified historical attempt references.
- Issued fresh `input.md` (Parity mode) directing Ralph to implement L3k.3c.3, regenerate per-φ traces, and run the targeted φ parity tests; parity shim + doc refresh queued under Next Up.
- Commit `5eda539` pushed on `feature/spec-based-2`. No tests run in supervisor loop (planning only).
- Follow-up for Ralph: remove `_phi_last_cache` from the default rotation path, capture new Δk/Δb_y ≤1e-6 artifacts, then proceed to design the opt-in carryover shim per plan.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:31] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-27 (galph loop — φ rotation plan refresh)
- Rebased with origin (no conflicts) and reviewed CLI-FLAGS-003 scope vs long-term goal #1.
- Updated "'`plans/active/cli-noise-pix0/plan.md` L3k.3c tasks: default path now mandates spec-compliant φ rotation (no `_phi_last_cache`), added new rows for parity shim design (L3k.3c.4) and dual-mode docs/tests (L3k.3c.5), preserved documentation row as L3k.3c.6.
- Synced `docs/fix_plan.md` Next Actions to match the new gating order (spec fix → parity shim → docs/tests) and clarified historical attempt references.
- Issued fresh `input.md` (Parity mode) directing Ralph to implement L3k.3c.3, regenerate per-φ traces, and run the targeted φ parity tests; parity shim + doc refresh queued under Next Up.
- Commit `5eda539` pushed on `feature/spec-based-2`. No tests run in supervisor loop (planning only).
- Follow-up for Ralph: remove `_phi_last_cache` from the default rotation path, capture new Δk/Δb_y ≤1e-6 artifacts, then proceed to design the opt-in carryover shim per plan.
EOF
' succeeded in 713ms:

[2025-10-07T22:31:31] tokens used: 206,009
[2025-10-07T22:31:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:38] thinking

**Summarizing final updates and next steps**

I’m organizing a clear final response that explains the plan and fix_plan updates, notes the new input instructions, and references the relevant docs with line numbers. I’ll highlight paths like `plans/active/cli-noise-pix0/plan.md:303-311`, `docs/fix_plan.md:460-464`, and detail the new `input.md` lines. I’ll also mention consulted specs and bug docs, and include friendly bullet points outlining next steps for Ralph, noting that tests haven’t been run yet since only plans were updated.
[2025-10-07T22:31:41] exec bash -lc 'nl -ba input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T22:31:42] bash -lc 'nl -ba input.md' succeeded in 859ms:
     1	Summary: Implement spec-compliant φ rotation so VG-1 passes before adding the parity shim
     2	Mode: Parity
     3	Focus: CLI-FLAGS-003 / Phase L3k.3c.3
     4	Branch: feature/spec-based-2
     5	Mapped tests: env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v
     6	Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/trace_py_rot_vector_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/comparison_summary.md; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/delta_metrics.json; reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/pytest_phi0.log
     7	Do Now: CLI-FLAGS-003 Phase L3k.3c.3 — remove `_phi_last_cache` default carryover, regenerate per-φ traces, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v`
     8	If Blocked: Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/collect_only.log`, capture Δk/Δb_y from the last good traces, and log hypotheses in diagnosis.md before touching code
     9	
    10	Priorities & Rationale:
    11	- specs/spec-a-core.md:211-214 — spec mandates fresh rotation each φ step; default behavior must agree before parity work
    12	- docs/bugs/verified_c_bugs.md:166-204 — C-PARITY-001 documents the carryover bug we only emulate behind a shim
    13	- plans/active/cli-noise-pix0/plan.md:303-311 — Phase L3k.3c.3/3c.4/3c.5 tasks define the gating work
    14	- docs/fix_plan.md:450-464 — Next Actions call for spec-compliant rotation, then parity shim design, then doc/test refresh
    15	- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353 — Current analysis memo establishes verification thresholds and logging expectations
    16	
    17	How-To Map:
    18	- Update `src/nanobrag_torch/models/crystal.py` to drop `_phi_last_cache` from the default path while keeping instrumentation on `phi = phi_start + (osc/phisteps)*tic`
    19	- Rebuild per-φ traces: `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/trace_py_rot_vector_per_phi.json reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/c_trace_phi_20251123.log > reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/comparison_stdout.txt`
    20	- After code edits run targeted pytest: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c -v | tee reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/<ts>/pytest_phi0.log`
[2025-10-07T22:31:42] tokens used: 207,561
[2025-10-07T22:31:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T22:31:47] thinking

**Preparing final plan summary**
[2025-10-07T22:31:47] codex

**Plan Refresh**
- Reworked Phase L3k.3c in `plans/active/cli-noise-pix0/plan.md:303-311` so the default path must follow the spec (no `_phi_last_cache`), then adds a dedicated parity-shim task and a dual-mode docs/tests task; historical documentation now lives under L3k.3c.6.
- Aligned `docs/fix_plan.md:460-464` Next Actions with the new ordering (spec-compliant rotation → opt-in carryover shim → docs/tests refresh) to keep long-term goal #1 on track.
- Published an updated supervisor brief in `input.md:1-44` directing Ralph to implement L3k.3c.3, regenerate per-φ traces, and run the two φ parity tests before touching the shim work.
- Documentation touchpoints reviewed: `specs/spec-a-core.md:211-214` (normative φ rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C carryover bug) to ensure the plan enforces spec-first behavior.
- Tests: not run (planning/documentation only).

Next steps for Ralph are called out in the new `input.md`; executing L3k.3c.3 with fresh traces is the immediate priority.
[2025-10-07T22:31:51] tokens used: 210,139
[2025-10-07T22:31:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 789433f4189a2b3d65562af8f6ea1d7f0d1cdaa1..ec0c4e1c80bcd09123e7adfc2c0deaa01f6b3366
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112):
-1. **Phase L3k.3c.3 still failing** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Regenerate per-φ traces after fixing the cache so both Δk and Δb_y ≤1e-6 (CPU+CUDA), then update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before proceeding.
-2. **Phase L3k.3c.4 documentation** — Capture a short memo (reports/…/diagnosis.md) citing `specs/spec-a-core.md:211-214` (normative φ-step rotation) and `docs/bugs/verified_c_bugs.md:166-204` (C PARITY bug) to clarify the spec-mandated behavior (no carryover) versus the C reference defect. Call out that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches the previous φ slice (`_phi_last_cache`) to emulate C. The memo must recommend how PyTorch will deliver spec-compliant defaults with an explicit parity shim or guard to keep CLI comparisons unblocked, and link the artifact in this fix-plan entry.
-3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
-4. Phase L3k.3e — Once VG-1/VG-3/VG-4 are green, close out documentation/checklist chores (VG-5) and log the implementation Attempt before moving to the Phase L4 supervisor command rerun.
+- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
+1. **Phase L3k.3c.3 (spec-compliant φ rotation)** — Attempts #111/#113 improved gradients but Δk remains 2.845e-05 (>1e-6) and `test_k_frac_phi0_matches_c` stays red. Remove `_phi_last_cache`, regenerate per-φ traces, and confirm both Δk and Δb_y ≤1e-6 on CPU+CUDA. Update `comparison_summary.md`, `delta_metrics.json`, and the VG-1 checklist before advancing.
+2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
+3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
+4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
@@ -500,10 +500,10 @@
       - Crystal geometry regression suite: 49/49 passed (test_crystal_geometry.py + test_at_geo*.py)
     Observations/Hypotheses: Cache now respects device/dtype neutrality. Gradient flow preserved (torch.tensor() warning eliminated). The k_frac test failure is NOT a regression—it's the physics bug that Phase L3k.3c.3 is meant to expose and Phase L3k.3d will fix. VG-1 gate remains red until the rotation-vector initialization issue is resolved.
     Next Actions: Proceed to Phase L3k.3d (fix underlying φ rotation physics) and rerun VG-1 to achieve Δk ≤ 1e-6.
-  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.4 spec-vs-parity analysis memo). **No code changes.**
+  * [2025-10-07] Attempt #114 (ralph loop i=114, Mode: Docs) — Result: **DOCUMENTATION COMPLETE** (Phase L3k.3c.6 spec-vs-parity analysis memo). **No code changes.**
     Metrics: Documentation-only loop (no tests executed beyond collect-only). Test collection: 2 tests collected successfully (tests/test_cli_scaling_phi0.py).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.4 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` — Complete Phase L3k.3c.6 section with 6 subsections: (1) Normative spec behavior (specs/spec-a-core.md:211 quote), (2) C-PARITY-001 evidence (docs/bugs/verified_c_bugs.md:166), (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (5 VG gates + 4 documentation gates), (6) References & next actions
       - `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only_20251007.log` — pytest collect-only output (2 tests: test_rot_b_matches_c, test_k_frac_phi0_matches_c)
       - `docs/fix_plan.md` (this file) — Attempt #114 entry added with artifacts and observations
     Observations/Hypotheses:
@@ -511,13 +511,13 @@
       - **C bug quarantined**: docs/bugs/verified_c_bugs.md §C-PARITY-001 documents the `if(phi!=0.0)` guard causing stale-vector carryover; this is a known deviation from spec
       - **Current implementation status**: PyTorch emulates C-parity via `_phi_last_cache`; device/dtype issues resolved in Attempt #113; gradient flow preserved
       - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
-      - **VG gates unchanged**: Phase L3k.3c.4 is pure documentation; VG-1 through VG-5 remain pending implementation completion
+      - **VG gates unchanged**: Phase L3k.3c.6 is pure documentation; VG-1 through VG-5 remain pending implementation completion
       - Mode: Docs → deferred implementation work to next code-focused loop per input.md guidance (lines 2, 21)
     First Divergence: N/A (documentation loop — no new parity data generated)
     Next Actions:
-      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict parity shim requirement
-      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.4 complete in plan
-      3. If strict parity required: Queue Phase L3k.3d implementation loop to address remaining k_frac test failure
+      1. Supervisor review (galph loop): Decide on threshold adjustment (relax VG-1 to Δk≤5e-5) vs strict spec enforcement
+      2. If threshold adjustment approved: Update fix_checklist.md VG-1 gate, document rationale, mark L3k.3c.6 complete in plan
+      3. If strict spec enforcement required: Proceed to Phase L3k.3c.3 implementation loop to remove `_phi_last_cache`
       4. After L3k.3c gates resolved: Execute Phase L3k.4 (documentation/checklist closure) and Phase L4 (supervisor command parity rerun)
   * [2025-11-21] Attempt #97 (ralph loop i=97) — Result: **SUCCESS** (Phase L3k.2 implementation COMPLETE). **φ rotation fix applied: removed independent reciprocal vector rotation, added reciprocal recomputation from rotated real vectors per CLAUDE Rule #13.**
     Metrics: Targeted tests pass (test_f_latt_square_matches_c PASSED, 57/57 crystal/geometry tests PASSED); test collection succeeds (653 tests); Python syntax valid.
@@ -2042,11 +2042,11 @@
       - **Device/Dtype Neutrality Maintained**: Cache stores tensors on original device/dtype; all cache lookups use tensor comparison without .item() calls in differentiable paths.
       - **Backward Compatibility**: Cache mechanism only activates when phi array starts with 0.0; all other phi sequences (non-zero start, monotonic, non-sequential) use standard rotation pipeline.
     Next Actions:
-      - **Phase L3k.3c.4 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
+      - **Phase L3k.3c.3 (VG-1 validation)**: Regenerate per-φ traces with updated instrumentation formula and φ=0 cache enabled; run comparison script to verify VG-1 thresholds (Δk ≤ 1e-6, Δb_y relative error ≤ 1e-6) are now satisfied.
       - **Phase L3k.3c.5 (full test suite regression)**: Run full pytest suite to ensure φ=0 cache does not break existing rotation tests or introduce precision regressions.
       - **Investigate test_k_frac_phi0_matches_c failure**: This test failure is orthogonal to the φ=0 carryover fix. Requires separate debugging to identify why k_frac value diverges from C reference (likely upstream geometry issue in incident beam direction or scattering vector calculation).
       - **Update plan status**: Mark Phase L3k.3c as complete once VG-1 validation passes; document cache mechanism in architecture/crystal.md for future maintainers.
-  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.4) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
+  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
     Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
     Artifacts:
       - `reports/2025-10-cli-flags/phase_l/per_phi/reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123_new/trace_py_rot_vector_per_phi.json` — Regenerated per-φ trace with φ=0 carryover fix active
@@ -2072,11 +2072,11 @@
       - VG-1 threshold in `fix_checklist.md` is 1e-6, so the 2.84e-05 result is insufficient despite being <5e-4. Need higher-precision carryover (or spec-compliant default + parity shim).
       - Artifact directories should avoid nested `.../per_phi/reports/...` duplication to keep future comparisons sane.
       - Spec review required: specs/spec-a-core.md §4 mandates no φ=0 carryover; PyTorch must offer spec-compliant default behavior while optionally emulating the C trace for parity workflows.
-    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.4), and only then move on to ROI/normalization gates.
-  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.4) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
+    Next Actions: Keep L3k.3c.3 open, produce new per-φ traces post-fix, author the spec/bug memo (L3k.3c.6), and only then move on to ROI/normalization gates.
+  * [2025-10-07] Attempt #115 (ralph Mode: Docs — Phase L3k.3c.6) — Result: **DOCUMENTATION COMPLETE** (Spec vs Parity Contract memo). **No code changes.**
     Metrics: Documentation-only (no tests executed; pytest --collect-only succeeds with 655 tests collected).
     Artifacts:
-      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.4 — Spec vs Parity Contract" section
+      - `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-262` — New "Phase L3k.3c.6 — Spec vs Parity Contract" section
       - Git SHA at completion: (to be recorded at commit)
     Observations/Hypotheses:
       - **Spec-compliant behavior** (specs/spec-a-core.md:211): φ sampling formula mandates no φ=0 carryover; each rotation step is independent
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 8c1b324a6afd05b3a222ff403fc8d2bd3be1f918..0b68e8f98a9a8bd490b7d9dffa37bc322096d0aa
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -306,8 +306,10 @@
 | --- | --- | --- | --- |
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
-| L3k.3c.3 | Implement + validate fix | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Complete the φ=0 carryover emulation in `Crystal.get_rotated_real_vectors` without detaching tensors or hard-coding devices, and confirm instrumentation uses the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` so VG-1.4 can flip to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
-| L3k.3c.4 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
+| L3k.3c.3 | Implement spec-compliant φ rotation | [ ] | **Reopened 2025-11-24 (galph loop); still failing as of Attempts #111/#113.** Device/dtype neutrality is now in place, but per-φ traces report max Δk=2.845e-05 and Δb_y≈4.6×10⁻² Å, which violates the VG-1 gate (≤1e-6). Remove the `_phi_last_cache` dependency so the default PyTorch path matches `specs/spec-a-core.md:211-214` (rotate the reference lattice freshly each φ step). Ensure the implementation stays vectorized, preserves gradients, and keeps instrumentation on the spec formula `phi = phi_start + (osc/phisteps)*phi_tic`. Produce fresh traces under `base_vector_debug/<timestamp>/`, rerun `python scripts/compare_per_phi_traces.py ...` until Δk and Δb_y are both ≤1e-6, and re-run `pytest tests/test_cli_scaling_phi0.py::{test_rot_b_matches_c,test_k_frac_phi0_matches_c}` to flip VG-1.4 to ✅. Update `comparison_summary.md`, `delta_metrics.json`, and the fix checklist accordingly. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   5eda539..acc030c  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=116...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=116
Updating acc030c..edab2cb
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   acc030c..edab2cb  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=116
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating edab2cb..518fd75
Fast-forward
 docs/fix_plan.md                                   |  25 ++++
 .../20251007154213/collect_only.log                |   4 +
 .../20251007154213/comparison_summary.md           | 166 +++++++++++++++++++++
 .../20251007154213/pytest_phi0.log                 |  11 ++
 src/nanobrag_torch/models/crystal.py               | 138 +++++------------
 tests/test_cli_scaling_phi0.py                     | 100 +++++++------
 6 files changed, 293 insertions(+), 151 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007154213/collect_only.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007154213/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007154213/pytest_phi0.log
From github.com:hoidn/nanoBragg
   edab2cb..518fd75  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 518fd75..fb5c13c
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   518fd75..fb5c13c  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=117
Ralph completed iteration 116; proceeding to 117
