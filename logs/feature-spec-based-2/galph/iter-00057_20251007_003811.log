Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=57
To github.com:hoidn/nanoBragg.git
   6b4acf9..ca99ae6  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T00:38:14] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T00:38:14] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor evidence mode (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Supervisor Evidence Gate (internal-only): No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Mode flags: Mode flags are combinable and refine execution; do not include any Phase label in input.md.
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-07T00:38:18] thinking

**Preparing to run git pull with timeout**
[2025-10-07T00:38:19] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:21] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.12s:
Already up to date.
[2025-10-07T00:38:21] tokens used: 13,129

[2025-10-07T00:38:26] thinking

**Preparing to read galph_memory.md**
[2025-10-07T00:38:26] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:27] bash -lc 'cat galph_memory.md' succeeded in 729ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T00:38:27] tokens used: 13,325

[2025-10-07T00:38:31] thinking

**Preparing to read documentation files**
[2025-10-07T00:38:31] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:32] bash -lc 'cat docs/index.md' succeeded in 678ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T00:38:32] tokens used: 16,273

[2025-10-07T00:38:36] thinking

**Opening specs/spec-a.md**
[2025-10-07T00:38:36] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:36] bash -lc 'cat specs/spec-a.md' succeeded in 706ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T00:38:36] tokens used: 17,888

[2025-10-07T00:38:40] thinking

**Considering specification documents**
[2025-10-07T00:38:41] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:41] bash -lc 'cat arch.md' succeeded in 684ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T00:38:41] tokens used: 18,239

[2025-10-07T00:38:43] thinking

**Reading c_to_pytorch_config_map.md**
[2025-10-07T00:38:44] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:44] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 710ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T00:38:44] tokens used: 20,987

[2025-10-07T00:38:46] thinking

**Opening debugging documentation**
[2025-10-07T00:38:46] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:47] bash -lc 'cat docs/debugging/debugging.md' succeeded in 672ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T00:38:47] tokens used: 22,851

[2025-10-07T00:38:51] thinking

**Reviewing initial section of fix_plan.md**
[2025-10-07T00:38:51] exec bash -lc "sed -n '1,200p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:38:52] bash -lc "sed -n '1,200p' docs/fix_plan.md" succeeded in 697ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-07T00:38:52] tokens used: 47,675

[2025-10-07T00:38:58] thinking

**Preparing for in-depth analysis**
[2025-10-07T00:38:59] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:00] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 701ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T00:39:00] tokens used: 75,515

[2025-10-07T00:39:02] thinking

**Inspecting active plans directory**
[2025-10-07T00:39:03] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:04] bash -lc 'ls plans/active' succeeded in 691ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T00:39:04] tokens used: 105,901

[2025-10-07T00:39:05] thinking

**Checking plan documentation**
[2025-10-07T00:39:05] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:06] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 721ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
- Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
[2025-10-07T00:39:06] tokens used: 106,126

[2025-10-07T00:39:08] thinking

**Reviewing vectorization plan**
[2025-10-07T00:39:08] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:09] bash -lc 'cat plans/active/vectorization.md' succeeded in 698ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-09): Phase A remains untouched; no artifacts exist under `reports/2025-10-vectorization/phase_a/`, so Ralph must prioritise A1–A3 baseline capture before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
[2025-10-07T00:39:09] tokens used: 109,094

[2025-10-07T00:39:12] thinking

**Starting codebase exploration**
[2025-10-07T00:39:13] exec bash -lc 'ls src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:13] bash -lc 'ls src/nanobrag_torch' succeeded in 690ms:
__init__.py
__main__.py
__pycache__
config.py
io
models
simulator.py
utils
[2025-10-07T00:39:13] tokens used: 117,424

[2025-10-07T00:39:15] thinking

**Inspecting CLI entry point**
[2025-10-07T00:39:16] exec bash -lc 'cat src/nanobrag_torch/__main__.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:16] bash -lc 'cat src/nanobrag_torch/__main__.py' succeeded in 666ms:
#!/usr/bin/env python3
"""
Main entry point for nanoBragg PyTorch CLI.

Implements the Reference CLI Binding Profile from spec-a.md,
mapping command-line flags to engine parameters per spec requirements.
"""

import os
import sys
import argparse
import time
import warnings
import torch
import numpy as np
from pathlib import Path
from typing import Optional, Tuple, List, Dict, Any

# Set environment variable for MKL conflicts
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
[2025-10-07T00:39:16] tokens used: 117,674

[2025-10-07T00:39:26] thinking

**Searching for flag implementations**
[2025-10-07T00:39:28] exec bash -lc 'rg "nonoise" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:28] bash -lc 'rg "nonoise" -n src/nanobrag_torch' succeeded in 733ms:
src/nanobrag_torch/__main__.py:339:    parser.add_argument('-nonoise', action='store_true',
src/nanobrag_torch/__main__.py:711:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1185:        # CLI-FLAGS-003: Honor -nonoise flag
[2025-10-07T00:39:28] tokens used: 120,479

[2025-10-07T00:39:32] thinking

**Evaluating existing -nonoise option**
[2025-10-07T00:39:33] exec bash -lc 'rg "pix0_vector" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:33] bash -lc 'rg "pix0_vector" -n src/nanobrag_torch' succeeded in 672ms:
src/nanobrag_torch/__main__.py:187:    parser.add_argument('-pix0_vector', nargs=3, type=float,
src/nanobrag_torch/__main__.py:190:    parser.add_argument('-pix0_vector_mm', nargs=3, type=float,
src/nanobrag_torch/__main__.py:462:            args.pix0_vector, args.pix0_vector_mm]):
src/nanobrag_torch/__main__.py:557:    if args.pix0_vector and args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:558:        raise ValueError("Cannot specify both -pix0_vector and -pix0_vector_mm simultaneously")
src/nanobrag_torch/__main__.py:560:    if args.pix0_vector:
src/nanobrag_torch/__main__.py:561:        config['custom_pix0_vector'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:562:        # pix0_vector is in meters, convert to config
src/nanobrag_torch/__main__.py:563:        config['pix0_override_m'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:564:    elif args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:566:        config['pix0_override_m'] = tuple(x * 0.001 for x in args.pix0_vector_mm)
src/nanobrag_torch/__main__.py:567:        config['custom_pix0_vector'] = config['pix0_override_m']
src/nanobrag_torch/simulator.py:1200:                # Output pix0_vector first
src/nanobrag_torch/simulator.py:1201:                pix0 = self.detector.pix0_vector
src/nanobrag_torch/simulator.py:1202:                print(f"TRACE_PY: pix0_vector_meters {pix0[0].item():.15g} {pix0[1].item():.15g} {pix0[2].item():.15g}")
src/nanobrag_torch/models/detector.py.backup:103:        # Calculate and cache pix0_vector (position of first pixel)
src/nanobrag_torch/models/detector.py.backup:104:        self._calculate_pix0_vector()
src/nanobrag_torch/models/detector.py.backup:113:        self._cached_pix0_vector = self.pix0_vector.clone()
src/nanobrag_torch/models/detector.py.backup:197:        # Recalculate pix0_vector when geometry changes
src/nanobrag_torch/models/detector.py.backup:198:        self._calculate_pix0_vector()
[2025-10-07T00:39:33] tokens used: 120,890

[2025-10-07T00:39:38] thinking

**Analyzing CLI-FLAGS-003 support status**
[2025-10-07T00:39:38] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:39] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 689ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-07T00:39:39] tokens used: 122,997

[2025-10-07T00:39:41] thinking

**Viewing section content**
[2025-10-07T00:39:41] exec bash -lc "sed -n '448,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:42] bash -lc "sed -n '448,620p' docs/fix_plan.md" succeeded in 708ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- Next Actions (2025-10-06 ralph update):
  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-07T00:39:42] tokens used: 123,224

[2025-10-07T00:39:53] thinking

**Reviewing CLI and Vectorization Plans**

I'll dig into the current state of the CLI flags handling and vectorization plans, noting some discrepancies in task completion status. I need to thoroughly analyze the code and documentation like `pytorch_design.md` and `vectorization.md` to identify gaps and align with long-term goals before moving on to the coin flip step for reviewing past work.
[2025-10-07T00:39:55] exec bash -lc "sed -n '220,360p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:39:55] bash -lc "sed -n '220,360p' docs/fix_plan.md" succeeded in 670ms:
    Observations/Hypotheses: Need a harness that feeds multi-source tensors through `BeamConfig` (or directly updates `_source_*` caches) before instantiating `Simulator`. Until that exists, P3.0c cannot close nor can Phase 3 be declared complete.
    Next Actions: Repair the validation script, regenerate CPU/CUDA results with unequal weights, archive outputs under `reports/benchmarks/<date>-multi-source-normalization/`, then resume P3.2/P3.3 and P3.5.
  * [2025-09-30] Attempt #26 (ralph loop) — Result: P3.0c COMPLETE (validated). Fixed validation script to use repo-relative path (line 168-174), resolved FileNotFoundError. Re-ran validation successfully with weighted sources (2.0 & 3.0 weights, λ 6.2Å & 8.0Å) plumbed through BeamConfig constructor.
    Metrics: CPU total=5.750597e-05, CUDA total=5.750608e-05, rel_diff=1.771353e-06 (<0.0002% vs threshold 0.01%). Multi-source caching verified: directions shape torch.Size([2,3]), wavelengths [6.2Å, 8.0Å], weights [2.0, 3.0].
    Artifacts: `reports/benchmarks/20250930-multi-source-normalization/validation_results.json`; corrected `scripts/validate_weighted_source_normalization.py` (Path-based output).
    Observations/Hypotheses: Validation now exercises BeamConfig-based source injection, confirming _source_* tensors are properly cached during Simulator.__init__. CPU/CUDA self-consistency proven with unequal weights. Phase 3 decision memo can proceed using existing P3.2/P3.3 benchmark data.
    Next Actions: Mark P3.0c as complete in plan.md; Phase 3 complete—all tasks delivered with valid parity evidence.
  * [2025-10-11] Attempt #27 (supervisor loop BH) — Result: follow-up required. Commit 0a78312 removed the absolute output path but still hard-codes the directory name (`reports/benchmarks/20250930-multi-source-normalization/`), so repeated runs overwrite evidence and Phase A0 remains only partially satisfied. Plan updated to `[P]` with guidance to parameterise the stamp/CLI override before closing the task.
    Metrics: n/a (analysis only).
    Artifacts: plans/active/perf-pytorch-compile-refactor/plan.md (A0 row updated).
    Observations/Hypotheses: Need dynamic stamping (e.g., timestamped directory or CLI argument) so future reruns land under `reports/benchmarks/<date>-.../` per plan expectations. Until then Phase A baseline capture remains blocked.
    Next Actions: Ralph to extend the script with an `--out` flag or timestamped default, rerun validation, and update plan/fix-plan entries with new artifact paths.
  * [2025-10-01] Attempt #28 (ralph loop BJ) — Result: success. Added timestamped default directory and `--outdir` CLI flag to `scripts/validate_weighted_source_normalization.py`.
    Metrics: Validation run successful (CPU total=5.750597e-05, CUDA total=5.750608e-05, rel_diff=1.771353e-06). Core geometry tests 31/31 passed in 5.26s.
    Artifacts: `reports/benchmarks/20251001-004135-multi-source-normalization/validation_results.json` (timestamped), `reports/benchmarks/custom-test/validation_results.json` (CLI override test).
    Observations/Hypotheses: Script now defaults to `reports/benchmarks/YYYYMMDD-HHMMSS-multi-source-normalization/` pattern, ensuring successive runs produce unique directories. CLI flag `--outdir` allows explicit override (relative or absolute paths). Fix unblocks Phase A baseline capture.
    Next Actions: Mark plan.md task A0 as `[X]` complete. Proceed with A1-A4 baseline benchmarks.
  * [2025-09-30] Attempt #23 (ralph loop BC) — Result: Phase 3 decision memo written BEFORE Attempt #22 invalidation. Wrote comprehensive memo integrating P3.0–P3.4 deliverables and CPU/CUDA benchmarks assuming P3.0c was valid. Recommendation: DEFER Phase 4 (graph optimization) given CUDA meets all targets (1.55–3.33× faster than C across 256²–1024²) and only large CPU detectors (1024²) show deficit (2.4× slower).
    Metrics: CPU — 256²: 4.07× faster, 512²: 1.23× slower (within tolerance), 1024²: 2.43× slower. CUDA — 256²: 1.55× faster, 512²: 1.69× faster, 1024²: 3.33× faster. Cache: 37–6428× setup speedup. Correlations ≈1.0 throughout.
    Artifacts: `reports/benchmarks/20250930-perf-summary/PHASE_3_DECISION.md` (decision memo - **PROVISIONAL pending P3.0c correction**), `reports/benchmarks/20250930-perf-summary/cpu/P3.2_summary.md` (CPU), `reports/benchmarks/20250930-220739/benchmark_results.json` (CUDA).
[2025-10-07T00:39:55] tokens used: 127,325

[2025-10-07T00:40:01] thinking

**Evaluating deep analysis and next steps**

I’m focusing on inspecting the code and understanding the CLI plan’s open tasks, especially issues around intensity mismatch and normalization. I see a note about flipping a coin with Python to decide whether to review certain iterations or move on, so I’ll prepare to run that command in the repo root next.
[2025-10-07T00:40:03] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:03] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 687ms:
tails
[2025-10-07T00:40:03] tokens used: 129,697

[2025-10-07T00:40:17] thinking

**Evaluating plan update necessity**

I'm analyzing the current CLI and vectorization plans to decide whether to update the existing plan or create a new one, focusing on confirming task completion like Phase K3g3 and determining next steps for Phase L. I'll review documentation and reports to gather solid evidence before proceeding with any plan modifications.
[2025-10-07T00:40:19] exec bash -lc 'cat reports/2025-10-cli-flags/phase_i/supervisor_command/README.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:19] bash -lc 'cat reports/2025-10-cli-flags/phase_i/supervisor_command/README.md' succeeded in 856ms:
# CLI-FLAGS-003 Phase I3 Supervisor Command Evidence

**Date:** 2025-10-06
**Engineer:** Ralph (Loop i=32)
**Status:** ❌ PARITY FAILURE - Intensity scaling discrepancy (×124,538)
**Plan Reference:** `plans/active/cli-noise-pix0/plan.md:110`, `docs/fix_plan.md:448`

## Executive Summary

Executed Phase I3 final parity validation per supervisor input. Both C and PyTorch implementations completed successfully, but **parity check failed** with:
- **Correlation:** 0.9978 (< 0.999 threshold)
- **Sum Ratio (Py/C):** 124,538× (should be ~1.0)
- **Max Intensity:** C=446, PyTorch=5.411×10⁷ (121,000× discrepancy)

**Root Cause:** Intensity scaling/normalization bug in PyTorch implementation. Values are consistent in pattern (high correlation) but catastrophically wrong in absolute magnitude.

## nb-compare Tooling Fix (Successfully Deployed)

### Issue
`scripts/nb_compare.py` failed to parse non-standard detector dimensions (`-detpixels_x 2463 -detpixels_y 2527`), causing:
[2025-10-07T00:40:19] tokens used: 130,835

[2025-10-07T00:40:24] thinking

**Reviewing fix_plan attempt history**
[2025-10-07T00:40:24] exec bash -lc 'rg "Attempt #49" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:25] bash -lc 'rg "Attempt #49" -n docs/fix_plan.md' succeeded in 683ms:
459:  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
461:  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
745:  * [2025-10-06] Attempt #49 (ralph) — Result: **SUCCESS** (Phase K3g3 test isolation fix). **Fdump.bin contamination identified and resolved; scaling parity test now PASSES.**
[2025-10-07T00:40:25] tokens used: 134,274

[2025-10-07T00:40:32] thinking

**Checking status around Attempt #49**
[2025-10-07T00:40:33] exec bash -lc "sed -n '720,820p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:34] bash -lc "sed -n '720,820p' docs/fix_plan.md" succeeded in 725ms:
      - `reports/2025-10-cli-flags/phase_k/base_lattice/summary.md` — 2025-11-08 update capturing placeholder-volume root cause and commit 46ba36b remediation.
      - `tests/test_cli_scaling.py::TestMOSFLMCellVectors::test_mosflm_cell_vectors` — Regression test asserting |a|/|b|/|c| and V_cell within 5e-4 of C reference.
    Observations/Hypotheses:
      - MOSFLM branch now mirrors C pipeline (V_star dot, V_cell inversion, real-vector rebuild, reciprocal dual recompute).
      - Base lattice traces still show historical 40× deltas until the harness is rerun; expect Δh/Δk/Δl < 5e-4 once logs refreshed.
      - Normalization parity remains to be confirmed via Phase K3g3 scaling rerun.
    Next Actions: Execute Phase K3g3 — rerun `tests/test_cli_scaling.py::test_f_latt_square_matches_c` with `NB_RUN_PARALLEL=1`, refresh `phase_k/f_latt_fix/` scaling_chain artifacts + nb-compare, then regenerate `trace_py.log` so summary diff reflects corrected vectors before moving to Phase L.
  * [2025-10-06] Attempt #48 (galph) — Result: **PARITY FAILURE** (Phase K3g3 evidence collection). **MOSFLM rescale fix insufficient; correlation 0.174 indicates fundamental physics divergence.**
    Metrics: Parity test FAILED with correlation=0.174 (<0.999 threshold), sum_ratio=1.45 (expect ~1.0), max_ratio=2.13, peak_distance=122–272 px (>1 px threshold). Dtype analysis (float32 vs float64) shows F_latt_b error=93.98% in BOTH dtypes, ruling out precision as root cause.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/pytest_post_fix.log` — pytest output showing test failure (correlation 0.174)
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/test_metrics_failure.json` — {c_sum: 1627779, py_sum: 2360700, sum_ratio: 1.45, correlation: 0.174}
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/nb_compare_post_fix/summary.json` — nb-compare metrics with PNGs (c.png, py.png, diff.png)
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/nb_compare_post_fix/README.md` — Executive summary with observations and next actions
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output_post_fix_fp32.txt` — Float32 dtype sweep showing F_latt_b error 93.98%
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output_post_fix_fp64.txt` — Float64 dtype sweep confirming error persists
      - `reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md` — Updated with Phase K3g3 failure metrics and blocker summary
    Observations/Hypotheses:
      - **Low correlation (0.174)** indicates images are nearly uncorrelated, suggesting fundamental physics divergence beyond simple scaling mismatch
      - **Intensity excess (1.45× sum, 2.13× max)** shows PyTorch produces significantly brighter images overall
[2025-10-07T00:40:34] tokens used: 134,627

[2025-10-07T00:40:36] thinking

**Continuing to scroll through Attempt #49**
[2025-10-07T00:40:36] exec bash -lc "sed -n '820,940p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:37] bash -lc "sed -n '820,940p' docs/fix_plan.md" succeeded in 711ms:
      - **Missing C instrumentation:** F_latt components, fractional h/k/l not logged in C trace; cannot validate lattice factors until Phase K1 adds instrumentation
    Next Actions:
      1. **BLOCK Phase K normalization work** until pix0 parity resolved; 1.1mm delta will cascade into incorrect Miller index calculations
      2. Add detailed pix0 calculation trace to BOTH C and PyTorch (log Xbeam, Ybeam, Fbeam, Sbeam, basis dot products, pivot terms)
      3. Compare step-by-step pix0 derivation to identify where C and PyTorch diverge
      4. Once pix0 matches (<5e-5 m), resume Phase K1 F_latt work with C instrumentation
  * [2025-10-17] Attempt #25 (ralph) — Result: success (Phase H4a-c complete). **Post-rotation beam-centre recomputation implemented and verified.**
    Metrics: pix0_vector parity achieved - C vs PyTorch deltas < 2e-8 m (well within 5e-5 m tolerance). Test suite: test_cli_flags.py 23/23 passed, test_detector_geometry.py 12/12 passed, test_crystal_geometry.py 19/19 passed (54 total).
    Artifacts:
      - `src/nanobrag_torch/models/detector.py:692-726` - Ported nanoBragg.c lines 1851-1860
      - `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/` - Implementation notes, parity summary, C/PyTorch traces
      - `tests/test_cli_flags.py:451-452,483-489,517-525` - Updated test with corrected beam_center mapping and 5e-5 m tolerance
    Observations/Hypotheses:
      - **H4a Implementation:** Ported newvector = (close_distance/r_factor)*beam - pix0, then Fbeam/Sbeam = dot(fdet/sdet, newvector), distance_corrected = close_distance/r_factor
      - **Critical Bug Fix:** Test beam_center mapping corrected from MOSFLM (Fbeam=Ybeam) to CUSTOM (Fbeam=Xbeam) convention
      - **pix0 Parity Verified:** Deltas X=1.13e-9 m, Y=1.22e-8 m, Z=1.90e-9 m (all < 2e-8 m, well within 5e-5 m spec)
    Next Actions: Execute Phase I (polarization alignment) per plan: audit polarization inputs, port Kahn factor, run final parity sweep.
  * [2025-10-05] Phase A Complete — Tasks A1-A3 executed per plan.
    Metrics: C reference behavior captured for both flags via parallel command execution.
    Artifacts:
[2025-10-07T00:40:37] tokens used: 136,879

[2025-10-07T00:40:46] thinking

**Evaluating plan update needs**
[2025-10-07T00:40:47] exec bash -lc 'cat src/nanobrag_torch/io/hkl.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:47] bash -lc 'cat src/nanobrag_torch/io/hkl.py' succeeded in 772ms:
"""
HKL file reader and Fdump binary cache for nanoBragg PyTorch.

Implements AT-STR-001, AT-STR-002, and AT-IO-003 from spec-a.md.
"""

import struct
from pathlib import Path
from typing import Tuple, Optional

import torch
import numpy as np


def read_hkl_file(
    filepath: str,
    default_F: float = 0.0,
    device=None,
    dtype=torch.float32
) -> Tuple[torch.Tensor, dict]:
[2025-10-07T00:40:47] tokens used: 139,141

[2025-10-07T00:40:52] thinking

**Preparing to analyze Simulator scaling**

I’m focusing on understanding the Simulator’s scaling to address intensity mismatch issues and support Phase L investigations. I plan to check key report summaries and relevant specs like `specs/spec-a-core.md` to ground the upcoming plan update accurately.
[2025-10-07T00:40:53] exec bash -lc 'cat specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:54] bash -lc 'cat specs/spec-a-core.md' succeeded in 693ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-07T00:40:54] tokens used: 142,062

[2025-10-07T00:40:56] thinking

**Checking CLI specification file**
[2025-10-07T00:40:57] exec bash -lc 'cat specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:40:58] bash -lc 'cat specs/spec-a-cli.md' succeeded in 684ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-07T00:40:58] tokens used: 145,277

[2025-10-07T00:41:03] thinking

**Preparing to update plan with new tasks**

I’m gathering details to update the plan file for the CLI-noise project. I’ll need to review recent test results and a report summary to identify new scaling issues, then add focused tasks for Phase L addressing these findings and reproduction commands.
[2025-10-07T00:41:04] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/nb_compare_20251006172653/README.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:05] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/nb_compare_20251006172653/README.md' exited 1 in 743ms:
cat: reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/nb_compare_20251006172653/README.md: No such file or directory
[2025-10-07T00:41:05] tokens used: 148,486

[2025-10-07T00:41:06] thinking

**Listing directory contents**
[2025-10-07T00:41:07] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:07] bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix' succeeded in 679ms:
c_trace_20251006171510.log
c_trace_full_20251006171510.log
first_divergence.md
nb_compare_
nb_compare_.log
py_trace_20251006171510.log
pytest_summary.txt
trace_comparison_summary.md
[2025-10-07T00:41:07] tokens used: 148,773

[2025-10-07T00:41:10] thinking

**Checking directory contents**
[2025-10-07T00:41:11] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/nb_compare_' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:12] bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/nb_compare_' succeeded in 702ms:
c.png
c_stderr.txt
c_stdout.txt
diff.png
py.png
py_stderr.txt
py_stdout.txt
summary.json
[2025-10-07T00:41:12] tokens used: 149,089

[2025-10-07T00:41:15] thinking

**Reviewing summary**
[2025-10-07T00:41:16] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/nb_compare_/summary.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:16] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/nb_compare_/summary.json' succeeded in 667ms:
{
  "correlation": 0.9965238527638988,
  "mse": 1763503360.0,
  "rmse": 41994.0859375,
  "max_abs_diff": 58357068.0,
  "c_sum": 6490.8203125,
  "py_sum": 820878912.0,
  "sum_ratio": 126467.671875,
  "mean_peak_distance": 37.79219496139381,
  "max_peak_distance": 377.9219496139381,
  "runtime_c_ms": 550,
  "runtime_py_ms": 7656,
  "speedup": 0.07196208350353851,
  "args": [
    "-mat",
    "A.mat",
    "-floatfile",
    "img.bin",
    "-hkl",
    "scaled.hkl",
[2025-10-07T00:41:16] tokens used: 149,804

[2025-10-07T00:41:20] thinking

**Planning debugging approach**
[2025-10-07T00:41:21] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:21] bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md' exited 1 in 668ms:
cat: reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/summary.md: No such file or directory
[2025-10-07T00:41:21] tokens used: 150,888

[2025-10-07T00:41:23] thinking

**Examining directory names**
[2025-10-07T00:41:24] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:25] bash -lc 'ls reports/2025-10-cli-flags/phase_k' succeeded in 665ms:
base_lattice
f_latt_fix
[2025-10-07T00:41:25] tokens used: 151,073

[2025-10-07T00:41:28] thinking

**Listing base_lattice**
[2025-10-07T00:41:29] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/base_lattice' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:29] bash -lc 'ls reports/2025-10-cli-flags/phase_k/base_lattice' succeeded in 668ms:
README.md
c_stdout.txt
compare_traces.py
metadata.json
post_fix
run_c_trace.sh
summary.md
trace_harness.py
trace_py.log
[2025-10-07T00:41:29] tokens used: 151,227

[2025-10-07T00:41:31] thinking

**Noticing a summary**
[2025-10-07T00:41:32] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:41:32] bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/summary.md' succeeded in 664ms:
======================================================================
Phase K3f3: Base Lattice Trace Comparison
======================================================================
C trace:  /home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_k/base_lattice/c_stdout.txt
Py trace: /home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_k/base_lattice/trace_py.log

======================================================================
RECIPROCAL VECTORS (Å⁻¹, λ-scaled)
======================================================================
  a_star: DIVERGE
    C:      [-0.0290511, -0.0293959, 0.0107499]
    Py:     [-1.177003215, -1.190972323, 0.435530564]
    Delta:  [1.147952115, 1.161576423, 0.424780664] (max=1.161576423)
    Ratio:  [40.51492766, 40.51491273, 40.51484795]

  b_star: DIVERGE
    C:      [-0.00312639, 0.0104376, -0.0328567]
    Py:     [-0.126665578, 0.4228804311, -1.331186015]
    Delta:  [0.123539188, 0.4124428311, 1.298329315] (max=1.298329315)
    Ratio:  [40.5149639, 40.51510224, 40.51490305]
[2025-10-07T00:41:32] tokens used: 151,508

[2025-10-07T00:41:58] thinking

**Updating detailed plan structure**

I’m clarifying how to expand and restructure the plan by marking Phase K3g as complete and creating a more granular Phase L with subtasks focusing on normalization and HKL ingestion parity. I’ll also gather relevant document references and map hypotheses to debugging steps before editing the plan and fix_plan files.
[2025-10-07T00:41:59] exec bash -lc 'ls scripts/validation' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:42:00] bash -lc 'ls scripts/validation' succeeded in 771ms:
README.md
[2025-10-07T00:42:00] tokens used: 155,123

[2025-10-07T00:42:16] thinking

**Drafting detailed plan update for Phase L tasks**

I’m outlining a careful plan update with clear instructions and task breakdowns for Phase L, including creating validation scripts, documenting root causes, and rerunning parity checks. I'll specify commands and file paths to guide execution, plus update plan statuses and notes accordingly.
[2025-10-07T00:42:17] exec bash -lc 'rg "trace_scaling" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:42:18] bash -lc 'rg "trace_scaling" -n' succeeded in 830ms:
reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py:46:def trace_scaling_chain(pixel_s, pixel_f, crystal, detector, beam_config, simulator):
reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py:217:    trace = trace_scaling_chain(
[2025-10-07T00:42:18] tokens used: 156,697

[2025-10-07T00:42:21] thinking

**Checking existing analysis scripts**
[2025-10-07T00:42:21] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_j/analyze_scaling.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:42:22] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_j/analyze_scaling.py" succeeded in 664ms:
#!/usr/bin/env python3
"""
Analyze scaling factor differences between C and PyTorch implementations.
Part of CLI-FLAGS-003 Phase J.
"""

import sys
import re
from pathlib import Path

def parse_trace(filepath):
    """Extract scaling factors from trace log."""
    factors = {}

    with open(filepath) as f:
        for line in f:
            # Match both TRACE_C: and TRACE_PY: lines
            match = re.match(r'TRACE_(?:C|PY):\s+(\w+)\s+([\d.e+-]+)', line)
            if match:
                key, value = match.groups()
[2025-10-07T00:42:22] tokens used: 156,982

[2025-10-07T00:42:38] thinking

**Drafting detailed phase L plan**
[2025-10-07T00:42:39] exec bash -lc 'ls reports/2025-10-cli-flags/phase_j' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:42:40] bash -lc 'ls reports/2025-10-cli-flags/phase_j' succeeded in 907ms:
analyze_scaling.py
scaling_chain.md
trace_c_scaling.log
trace_py_scaling.log
[2025-10-07T00:42:40] tokens used: 161,214

[2025-10-07T00:42:44] thinking

**Confirming regeneration steps for scaled lattice traces**
[2025-10-07T00:42:44] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:42:45] bash -lc 'cat reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh' succeeded in 744ms:
#!/bin/bash
# K3f1: Capture C baseline trace for lattice + scattering
# Generated: 2025-10-06 for Phase K3f evidence

set -e

export NB_C_BIN=./golden_suite_generator/nanoBragg

# Supervisor command from input.md (Do Now section)
"$NB_C_BIN" \
  -mat A.mat \
  -floatfile /tmp/c_img_k3f.bin \
  -hkl scaled.hkl \
  -nonoise \
  -nointerpolate \
  -oversample 1 \
  -exposure 1 \
  -flux 1e18 \
  -beamsize 1.0 \
  -spindle_axis -1 0 0 \
[2025-10-07T00:42:45] tokens used: 161,601

[2025-10-07T00:42:50] thinking

**Outlining trace generation steps**
[2025-10-07T00:42:50] exec bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:42:51] bash -lc "sed -n '1,200p' reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py" succeeded in 766ms:
#!/usr/bin/env python3
"""
Phase K3f2: PyTorch base lattice trace harness
Emits TRACE_PY_BASE lines matching C baseline for comparison.

CRITICAL: Uses detector.get_pixel_coords() directly as the sample→pixel vector.
Do NOT subtract pix0_vector because coordinates already include that origin offset.
"""

import os
import sys
import torch
import argparse
from pathlib import Path

# Ensure editable install is used
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent.parent / "src"))

os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

[2025-10-07T00:42:51] tokens used: 162,500

[2025-10-07T00:42:57] thinking

**Updating plan with test phase details**
[2025-10-07T00:43:11] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -10,2 +10,3 @@
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
@@ -213,8 +214,8 @@
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
@@ -222,4 +223,5 @@
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |
[2025-10-07T00:43:11] apply_patch(auto_approved=true) exited 0 in 15ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T00:43:11] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |

[2025-10-07T00:43:11] tokens used: 167,595
[2025-10-07T00:43:11] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:43:17] thinking

**Updating plan tasks in documentation**

I need to check if the script at `scripts/validation/compare_structure_factors.py` exists, and if it doesn't, I'll write it. Then, I'll update the `docs/fix_plan.md` file around line 455 to revise the Next Actions section for `CLI-FLAGS-003`, replacing the old Phase K3g3 tasks with new Phase L1-L3 steps. I'll carefully patch the bullet list to reflect the updated task list and dates, ensuring everything aligns with the current plan.
[2025-10-07T00:43:20] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,6 +457,6 @@
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
[2025-10-07T00:43:20] apply_patch(auto_approved=true) exited 0 in 25ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T00:43:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |

[2025-10-07T00:43:20] tokens used: 170,412
[2025-10-07T00:43:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:43:27] thinking

**Verifying plan updates and preparing analysis**

I’m double-checking that all plan references and statuses are updated consistently across docs and notes. With the focus issue `CLI-FLAGS-003 Phase L` selected, I’m shifting attention to gathering deeper insights—starting with looking at the `BeamConfig` in the code to confirm hypotheses about the flux or fluence calculations before drafting the input file.
[2025-10-07T00:43:28] exec bash -lc 'rg "fluence" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:43:29] bash -lc 'rg "fluence" -n src/nanobrag_torch' succeeded in 1.14s:
src/nanobrag_torch/__main__.py:315:    parser.add_argument('-fluence', type=float, metavar='photons/m^2',
src/nanobrag_torch/__main__.py:665:    elif args.fluence:
src/nanobrag_torch/__main__.py:666:        config['fluence'] = args.fluence
src/nanobrag_torch/__main__.py:774:    if beam_config.fluence:
src/nanobrag_torch/__main__.py:775:        print(f"  Fluence: {beam_config.fluence:.2e} photons/m²")
src/nanobrag_torch/__main__.py:1048:        elif 'fluence' in config:
src/nanobrag_torch/__main__.py:1049:            beam_config.fluence = config['fluence']
src/nanobrag_torch/simulator.py:512:        # Use fluence from beam config (AT-FLU-001)
src/nanobrag_torch/simulator.py:513:        self.fluence = torch.tensor(self.beam_config.fluence, device=self.device, dtype=self.dtype)
src/nanobrag_torch/simulator.py:1067:            * self.fluence
src/nanobrag_torch/simulator.py:1315:                    # Calculate I_before_scaling (this is before r_e^2 * fluence / steps)
src/nanobrag_torch/simulator.py:1323:                    print(f"TRACE_PY: fluence_photons_per_m2 {self.fluence.item():.15g}")
src/nanobrag_torch/simulator.py:1369:                print(f"TRACE: Fluence = {self.fluence:.12e}")
src/nanobrag_torch/simulator.py:1374:                print(f"  normalized * r_e^2 * fluence")
src/nanobrag_torch/simulator.py:1375:                print(f"  = {normalized_intensity[target_slow, target_fast].item():.12e} * {self.r_e_sqr:.12e} * {self.fluence:.12e}")
src/nanobrag_torch/simulator.py:1385:        I_bg = (F_bg^2) · r_e^2 · fluence · (water_size^3) · 1e6 · Avogadro / water_MW
src/nanobrag_torch/simulator.py:1390:        - fluence = photons per square meter
src/nanobrag_torch/simulator.py:1414:            * self.fluence
src/nanobrag_torch/config.py:44:if(strstr(argv[i], "-fluence") && (argc > (i+1)))
src/nanobrag_torch/config.py:46:    fluence = atof(argv[i+1]);
[2025-10-07T00:43:29] tokens used: 171,463
[2025-10-07T00:43:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:43:34] thinking

**Verifying default fluence and RBC consistency**
[2025-10-07T00:43:35] exec bash -lc "sed -n '500,580p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:43:36] bash -lc "sed -n '500,580p' src/nanobrag_torch/config.py" succeeded in 706ms:
    source_directions: Optional[torch.Tensor] = None  # (N, 3) unit direction vectors from sample to sources
    source_weights: Optional[torch.Tensor] = None  # (N,) source weights (ignored per spec, all equal)
    source_wavelengths: Optional[torch.Tensor] = None  # (N,) wavelengths in meters for each source

    # Beam polarization
    # C defaults: polar=1.0, polarization=0.0, nopolar=0 (golden_suite_generator/nanoBragg.c:308-309)
    # polar controls the Kahn factor application; polarization is the E-vector rotation angle
    # CRITICAL (CLI-FLAGS-003 Phase K3b): C code initializes polar=1.0 but resets polarization=0.0
    # per pixel (nanoBragg.c:3732), computing ~0.9126 dynamically. PyTorch default 0.0 triggers
    # this same computation path, matching C behavior. User can override via -polar flag.
    polarization_factor: float = 0.0  # Kahn polarization factor K in [0,1] (0.0 = compute from geometry, matches C default behavior)
    nopolar: bool = False  # If True, force polarization factor to 1 (disable polarization)
    polarization_axis: tuple[float, float, float] = (0.0, 0.0, 1.0)  # Polarization E-vector direction

    # Flux and fluence parameters (AT-FLU-001)
    flux: float = 0.0  # Photons per second
    exposure: float = 0.0  # Exposure time in seconds
    beamsize_mm: float = 0.0  # Beam size in mm (used for fluence calculation and sample clipping)
    fluence: float = 125932015286227086360700780544.0  # Photons per square meter (default from C code)

[2025-10-07T00:43:36] tokens used: 172,601
[2025-10-07T00:43:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:43:43] thinking

**Analyzing fluence calculation discrepancies**
[2025-10-07T00:43:44] exec bash -lc "sed -n '1000,1100p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:43:45] bash -lc "sed -n '1000,1100p' src/nanobrag_torch/simulator.py" succeeded in 690ms:
                    pixel_coords_angstroms, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star,
                    incident_beam_direction=incident_dirs_batched,
                    wavelength=wavelengths_batched,
                    source_weights=source_weights
                )
                # The weighted sum over sources is done inside _compute_physics_for_position
            else:
                # Single source case: use default beam parameters
                intensity = self._compute_physics_for_position(
                    pixel_coords_angstroms, rot_a, rot_b, rot_c, rot_a_star, rot_b_star, rot_c_star
                )

            # Normalize by steps
            normalized_intensity = intensity / steps

            # PERF-PYTORCH-004 P3.0b: Polarization is now applied per-source inside compute_physics_for_position
            # Only omega needs to be applied here

            # Calculate airpath for pixel centers
            pixel_squared_sum = torch.sum(
[2025-10-07T00:43:45] tokens used: 174,336
[2025-10-07T00:43:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:43:48] thinking

**Inspecting polarization factor usage**
[2025-10-07T00:43:48] exec bash -lc 'rg "polar" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:43:49] bash -lc 'rg "polar" src/nanobrag_torch/simulator.py' succeeded in 732ms:
from .utils.physics import sincg, sinc3, polarization_factor
    apply_polarization: bool = True,
    polarization_axis: Optional[torch.Tensor] = None,
        apply_polarization: Whether to apply Kahn polarization correction (default True)
        kahn_factor: Polarization factor for Kahn correction (0=unpolarized, 1=fully polarized)
        polarization_axis: Polarization axis unit vector (3,) or broadcastable shape
    # PERF-PYTORCH-004 P3.0b: Apply polarization PER-SOURCE before weighted sum
    # IMPORTANT: Apply polarization even when kahn_factor==0.0 (unpolarized case)
    # The formula 0.5*(1.0 + cos²(2θ)) is the correct unpolarized correction
    if apply_polarization:
        # Calculate polarization factor for each source
            # Multi-source case: apply per-source polarization
            # Flatten for polarization calculation
            # Calculate polarization
            polar_flat = polarization_factor(
                polarization_axis
                polar = polar_flat.reshape(n_sources, -1)
                polar = polar_flat.reshape(n_sources, diffracted_beam_unit.shape[0], diffracted_beam_unit.shape[1])
            # Apply polarization per source
            intensity = intensity * polar
[2025-10-07T00:43:49] tokens used: 176,547
[2025-10-07T00:43:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:43:54] thinking

**Analyzing physics calculation discrepancies and planning input.md creation**

I'm noticing a big difference in final intensity likely due to structure factor scaling differences between Python and C versions. I want to verify this by checking default structure factor usage and scaling in both. Next, I'm preparing to write an input.md file following instructions, carefully including a header with summary, mode (choosing Parity), focus on the relevant plan item, and determining the current git branch to include.
[2025-10-07T00:44:04] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:44:05] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 883ms:
feature/spec-based-2
[2025-10-07T00:44:05] tokens used: 177,846
[2025-10-07T00:44:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:44:23] thinking

**Drafting detailed task plan**
[2025-10-07T00:44:23] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:44:24] bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix | head' succeeded in 901ms:
c_trace_20251006171510.log
c_trace_full_20251006171510.log
first_divergence.md
nb_compare_
nb_compare_.log
py_trace_20251006171510.log
pytest_summary.txt
trace_comparison_summary.md
[2025-10-07T00:44:24] tokens used: 179,368
[2025-10-07T00:44:24] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:44:27] thinking

**Checking for Fdump files**
[2025-10-07T00:44:28] exec bash -lc 'ls -1 Fdump.bin' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:44:29] bash -lc 'ls -1 Fdump.bin' exited 1 in 711ms:
ls: Fdump.bin: No such file or directory
[2025-10-07T00:44:29] tokens used: 179,636
[2025-10-07T00:44:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:44:35] thinking

**Reviewing Fdump generation and analysis**
[2025-10-07T00:44:36] exec bash -lc 'cat reports/2025-10-cli-flags/phase_j/scaling_chain.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:44:36] bash -lc 'cat reports/2025-10-cli-flags/phase_j/scaling_chain.md' succeeded in 684ms:
# Scaling Chain Analysis: C vs PyTorch

**Pixel:** (slow=1039, fast=685)

## Key Findings

**First Divergence:** `I_before_scaling`
- C value: 1.480792010454e+15
- PyTorch value: 5.344373483470e+08
- Ratio (Py/C): 3.609132e-07

**Final Intensity Ratio (Py/C):** 1.053e-05

## Full Factor Comparison

| Factor | C Value | PyTorch Value | Ratio (Py/C) | Match? |
|--------|---------|---------------|--------------|--------|
| I_before_scaling | 1.480792e+15 | 5.344373e+08 | 3.609132e-07 | ❌ |
| steps | 1.000000e+01 | 1.000000e+01 | 1.000000e+00 | ✅ |
| r_e_sqr | 7.940792e-30 | 7.940792e-30 | 1.000000e+00 | ✅ |
[2025-10-07T00:44:36] tokens used: 180,153
[2025-10-07T00:44:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:44:45] thinking

**Analyzing mismatch hypotheses and preparing input.md**

I'm considering past discrepancies in values like pyro’s polar and `I_before_scaling` versus C’s, recognizing that recent fixes might have improved alignment but need confirmation via new logs. Since comprehensive tests aren't allowed due to gating rules, I'll focus on careful, non-mutating probes and plan to fully overwrite the `input.md` after reviewing its current content to stay consistent.
[2025-10-07T00:44:47] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:44:48] bash -lc 'cat input.md' succeeded in 864ms:
Summary: Validate the MOSFLM scaling fix so CLI parity evidence can advance toward the supervisor command.
 - Mode: Parity
Focus: CLI-FLAGS-003 K3g3 — MOSFLM scaling parity rerun
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c (use --collect-only first if unsure)
Artifacts: reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/
Do Now: CLI-FLAGS-003 K3g3 — env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c -v
If Blocked: Capture fresh base-lattice traces via reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh and trace_harness.py, archive under reports/2025-10-cli-flags/phase_k/base_lattice/blocked/<timestamp>/, note the stall in docs/fix_plan.md Attempt history, then follow prompts/debug.md trace-first SOP.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:201 — K3g3 exit criteria require the targeted pytest node plus refreshed nb-compare and scaling artifacts before Phase L.
- docs/fix_plan.md:448 — Next Actions call for the same pytest command, scaling_chain.md refresh, and nb-compare rerun to prove the MOSFLM rescale fix.
- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum shows cell tensors match C, but the main diff is still pre-fix; regenerate with new traces after the pytest run.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md — Frozen at the October failure; needs updated factors to confirm the normalization pipeline is corrected.
- specs/spec-a-cli.md: detector & normalization clauses demand matching intensity scaling for -pix0_vector_mm runs before the supervisor command can succeed.
- docs/development/testing_strategy.md:120 — Tier-1 parity requires artifact-backed validation of each CLI addition; K3g3 supplies that proof.

How-To Map:
- export KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg
- STAMP=$(date +%Y%m%d%H%M%S)
[2025-10-07T00:44:48] tokens used: 180,979
[2025-10-07T00:44:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:44:56] thinking

**Drafting detailed instructions file**
[2025-10-07T00:45:09] exec bash -lc "cat <<'EOF' > input.md
Summary: Confirm PyTorch and C ingest "'`scaled.hkl` identically so we can isolate the supervisor-command normalization bug.
 - Mode: Parity
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_l/hkl_parity/; reports/2025-10-cli-flags/phase_l/scaling_trace/
Do Now: CLI-FLAGS-003 Phase L1 — KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md
If Blocked: If the parity script fails, capture raw dumps via `python - <<'"'PY'"'` using `nanobrag_torch.io.hkl.read_hkl_file` and NumPy `np.fromfile` to compute max |ΔF|; save results under `reports/2025-10-cli-flags/phase_l/hkl_parity/blocked/` and log the issue in docs/fix_plan.md before touching simulator code.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
- docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
- specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
- docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.

How-To Map:
- export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
- STAMP=$(date +%Y%m%d%H%M%S)
- "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
- mkdir -p scripts/validation
- If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
- Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.

Pitfalls To Avoid:
- Do not delete or overwrite older reports; keep STAMPed directories.
- Ensure Fdump_scaled_${STAMP}.bin is excluded from git (already ignored) and stored under reports/ if needed.
- No production code edits unless parity proves an issue; gather evidence first.
- Maintain device/dtype neutrality in any helper script (allow device override even if unused now).
- Set KMP_DUPLICATE_LIB_OK=TRUE before every torch import to avoid MKL crashes.
- Keep NB_C_BIN pointed at the instrumented binary; do not fall back to ./nanoBragg.
- Respect Protected Assets (docs/index.md, loop.sh, supervisor.sh, input.md).
- Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
- Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
- If the script surfaces differences, stop and capture traces rather than guessing at fixes.

Pointers:
- plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
- docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
- specs/spec-a-core.md#structure-factors
- docs/architecture/pytorch_design.md#vectorization-strategy
- reports/2025-10-cli-flags/phase_j/scaling_chain.md
- src/nanobrag_torch/io/hkl.py

Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:45:10] bash -lc "cat <<'EOF' > input.md
Summary: Confirm PyTorch and C ingest "'`scaled.hkl` identically so we can isolate the supervisor-command normalization bug.
 - Mode: Parity
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_l/hkl_parity/; reports/2025-10-cli-flags/phase_l/scaling_trace/
Do Now: CLI-FLAGS-003 Phase L1 — KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md
If Blocked: If the parity script fails, capture raw dumps via `python - <<'"'PY'"'` using `nanobrag_torch.io.hkl.read_hkl_file` and NumPy `np.fromfile` to compute max |ΔF|; save results under `reports/2025-10-cli-flags/phase_l/hkl_parity/blocked/` and log the issue in docs/fix_plan.md before touching simulator code.

Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
- docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
- specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
- docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.

How-To Map:
- export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
- STAMP=$(date +%Y%m%d%H%M%S)
- "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
- mkdir -p scripts/validation
- If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
- Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.

Pitfalls To Avoid:
- Do not delete or overwrite older reports; keep STAMPed directories.
- Ensure Fdump_scaled_${STAMP}.bin is excluded from git (already ignored) and stored under reports/ if needed.
- No production code edits unless parity proves an issue; gather evidence first.
- Maintain device/dtype neutrality in any helper script (allow device override even if unused now).
- Set KMP_DUPLICATE_LIB_OK=TRUE before every torch import to avoid MKL crashes.
- Keep NB_C_BIN pointed at the instrumented binary; do not fall back to ./nanoBragg.
- Respect Protected Assets (docs/index.md, loop.sh, supervisor.sh, input.md).
- Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
- Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
- If the script surfaces differences, stop and capture traces rather than guessing at fixes.

Pointers:
- plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
- docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
- specs/spec-a-core.md#structure-factors
- docs/architecture/pytorch_design.md#vectorization-strategy
- reports/2025-10-cli-flags/phase_j/scaling_chain.md
- src/nanobrag_torch/io/hkl.py

Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
EOF
' succeeded in 974ms:

[2025-10-07T00:45:10] tokens used: 185,572
[2025-10-07T00:45:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:45:18] thinking

**Planning to expand file content**
[2025-10-07T00:45:18] exec bash -lc 'cat -n input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:45:19] bash -lc 'cat -n input.md' succeeded in 741ms:
     1	Summary: Confirm PyTorch and C ingest `scaled.hkl` identically so we can isolate the supervisor-command normalization bug.
     2	 - Mode: Parity
     3	Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
     4	Branch: feature/spec-based-2
     5	Mapped tests: none — evidence-only
     6	Artifacts: reports/2025-10-cli-flags/phase_l/hkl_parity/; reports/2025-10-cli-flags/phase_l/scaling_trace/
     7	Do Now: CLI-FLAGS-003 Phase L1 — KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md
     8	If Blocked: If the parity script fails, capture raw dumps via `python - <<'PY'` using `nanobrag_torch.io.hkl.read_hkl_file` and NumPy `np.fromfile` to compute max |ΔF|; save results under `reports/2025-10-cli-flags/phase_l/hkl_parity/blocked/` and log the issue in docs/fix_plan.md before touching simulator code.
     9	
    10	Priorities & Rationale:
    11	- plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
    12	- docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
    13	- specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
    14	- docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
    15	- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
    16	
    17	How-To Map:
    18	- export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
    19	- STAMP=$(date +%Y%m%d%H%M%S)
    20	- "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
[2025-10-07T00:45:19] tokens used: 187,334
[2025-10-07T00:45:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:45:24] thinking

**Planning detailed documentation expansion**
[2025-10-07T00:45:49] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -13,4 +13,8 @@
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
@@ -20,8 +24,15 @@
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
@@ -38,2 +49,7 @@
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
@@ -43,5 +59,11 @@
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
 
[2025-10-07T00:45:49] apply_patch(auto_approved=true) exited 0 in 39ms:
Success. Updated the following files:
M input.md
[2025-10-07T00:45:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..3f7a79b9244470fa8fa1c80c012fca8adf15ff69
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,24 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |

[2025-10-07T00:45:49] tokens used: 191,465
[2025-10-07T00:45:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..3f7a79b9244470fa8fa1c80c012fca8adf15ff69
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,24 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:45:57] thinking

**Checking line count**
[2025-10-07T00:45:58] exec bash -lc 'cat -n input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:45:59] bash -lc 'cat -n input.md' succeeded in 989ms:
     1	Summary: Confirm PyTorch and C ingest `scaled.hkl` identically so we can isolate the supervisor-command normalization bug.
     2	 - Mode: Parity
     3	Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
     4	Branch: feature/spec-based-2
     5	Mapped tests: none — evidence-only
     6	Artifacts: reports/2025-10-cli-flags/phase_l/hkl_parity/; reports/2025-10-cli-flags/phase_l/scaling_trace/
     7	Do Now: CLI-FLAGS-003 Phase L1 — KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md
     8	If Blocked: If the parity script fails, capture raw dumps via `python - <<'PY'` using `nanobrag_torch.io.hkl.read_hkl_file` and NumPy `np.fromfile` to compute max |ΔF|; save results under `reports/2025-10-cli-flags/phase_l/hkl_parity/blocked/` and log the issue in docs/fix_plan.md before touching simulator code.
     9	
    10	Priorities & Rationale:
    11	- plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
    12	- docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
    13	- specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
    14	- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
    15	- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
    16	- docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
    17	- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
    18	- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
    19	- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
    20	
[2025-10-07T00:45:59] tokens used: 289,534
[2025-10-07T00:45:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..3f7a79b9244470fa8fa1c80c012fca8adf15ff69
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,24 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:04] thinking

**Planning to expand documentation**
[2025-10-07T00:46:10] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -69,2 +69,23 @@
 
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
[2025-10-07T00:46:10] apply_patch(auto_approved=true) exited 0 in 56ms:
Success. Updated the following files:
M input.md
[2025-10-07T00:46:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..e6f290c8ee5fb1f7d266923f269107dda8cf90c1
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,45 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |

[2025-10-07T00:46:10] tokens used: 295,306
[2025-10-07T00:46:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..e6f290c8ee5fb1f7d266923f269107dda8cf90c1
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,45 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:12] thinking

**Verifying line count**
[2025-10-07T00:46:13] exec bash -lc 'cat -n input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:46:13] bash -lc 'cat -n input.md' succeeded in 865ms:
     1	Summary: Confirm PyTorch and C ingest `scaled.hkl` identically so we can isolate the supervisor-command normalization bug.
     2	 - Mode: Parity
     3	Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
     4	Branch: feature/spec-based-2
     5	Mapped tests: none — evidence-only
     6	Artifacts: reports/2025-10-cli-flags/phase_l/hkl_parity/; reports/2025-10-cli-flags/phase_l/scaling_trace/
     7	Do Now: CLI-FLAGS-003 Phase L1 — KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md
     8	If Blocked: If the parity script fails, capture raw dumps via `python - <<'PY'` using `nanobrag_torch.io.hkl.read_hkl_file` and NumPy `np.fromfile` to compute max |ΔF|; save results under `reports/2025-10-cli-flags/phase_l/hkl_parity/blocked/` and log the issue in docs/fix_plan.md before touching simulator code.
     9	
    10	Priorities & Rationale:
    11	- plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
    12	- docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
    13	- specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
    14	- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
    15	- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
    16	- docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
    17	- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
    18	- reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
    19	- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
    20	
[2025-10-07T00:46:13] tokens used: 296,061
[2025-10-07T00:46:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..e6f290c8ee5fb1f7d266923f269107dda8cf90c1
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,45 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:17] thinking

**Extending document with verification and timeboxing sections**
[2025-10-07T00:46:21] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -89,2 +89,14 @@
 
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
[2025-10-07T00:46:21] apply_patch(auto_approved=true) exited 0 in 52ms:
Success. Updated the following files:
M input.md
[2025-10-07T00:46:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |

[2025-10-07T00:46:21] tokens used: 299,146
[2025-10-07T00:46:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:23] thinking

**Verifying line count**
[2025-10-07T00:46:24] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:46:25] bash -lc 'wc -l input.md' succeeded in 898ms:
     103 input.md
[2025-10-07T00:46:25] tokens used: 299,654
[2025-10-07T00:46:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:29] thinking

**Verifying git status before final steps**
[2025-10-07T00:46:31] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:46:31] bash -lc 'git status --short' succeeded in 731ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T00:46:31] tokens used: 299,989
[2025-10-07T00:46:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:41] thinking

**Preparing for vectorization analysis**
[2025-10-07T00:46:42] exec bash -lc 'rg "tricubic" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:46:43] bash -lc 'rg "tricubic" -n src/nanobrag_torch' succeeded in 769ms:
src/nanobrag_torch/__main__.py:346:                        help='Enable tricubic interpolation')
src/nanobrag_torch/utils/physics.py:404:    3D tricubic polynomial interpolation using nested 2D interpolations.
src/nanobrag_torch/models/crystal.py:190:        Implements AT-STR-001 (nearest-neighbor lookup) and AT-STR-002 (tricubic interpolation).
src/nanobrag_torch/models/crystal.py:192:        This method handles both nearest-neighbor lookup and differentiable tricubic
src/nanobrag_torch/models/crystal.py:196:        The C code performs nearest-neighbor lookup or tricubic interpolation based
src/nanobrag_torch/models/crystal.py:216:            return self._tricubic_interpolation(h, k, l)
src/nanobrag_torch/models/crystal.py:272:    def _tricubic_interpolation(
src/nanobrag_torch/models/crystal.py:301:        /* run the tricubic polynomial interpolation */
src/nanobrag_torch/models/crystal.py:383:        # Perform tricubic interpolation
src/nanobrag_torch/models/crystal.py:392:        # TODO: Implement fully vectorized tricubic interpolation that handles:
src/nanobrag_torch/models/crystal.py:399:                print("WARNING: tricubic interpolation not yet supported for batched inputs")
[2025-10-07T00:46:43] tokens used: 300,347
[2025-10-07T00:46:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:49] thinking

**Reviewing function for comments**
[2025-10-07T00:46:49] exec bash -lc "sed -n '272,420p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:46:50] bash -lc "sed -n '272,420p' src/nanobrag_torch/models/crystal.py" succeeded in 710ms:
    def _tricubic_interpolation(
        self, h: torch.Tensor, k: torch.Tensor, l: torch.Tensor  # noqa: E741
    ) -> torch.Tensor:
        """
        Tricubic interpolation of structure factors (AT-STR-002).

        C-Code Implementation Reference (from nanoBragg.c, lines 3152-3209):
        ```c
        if ( ((h-h_min+3)>h_range) ||
             (h-2<h_min)           ||
             ((k-k_min+3)>k_range) ||
             (k-2<k_min)           ||
             ((l-l_min+3)>l_range) ||
             (l-2<l_min)  ) {
            if(babble){
                babble=0;
                printf ("WARNING: out of range for three point interpolation: h,k,l,h0,k0,l0: %g,%g,%g,%d,%d,%d \n", h,k,l,h0,k0,l0);
                printf("WARNING: further warnings will not be printed! ");
            }
            F_cell = default_F;
[2025-10-07T00:46:50] tokens used: 300,864
[2025-10-07T00:46:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:53] thinking

**Identifying non-vectorized loops**
[2025-10-07T00:46:54] exec bash -lc "sed -n '1120,1240p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:46:55] bash -lc "sed -n '1120,1240p' src/nanobrag_torch/simulator.py" succeeded in 745ms:
                    polarization_value = None

            self._apply_debug_output(
                physical_intensity,
                normalized_intensity,
                pixel_coords_meters,
                rot_a, rot_b, rot_c,
                rot_a_star, rot_b_star, rot_c_star,
                oversample,
                omega_pixel if not oversample or oversample == 1 else None,
                polarization_value
            )

        # PERF-PYTORCH-006: Ensure output matches requested dtype
        # Some intermediate operations may upcast for precision, but final output should match dtype
        return physical_intensity.to(dtype=self.dtype)

    def _apply_debug_output(self,
                           physical_intensity,
                           normalized_intensity,
[2025-10-07T00:46:55] tokens used: 303,092
[2025-10-07T00:46:55] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:46:57] thinking

**Searching for _apply_detector_absorption**
[2025-10-07T00:46:58] exec bash -lc 'rg "_apply_detector_absorption" -n src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:46:59] bash -lc 'rg "_apply_detector_absorption" -n src/nanobrag_torch/simulator.py' succeeded in 694ms:
1056:            normalized_intensity = self._apply_detector_absorption(
1435:    def _apply_detector_absorption(
[2025-10-07T00:46:59] tokens used: 304,974
[2025-10-07T00:46:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:02] thinking

**Inspecting function**
[2025-10-07T00:47:03] exec bash -lc "sed -n '1435,1560p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:04] bash -lc "sed -n '1435,1560p' src/nanobrag_torch/simulator.py" succeeded in 680ms:
    def _apply_detector_absorption(
        self,
        intensity: torch.Tensor,
        pixel_coords_meters: torch.Tensor,
        oversample_thick: bool
    ) -> torch.Tensor:
        """Apply detector absorption with layering (AT-ABS-001).

        Args:
            intensity: Input intensity tensor [S, F]
            pixel_coords_meters: Pixel coordinates in meters [S, F, 3]
            oversample_thick: If True, apply absorption per layer; if False, use last-value semantics

        Returns:
            Intensity with absorption applied

        Implementation follows spec AT-ABS-001:
        - Parallax factor: ρ = d·o where d is detector normal, o is observation direction
        - Capture fraction per layer: exp(−t·Δz·μ/ρ) − exp(−(t+1)·Δz·μ/ρ)
        - With oversample_thick=False: multiply by last layer's capture fraction
[2025-10-07T00:47:04] tokens used: 305,194
[2025-10-07T00:47:04] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:15] thinking

**Preparing memory update entry**

I’m gathering details to append a dated summary to galph_memory.md that captures recent plan updates, observations about vectorization and CLI flags, hypotheses on intensity mismatch, and outcomes like the coin toss result—all formatted consistently and ready to patch in smoothly.
[2025-10-07T00:47:22] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-09 (galph loop — Phase L1 HKL parity prep)
- "'`timeout 30 git pull --rebase` clean; coin toss = tails so no retrospective audit.
- CLI-FLAGS-003 still blocked by supervisor command parity (corr≈0.9965, sum_ratio≈1.26e5). Updated `plans/active/cli-noise-pix0/plan.md` Phase L with explicit L1–L4 tasks (HKL parity → scaling trace → diagnosis → rerun) and synced docs/fix_plan Next Actions to those steps.
- Authored new `input.md` (Mode=Parity) directing Ralph to execute Phase L1 by building `scripts/validation/compare_structure_factors.py`, regenerating a stamped `Fdump_scaled` cache, and logging HKL parity metrics under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
- Hypotheses for 1.26e5× intensity gap: (H1) HKL ingestion mismatch (PyTorch grid defaults vs C’s Fdump) — high confidence; next confirming step is L1 comparison script. (H2) Residual scaling-chain divergence post-MOSFLM fix (fluence/polar chain) — medium confidence; confirmation via Phase L2 traces after HKL parity passes.
- Vectorization goal remains untouched; plan `plans/active/vectorization.md` still at Phase A baseline because `_tricubic_interpolation` falls back to nearest-neighbor for batched tensors (see src/nanobrag_torch/models/crystal.py:272+). Keep on radar once CLI parity clears.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:23] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-09 (galph loop — Phase L1 HKL parity prep)
- "'`timeout 30 git pull --rebase` clean; coin toss = tails so no retrospective audit.
- CLI-FLAGS-003 still blocked by supervisor command parity (corr≈0.9965, sum_ratio≈1.26e5). Updated `plans/active/cli-noise-pix0/plan.md` Phase L with explicit L1–L4 tasks (HKL parity → scaling trace → diagnosis → rerun) and synced docs/fix_plan Next Actions to those steps.
- Authored new `input.md` (Mode=Parity) directing Ralph to execute Phase L1 by building `scripts/validation/compare_structure_factors.py`, regenerating a stamped `Fdump_scaled` cache, and logging HKL parity metrics under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
- Hypotheses for 1.26e5× intensity gap: (H1) HKL ingestion mismatch (PyTorch grid defaults vs C’s Fdump) — high confidence; next confirming step is L1 comparison script. (H2) Residual scaling-chain divergence post-MOSFLM fix (fluence/polar chain) — medium confidence; confirmation via Phase L2 traces after HKL parity passes.
- Vectorization goal remains untouched; plan `plans/active/vectorization.md` still at Phase A baseline because `_tricubic_interpolation` falls back to nearest-neighbor for batched tensors (see src/nanobrag_torch/models/crystal.py:272+). Keep on radar once CLI parity clears.
EOF
' succeeded in 933ms:

[2025-10-07T00:47:23] tokens used: 307,730
[2025-10-07T00:47:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:26] thinking

**Noticing new untracked file**
[2025-10-07T00:47:26] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:27] bash -lc 'git status --short' succeeded in 812ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T00:47:27] tokens used: 308,301
[2025-10-07T00:47:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:30] thinking

**Finalizing commits with review**
[2025-10-07T00:47:31] exec bash -lc 'git diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:31] bash -lc 'git diff docs/fix_plan.md' succeeded in 895ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d1214..9b10084 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
[2025-10-07T00:47:31] tokens used: 308,549
[2025-10-07T00:47:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:36] thinking

**Reviewing plan differences**
[2025-10-07T00:47:36] exec bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:37] bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' succeeded in 737ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c..168a163 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@ Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
[2025-10-07T00:47:37] tokens used: 309,471
[2025-10-07T00:47:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:39] thinking

**Reviewing input.md changes**
[2025-10-07T00:47:40] exec bash -lc 'git diff input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:40] bash -lc 'git diff input.md' succeeded in 739ms:
diff --git a/input.md b/input.md
index 0d820a2..96db4d1 100644
--- a/input.md
+++ b/input.md
@@ -1,50 +1,103 @@
-Summary: Validate the MOSFLM scaling fix so CLI parity evidence can advance toward the supervisor command.
+Summary: Confirm PyTorch and C ingest `scaled.hkl` identically so we can isolate the supervisor-command normalization bug.
  - Mode: Parity
-Focus: CLI-FLAGS-003 K3g3 — MOSFLM scaling parity rerun
+Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
 Branch: feature/spec-based-2
-Mapped tests: tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c (use --collect-only first if unsure)
-Artifacts: reports/2025-10-cli-flags/phase_k/f_latt_fix/post_fix/; reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/
-Do Now: CLI-FLAGS-003 K3g3 — env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::TestFlattSquareMatchesC::test_f_latt_square_matches_c -v
-If Blocked: Capture fresh base-lattice traces via reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh and trace_harness.py, archive under reports/2025-10-cli-flags/phase_k/base_lattice/blocked/<timestamp>/, note the stall in docs/fix_plan.md Attempt history, then follow prompts/debug.md trace-first SOP.
+Mapped tests: none — evidence-only
+Artifacts: reports/2025-10-cli-flags/phase_l/hkl_parity/; reports/2025-10-cli-flags/phase_l/scaling_trace/
+Do Now: CLI-FLAGS-003 Phase L1 — KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md
+If Blocked: If the parity script fails, capture raw dumps via `python - <<'PY'` using `nanobrag_torch.io.hkl.read_hkl_file` and NumPy `np.fromfile` to compute max |ΔF|; save results under `reports/2025-10-cli-flags/phase_l/hkl_parity/blocked/` and log the issue in docs/fix_plan.md before touching simulator code.
 
[2025-10-07T00:47:40] tokens used: 311,848
[2025-10-07T00:47:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:47] thinking

**Reviewing diffs including galph_memory.md**
[2025-10-07T00:47:49] exec bash -lc 'git diff galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:50] bash -lc 'git diff galph_memory.md' succeeded in 741ms:
diff --git a/galph_memory.md b/galph_memory.md
index a12ab10..9068b6d 100644
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1349,3 +1349,10 @@ Follow-ups for Ralph:
 - Updated `plans/active/vectorization.md` with a 2025-11-09 gap snapshot and refreshed `docs/fix_plan.md` VECTOR-TRICUBIC-001 next actions to highlight Phase A A1–A3 as blocking.
 - Authored new supervisor `input.md` directing Ralph to execute K3g3 (targeted pytest + nb-compare + trace refresh) with stamped artifacts and to update scaling_chain/summary plus fix_plan Attempt log.
 - Follow-up for Ralph: run the specified pytest node under parity env, regenerate nb-compare + base-lattice traces, refresh reports/summary, and record Attempt update; if blocked, capture trace logs under `base_lattice/blocked/` and document stall.
+
+## 2025-11-09 (galph loop — Phase L1 HKL parity prep)
+- `timeout 30 git pull --rebase` clean; coin toss = tails so no retrospective audit.
+- CLI-FLAGS-003 still blocked by supervisor command parity (corr≈0.9965, sum_ratio≈1.26e5). Updated `plans/active/cli-noise-pix0/plan.md` Phase L with explicit L1–L4 tasks (HKL parity → scaling trace → diagnosis → rerun) and synced docs/fix_plan Next Actions to those steps.
+- Authored new `input.md` (Mode=Parity) directing Ralph to execute Phase L1 by building `scripts/validation/compare_structure_factors.py`, regenerating a stamped `Fdump_scaled` cache, and logging HKL parity metrics under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
+- Hypotheses for 1.26e5× intensity gap: (H1) HKL ingestion mismatch (PyTorch grid defaults vs C’s Fdump) — high confidence; next confirming step is L1 comparison script. (H2) Residual scaling-chain divergence post-MOSFLM fix (fluence/polar chain) — medium confidence; confirmation via Phase L2 traces after HKL parity passes.
+- Vectorization goal remains untouched; plan `plans/active/vectorization.md` still at Phase A baseline because `_tricubic_interpolation` falls back to nearest-neighbor for batched tensors (see src/nanobrag_torch/models/crystal.py:272+). Keep on radar once CLI parity clears.
[2025-10-07T00:47:50] tokens used: 313,722
[2025-10-07T00:47:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:55] thinking

**Preparing commit for Step 4**
[2025-10-07T00:47:56] exec bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:47:57] bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md galph_memory.md' succeeded in 747ms:

[2025-10-07T00:47:57] tokens used: 315,441
[2025-10-07T00:47:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:47:59] thinking

**Committing changes**
[2025-10-07T00:48:00] exec bash -lc 'git commit -m "SUPERVISOR: Phase L1 HKL parity prep - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:48:01] bash -lc 'git commit -m "SUPERVISOR: Phase L1 HKL parity prep - tests: not run"' succeeded in 799ms:
[feature/spec-based-2 d32161c] SUPERVISOR: Phase L1 HKL parity prep - tests: not run
 4 files changed, 111 insertions(+), 49 deletions(-)
[2025-10-07T00:48:01] tokens used: 315,601
[2025-10-07T00:48:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:48:03] thinking

**Pushing changes**
[2025-10-07T00:48:04] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:48:06] bash -lc 'git push' succeeded in 2.27s:
To github.com:hoidn/nanoBragg.git
   ca99ae6..d32161c  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T00:48:06] tokens used: 315,881
[2025-10-07T00:48:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:48:09] thinking

**Verifying clean Git status**
[2025-10-07T00:48:10] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:48:11] bash -lc 'git status --short' succeeded in 777ms:

[2025-10-07T00:48:11] tokens used: 316,149
[2025-10-07T00:48:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:48:21] thinking

**Summarizing final response structure**

I'll craft a clear summary covering analysis with hypotheses, plan updates including the vectorization fallback, test statuses, and logical next steps—all referencing relevant plan files with approximate line numbers and noting input.md updates and code commits, so the user gets a concise yet thorough overview.
[2025-10-07T00:48:23] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,280p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:48:23] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,280p'" succeeded in 719ms:
   200	| --- | --- | --- | --- |
   201	| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
   202	| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
   203	| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
   204	| K3f4 | Record root cause & fix outline | [D] | 2025-11-08 update appended to `base_lattice/summary.md` documenting the placeholder-volume root cause and the 46ba36b fix; evidence lives under `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/`. Coordinate docs/fix_plan Next Actions so K3g3 focuses on scaling parity. |
   205	
   206	#### Phase K3g — MOSFLM real-vector rescale implementation
   207	Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
   208	Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
   209	Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
   210	
   211	| ID | Task Description | State | How/Why & Guidance |
   212	| --- | --- | --- | --- |
   213	| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
   214	| K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
   215	| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
   216	
   217	### Phase L — Supervisor Command Normalization
   218	Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
   219	Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
[2025-10-07T00:48:23] tokens used: 316,904
[2025-10-07T00:48:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:48:26] thinking

**Preparing line number references**
[2025-10-07T00:48:27] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '440,510p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:48:28] bash -lc "nl -ba docs/fix_plan.md | sed -n '440,510p'" succeeded in 713ms:
   440	- Immediate Next Actions (2025-10-15):
   441	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   442	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   443	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   444	- Attempts History: None — new item.
   445	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   446	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   447	
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
   458	- Next Actions (2025-11-09 galph update):
   459	  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
[2025-10-07T00:48:28] tokens used: 318,730
[2025-10-07T00:48:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:48:33] thinking

**Referencing relevant code and plan lines**
[2025-10-07T00:48:34] exec bash -lc "nl -ba src/nanobrag_torch/models/crystal.py | sed -n '352,420p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T00:48:35] bash -lc "nl -ba src/nanobrag_torch/models/crystal.py | sed -n '352,420p'" succeeded in 703ms:
   352	            # Return default_F for this evaluation
   353	            return torch.full_like(h, float(self.config.default_F), device=self.device, dtype=self.dtype)
   354	
   355	        # Build the 4x4x4 neighborhood indices
   356	        # h_interp[0]=h0_flr-1, h_interp[1]=h0_flr, h_interp[2]=h0_flr+1, h_interp[3]=h0_flr+2
   357	        # Vectorized version: build indices directly without Python loops
   358	        offsets = torch.arange(-1, 3, device=self.device, dtype=torch.long)  # [-1, 0, 1, 2]
   359	
   360	        # Build coordinate arrays for interpolation (as float for polin3)
   361	        h_indices = (h_flr + offsets).to(dtype=self.dtype)
   362	        k_indices = (k_flr + offsets).to(dtype=self.dtype)
   363	        l_indices = (l_flr + offsets).to(dtype=self.dtype)
   364	
   365	        # Build the 4x4x4 subcube of structure factors using vectorized indexing
   366	        if self.hkl_data is None:
   367	            # If no HKL data loaded, use default_F everywhere
   368	            sub_Fhkl = torch.full((4, 4, 4), self.config.default_F, dtype=self.dtype, device=self.device)
   369	        else:
   370	            # Calculate grid indices into hkl_data array
   371	            # Need to broadcast to create 4x4x4 indexing grid
[2025-10-07T00:48:35] tokens used: 321,925
[2025-10-07T00:48:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |


[2025-10-07T00:48:43] thinking

**Organizing final message structure**
[2025-10-07T00:48:44] codex

**CLI Parity**
- Updated the active CLI plan to add Phase L1–L4 (HKL parity → scaling traces → diagnosis → rerun) and marked Phase K3g3 complete (`plans/active/cli-noise-pix0/plan.md:217`). Fix plan next-actions now point at the same sequence (`docs/fix_plan.md:448`).
- New supervisor memo (`input.md`) directs Ralph to build `scripts/validation/compare_structure_factors.py`, regenerate a stamped C `Fdump`, and log parity metrics under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
- Hypotheses for the 1.26×10⁵ intensity gap (evidence: nb-compare summary & prior scaling trace):
  1. HKL ingestion mismatch between PyTorch and C caches (high confidence). Confirm via Phase L1 comparison script; failure should show |ΔF| > 1e-6 at specific voxels.
  2. Residual scaling-chain divergence (fluence/polar/omega) after MOSFLM rescale (medium confidence). Validate through Phase L2 traces once HKL parity is green.

**Vectorization**
- Vectorization backlog still untouched: `_tricubic_interpolation` falls back to nearest-neighbour for any batched input and flags the limitation inline (`src/nanobrag_torch/models/crystal.py:383`). Phase A evidence capture in `plans/active/vectorization.md` remains the gating step before refactoring.

Next Steps
1. Execute Phase L1 per `input.md` (author comparison harness, capture HKL parity metrics, update fix_plan attempts).
2. Assuming L1 passes, proceed to Phase L2 scaling-chain traces to pinpoint the remaining normalization break before coding fixes.

Tests: not run (supervisor evidence pass only).
[2025-10-07T00:48:49] tokens used: 324,008
[2025-10-07T00:48:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 12d12140766c2d7b3b8e31b7b6926473348e4330..9b10084ae515ec4c1acc147e9021d15c4860f7d4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-06 ralph update):
-  1. ✅ Phase K3g3 COMPLETE (Attempt #49) — Test `test_f_latt_square_matches_c` PASSES after Fdump.bin cleanup and test isolation fix. Ready for plan archival per K3g3 exit criteria.
-  2. Phase L1 (blocked) — Supervisor nb-compare command shows 126,467× sum ratio with `-hkl scaled.hkl` parameters, indicating separate normalization/HKL-loading issue. Requires dedicated Phase L investigation (defer to next loop).
-  3. Phase K3c closeout — Update plan status K3g3 to [D], document Attempt #49 findings in `phase_k/base_lattice/summary.md`, and archive artifacts before Phase L work begins.
+- Next Actions (2025-11-09 galph update):
+  1. Phase L1 — Capture HKL ingestion parity by comparing `scaled.hkl` grids between C’s Fdump and PyTorch (`reports/2025-10-cli-flags/phase_l/hkl_parity/`); fail if max |ΔF| > 1e-6.
+  2. Phase L2 — Regenerate scaling-chain traces for the supervisor command (store under `phase_l/scaling_trace/`) and rerun `analyze_scaling.py` to pinpoint the first divergent factor.
+  3. Phase L3 — Summarise the diagnosed normalization bug and proposed remediation in `phase_l/diagnosis.md`, then proceed to implementation before rerunning nb-compare in L4.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
index d27e278347d63304d3e1c43c5902d02985b2f47c..96db4d1486c490d63a56187e5c427109dfbee26f
--- a/input.md
+++ b/input.md
@@ -11,19 +11,30 @@
 - plans/active/cli-noise-pix0/plan.md: L1 requires HKL parity evidence before scaling traces (L2) can be trusted.
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm — Next actions call out L1–L3 sequencing; we must clear L1 first.
 - specs/spec-a-core.md §Structure factors — mandates identical HKL grid semantics between C and PyTorch.
+- specs/spec-a-cli.md §HKL caching — confirms C writes Fdump on every -hkl run; evidence must show PyTorch honors the same semantics.
+- docs/architecture/c_parameter_dictionary.md — Provides authoritative mapping for -hkl/-default_F behavior used in the comparison script.
 - docs/architecture/pytorch_design.md §2.4 — Notes caching rules for structure factors that the new script must respect.
+- docs/development/testing_strategy.md §2.1 — Parallel trace-driven validation begins with confirming input parity.
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md — Earlier analysis showed F_latt is the first divergence; confirming HKL parity narrows down remaining causes.
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md — Post-fix addendum proves MOSFLM vectors match; HKL parity is the next dependency before Phase L traces.
 
 How-To Map:
 - export KMP_DUPLICATE_LIB_OK=TRUE NB_C_BIN=./golden_suite_generator/nanoBragg
 - STAMP=$(date +%Y%m%d%H%M%S)
 - "$NB_C_BIN" -mat A.mat -hkl scaled.hkl -detpixels 16 -pixel 0.1 -distance 50 -floatfile /tmp/fdump_probe_${STAMP}.bin -nonoise -nointerpolate -oversample 1 -exposure 0 -flux 0 -beamsize 1.0 >/tmp/c_fdump_${STAMP}.log 2>&1
-- mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
+- test -f Fdump.bin && mv Fdump.bin Fdump_scaled_${STAMP}.bin  # preserve the cache written by C
 - mkdir -p scripts/validation
 - If scripts/validation/compare_structure_factors.py does not exist, author it to load `scaled.hkl` via `nanobrag_torch.io.hkl.read_hkl_file`, load `Fdump_scaled_${STAMP}.bin` via `nanobrag_torch.io.hkl.read_fdump`, compare shapes, mins/maxes, and max |ΔF|; emit Markdown summary.
-- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- Implement CLI args `--hkl`, `--fdump`, `--out`, `--metrics`, and `--device`/`--dtype` for completeness; raise if files missing.
+- Use `torch.load` equivalents from `nanobrag_torch.io.hkl` (avoid numpy-only paths) so gradients remain optional.
+- Within the script, compute: shape parity, `torch.max(torch.abs(F_hkl - F_fdump))`, relative RMS error, and count of mismatched voxels above tolerance (1e-6).
+- Emit Markdown + JSON outputs capturing these metrics plus SHA256 hashes (use `hashlib.sha256`).
+- python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump_scaled_${STAMP}.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json --device cpu --dtype float64
+- tee the script stdout to `reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log` for traceability.
 - Copy or symlink the summary to `reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` for plan cross-reference; include the command log and SHA256 hashes for both sources.
-- Record max |ΔF| and relative error in docs/fix_plan.md Attempt history under CLI-FLAGS-003.
+- Record max |ΔF|, relative RMS, and mismatch counts in docs/fix_plan.md Attempt history under CLI-FLAGS-003; note script location.
+- Leave the generated `Fdump_scaled_${STAMP}.bin` under `reports/2025-10-cli-flags/phase_l/hkl_parity/` (or remove after hashing) so future loops can reuse it without rerunning C.
+- Optionally run `pytest --collect-only -q tests/test_cli_scaling.py` to ensure new helper imports cleanly (no mandatory tests to execute).
 
 Pitfalls To Avoid:
 - Do not delete or overwrite older reports; keep STAMPed directories.
@@ -36,13 +47,57 @@
 - Avoid running full pytest suites; stay within evidence gate (collect-only allowed if you add tests later).
 - Document any deviations or missing data immediately in docs/fix_plan.md and the plan checklist.
 - If the script surfaces differences, stop and capture traces rather than guessing at fixes.
+- Use `with open(..., 'rb')` when hashing to avoid buffering mistakes; store hashes next to metrics.
+- Keep the helper script pure (no writes outside provided outdir) so reruns stay deterministic.
+- Make sure to restore/rename Fdump after script runs if additional C jobs need the cache.
+- Check that the script respects `torch.set_default_dtype` if future loops adjust precision.
+- Do not assume symmetrical HKL ranges; use metadata from both files when reporting results.
 
 Pointers:
 - plans/active/cli-noise-pix0/plan.md#phase-l-—-supervisor-command-normalization
 - docs/fix_plan.md#cli-flags-003-handle-nonoise-and-pix0_vector_mm
 - specs/spec-a-core.md#structure-factors
+- specs/spec-a-cli.md#cli-binding-profile-reference-cli
+- docs/architecture/c_parameter_dictionary.md#hkl-and-fdump
 - docs/architecture/pytorch_design.md#vectorization-strategy
+- docs/development/testing_strategy.md#21-ground-truth-parallel-trace-driven-validation
 - reports/2025-10-cli-flags/phase_j/scaling_chain.md
+- reports/2025-10-cli-flags/phase_k/base_lattice/summary.md
 - src/nanobrag_torch/io/hkl.py
+- reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh
+- reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py
+
+Artifacts Checklist:
+- reports/2025-10-cli-flags/phase_l/hkl_parity/summary_${STAMP}.md
+- reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_${STAMP}.json
+- reports/2025-10-cli-flags/phase_l/hkl_parity/run_${STAMP}.log
+- reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_scaled_${STAMP}.bin (or SHA recorded if deleted)
+- /tmp/c_fdump_${STAMP}.log copied into reports for provenance
+- docs/fix_plan.md Attempt update referencing the above paths
+
+Logging Requirements:
+- Append a brief note to galph_memory.md summarizing max |ΔF| results and any surprises.
+- If discrepancies appear, capture first-divergence indices (h,k,l) inside the JSON metrics for future loops.
+- Note whether `read_hkl_file` emitted warnings about non-integer indices; this impacts tolerance selection.
+- Update plans/active/cli-noise-pix0/plan.md Phase L1 checklist state once evidence is archived.
+
+Review Notes:
+- After generating metrics, sanity-check that `h_range`, `k_range`, and `l_range` match between inputs.
+- Confirm default_F handling (ensure unspecified reflections stay at configured default values).
+- Verify the script uses float64 during comparison; document any dtype conversions applied.
+- If you observe large |ΔF| localized to edges, flag it in the diagnosis doc for Phase L3.
+
+Verification Targets:
+- Max |ΔF| ≤ 1e-6 electrons (tight parity target drawn from prior attempts).
+- Relative RMS error ≤ 1e-8 to ensure no systemic scaling offset remains.
+- Zero mismatched voxels above tolerance once caches align (expectation per spec).
+- SHA256 hash of Fdump matches reruns; note deviations in logs if environment differs.
+
+Timebox Suggestions:
+- ≤10 minutes to regenerate Fdump with reduced detector size; abort and log if C run stalls.
+- ≤20 minutes to author and validate the comparison script (reuse existing utilities where possible).
+- ≤10 minutes to document outcomes in reports/ and docs/fix_plan.md, keeping future loops unblocked.
+- If overall effort exceeds 45 minutes due to unexpected discrepancies, pause and request supervisor guidance with captured evidence.
+
 
 Next Up: After HKL parity evidence is in place, move to Phase L2 (scaling-chain traces) to pinpoint the remaining normalization mismatch.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 653892c1489957875379d68c387243ab1e923dc4..168a163b3b492307778814294b9c26be7b420a8a
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -8,6 +8,7 @@
 - Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
 - Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
 - Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
+- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
@@ -211,15 +212,16 @@
 | --- | --- | --- | --- |
 | K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
 | K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
-| K3g3 | Re-run scaling & parity evidence | [ ] | Execute `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, refresh `base_lattice/summary.md` & `phase_k/f_latt_fix/scaling_chain.md`, and archive nb-compare visuals to confirm Δh/Δk/Δl, F_latt, and intensity parity. |
+| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
 
-### Phase L — Final Parity & Regression Sweep
-Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
-Prereqs: Phases J–K complete; scaling regression tests green.
-Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
+### Phase L — Supervisor Command Normalization
+Goal: Isolate and resolve the 1.26×10⁵ intensity mismatch that persists when running the full supervisor command after Phase K fixes.
+Prereqs: Phase K3g artifacts refreshed (Attempt #49), nb-compare data in `phase_k/f_latt_fix/post_fix/`, instrumentation from Phase J available.
+Exit Criteria: Structure-factor grids, scaling chain, and final intensities match C within thresholds (|Δh|,|Δk|,|Δl| < 5e-4; sum_ratio 0.99–1.01; mean_peak_distance ≤ 1 px); nb-compare rerun archived under `phase_l/supervisor_command/`; docs/fix_plan Attempt log updated; plan ready for archival.
 
 | ID | Task Description | State | How/Why & Guidance |
 | --- | --- | --- | --- |
-| L1 | Rerun supervisor command parity | [ ] | Execute the authoritative nb-compare command, stash outputs under `reports/2025-10-cli-flags/phase_l/supervisor_command/`, and verify metrics within thresholds. |
-| L2 | Regression confirmation | [ ] | Run the CLI flag suite plus any new scaling tests (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v`) with results saved to `phase_l/pytest.log`. |
-| L3 | Closeout documentation | [ ] | Update docs/fix_plan.md exit criteria, archive this plan per SOP, and note parity completion in `docs/development/testing_strategy.md` if thresholds changed. |
+| L1 | Compare HKL ingestion between C and PyTorch | [ ] | Generate a fresh C cache by running `NB_C_BIN=./golden_suite_generator/nanoBragg` with the supervisor command into `/tmp` (ROI optional) so `Fdump.bin` reflects `scaled.hkl`; then execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump Fdump.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md` (author the script under `scripts/validation/` if missing). Record grid shape, extrema, and max |ΔF|; fail if relative diff > 1e-6. |
+| L2 | Capture scaling-chain traces for the supervisor command | [ ] | Rebuild C trace with existing instrumentation (see `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh`) while logging `TRACE_C:*` scaling values to `phase_l/scaling_trace/trace_c.log`; run the PyTorch harness (`PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py --out phase_l/scaling_trace/trace_py.log`) and feed both into `reports/2025-10-cli-flags/phase_j/analyze_scaling.py --c-log ... --py-log ...`. Document first divergence and ratios in `phase_l/scaling_trace/scaling_chain.md`. |
+| L3 | Document root cause and remediation plan | [ ] | Summarise findings under `reports/2025-10-cli-flags/phase_l/diagnosis.md`: reference spec equations (`specs/spec-a-core.md §Scaling`), identify the failing factor (e.g., fluence, steps, polarization), outline code touchpoints (`src/nanobrag_torch/simulator.py`, etc.), and propose acceptance tests. Update docs/fix_plan Attempt log with diagnosis before implementing fixes. |
+| L4 | Rerun supervisor parity & regression sweep | [ ] | After fixes land, repeat nb-compare command storing metrics under `phase_l/supervisor_command/summary.json`, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_flags.py tests/test_cli_scaling.py -v` (log to `phase_l/pytest.log`). Close the plan once correlation ≥0.999, sum_ratio within 1±0.01, and peak distance ≤1 px. |

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   d32161c..5aee781  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=57...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=57
Updating 5aee781..751b829
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   5aee781..751b829  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=57
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 751b829..85f7606
Fast-forward
 docs/fix_plan.md                                   |  25 ++
 .../phase_l/hkl_parity/c_fdump_20251006175032.log  | 285 +++++++++++++++++++
 .../phase_l/hkl_parity/metrics_20251006175032.json |  59 ++++
 .../phase_l/hkl_parity/run_20251006175032.log      |   0
 .../phase_l/hkl_parity/summary.md                  |   1 +
 .../phase_l/hkl_parity/summary_20251006175032.md   |  64 +++++
 scripts/validation/compare_structure_factors.py    | 313 +++++++++++++++++++++
 7 files changed, 747 insertions(+)
 create mode 100644 reports/2025-10-cli-flags/phase_l/hkl_parity/c_fdump_20251006175032.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_20251006175032.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/hkl_parity/run_20251006175032.log
 create mode 120000 reports/2025-10-cli-flags/phase_l/hkl_parity/summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/hkl_parity/summary_20251006175032.md
 create mode 100644 scripts/validation/compare_structure_factors.py
From github.com:hoidn/nanoBragg
   751b829..85f7606  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 85f7606..f513684
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   85f7606..f513684  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=58
Ralph completed iteration 57; proceeding to 58
