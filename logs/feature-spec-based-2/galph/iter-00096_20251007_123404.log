Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=96
To github.com:hoidn/nanoBragg.git
   5334d1f..03f0c06  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T12:34:07] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T12:34:07] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T12:34:11] thinking

**Preparing to run git pull command**
[2025-10-07T12:34:12] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:14] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.09s:
Already up to date.
[2025-10-07T12:34:14] tokens used: 14,043

[2025-10-07T12:34:16] thinking

**Preparing to read latest memory entry**
[2025-10-07T12:34:16] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:17] bash -lc 'cat galph_memory.md' succeeded in 676ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T12:34:17] tokens used: 14,265

[2025-10-07T12:34:21] thinking

**Planning document reviews**
[2025-10-07T12:34:22] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:22] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 669ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T12:34:22] tokens used: 17,286

[2025-10-07T12:34:24] thinking

**Checking if more review is needed**
[2025-10-07T12:34:25] exec bash -lc "sed -n '1,200p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:26] bash -lc "sed -n '1,200p' specs/spec-a.md" succeeded in 655ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T12:34:26] tokens used: 19,591

[2025-10-07T12:34:27] thinking

**Checking referenced specs files**
[2025-10-07T12:34:28] exec bash -lc "sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:28] bash -lc "sed -n '1,200p' arch.md" succeeded in 697ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T12:34:28] tokens used: 20,019

[2025-10-07T12:34:30] thinking

**Proceeding to next documentation file**
[2025-10-07T12:34:31] exec bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:31] bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 674ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T12:34:31] tokens used: 22,593

[2025-10-07T12:34:33] thinking

**Examining debugging documentation**
[2025-10-07T12:34:33] exec bash -lc "sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:34] bash -lc "sed -n '1,200p' docs/debugging/debugging.md" succeeded in 680ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T12:34:34] tokens used: 24,544

[2025-10-07T12:34:37] thinking

**Planning approach to reading fix_plan**
[2025-10-07T12:34:38] exec bash -lc "sed -n '1,160p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:38] bash -lc "sed -n '1,160p' docs/fix_plan.md" succeeded in 701ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T12:34:38] tokens used: 26,983

[2025-10-07T12:34:40] thinking

**Searching for CLI flags section**
[2025-10-07T12:34:41] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:42] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 718ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-07T12:34:42] tokens used: 29,985

[2025-10-07T12:34:43] thinking

**Reviewing section near line 450**
[2025-10-07T12:34:44] exec bash -lc "sed -n '450,620p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:45] bash -lc "sed -n '450,620p' docs/fix_plan.md" succeeded in 727ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-20 refresh → updated by galph):
 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
- Attempts History:
  * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
    Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
    Artifacts:
      - `src/nanobrag_torch/simulator.py:1313-1322` - Spindle instrumentation (emit raw/normalized/magnitude)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log` - Refreshed φ=0 trace with spindle data
[2025-10-07T12:34:45] tokens used: 30,883

[2025-10-07T12:34:49] thinking

**Opening testing strategy document**
[2025-10-07T12:34:51] exec bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:52] bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 683ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T12:34:52] tokens used: 33,993

[2025-10-07T12:34:54] thinking

**Preparing to analyze long-term plans**
[2025-10-07T12:34:55] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:34:56] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 717ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T12:34:56] tokens used: 36,583

[2025-10-07T12:35:03] thinking

**Summarizing codebase analysis plan**

I’m organizing a deep review of the codebase to understand current gaps and possible fixes related to the user's long-term goals. The focus is on running C vs PyTorch parallel tests with new CLI options and advancing vectorization work based on existing plans and docs. This will help me target efforts on the outstanding tasks like CLI flag support and scaling improvements.
[2025-10-07T12:35:04] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:35:05] bash -lc 'cat plans/active/vectorization.md' succeeded in 717ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T12:35:05] tokens used: 39,744

[2025-10-07T12:35:18] thinking

**Outlining deep analysis and sequential steps**

I’m mapping out the plan’s current phase with a focus on identifying gaps related to CLI parity and scaling issues, especially the ongoing F_cell zero discrepancy. I see the next move is to perform a thorough analysis before flipping a coin with Python for conditional tasks, so I’m preparing to reason through these challenges carefully before jumping ahead.
[2025-10-07T12:35:20] exec bash -lc "python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:35:21] bash -lc "python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" succeeded in 900ms:
tails
[2025-10-07T12:35:21] tokens used: 41,948

[2025-10-07T12:35:33] thinking

**Assessing plan update necessity**
[2025-10-07T12:35:33] exec bash -lc 'rg "Next Actions" -n docs/fix_plan.md | grep "CLI-FLAGS-003" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:35:34] bash -lc 'rg "Next Actions" -n docs/fix_plan.md | grep "CLI-FLAGS-003" -n' exited 1 in 900ms:

[2025-10-07T12:35:34] tokens used: 42,902

[2025-10-07T12:35:36] thinking

**Trying alternative search with ripgrep**
[2025-10-07T12:35:37] exec bash -lc 'rg -n "Next Actions" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:35:37] bash -lc 'rg -n "Next Actions" docs/fix_plan.md' succeeded in 688ms:
46:    Next Actions: Update `plans/active/repo-hygiene-002/plan.md` task H4 guidance to reference Protected Assets, then verify the checklist is followed in the next hygiene pass.
51:    Next Actions: Capture proof-of-compliance during the next hygiene loop and keep plan cross-references fresh.
56:    Next Actions: Update plan task H4 with the mandatory docs/index.md scan, then record a compliance log during the next REPO-HYGIENE-002 execution.
80:    Next Actions: Complete plan H1–H6 (baseline snapshot, restore canonical file, purge stray reports, rerun parity smoke tests, log closure).
85:    Next Actions: Record closure in plan notes and keep baseline snapshot for future hygiene audits.
90:    Next Actions: Execute plan tasks H1–H4 on a dedicated branch: capture baseline file (`git show 92ac528^:golden_suite_generator/nanoBragg.c`), restore it locally, archive `reports/2025-09-30-AT-021-traces/` under `reports/archive/`, remove the duplicate `fix_plan.md`, then run H5 parity smoke before logging completion in H6.
95:    Next Actions: None - item closed successfully. Keep baseline snapshot for future hygiene audits.
114:- Immediate Next Actions (2025-10-15):
126:    Next Actions: Proceed to Phase 2 multi-device validation.
131:    Next Actions: Implement plan tasks P2.1–P2.5 (CLI extension, CPU/CUDA runs, Dynamo logs), then P3.0/P3.0b/P3.0c–P3.5 (multi-source defaults + polarization + normalization, benchmark hardening, ROI caching, C comparison).
136:    Next Actions: Fix P3.0b by refactoring polarization to use per-source incident directions; recommend approach (1) for minimal disruption. Then proceed to P3.0c normalization verification.
141:    Next Actions: Re-open P3.0b and validate against C traces (`scripts/debug_pixel_trace.py` vs instrumented nanoBragg.c) for a 3-source configuration.
146:    Next Actions: Restore truthful status in plan and implement fallback seeding, per-source polarization, and proper normalization before gathering new benchmarks.
151:    Next Actions: Block further benchmarking until physics parity passes; revisit these measurements after completing P3.0–P3.0c and P3.4.
156:    Next Actions: Ralph to execute plan tasks P3.0–P3.0c in order, capture multi-source trace comparisons, then proceed to benchmarking tasks once physics parity is restored.
161:    Next Actions: Ralph to finish P3.0–P3.4, then rerun CPU/CUDA benchmarks and produce the Phase 3 summary per plan guidance before reconsidering Phase 4.
166:    Next Actions: Re-open plan tasks P3.0/P3.0b/P3.0c/P3.4 in code, implement guarded seeding + per-source polarization + post-sum weighting before normalization, then hoist ROI/misset tensors ahead of re-running benchmarks. Only after those fixes land should Ralph resume P3.2/P3.3 measurements.
171:    Next Actions: Same as Attempt #12 — execute plan tasks P3.0b/P3.0c/P3.4 under `prompts/debug.md`, capturing 3-source C/Py traces and refreshed CPU benchmarks once fixes land.
176:    Next Actions: Ralph to execute updated plan tasks P3.0–P3.0c (multi-source defaults, per-source polarization, normalization) and P3.4 (ROI/misset caching) with the new artifact targets before rerunning P3.2/P3.3 benchmarks.
181:    Next Actions: Ralph to execute plan tasks P3.0b (per-source polarization) and P3.0c (normalization validation with weighted sources) with new trace/benchmark artifacts, then deliver P3.4 ROI/misset caching before re-running P3.2/P3.3 benchmarks.
[2025-10-07T12:35:37] tokens used: 43,079

[2025-10-07T12:35:41] thinking

**Locating reference on line 1889**
[2025-10-07T12:35:41] exec bash -lc "sed -n '1880,1930p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:35:42] bash -lc "sed -n '1880,1930p' docs/fix_plan.md" succeeded in 676ms:
- Priority: High
- Status: in_progress (Phases A–B complete; Phase C implementation pending)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions (2025-11-21 refresh):
 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
- Attempts History:
  * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
    Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
    Artifacts:
      - `reports/2025-10-vectorization/phase_a/test_at_str_002.collect.log` — Test collection output confirming 3 tests collected
      - `reports/2025-10-vectorization/phase_a/test_at_str_002.log` — Full pytest execution log for tricubic tests
      - `reports/2025-10-vectorization/phase_a/test_at_abs_001.log` — Full pytest execution log for absorption tests
[2025-10-07T12:35:42] tokens used: 45,837

[2025-10-07T12:35:53] thinking

**Analyzing plan update necessity**
[2025-10-07T12:35:54] exec bash -lc "python - <<'PY'
text = '''...'''
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:35:55] bash -lc "python - <<'PY'
text = '''...'''
PY" succeeded in 885ms:

[2025-10-07T12:35:55] tokens used: 49,091

[2025-10-07T12:36:42] thinking

**Analyzing plan update needs and action types**
[2025-10-07T12:36:44] exec bash -lc "sed -n '1,200p' specs/spec-a-cli.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:36:45] bash -lc "sed -n '1,200p' specs/spec-a-cli.md" succeeded in 873ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-07T12:36:45] tokens used: 52,335

[2025-10-07T12:36:47] thinking

**Checking architecture documentation**
[2025-10-07T12:36:47] exec bash -lc "sed -n '1,200p' docs/architecture/detector.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:36:48] bash -lc "sed -n '1,200p' docs/architecture/detector.md" succeeded in 679ms:
# Detector Architecture Deep Dive

**Status:** Authoritative Specification  
**Last Updated:** Phase 5 Implementation

**⚠️ CRITICAL:** This component uses a [hybrid unit system](#61-critical-hybrid-unit-system-overrides-global-rule) that overrides the global Angstrom-only rule.

This document provides the complete technical specification for the Detector component. For global project rules on units and coordinate systems, see [Global Conventions](./conventions.md).

---

## 1. Overview

The Detector class manages the detector geometry for diffraction simulations, including:
- Position and orientation (basis vectors)
- Pixel coordinate generation and caching
- Support for various detector conventions (MOSFLM, XDS)
- Dynamic geometry with rotations and tilts
- Full differentiability for optimization workflows

[2025-10-07T12:36:48] tokens used: 55,400
[2025-10-07T12:36:55] stream error: stream disconnected before completion: An error occurred while processing your request. You can retry your request, or contact us through our help center at help.openai.com if the error persists. Please include the request ID 98ad723c5d39f7b3-IAD in your message.; retrying 1/5 in 213ms…

[2025-10-07T12:37:19] thinking

**Planning updates to context and next actions**

I'll update the plan to add a new "Gap snapshot" bullet reflecting the latest status and shift focus to Phase L4 tasks, ensuring the fix_plan's Next Actions align by adding a new attempt entry to document this plan refresh and updating instructions accordingly.
[2025-10-07T12:37:20] exec bash -lc "sed -n '1,80p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:37:21] bash -lc "sed -n '1,80p' plans/active/cli-noise-pix0/plan.md" succeeded in 854ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T12:37:21] tokens used: 57,049

[2025-10-07T12:37:50] thinking

**Updating plan and fix_plan with new L3 status**

I’m working through how to add a new context bullet reflecting L3 task completions and emphasizing the fix_checklist gating before proceeding to Phase L4 tasks. I want to carefully align the plan’s Next Actions to guide executing the fix_checklist steps and preparing for parity rerun once gating passes, while acknowledging the outstanding F_cell difference that still needs resolution.
[2025-10-07T12:37:51] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:37:52] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md" succeeded in 891ms:
# φ Rotation Parity Fix Checklist (CLI-FLAGS-003 Phase L3j)

## Overview

This checklist enumerates verification gates for implementing the φ rotation parity fix. All gates must pass before marking CLI-FLAGS-003 Phase L3 complete.

**Primary Hypothesis:** H5 (φ Rotation Application) — Drift emerges during `Crystal.get_rotated_real_vectors()` when φ transitions from 0° → 0.05° → 0.1°.

**Evidence Base:** Phases L3a–L3i proved MOSFLM base vectors correct at φ=0 (b_Y agrees to O(1e-7) Å). Divergence must occur during phi rotation.

## Verification Gates

| ID | Requirement | Owner | Status | Artifact Path | Threshold / Notes |
|----|-------------|-------|--------|---------------|-------------------|
| **VG-1** | **Per-φ Harness Rerun** | Implementation Loop | ⏸️ | `reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/` | After code fix, regenerate traces for φ=0°, 0.05°, 0.1° |
| VG-1.1 | φ=0° trace regeneration | Implementation Loop | ⏸️ | `per_phi/trace_py_phi_0.00.log` | Baseline; b_Y must remain within 1e-6 relative of C (currently 1.35e-07, PASS) |
| VG-1.2 | φ=0.05° trace generation | Implementation Loop | ⏸️ | `per_phi/trace_py_phi_0.05.log` | Mid-oscillation; b_Y drift ≤1e-6 relative (currently ~6.8%, FAIL pre-fix) |
| VG-1.3 | φ=0.1° trace generation | Implementation Loop | ⏸️ | `per_phi/trace_py_phi_0.10.log` | Full oscillation; b_Y drift ≤1e-6 relative |
| VG-1.4 | Per-φ JSON stability | Implementation Loop | ⏸️ | `per_phi/trace_py_scaling_per_phi.json` | k_frac drift <1e-6 across phi steps; F_latt signs match C |
| **VG-2** | **Targeted Pytest (Lattice Factors)** | Implementation Loop | ⏸️ | Test run log | Regression coverage for lattice vector parity |
[2025-10-07T12:37:52] tokens used: 60,235

[2025-10-07T12:37:59] thinking

**Evaluating next steps for fix plan**

I'm considering how to best guide next actions around the fix_checklist and gating steps before any code changes. Since the actual code fix isn’t ready, prepping with instrumentation and targeted reproduction feels like a sensible start. I’m also wondering if we need to extend the current plan with a new phase explicitly for implementing the fix after existing ones. I'll check if more phases exist beyond L4 to confirm.
[2025-10-07T12:38:01] exec bash -lc 'rg "Phase M" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:38:01] bash -lc 'rg "Phase M" -n plans/active/cli-noise-pix0/plan.md' exited 1 in 690ms:

[2025-10-07T12:38:01] tokens used: 63,635

[2025-10-07T12:38:29] thinking

**Proposing detailed fix implementation phase**

I'm thinking through adding a new subphase (like Phase L3k) to the plan focused on implementing the φ rotation fix, including drafting patch plans, running gating checks per the fix checklist, and updating logs before parity rerun. This should clarify explicit tasks for the engineer and guide execution before Phase L4. I'll prepare a patch to insert this new section and update context bullets accordingly.
[2025-10-07T12:38:33] tokens used: 65,419

[2025-10-07T12:38:36] thinking

**Inspecting line breaks with sed**
[2025-10-07T12:38:37] exec bash -lc "sed -n '20,60p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:38:38] bash -lc "sed -n '20,60p' plans/active/cli-noise-pix0/plan.md" succeeded in 854ms:
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
- Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
- Gap snapshot update (2025-11-18 late): Attempt #81 implemented `.to(device=device, dtype=dtype)` and added the `TestHKLDevice::test_hkl_tensor_respects_device` regression (CPU/CUDA × float32/float64). Next blocker: Phase L3e scaling validation to prove all factors match C (≤1e-6) before rerunning nb-compare in Phase L4.
- Gap snapshot addendum (2025-10-06T17:59 replayed 2025-11-09): Re-running Phase L1 with `Fdump_scaled_20251006175946.bin` shows the cache stores 182,700 doubles (≈9,534 more than the 173,166 expected from header ranges) and that reflections shift by Δk≈+10–12 / Δl≈−2…−8 relative to HKL indices. Use this dataset to reverse-engineer the C layout before touching PyTorch HKL IO.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
- Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
- Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
[2025-10-07T12:38:38] tokens used: 66,011

[2025-10-07T12:38:44] thinking

**Preparing plan patch insertion**
[2025-10-07T12:38:48] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -31,2 +31,3 @@
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
[2025-10-07T12:38:48] apply_patch(auto_approved=true) exited 0 in 13ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T12:38:48] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..92edcb9198a3b1eca4b8d4ef5f093e5ab584740d
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.

[2025-10-07T12:38:48] tokens used: 68,853
[2025-10-07T12:38:48] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..92edcb9198a3b1eca4b8d4ef5f093e5ab584740d
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.


[2025-10-07T12:38:51] thinking

**Identifying insertion point for Phase L3k**
[2025-10-07T12:38:52] exec bash -lc 'rg -n "Phase L4" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:38:53] bash -lc 'rg -n "Phase L4" plans/active/cli-noise-pix0/plan.md' succeeded in 867ms:
22:- Gap snapshot update (2025-11-18 late): Attempt #81 implemented `.to(device=device, dtype=dtype)` and added the `TestHKLDevice::test_hkl_tensor_respects_device` regression (CPU/CUDA × float32/float64). Next blocker: Phase L3e scaling validation to prove all factors match C (≤1e-6) before rerunning nb-compare in Phase L4.
32:- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
276:### Phase L4 — Supervisor Command Parity Rerun
[2025-10-07T12:38:53] tokens used: 69,338
[2025-10-07T12:38:53] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..92edcb9198a3b1eca4b8d4ef5f093e5ab584740d
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.


[2025-10-07T12:38:58] thinking

**Preparing Phase L3k section for insertion**
[2025-10-07T12:39:09] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -275,2 +275,14 @@
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
[2025-10-07T12:39:09] apply_patch(auto_approved=true) exited 0 in 19ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T12:39:09] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:39:09] tokens used: 70,852
[2025-10-07T12:39:09] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:39:16] thinking

**Preparing to update Next Actions in docs**
[2025-10-07T12:39:17] exec bash -lc "sed -n '450,510p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:39:18] bash -lc "sed -n '450,510p' docs/fix_plan.md" succeeded in 898ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-20 refresh → updated by galph):
 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
- Attempts History:
  * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
    Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
    Artifacts:
      - `src/nanobrag_torch/simulator.py:1313-1322` - Spindle instrumentation (emit raw/normalized/magnitude)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log` - Refreshed φ=0 trace with spindle data
[2025-10-07T12:39:18] tokens used: 72,153
[2025-10-07T12:39:18] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:39:21] thinking

**Updating Next Actions section**
[2025-10-07T12:39:26] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -459,6 +459,6 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
[2025-10-07T12:39:26] apply_patch(auto_approved=true) exited 0 in 22ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T12:39:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..bcb697b1008f083d5594bc49a6484e3bd0756628
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:39:26] tokens used: 74,975
[2025-10-07T12:39:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..bcb697b1008f083d5594bc49a6484e3bd0756628
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:39:34] thinking

**Planning to log new attempt entry**
[2025-10-07T12:39:35] exec bash -lc 'rg "Attempt #94" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:39:36] bash -lc 'rg "Attempt #94" -n docs/fix_plan.md' succeeded in 891ms:
513:  * [2025-10-07] Attempt #94 (ralph loop i=94, documentation) — Result: **SUCCESS** (Phase L3j documentation loop COMPLETE). **Checklist and correction memo updated; ready for implementation loop.**
519:      - `docs/fix_plan.md` (this entry) - Attempt #94 logged
[2025-10-07T12:39:36] tokens used: 76,313
[2025-10-07T12:39:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..bcb697b1008f083d5594bc49a6484e3bd0756628
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:39:38] thinking

**Verifying attempt numbering uniqueness**
[2025-10-07T12:39:39] exec bash -lc 'rg "Attempt #95" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:39:39] bash -lc 'rg "Attempt #95" docs/fix_plan.md' exited 1 in 688ms:

[2025-10-07T12:39:39] tokens used: 76,550
[2025-10-07T12:39:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..bcb697b1008f083d5594bc49a6484e3bd0756628
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:39:42] thinking

**Preparing to insert new attempt**
[2025-10-07T12:39:47] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -464,2 +464,11 @@
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
[2025-10-07T12:39:47] apply_patch(auto_approved=true) exited 0 in 24ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T12:39:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:39:47] tokens used: 77,039
[2025-10-07T12:39:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:39:56] thinking

**Organizing plan updates and preparing input.md**
[2025-10-07T12:39:57] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:39:58] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 1.02s:
feature/spec-based-2
[2025-10-07T12:39:58] tokens used: 78,414
[2025-10-07T12:39:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:40:24] thinking

**Organizing detailed fix implementation plan**
[2025-10-07T12:40:26] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:40:26] bash -lc 'cat input.md' succeeded in 874ms:
Summary: Drive Phase C2 of tricubic vectorization by locking regression coverage for the OOB fallback before moving on to shape assertions.
Mode: Docs
Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption
Branch: feature/spec-based-2
Mapped tests: tests/test_tricubic_vectorized.py::test_oob_warning_single_fire; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log; reports/2025-10-vectorization/phase_c/implementation_notes.md; reports/2025-10-vectorization/phase_c/status_snapshot.txt; plans/active/vectorization.md; docs/fix_plan.md
Do Now: VECTOR-TRICUBIC-001 Phase C2 — author `tests/test_tricubic_vectorized.py::test_oob_warning_single_fire` to pin the single-warning behavior, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py::test_oob_warning_single_fire -v`
If Blocked: Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only tests/test_tricubic_vectorized.py -q`, log the failure plus traceback in `reports/2025-10-vectorization/phase_c/attempt_notes.md`, and note the blocker under docs/fix_plan.md Attempts.

Priorities & Rationale:
- plans/active/vectorization.md:5 — Latest snapshot shows Phase C1 is complete and Phase C2 is the first remaining blocker; executing it keeps the plan on script.
- docs/fix_plan.md:1889 — Next Actions enumerate C2/C3; closing C2 supplies the evidence needed before reshaping caches.
- reports/2025-10-vectorization/phase_b/design_notes.md:52 — Section 2 spells out the `(B,4,4,4)` gather contract that the new test must respect.
- reports/2025-10-vectorization/phase_c/gather_notes.md:63 — Documents current fallback path and warning; leverage those details when codifying the regression.
- docs/development/testing_strategy.md:105 — Reinforces that targeted pytest selectors and logged outputs are mandatory for Tier 1 parity work.
- docs/development/pytorch_runtime_checklist.md:1 — Keep device/dtype neutrality explicit while authoring the test and any helper shims.

How-To Map:
- Inspect `src/nanobrag_torch/models/crystal.py` around the interpolation warning to capture the exact message and flag state (`_interpolation_warning_shown`).
- Draft `tests/test_tricubic_vectorized.py` (new file if absent) with fixtures that trigger one batched interpolation plus a repeat call to assert the warning fires exactly once and interpolation disables thereafter.
[2025-10-07T12:40:26] tokens used: 79,728
[2025-10-07T12:40:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:40:42] thinking

**Outlining CLI-FLAGS input.md content**

I'm planning a detailed new input.md for CLI-FLAGS with about 100 lines, covering summary, mode, focus, branch, mapped tests, artifacts, actionable steps, fallback instructions, and prioritized rationale citing precise file references with approximate line numbers. I'll verify test selectors and line counts to meet the formatting requirements carefully.
[2025-10-07T12:40:44] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '250,340p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:40:45] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '250,340p'" succeeded in 843ms:
   250	| ID | Task Description | State | How/Why & Guidance |
   251	| --- | --- | --- | --- |
   252	| L2a | Instrument C scaling chain | [D] | ✅ 2025-10-06 Attempt #55: Reused existing TRACE_C hooks (nanoBragg.c 3367-3382), captured `c_trace_scaling.log` for pixel (685,1039), and recorded setup in `instrumentation_notes.md`. Artifacts live under `reports/2025-10-cli-flags/phase_l/scaling_audit/`; ready to mirror fields on the PyTorch side. |
   253	| L2b | Expose and log PyTorch scaling factors | [D] | ✅ Attempts #69, #72, and #74 (commits `1cf77b5`, `0f3de26`) now drive the harness through the updated HKL API, attach `crystal.hkl_data` / `crystal.hkl_metadata`, and capture live TRACE_PY output for pixel (685,1039). `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log` shows real polarization/omega/steps, and `harness_hkl_state_fixed.txt` confirms the HKL tensor lives on the simulator device. |
   254	| L2c | Diff traces & record first divergence | [D] | ✅ Attempt #71 refreshed `scaling_audit_summary.md` via `scripts/validation/compare_scaling_traces.py`, highlighting `I_before_scaling` as the first divergence (C=9.4365e5, Py=0) while all downstream scaling factors match within 2e-3%. This establishes that the remaining gap stems from missing structure-factor coverage rather than normalization math. |
   255	
   256	### Phase L3 — Normalization Fix Implementation
   257	Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
   258	Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
   259	Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
   260	
   261	| ID | Task Description | State | How/Why & Guidance |
   262	| --- | --- | --- | --- |
   263	| L3a | Verify structure-factor coverage for supervisor pixel | [D] | ✅ 2025-11-17 Attempt #77: `reports/2025-10-cli-flags/phase_l/structure_factor/probe.py` recorded `probe_20251117.log` showing scaled.hkl returns `F_cell=190.270004` for hkl=(-7,-1,-14). Keep the log + timestamped copies alongside a brief summary in `analysis.md`, then proceed to L3c to thread the same attachment pattern through the harness/CLI path. |
   264	| L3b | Mirror probe attachment in harness | [D] | ✅ 2025-11-17 Attempt #78: `trace_harness.py` now assigns both `hkl_data` and `hkl_metadata` before simulator construction (see `trace_py_scaling_20251117.log`, `harness_hkl_state_20251117.txt`). Keeps harness behavior aligned with probe results and removes F_cell=0 divergence. |
   265	| L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
   266	| L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
   267	| L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
   268	| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
   269	| L3g | Fractional Miller alignment plan | [D] | ✅ 2025-10-07 Attempt #91: Instrumented simulator.py:1313-1322 to emit `spindle_axis_raw/normalized/magnitude`, reran φ=0 trace (43 TRACE_PY lines), confirmed Δ(magnitude)=0.0 (tolerance ≤5e-4). H1 **RULED OUT**: spindle is exact unit vector [-1,0,0], normalization is no-op. H3 (MOSFLM matrix semantics) promoted to primary suspect. Artifacts: `rot_vector/spindle_audit.log`, `analysis.md` (updated with H3 ranking). |
[2025-10-07T12:40:45] tokens used: 82,687
[2025-10-07T12:40:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:40:47] thinking

**Adding line numbers to Phase L3k section**
[2025-10-07T12:40:48] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '340,420p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:40:48] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '340,420p'" succeeded in 703ms:

[2025-10-07T12:40:48] tokens used: 84,447
[2025-10-07T12:40:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:40:51] thinking

**Considering extending sed range**
[2025-10-07T12:40:54] exec bash -lc 'nl -ba plans/active/cli-noise-pix0/plan.md | tail -n +340 | head -n 120' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:40:54] bash -lc 'nl -ba plans/active/cli-noise-pix0/plan.md | tail -n +340 | head -n 120' succeeded in 699ms:

[2025-10-07T12:40:54] tokens used: 85,020
[2025-10-07T12:40:54] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:40:58] thinking

**Verifying file length**
[2025-10-07T12:40:58] exec bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:40:59] bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' succeeded in 678ms:
     297 plans/active/cli-noise-pix0/plan.md
[2025-10-07T12:40:59] tokens used: 85,762
[2025-10-07T12:40:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:02] thinking

**Verifying new section line numbers**
[2025-10-07T12:41:03] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '270,320p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:03] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '270,320p'" succeeded in 695ms:
   270	| L3h | MOSFLM matrix probe & diff | [D] | ✅ Attempt #92 (2025-10-07, ralph evidence loop i=92): Created `trace_harness.py` in rot_vector/, captured 12 MOSFLM probe lines (post-misset reciprocals, reconstructed reals, re-derived reciprocals), proved V_formula ≈ V_actual (Δ=1.5e-11 Å³), **ruled out Hypothesis H2**. Reciprocal re-derivation exact to 15 digits. Artifacts: `mosflm_matrix_probe.md` (primary doc), `mosflm_matrix_probe_output.log`, `trace_harness.py`, `harness_run.log`. pytest: 579 tests collected. Next: Phase L3i C instrumentation to complete C vs PyTorch diff. |
   271	| L3i | C instrumentation & diff | [D] | ✅ Attempt #93 (2025-10-07, ralph loop i=93): Captured full C MOSFLM pipeline trace (291 lines) via instrumented `golden_suite_generator/nanoBragg.c:2050-2199`, executed supervisor command, performed component-level diff. **H3 (MOSFLM transpose) RULED OUT** — real-space b_Y matches to O(1e-7) Å. Artifacts: `c_trace_mosflm.log`, `c_trace_extract.txt`, `mosflm_matrix_diff.md`, `analysis.md` (updated with H5-H7 hypotheses). pytest: 652 tests collected. Next: L3j fix checklist focusing on H5 (phi rotation) verification. |
   272	| L3j.1 | Refresh correction memo | [D] | ✅ 2025-10-07 Attempt #94 (ralph, documentation loop): Extended `mosflm_matrix_correction.md` with "Post-L3i Findings" section citing H3 ruling (b_Y matches C at φ=0 to 1.35e-07 Å), promoted H5 (φ rotation application) as primary suspect, documented quantitative deltas (b_Y +6.8%, k_frac Δ≈0.018, I_ratio 0.755), and spelled out φ samples (0°, 0.05°, 0.1°) with supervisor command context. Artifact: `mosflm_matrix_correction.md` lines 57-208. |
   273	| L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
   274	| L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
   275	
   276	### Phase L3k — φ Rotation Fix Implementation
   277	Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
   278	Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
   279	Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
   280	
   281	| ID | Task Description | State | How/Why & Guidance |
   282	| --- | --- | --- | --- |
   283	| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
   284	| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
   285	| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
   286	| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
   287	
   288	### Phase L4 — Supervisor Command Parity Rerun
   289	Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
[2025-10-07T12:41:03] tokens used: 85,988
[2025-10-07T12:41:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:05] thinking

**Extracting line numbers for fix_plan**
[2025-10-07T12:41:06] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '450,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:07] bash -lc "nl -ba docs/fix_plan.md | sed -n '450,520p'" succeeded in 683ms:
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
   460	- Next Actions (2025-11-21 refresh → galph):
   461	 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
   462	 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
   463	 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
   464	- Attempts History:
   465	  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
   466	    Metrics: Planning-only (no tests executed).
   467	    Artifacts:
   468	      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
   469	      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-07T12:41:07] tokens used: 87,998
[2025-10-07T12:41:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:09] thinking

**Preparing to locate line numbers**
[2025-10-07T12:41:12] exec bash -lc "nl -ba reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md | sed -n '1,120p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:12] bash -lc "nl -ba reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md | sed -n '1,120p'" succeeded in 720ms:
     1	# φ Rotation Parity Fix Checklist (CLI-FLAGS-003 Phase L3j)
     2	
     3	## Overview
     4	
     5	This checklist enumerates verification gates for implementing the φ rotation parity fix. All gates must pass before marking CLI-FLAGS-003 Phase L3 complete.
     6	
     7	**Primary Hypothesis:** H5 (φ Rotation Application) — Drift emerges during `Crystal.get_rotated_real_vectors()` when φ transitions from 0° → 0.05° → 0.1°.
     8	
     9	**Evidence Base:** Phases L3a–L3i proved MOSFLM base vectors correct at φ=0 (b_Y agrees to O(1e-7) Å). Divergence must occur during phi rotation.
    10	
    11	## Verification Gates
    12	
    13	| ID | Requirement | Owner | Status | Artifact Path | Threshold / Notes |
    14	|----|-------------|-------|--------|---------------|-------------------|
    15	| **VG-1** | **Per-φ Harness Rerun** | Implementation Loop | ⏸️ | `reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/` | After code fix, regenerate traces for φ=0°, 0.05°, 0.1° |
    16	| VG-1.1 | φ=0° trace regeneration | Implementation Loop | ⏸️ | `per_phi/trace_py_phi_0.00.log` | Baseline; b_Y must remain within 1e-6 relative of C (currently 1.35e-07, PASS) |
    17	| VG-1.2 | φ=0.05° trace generation | Implementation Loop | ⏸️ | `per_phi/trace_py_phi_0.05.log` | Mid-oscillation; b_Y drift ≤1e-6 relative (currently ~6.8%, FAIL pre-fix) |
    18	| VG-1.3 | φ=0.1° trace generation | Implementation Loop | ⏸️ | `per_phi/trace_py_phi_0.10.log` | Full oscillation; b_Y drift ≤1e-6 relative |
    19	| VG-1.4 | Per-φ JSON stability | Implementation Loop | ⏸️ | `per_phi/trace_py_scaling_per_phi.json` | k_frac drift <1e-6 across phi steps; F_latt signs match C |
    20	| **VG-2** | **Targeted Pytest (Lattice Factors)** | Implementation Loop | ⏸️ | Test run log | Regression coverage for lattice vector parity |
[2025-10-07T12:41:12] tokens used: 91,047
[2025-10-07T12:41:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:18] thinking

**Searching for line numbers in specs**
[2025-10-07T12:41:19] exec bash -lc 'rg -n "- pix0_vector" -n specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:20] bash -lc 'rg -n "- pix0_vector" -n specs/spec-a-cli.md' exited 2 in 689ms:
rg: unrecognized flag - 
[2025-10-07T12:41:20] tokens used: 94,148
[2025-10-07T12:41:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:25] thinking

**Running ripgrep search**
[2025-10-07T12:41:27] exec bash -lc 'rg -n "pix0_vector" specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:27] bash -lc 'rg -n "pix0_vector" specs/spec-a-cli.md' succeeded in 707ms:
60:    - -pix0_vector x y z: Detector origin offset vector (meters) from sample to the first (min fast,
143:- Custom basis vectors or -pix0_vector set convention to CUSTOM and use provided vectors where
[2025-10-07T12:41:27] tokens used: 94,285
[2025-10-07T12:41:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:31] thinking

**Referencing specific file lines**
[2025-10-07T12:41:31] exec bash -lc 'rg -n "pix0_vector" docs/architecture/detector.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:32] bash -lc 'rg -n "pix0_vector" docs/architecture/detector.md' succeeded in 670ms:
35:## 5. Logic Flow: `pix0_vector` Calculation
37:The calculation of the detector's origin vector (`pix0_vector`) depends on the `detector_pivot` mode:
42:    B -- BEAM --> C["Calculate pix0_vector using BEAM formula<br/>(pivots around beam spot on detector)"];
43:    B -- SAMPLE --> D["Calculate pix0_vector using SAMPLE formula<br/>(pivots around sample position)"];
44:    C --> E[pix0_vector = -Fbeam*fdet - Sbeam*sdet + distance*beam_vec];
45:    D --> F[pix0_vector = detector_origin + pixel_offsets];
53:pix0_vector = -Fbeam * fdet_vec - Sbeam * sdet_vec + distance * beam_vector
64:pix0_vector = detector_origin + s_offset * sdet_vec + f_offset * fdet_vec
86:- `pix0_vector` changes
209:2. **Pixel Coordinate Consistency:** Check `pixel[0,0] == pix0_vector`
[2025-10-07T12:41:32] tokens used: 94,636
[2025-10-07T12:41:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:35] thinking

**Searching for precise line numbers**
[2025-10-07T12:41:36] exec bash -lc 'rg -n "Targeted pytest" docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:37] bash -lc 'rg -n "Targeted pytest" docs/development/testing_strategy.md' exited 1 in 682ms:

[2025-10-07T12:41:37] tokens used: 95,052
[2025-10-07T12:41:37] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:40] thinking

**Preparing line references for documentation**
[2025-10-07T12:41:41] exec bash -lc "nl -ba docs/development/testing_strategy.md | sed -n '90,140p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:41] bash -lc "nl -ba docs/development/testing_strategy.md | sed -n '90,140p'" succeeded in 681ms:
    90	  -detsize 102.4 \
    91	  -pixel 0.1 \
    92	  -floatfile ../tests/golden_data/simple_cubic.bin \
    93	  -intfile ../tests/golden_data/simple_cubic.img
    94	```
    95	
    96	**Key Parameters:**
    97	- Crystal: 100Å cubic cell, 5×5×5 unit cells
    98	- Detector: 100mm distance, 1024×1024 pixels (via `-detsize 102.4`)
    99	- Beam: λ=6.2Å, uniform F=100
   100	
   101	#### 2.4.2 `triclinic_P1`
   102	**Purpose:** Validates general triclinic geometry and misset rotations.
   103	
   104	**Canonical Command:**
   105	```bash
   106	./nanoBragg -misset -89.968546 -31.328953 177.753396 \
   107	  -cell 70 80 90 75 85 95 \
   108	  -default_F 100 \
   109	  -N 5 \
[2025-10-07T12:41:41] tokens used: 95,289
[2025-10-07T12:41:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:44] thinking

**Checking relevant section location**
[2025-10-07T12:41:44] exec bash -lc "nl -ba docs/development/testing_strategy.md | sed -n '20,80p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:45] bash -lc "nl -ba docs/development/testing_strategy.md | sed -n '20,80p'" succeeded in 692ms:
    20	- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
    21	- **Authoritative smoke runs:** When a change touches tensor math, run the authoritative reproduction command once on CPU and once on CUDA (when available). Capture both logs/metrics and attach them to the fix plan. Treat any `torch.compile` or Dynamo warning about mixed devices as blocking.
    22	- **Targeted tests:** Prefer parametrised tests that iterate over `device in {"cpu", "cuda"}` (guarded by `torch.cuda.is_available()`). At minimum, ensure a `gpu_smoke` marker or equivalent pytest node exercises the new logic on CUDA before declaring success.
    23	- **Helper utilities:** Encapsulate device/dtype harmonisation in small helpers (e.g., `tensor.to(other_tensor)` or `type_as`). Centralise these helpers in reusable modules to keep the rule enforceable across future PyTorch projects.
    24	- **CI gate:** If CI offers GPU runners, add a fast smoke job that runs the `gpu_smoke` marker (or agreed command) so regressions like CPU↔GPU tensor mixing fail quickly.
    25	- **Vectorization check:** Confirm `_compute_physics_for_position` and related helpers remain batched across sources/phi/mosaic/oversample; extend broadcast dimensions instead of adding Python loops.
    26	- **Runtime checklist:** Consult `docs/development/pytorch_runtime_checklist.md` during development and cite it in fix-plan notes for PyTorch changes.
    27	
    28	### 1.5 Loop Execution Notes (Do Now + Validation Scripts)
    29	
    30	- Do Now must include an exact pytest command: In the supervisor→engineer handoff (`input.md`), include the precise `pytest` node(s) that reproduce the active item. If no test exists, first author the minimal targeted test and then run it.
    31	- Prefer reusable validation scripts: Place ad‑hoc validations under `scripts/validation/` and reference them from `input.md` rather than embedding Python snippets inline. Keep them portable and invoke via the project’s standard CLI/env.
    32	- Test cadence per loop: Run targeted tests first; execute the full `pytest` suite at most once per engineer turn (end of loop) when code changed. For prompt/docs‑only loops, use `pytest --collect-only -q` to verify import/collection.
    33	
    34	## 2. Configuration Parity
    35	
    36	**CRITICAL REQUIREMENT:** Before implementing any test that compares against C-code output, you **MUST** ensure exact configuration parity. All golden test cases must be generated with commands that are verifiably equivalent to the PyTorch test configurations.
    37	
    38	**Authoritative Reference:** See the **[C-CLI to PyTorch Configuration Map](./c_to_pytorch_config_map.md)** for:
    39	- Complete parameter mappings
[2025-10-07T12:41:45] tokens used: 96,264
[2025-10-07T12:41:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:41:56] thinking

**Preparing detailed input.md content**

I'm organizing a roughly 100-line `input.md` file that includes summary info, mode, focus, branch, mapped tests, artifacts, and structured sections like Priorities & Rationale with precise file-line references, How-To Map with commands, Pitfalls To Avoid, Pointers, and Next Up options. I’m planning careful bullet formatting and validating line numbers to ensure clarity and completeness in this documentation update.
[2025-10-07T12:41:58] exec bash -lc 'rg -n "-nonoise" specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:41:59] bash -lc 'rg -n "-nonoise" specs/spec-a-cli.md' succeeded in 954ms:
docs/fix_plan.md:451:specs/spec-a-cli.md
docs/fix_plan.md:927:specs/spec-a-cli.md
docs/fix_plan.md:1259:specs/spec-a-cli.md
plans/active/cli-noise-pix0/plan.md:4:specs/spec-a-cli.md
plans/active/cli-noise-pix0/plan.md:31:specs/spec-a-cli.md
plans/active/cli-noise-pix0/plan.md:78:specs/spec-a-cli.md
plans/active/cli-noise-pix0/plan.md:158:specs/spec-a-cli.md
src/nanobrag_torch/config.py:253:specs/spec-a-cli.md
galph_memory.md:1382:specs/spec-a-cli.md
galph_memory.md:1514:specs/spec-a-cli.md
prompts/issue.md:43:specs/spec-a-cli.md
reports/2025-10-cli-flags/phase_i/supervisor_command/README.md:212:specs/spec-a-cli.md
reports/2025-10-cli-flags/phase_h6/pivot_parity.md:87:specs/spec-a-cli.md
reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:199:specs/spec-a-cli.md
reports/2025-10-cli-flags/phase_h6/pivot_fix.md:111:specs/spec-a-cli.md
reports/2025-10-cli-flags/phase_h5/parity_summary.md:190:specs/spec-a-cli.md
reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:177:specs/spec-a-cli.md
[2025-10-07T12:41:59] tokens used: 98,583
[2025-10-07T12:41:59] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:42:06] thinking

**Drafting detailed input.md content**

I’m planning a structured `input.md` file with clear sections: How-To Map with explicit shell commands, Pitfalls to Avoid outlining 9 key rules, Pointers referencing 5 relevant files and lines, and a Next Up section offering 2 forward steps. I’ll craft about 100 lines, spacing sections nicely and making sure the content comprehensively covers the user’s instructions.
[2025-10-07T12:42:24] exec bash -lc "cat <<'EOF' > input.md
Summary: Execute Phase L3k to deliver the φ-rotation fix for CLI-FLAGS-003 before the supervisor parity rerun.
Mode: Docs
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py -k lattice
Artifacts: reports/2025-10-cli-flags/phase_l/implementation/; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_phi_0.00.log; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_scaling_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/pytest_lattice_"'$(date +%Y%m%d).log; reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/summary.json; reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md

Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.

Priorities & Rationale:
- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
- `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Verification gates (VG-1⇢VG-5) define the evidentiary bar for the φ rotation fix; each artifact must be refreshed post-patch.
- `specs/spec-a-cli.md:60` — Normative CLI spec confirms `-pix0_vector` semantics and CUSTOM convention side effects that the patch must respect.
- `docs/architecture/detector.md:35` — Detector pix0 workflow details the BEAM/SAMPLE formulas that must remain untouched while rotating about φ.
- `docs/development/testing_strategy.md:20` — Device/dtype discipline and targeted-test cadence apply once the patch is in place; record both CPU and CUDA outcomes if feasible.

How-To Map:
- Append a concise implementation note to `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md` capturing the C snippet (nanoBragg.c ~2050–2199) and the intended PyTorch changes before editing code.
- Insert the mandatory C-code reference docstring in `src/nanobrag_torch/models/crystal.py` (targeting `get_rotated_real_vectors`) per CLAUDE Rule #11, then implement the φ pipeline fix while preserving vectorization/device neutrality.
- Regenerate per-φ traces via `cd reports/2025-10-cli-flags/phase_l/rot_vector && python trace_harness.py --phi 0.0 --output per_phi/trace_py_phi_0.00.log` (repeat for 0.05 and 0.10) and update `trace_py_scaling_per_phi.json`.
- Run the targeted regression `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v 2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/pytest_lattice_$(date +%Y%m%d).log` to confirm lattice factors across φ.
- Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
- Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.

Pitfalls To Avoid:
- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.

Pointers:
- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.

Next Up:
1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:42:25] bash -lc "cat <<'EOF' > input.md
Summary: Execute Phase L3k to deliver the φ-rotation fix for CLI-FLAGS-003 before the supervisor parity rerun.
Mode: Docs
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py -k lattice
Artifacts: reports/2025-10-cli-flags/phase_l/implementation/; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_phi_0.00.log; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_scaling_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/pytest_lattice_"'$(date +%Y%m%d).log; reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/summary.json; reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md

Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.

Priorities & Rationale:
- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
- `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Verification gates (VG-1⇢VG-5) define the evidentiary bar for the φ rotation fix; each artifact must be refreshed post-patch.
- `specs/spec-a-cli.md:60` — Normative CLI spec confirms `-pix0_vector` semantics and CUSTOM convention side effects that the patch must respect.
- `docs/architecture/detector.md:35` — Detector pix0 workflow details the BEAM/SAMPLE formulas that must remain untouched while rotating about φ.
- `docs/development/testing_strategy.md:20` — Device/dtype discipline and targeted-test cadence apply once the patch is in place; record both CPU and CUDA outcomes if feasible.

How-To Map:
- Append a concise implementation note to `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md` capturing the C snippet (nanoBragg.c ~2050–2199) and the intended PyTorch changes before editing code.
- Insert the mandatory C-code reference docstring in `src/nanobrag_torch/models/crystal.py` (targeting `get_rotated_real_vectors`) per CLAUDE Rule #11, then implement the φ pipeline fix while preserving vectorization/device neutrality.
- Regenerate per-φ traces via `cd reports/2025-10-cli-flags/phase_l/rot_vector && python trace_harness.py --phi 0.0 --output per_phi/trace_py_phi_0.00.log` (repeat for 0.05 and 0.10) and update `trace_py_scaling_per_phi.json`.
- Run the targeted regression `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v 2>&1 | tee reports/2025-10-cli-flags/phase_l/rot_vector/pytest_lattice_$(date +%Y%m%d).log` to confirm lattice factors across φ.
- Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
- Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.

Pitfalls To Avoid:
- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.

Pointers:
- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.

Next Up:
1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
EOF
' succeeded in 861ms:

[2025-10-07T12:42:25] tokens used: 101,207
[2025-10-07T12:42:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:42:28] thinking

**Counting lines in input file**
[2025-10-07T12:42:28] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:42:29] bash -lc 'wc -l input.md' succeeded in 688ms:
      53 input.md
[2025-10-07T12:42:29] tokens used: 103,154
[2025-10-07T12:42:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:42:49] thinking

**Analyzing content length and bullet count constraints**
[2025-10-07T12:42:49] exec bash -lc 'git show HEAD~1:input.md | wc -l' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:42:50] bash -lc 'git show HEAD~1:input.md | wc -l' succeeded in 892ms:
      48
[2025-10-07T12:42:50] tokens used: 104,442
[2025-10-07T12:42:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:43:08] thinking

**Planning input.md restructuring**
[2025-10-07T12:43:14] tokens used: 105,849
[2025-10-07T12:43:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:43:16] thinking

**Inspecting spacing around pattern**
[2025-10-07T12:43:17] exec bash -lc "sed -n '1,40p' input.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:43:18] bash -lc "sed -n '1,40p' input.md" succeeded in 865ms:
Summary: Execute Phase L3k to deliver the φ-rotation fix for CLI-FLAGS-003 before the supervisor parity rerun.
Mode: Docs
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling.py -k lattice
Artifacts: reports/2025-10-cli-flags/phase_l/implementation/; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_phi_0.00.log; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_scaling_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/pytest_lattice_$(date +%Y%m%d).log; reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/summary.json; reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md

Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.

Priorities & Rationale:
- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
- `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Verification gates (VG-1⇢VG-5) define the evidentiary bar for the φ rotation fix; each artifact must be refreshed post-patch.
- `specs/spec-a-cli.md:60` — Normative CLI spec confirms `-pix0_vector` semantics and CUSTOM convention side effects that the patch must respect.
- `docs/architecture/detector.md:35` — Detector pix0 workflow details the BEAM/SAMPLE formulas that must remain untouched while rotating about φ.
- `docs/development/testing_strategy.md:20` — Device/dtype discipline and targeted-test cadence apply once the patch is in place; record both CPU and CUDA outcomes if feasible.

How-To Map:
- Append a concise implementation note to `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md` capturing the C snippet (nanoBragg.c ~2050–2199) and the intended PyTorch changes before editing code.
[2025-10-07T12:43:18] tokens used: 106,413
[2025-10-07T12:43:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:43:21] thinking

**Planning insertion before Priorities**
[2025-10-07T12:43:26] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -10,2 +10,9 @@
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
[2025-10-07T12:43:26] apply_patch(auto_approved=true) exited 0 in 33ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:43:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..7531fe5a56ee5bd02debeb94f8dd014db6a02ac5
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:43:26] tokens used: 108,255
[2025-10-07T12:43:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..7531fe5a56ee5bd02debeb94f8dd014db6a02ac5
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:43:31] thinking

**Adjusting Pitfalls section bullets**
[2025-10-07T12:43:35] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -34,12 +34,8 @@
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
[2025-10-07T12:43:35] apply_patch(auto_approved=true) exited 0 in 32ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:43:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..9e38d242965465c78c4d94df8e779ffd96dab1fe
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -25,16 +32,12 @@
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
 - `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:43:35] tokens used: 110,266
[2025-10-07T12:43:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..9e38d242965465c78c4d94df8e779ffd96dab1fe
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -25,16 +32,12 @@
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
 - `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:43:38] thinking

**Reducing pointer list**
[2025-10-07T12:43:44] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -42,12 +42,8 @@
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
[2025-10-07T12:43:44] apply_patch(auto_approved=true) exited 0 in 38ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:43:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..a715bd892213c19ea9454479ee1d49711ff54426
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -25,28 +32,20 @@
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:43:44] tokens used: 111,828
[2025-10-07T12:43:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..a715bd892213c19ea9454479ee1d49711ff54426
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -25,28 +32,20 @@
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:43:50] thinking

**Adding Supervisor Command section**
[2025-10-07T12:43:53] tokens used: 113,025
[2025-10-07T12:43:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..a715bd892213c19ea9454479ee1d49711ff54426
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -25,28 +32,20 @@
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:44:05] thinking

**Fixing patch formatting issues**
[2025-10-07T12:44:11] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -33,2 +33,8 @@
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
 Pitfalls To Avoid:
[2025-10-07T12:44:11] apply_patch(auto_approved=true) exited 0 in 46ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:44:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..dac2e6c2b8fca180ad18020fcde63e3c0279624d
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,27 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:44:12] tokens used: 115,295
[2025-10-07T12:44:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..dac2e6c2b8fca180ad18020fcde63e3c0279624d
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,27 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:44:15] thinking

**Reviewing input.md line count**
[2025-10-07T12:44:16] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:44:17] bash -lc 'wc -l input.md' succeeded in 849ms:
      58 input.md
[2025-10-07T12:44:17] tokens used: 116,498
[2025-10-07T12:44:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..dac2e6c2b8fca180ad18020fcde63e3c0279624d
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,27 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:44:24] thinking

**Planning additional content sections**
[2025-10-07T12:44:32] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -39,2 +39,20 @@
 
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
 Pitfalls To Avoid:
[2025-10-07T12:44:32] apply_patch(auto_approved=true) exited 0 in 41ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:44:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..443c22f9db306023fbb80785b122b22df09ee7ca
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,45 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:44:32] tokens used: 117,716
[2025-10-07T12:44:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..443c22f9db306023fbb80785b122b22df09ee7ca
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,45 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:44:36] thinking

**Checking line count**
[2025-10-07T12:44:37] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:44:38] bash -lc 'wc -l input.md' succeeded in 850ms:
      76 input.md
[2025-10-07T12:44:38] tokens used: 119,162
[2025-10-07T12:44:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..443c22f9db306023fbb80785b122b22df09ee7ca
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,45 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:44:42] thinking

**Planning additional documentation sections**
[2025-10-07T12:44:46] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -57,2 +57,14 @@
 
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
[2025-10-07T12:44:46] apply_patch(auto_approved=true) exited 0 in 27ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:44:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..f7e2451d13e3f01b5cb4e2db862ec40aabd634da
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,57 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:44:46] tokens used: 119,776
[2025-10-07T12:44:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..f7e2451d13e3f01b5cb4e2db862ec40aabd634da
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,57 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:44:49] thinking

**Checking line count**
[2025-10-07T12:44:50] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:44:51] bash -lc 'wc -l input.md' succeeded in 877ms:
      88 input.md
[2025-10-07T12:44:51] tokens used: 120,903
[2025-10-07T12:44:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..f7e2451d13e3f01b5cb4e2db862ec40aabd634da
--- a/input.md
+++ b/input.md
@@ -8,6 +8,13 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +31,57 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:44:57] thinking

**Planning document extension**
[2025-10-07T12:45:02] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -17,2 +17,8 @@
 
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
[2025-10-07T12:45:02] apply_patch(auto_approved=true) exited 0 in 29ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:45:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..8a948c7568772ea79fa953cf80380cccd9c60516
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +37,57 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:45:02] tokens used: 121,633
[2025-10-07T12:45:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..8a948c7568772ea79fa953cf80380cccd9c60516
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,29 +37,57 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:06] thinking

**Adding Post-Fix Handoff section**
[2025-10-07T12:45:09] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -94 +94,7 @@
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
[2025-10-07T12:45:09] apply_patch(auto_approved=true) exited 0 in 42ms:
Success. Updated the following files:
M input.md
[2025-10-07T12:45:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

[2025-10-07T12:45:09] tokens used: 122,684
[2025-10-07T12:45:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:11] thinking

**Counting lines**
[2025-10-07T12:45:11] exec bash -lc 'wc -l input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:12] bash -lc 'wc -l input.md' succeeded in 908ms:
     100 input.md
[2025-10-07T12:45:12] tokens used: 123,870
[2025-10-07T12:45:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:17] thinking

**Verifying list bullet counts**
[2025-10-07T12:45:18] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:19] bash -lc 'git status --short' succeeded in 777ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T12:45:19] tokens used: 124,179
[2025-10-07T12:45:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:22] thinking

**Preparing update for galph_memory.md**
[2025-10-07T12:45:25] tokens used: 124,637
[2025-10-07T12:45:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:28] thinking

**Checking existing galph_memory.md content**
[2025-10-07T12:45:29] exec bash -lc 'tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:30] bash -lc 'tail -n 40 galph_memory.md' succeeded in 899ms:

## 2025-11-20 (galph loop — Vectorization Phase C kickoff)
- `git pull --rebase` clean; no new conflicts encountered.
- Reviewed long-term goals: CLI parity remains in Phase L3f (rotation vectors outstanding), while vectorization backlog stalled at Phase C. Determined VECTOR-TRICUBIC-001 needs refreshed guidance before Ralph can implement C1.
- Updated `plans/active/vectorization.md` (lines 1-120) with 2025-11-20 gap snapshot plus explicit artifact paths and pytest/benchmark commands for Phase C1–C3. Mirrored instructions in `docs/fix_plan.md:1796-1810` so Next Actions now reference gather_notes.md, diff_snapshot.json, and new test selectors.
- Authored `input.md` (Perf mode, 101 lines) directing Ralph to tackle Phase C1: collect-only run, implement batched `(S,F,4,4,4)` gather, capture diff/runtime artifacts, rerun targeted tricubic tests (including fallback + gradient smoke), and log results under `reports/2025-10-vectorization/phase_c/` before staging.
- Follow-up expectations: Ralph executes Do Now, populates gather_notes + Attempt entry, and leaves polynomial work for later phases. Next supervisor loop should verify new artifacts, ensure docs/fix_plan Attempt logged, and then pivot to CLI L3f or Phase C2 depending on progress.

## 2025-11-20 (galph loop — CLI L3g spindle audit prep)
- Reviewed CLI-FLAGS-003 status: Phase L3f/L3g remain open despite prior rot_vector artifacts; residual k_frac drift traced to Y-component deltas and potential spindle/volume mismatch.
- Captured current artifacts (rot_vector_comparison.md, invariant_probe.md) and confirmed trace_harness.py emits full TRACE_PY data; next evidence must log spindle-axis norm + V_formula/V_actual for PyTorch vs C.
- Authored input.md (Parity mode) directing Ralph to refresh the trace, build spindle_probe + volume_probe outputs under reports/2025-10-cli-flags/phase_l/rot_vector/, rerun collect-only pytest, and update docs/fix_plan.md Attempt with quantified deltas.
- No plan rewrites needed yet; expect Ralph to append new evidence then adjust plan L3 items if hypotheses shift.

## 2025-11-20 (galph loop — CLI spindle instrumentation setup)
- Recorded new context line in `plans/active/cli-noise-pix0/plan.md` for Attempt #89 (spindle + volume probe). Marked L3f ✅, kept L3g `[P]` with explicit instruction to surface `TRACE_PY: spindle_axis` before simulator edits; L3h now depends on that evidence.
- Updated `docs/fix_plan.md` Next Actions (CLI-FLAGS-003) to focus on spindle-axis instrumentation → doc/plan sync → eventual nb-compare rerun. input.md refreshed accordingly.
- Expect Ralph to extend `trace_harness.py` (or TRACE_PY hooks) with raw/normalized spindle logging, rerun the φ=0 trace, append results to `spindle_audit.log`, and update fix_plan/plan entries before shifting to implementation.
## 2025-11-20 (galph loop — CLI-FLAGS MOSFLM probe setup)
- Updated `plans/active/cli-noise-pix0/plan.md` Phase L3 with new tasks L3h–L3j covering MOSFLM matrix probe, corrective memo, and implementation checklist; prior L3a–L3g remain [D].
[2025-10-07T12:45:30] tokens used: 125,906
[2025-10-07T12:45:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:35] thinking

**Appending new entry to file**
[2025-10-07T12:45:38] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-21 (galph loop — CLI L3k implementation prep)
- Added Phase L3k to "'`plans/active/cli-noise-pix0/plan.md` with tasks for memo, code fix, gate execution, and logging prior to Phase L4.
- Updated `docs/fix_plan.md:450-463` (Attempt #95) so Next Actions now target L3k.1–L3k.4 and the new checklist-driven workflow.
- Replaced `input.md` (Docs mode, 100 lines) to steer Ralph toward executing Phase L3k, running pytest/nb-compare with the canonical command, and documenting VG-1⇢VG-5 artifacts.
- Expect Ralph to draft the implementation memo, add the docstring reference, implement the φ rotation patch, drive `fix_checklist.md` to ✅, and log Attempt #96 before attempting Phase L4 parity.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:39] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-21 (galph loop — CLI L3k implementation prep)
- Added Phase L3k to "'`plans/active/cli-noise-pix0/plan.md` with tasks for memo, code fix, gate execution, and logging prior to Phase L4.
- Updated `docs/fix_plan.md:450-463` (Attempt #95) so Next Actions now target L3k.1–L3k.4 and the new checklist-driven workflow.
- Replaced `input.md` (Docs mode, 100 lines) to steer Ralph toward executing Phase L3k, running pytest/nb-compare with the canonical command, and documenting VG-1⇢VG-5 artifacts.
- Expect Ralph to draft the implementation memo, add the docstring reference, implement the φ rotation patch, drive `fix_checklist.md` to ✅, and log Attempt #96 before attempting Phase L4 parity.
EOF
' succeeded in 706ms:

[2025-10-07T12:45:39] tokens used: 127,926
[2025-10-07T12:45:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:41] thinking

**Reviewing diffs before commit**
[2025-10-07T12:45:42] exec bash -lc 'git diff -- plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:42] bash -lc 'git diff -- plans/active/cli-noise-pix0/plan.md' succeeded in 716ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a..2d370c0 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@ Exit Criteria: PyTorch source changes with inline C-code docstring references ar
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
[2025-10-07T12:45:42] tokens used: 129,148
[2025-10-07T12:45:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:46] thinking

**Reviewing documentation diff**
[2025-10-07T12:45:47] exec bash -lc 'git diff -- docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:48] bash -lc 'git diff -- docs/fix_plan.md' succeeded in 688ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b28..9b30be3 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
[2025-10-07T12:45:48] tokens used: 131,197
[2025-10-07T12:45:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:52] thinking

**Reviewing input diff**
[2025-10-07T12:45:53] exec bash -lc 'git diff -- input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:53] bash -lc 'git diff -- input.md' succeeded in 739ms:
diff --git a/input.md b/input.md
index c335741..557c576 100644
--- a/input.md
+++ b/input.md
@@ -1,48 +1,100 @@
-Summary: Drive Phase C2 of tricubic vectorization by locking regression coverage for the OOB fallback before moving on to shape assertions.
+Summary: Execute Phase L3k to deliver the φ-rotation fix for CLI-FLAGS-003 before the supervisor parity rerun.
 Mode: Docs
-Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption
+Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
 Branch: feature/spec-based-2
-Mapped tests: tests/test_tricubic_vectorized.py::test_oob_warning_single_fire; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
-Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log; reports/2025-10-vectorization/phase_c/implementation_notes.md; reports/2025-10-vectorization/phase_c/status_snapshot.txt; plans/active/vectorization.md; docs/fix_plan.md
-Do Now: VECTOR-TRICUBIC-001 Phase C2 — author `tests/test_tricubic_vectorized.py::test_oob_warning_single_fire` to pin the single-warning behavior, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py::test_oob_warning_single_fire -v`
-If Blocked: Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only tests/test_tricubic_vectorized.py -q`, log the failure plus traceback in `reports/2025-10-vectorization/phase_c/attempt_notes.md`, and note the blocker under docs/fix_plan.md Attempts.
+Mapped tests: tests/test_cli_scaling.py -k lattice
+Artifacts: reports/2025-10-cli-flags/phase_l/implementation/; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_phi_0.00.log; reports/2025-10-cli-flags/phase_l/rot_vector/per_phi/trace_py_scaling_per_phi.json; reports/2025-10-cli-flags/phase_l/rot_vector/pytest_lattice_$(date +%Y%m%d).log; reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/summary.json; reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md
+
+Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
+If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
[2025-10-07T12:45:53] tokens used: 132,399
[2025-10-07T12:45:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:45:57] thinking

**Staging changes for commit**
[2025-10-07T12:45:58] exec bash -lc 'git add plans/active/cli-noise-pix0/plan.md docs/fix_plan.md input.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:45:58] bash -lc 'git add plans/active/cli-noise-pix0/plan.md docs/fix_plan.md input.md galph_memory.md' succeeded in 739ms:

[2025-10-07T12:45:58] tokens used: 134,234
[2025-10-07T12:45:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:46:01] thinking

**Committing with proper message**
[2025-10-07T12:46:03] exec bash -lc 'git commit -m "SUPERVISOR: CLI L3k planning refresh - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:46:03] bash -lc 'git commit -m "SUPERVISOR: CLI L3k planning refresh - tests: not run"' succeeded in 733ms:
[feature/spec-based-2 ad52b83] SUPERVISOR: CLI L3k planning refresh - tests: not run
 4 files changed, 120 insertions(+), 40 deletions(-)
[2025-10-07T12:46:03] tokens used: 134,509
[2025-10-07T12:46:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:46:06] thinking

**Pushing changes to remote**
[2025-10-07T12:46:07] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T12:46:09] bash -lc 'git push' succeeded in 2.14s:
To github.com:hoidn/nanoBragg.git
   03f0c06..ad52b83  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T12:46:09] tokens used: 134,693
[2025-10-07T12:46:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.


[2025-10-07T12:46:17] thinking

**Preparing final plan summary**
[2025-10-07T12:46:17] codex

**Plan Refresh**
- `plans/active/cli-noise-pix0/plan.md:276` now includes Phase L3k with explicit tasks for the φ-rotation implementation (memo, code fix, gate execution, logging) before Phase L4.
- `docs/fix_plan.md:450` Next Actions re-target L3k.1–L3k.4 and log Attempt #95 to document the planning refresh and required evidence path.
- `input.md:1` delivers a 100-line Docs-mode brief steering Ralph through Phase L3k, listing the canonical supervisor command, gate metrics, trace/doc checklists, and post-fix handoff expectations.
- `galph_memory.md` appended a 2025-11-21 entry capturing these updates and calling for Attempt #96 once the gates pass.

No tests were run (documentation-only loop).

Next steps: Ralph should execute Phase L3k—author the implementation memo/docstring, apply the φ rotation fix, run VG-1⇢VG-5, and log the new Attempt before launching the Phase L4 parity rerun.
[2025-10-07T12:46:20] tokens used: 135,449
[2025-10-07T12:46:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index c206b2858dc0308d0b7fce0b2df89d8fd3fceb7d..9b30be347f01f5e302918ff2614c4bb733c9ae3d
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,20 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-20 refresh → updated by galph):
- 1. Phase L3j.1 — Update `mosflm_matrix_correction.md` with Attempt #93 evidence (H3 ruled out, H5–H7 promoted) and cite the relevant trace line numbers plus φ sampling requirements.
- 2. Phase L3j.2 — Draft `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` listing per-φ trace, targeted pytest (`tests/test_cli_scaling.py -k lattice -v`), and nb-compare ROI commands with ≤1e-6 tolerances and artifact paths.
- 3. Phase L3j.3 — Refresh docs/fix_plan.md Attempt history once the checklist exists and log the evidence paths before scheduling simulator code changes.
+- Next Actions (2025-11-21 refresh → galph):
+ 1. Phase L3k.1/L3k.2 — Draft the φ-rotation implementation memo, add the required C-code docstring reference, and stage the `Crystal.get_rotated_real_vectors` patch that mirrors nanoBragg.c.
+ 2. Phase L3k.3 — Run `fix_checklist.md` verification gates VG-1⇢VG-5 (per-φ harness, targeted pytest, nb-compare ROI, delta audit, docs) with artifacts under `reports/2025-10-cli-flags/phase_l/`.
+ 3. Phase L3k.4 — Log the implementation Attempt in this entry with metrics (k_frac, b_Y, nb-compare), flip checklist rows to ✅, and update plan status before scheduling Phase L4 parity rerun.
 - Attempts History:
+  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
+    Metrics: Planning-only (no tests executed).
+    Artifacts:
+      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
+      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
+    Observations/Hypotheses:
+      - Phase L3 instrumentation/memo/checklist complete; implementation gate now formalised.
+      - Outstanding work: execute Phase L3k.1–L3k.4 to deliver φ rotation fix before Phase L4 parity rerun.
+    Next Actions: Follow refreshed Next Actions (Phase L3k.1–L3k.4), then proceed to Phase L4 once gates pass.
   * [2025-10-07] Attempt #91 (ralph loop i=91) — Result: **SUCCESS** (Phase L3g spindle instrumentation COMPLETE). **H1 (spindle normalization) RULED OUT as root cause of Y-drift.**
     Metrics: Spindle Δ(magnitude)=0.0 (tolerance ≤5e-4); trace captured 43 TRACE_PY lines (was 40, +3 spindle lines); test collection 4/4 passed.
     Artifacts:
diff --git a/input.md b/input.md
index 2240acab8ca2712fb31fb8f6a92833fc9682fb96..557c576a2dc5de45aa5fc05e3958ecf67327824a
--- a/input.md
+++ b/input.md
@@ -8,6 +8,19 @@
 Do Now: CLI-FLAGS-003 Phase L3k.1–L3k.3 — prepare the φ-rotation implementation memo, update the docstring, land the patch, then run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling.py -k lattice -v` after the fix.
 If Blocked: Capture the failure (trace, traceback, or design question) in `reports/2025-10-cli-flags/phase_l/implementation/attempt_notes.md`, append an Attempt entry under docs/fix_plan.md with the obstacle, and stop without editing simulator code further.
 
+Context Recap:
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` still lists a +6.8% b_Y drift at φ=0.05°; closing Phase L3k must drive this delta below 1e-6.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` provides the verified C baseline (b_Y=0.71732 Å, k=-0.607) for all φ; diff all new traces against these values.
+- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` names `I_before_scaling` as the first divergence, so the φ fix must restore that intensity before Phase L4 metrics.
+- `docs/fix_plan.md:465` logs Attempt #95 and the new L3k focus, ensuring the ledger is ready for the implementation Attempt once gates pass.
+- `plans/active/cli-noise-pix0/plan.md:277` clarifies the Exit Criteria: docstring reference, all VG rows ✅, and synchronised plan/fix_plan updates.
+
+Pre-Fix Validation Snapshot:
+- `fix_checklist.md` rows remain ⏸️, signalling that no φ rotation fix has been validated yet.
+- Per-φ traces (`per_phi/trace_py_phi_0.05.log`) currently show k_frac ≈ -0.589 vs C’s -0.607, confirming the magnitude of drift to eliminate.
+- `pytest` lattice runs are green but still reflect the pre-fix behavior; expect failures if assertions are tightened later.
+- nb-compare results from Previous Attempts show correlation ≈0.9965 and sum_ratio ≈1.26e5, underscoring the urgency of normalization repair.
+
 Priorities & Rationale:
 - `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k now holds the implementation checklist; completing its rows unlocks Phase L4 parity work.
 - `docs/fix_plan.md:450` — Next Actions explicitly call for Phase L3k.1–L3k.4; staying in sync with this ledger keeps Ralph’s attempts traceable.
@@ -24,30 +37,64 @@
 - Execute the supervisor ROI comparison `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix -- [supervisor flags]` with `NB_C_BIN` set, capturing summary metrics.
 - Update `rot_vector_comparison.md`, mark each VG row ✅ inside `fix_checklist.md`, and log the completed Attempt with metrics (k_frac delta, b_Y delta, correlation, sum_ratio) in docs/fix_plan.md before moving to Phase L4.
 
+Supervisor Command Reference:
+```
+nanoBragg -mat A.mat -floatfile img.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
+```
+- Use this exact flag set for nb-compare and trace harness parity; any deviation must be documented and justified in the Attempt notes.
+
+Gate Outcome Targets:
+- Correlation ≥0.9995 and sum_ratio 0.99–1.01 in `nb_compare_phi_fix/summary.json` (VG-3.2/3.3).
+- |b_Y(C) − b_Y(Py)| ≤ 1e-6 Å and Δk_frac ≤ 1e-6 (VG-4.1/4.2) extracted from per-φ traces.
+- `I_before_scaling` ratio within 0.99–1.01 according to `scaling_validation` logs (VG-4.4).
+- No sign mismatches in `F_latt_b` across φ per the refreshed JSON export (VG-4.3).
+
+Trace Fields Checklist:
+- `TRACE_PY: rot_b_angstroms`, `TRACE_PY: k_frac`, `TRACE_PY: F_latt_b`, and `TRACE_PY: I_before_scaling` must appear for each φ sample.
+- Confirm `TRACE_PY: phi_deg` matches the requested angle (0°, 0.05°, 0.1°) after the fix.
+- Ensure `TRACE_PY: spindle_axis_raw/normalized` still report unit vectors (regression guard from Phase L3g).
+- Verify HKL metadata (`h_min`, `k_min`, etc.) stays identical between harness and CLI after the new patch.
+
+Documentation Updates Checklist:
+- Append the implementation summary (with file:line references) to `mosflm_matrix_correction.md` under a "Post-Implementation" heading.
+- Mark each VG row ✅ inside `fix_checklist.md`, adding links to the new artifacts.
+- Add Attempt #96 entry to `docs/fix_plan.md` summarizing metrics and referencing all new logs.
+- Note the plan completion in `plans/active/cli-noise-pix0/plan.md` by flipping L3k rows to [D] after artifacts are in place.
+
+Metrics To Capture:
+- Record correlation, RMSE, sum_ratio, and mean_peak_distance from `nb_compare_phi_fix/summary.json` in the Attempt notes.
+- Capture k_frac, b_Y, and F_latt deltas for each φ angle in `rot_vector_comparison.md` tables.
+- Log the exact pytest runtime and device/dtype matrix inside `pytest_lattice_*.log`.
+- Store SHA256 hashes for key traces (`trace_py_phi_*.log`, `c_trace_mosflm.log`) to simplify future audits.
+
+Attempt Logging Notes:
+- Reference git SHA, date/time, and environment metadata in the Attempt entry to keep reproduction straightforward.
+- Link to every new artifact (per-φ traces, pytest log, nb-compare summary, updated docs) so future reviewers can navigate quickly.
+- Summarize whether each VG gate passed on first try or required rework; flag any deviations from spec tolerances.
+- Indicate follow-up items (if any) for Phase L4 before marking Phase L3k complete.
+
 Pitfalls To Avoid:
-- Do not alter or delete any asset referenced by `docs/index.md`; treat reported paths as protected.
-- Avoid `.item()`, `.numpy()`, or implicit CPU tensors; maintain differentiability and device neutrality throughout the fix.
-- Do not bypass Phase L3k.1 documentation — the C-code reference must exist before touching implementation files.
-- Keep `_compute_physics_for_position` vectorized; no pixel-wise Python loops while adjusting rotation math.
-- Preserve the existing trace harness outputs; stash new logs under timestamped subdirectories instead of overwriting raw evidence.
-- Remember `KMP_DUPLICATE_LIB_OK=TRUE` for every PyTorch/pytest/nb-compare invocation to prevent MKL crashes.
-- Do not rerun `nb-compare` with altered ROI or parameters; use the canonical supervisor command for parity evidence.
-- Ensure the per-φ harness uses the same seeds and oversample settings as the supervisor command to avoid spurious differences.
-- Update fix_plan attempts immediately after evidence capture; stale ledger entries slow down subsequent loops.
-- Leave C instrumentation untouched unless a new trace is mandatory; reuse the existing `c_trace_mosflm.log` for comparisons.
+- `docs/index.md` lists protected assets; double-check before touching automation scripts or report directories.
+- Skip Phase L3k.1 at your peril—add the C-code docstring reference before even staging code changes.
+- Maintain differentiability/device neutrality (no `.item()`, implicit CPU tensors, or `.to("cpu")` shims inside physics loops).
+- Preserve vectorization in `get_rotated_real_vectors`; no scalar loops or temporary Python lists when adjusting rotations.
+- Use the canonical seeds/flags (`trace_harness.py` commands, supervisor ROI, `KMP_DUPLICATE_LIB_OK=TRUE`) so parity evidence remains comparable.
+- Record artifacts + Attempt notes immediately after each gate to keep `docs/fix_plan.md` synchronized with the plan.
 
 Pointers:
-- `plans/active/cli-noise-pix0/plan.md:283` — Task L3k.2 guidance on mirroring the C pipeline without double-counting pix0.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:45` — Command templates for per-φ harness reruns.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Current hypothesis notes to extend with the implementation summary.
-- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Baseline delta table to update after the fix.
-- `docs/development/c_to_pytorch_config_map.md:1` — Keep parity rules in mind while threading CLI flags through configs.
-- `specs/spec-a-cli.md:143` — Reminder that CUSTOM vectors force convention switching; verify pivot handling stays faithful.
-- `docs/architecture/detector.md:53` — Explicit BEAM pivot formula that the φ correction must respect.
-- `docs/debugging/debugging.md:12` — Parallel trace workflow to follow if new divergences appear during testing.
-- `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md` — Reference point for `I_before_scaling` parity after the patch.
-- `docs/development/testing_strategy.md:30` — Do Now/test cadence expectations for this loop.
+- `plans/active/cli-noise-pix0/plan.md:276` — Phase L3k overview plus Exit Criteria checklist.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:13` — Gate definitions and artifact paths to tick ✅ after implementation.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md:150` — Extend the memo with the implementation summary and code references.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md` — Update delta tables once the φ fix lands.
+- `reports/2025-10-cli-flags/phase_l/rot_vector/c_trace_mosflm.log` — Use as the authoritative C baseline during trace diffs.
+- `docs/development/c_to_pytorch_config_map.md:1` — Reinforces CLI↔config parity rules to keep pix0/noise semantics aligned with C.
 
 Next Up:
 1. Phase L4 — Run the supervisor command parity suite and archive artifacts once Phase L3k passes.
 2. CLI noise toggle audit — revisit the `-nonoise` code path to confirm we still match C semantics with the new rotation fix.
+
+Post-Fix Handoff:
+- Ping supervisor with the new Attempt ID and artifact list so the next loop can verify Phase L4 readiness quickly.
+- Stage updated docs (`mosflm_matrix_correction.md`, `fix_checklist.md`, plan) alongside code before committing to keep history coherent.
+- Queue nb-compare artifacts for archival (`reports/archive/...`) once parity thresholds pass; note the archive path in fix_plan.
+- Outline any residual questions (e.g., further detector conventions) in `implementation/notes.md` to inform follow-on work.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 82e084a3e0b5daf95210097c21013ab8caf0eaa2..2d370c0d3785214df370beb73e561c9b00beaa81
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -29,6 +29,7 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
 - Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Gap snapshot update (2025-11-20 evening): Attempt #93 diff confirmed MOSFLM base vectors align ≤1e-7 Å, promoting **H5 (φ rotation application)** as the primary suspect. Before implementation, Phase L3j must lock verification gates (per-φ trace, targeted pytest, nb-compare ROI) so the eventual fix can be validated against specs/spec-a-cli.md §3.3 and CLAUDE Rules 12/13.
+- Gap snapshot recap (2025-11-20 late): Attempts #86–#94 closed out Phase L3 evidence work — per-φ traces, spindle audit, MOSFLM diff, corrective memo, and `fix_checklist.md` now exist. Remaining gap is the φ-rotation implementation itself: execute the new Phase L3k gates (draft C-referenced patch → rerun per-φ harness → targeted pytest → nb-compare ROI → doc updates) before advancing to Phase L4’s supervisor-command rerun.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -272,6 +273,18 @@
 | L3j.2 | Author fix checklist | [D] | ✅ 2025-10-07 Attempt #94: Created `fix_checklist.md` with 5 verification gates (VG-1: per-φ harness rerun; VG-2: pytest lattice tests; VG-3: nb-compare ROI parity; VG-4: component-level delta audit; VG-5: documentation updates). Includes thresholds (b_Y ≤1e-6 relative, correlation ≥0.9995, sum_ratio 0.99–1.01), detailed command templates, spec/doc references, and implementation notes. Artifact: `reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md` (5 gates, 19 rows). |
 | L3j.3 | Sync plan + fix_plan | [D] | ✅ 2025-10-07 Attempt #94: Updated this plan (L3j.1–L3j.3 → [D]), refreshed `docs/fix_plan.md` CLI-FLAGS-003 with Attempt #94 entry citing checklist creation, artifact paths (`mosflm_matrix_correction.md` Post-L3i section, `fix_checklist.md`), and Next Actions for implementation loop. Logged evidence as documentation-only turn, pytest --collect-only validated (no code changes). |
 
+### Phase L3k — φ Rotation Fix Implementation
+Goal: Implement the φ rotation correction in `Crystal.get_rotated_real_vectors`, prove parity via the established verification gates, and prepare for the supervisor-command rerun.
+Prereqs: Phase L3 instrumentation/memo/checklist complete; `fix_checklist.md` available; C trace (`c_trace_mosflm.log`) and PyTorch harness outputs captured under `reports/2025-10-cli-flags/phase_l/`.
+Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3k.1 | Author implementation memo + docstring reference | [ ] | Draft a short implementation note (append to `mosflm_matrix_correction.md`) outlining the φ-rotation defect, target C snippet (nanoBragg.c ~2050–2199), and intended PyTorch changes. Ensure the target method in `src/nanobrag_torch/models/crystal.py` gains the mandatory C-code docstring reference before editing. |
+| L3k.2 | Implement φ rotation fix | [ ] | Modify `Crystal.get_rotated_real_vectors` (and related helpers if required) to mirror the C pipeline: apply misset to reciprocal vectors, rebuild real vectors, and re-derive reciprocal vectors post-φ rotation without double-counting pix0. Keep vectorization + device neutrality; capture interim notes in `reports/2025-10-cli-flags/phase_l/implementation/`. |
+| L3k.3 | Execute verification gates VG-1⇢VG-5 | [ ] | Follow `fix_checklist.md` sequentially: regenerate per-φ traces, run `pytest -k lattice`, invoke `nb-compare --roi ...`, update delta audits, and refresh documentation. Store artifacts under the prescribed `reports/.../phase_l/` subfolders and mark each checklist row ✅. |
+| L3k.4 | Log Attempt + plan sync | [ ] | Append a new Attempt entry in `docs/fix_plan.md` with metrics (k_frac delta, b_Y delta, nb-compare correlation/sum_ratio), reference the updated artifacts, and flip L3k rows + prerequisites to [D] in this plan before scheduling Phase L4. |
+
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
 Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   ad52b83..e293da9  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=96...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=96
Updating e293da9..61a3b08
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   e293da9..61a3b08  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=96
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 61a3b08..ff0418c
Fast-forward
 docs/fix_plan.md                                   |  18 ++++
 plans/active/cli-noise-pix0/plan.md                |  10 +-
 .../phase_l/rot_vector/mosflm_matrix_correction.md | 116 ++++++++++++++++++++-
 3 files changed, 138 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   61a3b08..ff0418c  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating ff0418c..dbff761
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   ff0418c..dbff761  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=97
Ralph completed iteration 96; proceeding to 97
