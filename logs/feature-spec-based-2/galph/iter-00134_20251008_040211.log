Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=134
To github.com:hoidn/nanoBragg.git
   b217951..fd624d0  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-08T04:02:15] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-08T04:02:15] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
<4>
run pyrefly check src/. triage the errors and delegate the fixing of them to ralph. be careful about test suite regressions.
</4>
<5>
delegate to ralph a full run of the test suite and triage of the failing test. review, classing various errors as either implementation bugs or consequences of test deprecation. then systematically fix the failing tests.
</5>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-08T04:02:17] thinking

**Preparing to run git pull with rebase**
[2025-10-08T04:02:18] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:20] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.20s:
Already up to date.
[2025-10-08T04:02:20] tokens used: 14,117

[2025-10-08T04:02:21] thinking

**Reading latest galph_memory entry**
[2025-10-08T04:02:21] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:22] bash -lc 'cat galph_memory.md' succeeded in 710ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-08T04:02:22] tokens used: 14,272

[2025-10-08T04:02:25] thinking

**Reviewing key documentation files**
[2025-10-08T04:02:25] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:26] bash -lc 'cat docs/index.md' succeeded in 694ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-08T04:02:26] tokens used: 17,152

[2025-10-08T04:02:27] thinking

**Preparing to review specification file**
[2025-10-08T04:02:28] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:28] bash -lc 'cat specs/spec-a.md' succeeded in 694ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-08T04:02:28] tokens used: 18,843

[2025-10-08T04:02:31] thinking

**Considering core specifications**
[2025-10-08T04:02:32] exec bash -lc 'cat specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:33] bash -lc 'cat specs/spec-a-core.md' succeeded in 672ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-08T04:02:33] tokens used: 37,770

[2025-10-08T04:02:35] thinking

**Searching for architecture file**
[2025-10-08T04:02:35] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:36] bash -lc 'cat arch.md' succeeded in 663ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-08T04:02:36] tokens used: 41,247

[2025-10-08T04:02:37] thinking

**Seeking c_to_pytorch_config_map and docs**
[2025-10-08T04:02:37] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:38] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 710ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-08T04:02:38] tokens used: 47,095

[2025-10-08T04:02:40] thinking

**Preparing debugging documentation**
[2025-10-08T04:02:41] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:42] bash -lc 'cat docs/debugging/debugging.md' succeeded in 719ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-08T04:02:42] tokens used: 48,973

[2025-10-08T04:02:44] thinking

**Checking for fix_plan documentation**
[2025-10-08T04:02:44] exec bash -lc 'cat fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:45] bash -lc 'cat fix_plan.md' exited 1 in 678ms:
cat: fix_plan.md: No such file or directory
[2025-10-08T04:02:45] tokens used: 51,393

[2025-10-08T04:02:46] thinking

**Checking plan file location**
[2025-10-08T04:02:47] exec bash -lc ls in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:47] bash -lc ls succeeded in 713ms:
1.0
1e6
A.mat
AGENTS.md
AT012_TRACE_ANALYSIS.md
CLAUDE.md
COMMIT_MESSAGE.md
DEBUGGING_NIGHTMARE_PREVENTION_TOOLKIT.md
FINAL_DIAGNOSIS_REPORT.md
Fdump.bin
HYPOTHESIS_TESTING_RESULTS.md
HYPOTHESIS_TEST_RESULTS.md
LICENSE
Makefile
P1.hkl
PARALLEL_TEST_COMMANDS.md
PARALLEL_VALIDATION_ACCEPTANCE_TESTS.md
PERFORMANCE_ANALYSIS.md
PHASE_4_1_DIAGNOSTIC_REPORT.md
PHASE_5_FINAL_VALIDATION_REPORT.md
[2025-10-08T04:02:47] tokens used: 51,621

[2025-10-08T04:02:50] thinking

**Clarifying fixplan filename**
[2025-10-08T04:02:50] exec bash -lc 'cat fixplan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:51] bash -lc 'cat fixplan.md' succeeded in 668ms:
# Fix Plan: Detector Geometry Correlation Issue

**Date**: January 20, 2025  
**Issue**: PyTorch vs C reference correlation = 0.040 (target > 0.999)  
**Status**: Critical - Blocking validation of detector geometry implementation  

## Executive Summary

Despite fixing C reference parameter bugs (-twotheta, -Xbeam/-Ybeam), the correlation between PyTorch and C implementations remains unacceptably low (0.040). The detector geometry appears correct (basis vectors match), suggesting the issue lies deeper in the simulation pipeline.

## Current State Analysis

### What We Know Works
- ✅ Baseline configuration (no tilt): 0.999 correlation
- ✅ Detector basis vectors: Identical between C and PyTorch
- ✅ pix0_vector calculation: Matches between implementations
- ✅ C parameter mapping: Fixed (-twotheta, -Xbeam/-Ybeam)

### What Fails
- ❌ Tilted configuration (twotheta=20°): 0.040 correlation
[2025-10-08T04:02:51] tokens used: 53,286

[2025-10-08T04:02:54] thinking

**Noting outdated fixplan and reviewing docs**
[2025-10-08T04:02:54] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:55] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 699ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-08T04:02:55] tokens used: 64,047

[2025-10-08T04:02:57] thinking

**Starting comprehensive codebase analysis**
[2025-10-08T04:02:58] exec bash -lc 'find plans -maxdepth 2 -type f' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:02:59] bash -lc 'find plans -maxdepth 2 -type f' succeeded in 700ms:
plans/archive/repo-hygiene-002-plan.md
plans/active/source-weight-normalization.md
plans/active/vectorization.md
plans/active/oversample-thick-subpixel.md
plans/active/unification.md
plans/rotation/phase_2_checklist.md
plans/rotation/phase_3_checklist.md
plans/rotation/implementation_rotation.md
plans/rotation/plan_rotation.md
plans/rotation/phase_1_checklist.md
plans/cellparams/implementation.md
plans/cellparams/phase3.md
plans/cellparams/phase2.md
plans/cellparams/phase1.md
plans/cellparams/plan.md
plans/cellparams/phase4.md
[2025-10-08T04:02:59] tokens used: 66,749

[2025-10-08T04:03:00] thinking

**Searching for fix_plan in docs**
[2025-10-08T04:03:01] exec bash -lc "find . -maxdepth 2 -name 'fix_plan.md'" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T04:03:01] bash -lc "find . -maxdepth 2 -name 'fix_plan.md'" succeeded in 705ms:
./docs/fix_plan.md
[2025-10-08T04:03:01] tokens used: 67,117

[2025-10-08T04:03:03] thinking

**Checking fix_plan documentation**
[2025-10-08T04:03:03] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:04] bash -lc 'cat docs/fix_plan.md' succeeded in 675ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-08T04:03:04] tokens used: 67,320

[2025-10-08T04:03:06] thinking

**Analyzing long-term goals**

I’m focusing on understanding the user’s long-term goals before moving forward, especially looking at plans like vectorization to align my actions properly. There is a lot to consider here!
[2025-10-08T04:03:07] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:08] bash -lc 'cat plans/active/vectorization.md' succeeded in 702ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-30): Phases A–D complete — gather vectorization (commit 12742e5) and batched polynomials (commit f796861) are merged with CPU+CUDA evidence in `reports/2025-10-vectorization/phase_d/`. Parity/perf validation (Phase E) is the active gate before detector absorption vectorization (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T04:03:08] tokens used: 70,216

[2025-10-08T04:03:11] thinking

**Summarizing goals and issues**
[2025-10-08T04:03:11] exec bash -lc 'cat docs/bugs/verified_c_bugs.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:12] bash -lc 'cat docs/bugs/verified_c_bugs.md' succeeded in 662ms:
# Verified `nanoBragg.c` Bugs (2025-10)

## Severity Overview
- **High:** C-IMPL-BUG-002, C-DESIGN-FLAW-001, C-DESIGN-FLAW-003, NANO-C-BUG-001, NANO-C-BUG-002
- **Medium:** C-DESIGN-FLAW-002, C-DESIGN-FLAW-005, C-PARITY-001
- **Low:** C-LOGGING-BUG-001

Artifact logs for the reproductions below live under `docs/bugs/artifacts/`.

---

### C-IMPL-BUG-002 — Incorrect Angle Units in `mosaic_rotation_umat` (High)
**Summary:** The random misset path feeds `90.0` (degrees) into `mosaic_rotation_umat`, but the helper interprets angles in radians. The code therefore constructs rotation matrices using a 90-radian cap (≈5156°), which produces non-physical orientations.

**Reproduction:**
```bash
./golden_suite_generator/nanoBragg \
  -cell 50 60 70 80 90 100 \
  -misset random \
  -default_F 1 -N 0 \
[2025-10-08T04:03:12] tokens used: 71,843

[2025-10-08T04:03:15] thinking

**Reviewing spec bug context**
[2025-10-08T04:03:15] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:16] bash -lc 'ls plans/active' succeeded in 698ms:
cli-noise-pix0
cli-phi-parity-shim
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-08T04:03:16] tokens used: 75,469

[2025-10-08T04:03:18] thinking

**Checking CLI noise plan**
[2025-10-08T04:03:18] exec bash -lc 'find plans/active/cli-noise-pix0 -maxdepth 2 -type f -print' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T04:03:19] bash -lc 'find plans/active/cli-noise-pix0 -maxdepth 2 -type f -print' succeeded in 675ms:
plans/active/cli-noise-pix0/plan.md
[2025-10-08T04:03:19] tokens used: 75,656

[2025-10-08T04:03:25] thinking

**Preparing to start**
[2025-10-08T04:03:25] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:26] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 694ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-08T04:03:26] tokens used: 76,328

[2025-10-08T04:03:32] thinking

**Outlining detailed project evaluation**

I’m focusing on analyzing the status of multiple long-term goals related to CLI flag support, specification validations, and vectorization plans to identify gaps and unresolved tasks. After gathering this insight, I plan to move forward with the next step: running a coin flip using Python.
[2025-10-08T04:03:34] exec bash -lc "python - <<'PY'
import random
print('heads' if random.random()<0.5 else 'tails')
PY" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:34] bash -lc "python - <<'PY'
import random
print('heads' if random.random()<0.5 else 'tails')
PY" succeeded in 715ms:
tails
[2025-10-08T04:03:34] tokens used: 123,281

[2025-10-08T04:03:40] thinking

**Assessing plan update need**
[2025-10-08T04:03:41] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:41] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 719ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
483:      - `src/nanobrag_torch/models/detector.py:651-654` — Added comment block documenting fix references CLI-FLAGS-003 Phase L3k.3c.4, C code lines 1739-1745
567:      - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
866:  * [2025-10-22] Attempt #116 (ralph loop CLI-FLAGS-003 L3k.3c.3) — Result: **VG-1 LOCKED** ✅ (**Phase L3k.3c.3 COMPLETE**). Updated test expectations with 10-digit spec baselines and ≤1e-6 tolerances.
1016:      - C trace evidence indicates state carryover within the reference implementation. Until we either patch the C code or emulate this behavior, PyTorch must conform to the reference output to unblock CLI-FLAGS-003.
2377:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
[2025-10-08T04:03:41] tokens used: 123,878

[2025-10-08T04:03:43] thinking

**Checking specific code section**
[2025-10-08T04:03:44] exec bash -lc "sed -n '450,650p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:44] bash -lc "sed -n '450,650p' docs/fix_plan.md" succeeded in 707ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-10-08 refresh → galph loop i=118):
1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
    Metrics: Evidence-only.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md`
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_results.json`
[2025-10-08T04:03:44] tokens used: 124,416

[2025-10-08T04:03:50] thinking

**Assessing need to update plan and verify spec**

I'm reviewing an extensive existing plan related to CLI flags and considering if it needs updating to align with long-term goals. I want to ensure it properly covers required tasks and check if the spec remains free of known bugs by searching for specific terms like "carryover" to confirm safety.
[2025-10-08T04:03:51] exec bash -lc 'rg "carryover" -n specs' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:03:51] bash -lc 'rg "carryover" -n specs' exited 1 in 682ms:

[2025-10-08T04:03:51] tokens used: 127,885

[2025-10-08T04:03:59] thinking

**Assessing plan currency and focus**
[2025-10-08T04:03:59] exec bash -lc 'tail -n 40 plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:04:00] bash -lc 'tail -n 40 plans/active/cli-noise-pix0/plan.md' succeeded in 680ms:
Exit Criteria: Code patch lands with in-code C reference per CLAUDE Rule #11, all VG-1⇢VG-5 rows in `fix_checklist.md` flipped to ✅ with artifacts stored in the designated directories, and plan/fix_plan entries updated with attempt log + metrics.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L3k.1 | Author implementation memo + docstring reference | [D] | ✅ 2025-11-21 Attempt #96 (ralph Mode: Docs): Appended Phase L3k Implementation Memo to `mosflm_matrix_correction.md:187-297` documenting root cause (independent rotation of real+reciprocal vectors), C reference (nanoBragg.c:3044-3066), proposed fix (rotate only real, recompute reciprocal from cross products), implementation strategy (preserve vectorization/device neutrality), and verification thresholds (VG-1⇢VG-5). C-code docstring reference requirement documented for L3k.2. Artifacts: implementation memo, updated fix_plan Attempt #96, updated this plan L3j.3→[D]. Mode: Docs → no code changes; docstring addition deferred to implementation loop. |
| L3k.2 | Implement φ rotation fix | [D] | ✅ 2025-11-21 Attempt #97 (ralph loop i=97): Fixed `Crystal.get_rotated_real_vectors` (crystal.py:1008-1035) to rotate ONLY real vectors, then recompute reciprocal via cross products and V_actual per CLAUDE Rule #13. Added C-code docstring reference (lines 1010-1013) per CLAUDE Rule #11. Preserved vectorization, device neutrality, gradient flow. Metrics: test_f_latt_square_matches_c PASSED (5.79s), 57 crystal/geometry tests PASSED, 653 tests collected. Artifacts: crystal.py:1008-1035 (fixed implementation), Attempt #97 in fix_plan.md. |
| L3k.3 | Execute verification gates VG-1⇢VG-5 | [P] | Attempt #98 cleared VG-2, Attempt #99 exposed the remaining gaps (k_frac span 1.8e-2, correlation 0.985, sum_ratio 1.16e5), and Attempt #108 captured φ=0 PyTorch state probes while flagging the C trace dependency. After Attempt #115 landed the spec-compliant rotation, VG-1 now hinges on locking spec baselines (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) and proving ≤1e-6 deltas on CPU+CUDA before resuming nb-compare work. Continue to store artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/` (base_vector_debug/, per_phi_postfix/) and `reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/`. |

#### L3k.3 Checklist — φ=0 Verification Recovery

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L3k.3a | Align φ=0 harness/tests with supervisor spindle axis | [D] | ✅ Attempt #100 updated `tests/test_cli_scaling_phi0.py` to set `spindle_axis=[-1,0,0]`, producing the expected red baseline (rot_b drift, k_frac delta). Keep these tests red until the physics fix lands; rerun `pytest tests/test_cli_scaling_phi0.py -k "phi0" -vv` after each patch. |
| L3k.3b | Restore C↔Py per-φ comparison pipeline | [D] | ✅ Attempt #109 (2025-11-23) rebuilt the instrumented C binary, captured `c_trace_phi_20251123.log`, reran `scripts/compare_per_phi_traces.py`, and populated `delta_metrics.json` (Δk=1.8116e-2 @ φ=0, Δk≤2.85e-5 elsewhere). Artifacts: `base_vector_debug/20251123/` trace set, updated comparison summary. |
| L3k.3c | Patch φ rotation & confirm VG-1 thresholds | [ ] | **Status 2025-11-27:** Spec-compliant rotation is merged (Attempt #115) and rot_b meets tolerance; VG-1 remains open because k_frac still relies on a “differs from C bug” assertion. Record authoritative spec baselines (rot_b_y, k_frac) under a new `base_vector_debug/<timestamp>/` capture, update the pytest expectations to those numbers with ≤1e-6 tolerances, and rerun the per-φ harness on CPU+CUDA until `delta_metrics.json` reports max Δk, Δb_y ≤1e-6. Only then proceed to nb-compare gates. |
| L3k.3d | Resolve nb-compare ROI parity (VG-3/VG-4) | [ ] | Investigate the C ROI zero-sum issue (ROI bounds, image loader, dtype). Once resolved, rerun `nb-compare --roi` to hit correlation ≥0.9995, sum_ratio 0.99–1.01, and component deltas meeting VG-4 thresholds. Record metrics in `vg3_metrics.txt` and update `fix_checklist.md`. |
| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |

#### L3k.3c Tasks — Restore φ=0 Parity with C Reference
[2025-10-08T04:04:00] tokens used: 128,561

[2025-10-08T04:04:19] thinking

**Evaluating need to refresh plan**

I'm sorting through the outdated plan for CLI-FLAGS-003 and weighing whether to update it to match the current project state, with a focus on restructuring into clearer phases and aligning with related docs and next actions. The instructions emphasize producing a phased planning doc referencing key files, so I'll gather relevant specs and fix_plan entries to ensure the refreshed plan reflects the latest pending tasks and cross-references properly.
[2025-10-08T04:04:21] exec bash -lc 'cat specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:04:22] bash -lc 'cat specs/spec-a-cli.md' succeeded in 693ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-08T04:04:22] tokens used: 133,355

[2025-10-08T04:04:26] thinking

**Reviewing relevant documentation**
[2025-10-08T04:04:27] exec bash -lc 'rg -n "pix0" docs/architecture/detector.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:04:27] bash -lc 'rg -n "pix0" docs/architecture/detector.md' succeeded in 664ms:
35:## 5. Logic Flow: `pix0_vector` Calculation
37:The calculation of the detector's origin vector (`pix0_vector`) depends on the `detector_pivot` mode:
42:    B -- BEAM --> C["Calculate pix0_vector using BEAM formula<br/>(pivots around beam spot on detector)"];
43:    B -- SAMPLE --> D["Calculate pix0_vector using SAMPLE formula<br/>(pivots around sample position)"];
44:    C --> E[pix0_vector = -Fbeam*fdet - Sbeam*sdet + distance*beam_vec];
45:    D --> F[pix0_vector = detector_origin + pixel_offsets];
53:pix0_vector = -Fbeam * fdet_vec - Sbeam * sdet_vec + distance * beam_vector
64:pix0_vector = detector_origin + s_offset * sdet_vec + f_offset * fdet_vec
86:- `pix0_vector` changes
209:2. **Pixel Coordinate Consistency:** Check `pixel[0,0] == pix0_vector`
[2025-10-08T04:04:27] tokens used: 136,839

[2025-10-08T04:04:29] thinking

**Reviewing relevant portion**
[2025-10-08T04:04:30] exec bash -lc "sed -n '35,120p' docs/architecture/detector.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:04:30] bash -lc "sed -n '35,120p' docs/architecture/detector.md" succeeded in 664ms:
## 5. Logic Flow: `pix0_vector` Calculation

The calculation of the detector's origin vector (`pix0_vector`) depends on the `detector_pivot` mode:

```mermaid
graph TD
    A[Start: Calculate Rotated Basis Vectors] --> B{Detector Pivot Mode?};
    B -- BEAM --> C["Calculate pix0_vector using BEAM formula<br/>(pivots around beam spot on detector)"];
    B -- SAMPLE --> D["Calculate pix0_vector using SAMPLE formula<br/>(pivots around sample position)"];
    C --> E[pix0_vector = -Fbeam*fdet - Sbeam*sdet + distance*beam_vec];
    D --> F[pix0_vector = detector_origin + pixel_offsets];
    E --> G[Final Detector Geometry];
    F --> G;
```

### 5.1 BEAM Pivot Mode
When `detector_pivot = BEAM`, the detector rotates around the direct beam spot:
```python
pix0_vector = -Fbeam * fdet_vec - Sbeam * sdet_vec + distance * beam_vector
```
[2025-10-08T04:04:30] tokens used: 137,220

[2025-10-08T04:04:41] thinking

**Planning detailed restructuring**

I’m mapping out how to reorganize the large, outdated plan into a clearer phased format that highlights completed work and focuses on outstanding tasks, especially related to CLI-noise and parity shim coordination; I’ll also check related plans and memory to ensure alignment.
[2025-10-08T04:04:42] exec bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:04:43] bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' succeeded in 743ms:
## Context
- Initiative: CLI-FLAGS-003 (`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
- Dependencies:
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
- Current Status (2025-12-01 refresh): Spec baseline locked, opt-in parity shim landed (Attempts #120/#121), and the dtype sensitivity probe in `reports/2025-10-cli-flags/phase_l/parity_shim/20251201_dtype_probe/` confirmed the Δk≈2.845e-05 plateau is inherent to the C carryover bug. Decision logged to relax the VG-1 tolerance for c-parity mode to |Δk| ≤ 5e-5; documentation/test updates (Phase C5/D) remain outstanding.
- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).

### Phase A — Spec Baseline Confirmation (Prerequisite)
Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T04:04:43] tokens used: 138,907

[2025-10-08T04:05:01] thinking

**Summarizing plan alignment and restructuring**

I'm reviewing the current CLI parity shim plan versus the main CLI-noise-pix0 plan and noticing discrepancies—especially tasks marked undone that parity plan says are done. I’m thinking about restructuring the main plan into clearer phases that highlight completed work and focus on outstanding doc updates, normalization checks, and final gating tasks, ensuring it aligns well with the parity shim and fix_plan details. This will help clarify next steps and reduce overload while preserving necessary context.
[2025-10-08T04:05:02] exec bash -lc 'rg "I_before_scaling" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:05:03] bash -lc 'rg "I_before_scaling" -n docs/fix_plan.md' succeeded in 907ms:
459:- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
474:      - `I_before_scaling` differs by 1.08e5 because the lattice factors diverge once the scattering vector shifts.
1101:      - **Quantitative deltas documented:** b_Y +6.8% (+4.573e-02 Å), k_frac Δ≈0.018, I_before_scaling ratio 0.755 (24.5% under)
1107:    Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
1109:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log:1-41` - Refreshed trace with live values (polar=0.91464138, omega_pixel=4.20404859e-07 sr, F_cell=0, I_before_scaling=0)
1114:      - **First divergence confirmed:** `I_before_scaling=0` in PyTorch vs `943654.809` in C stems from the targeted pixel (685,1039) mapping to hkl≈(−7,−1,−14), where PyTorch reports `F_cell=0` but C’s trace records `F_cell=190.27`.
1185:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md:1-76` - Updated L2c comparison report confirming first divergence at I_before_scaling
1193:    Next Actions: Phase L2b complete; L2c evidence captured. Supervisor to proceed with Phase L3 structure-factor investigation based on comparison summary showing I_before_scaling as first divergence.
1232:    Metrics: Script successfully generates 3 artifacts (markdown, metrics.json, run_metadata.json); reports 5 divergent factors (I_before_scaling CRITICAL, polar/omega_pixel/cos_2theta MINOR, I_pixel_final CRITICAL) with I_before_scaling as first divergence. Pytest collection stable (50+ tests collected).
1246:    Metrics: Comparison reports 5 divergent factors with `I_before_scaling` still CRITICAL (−0.24397 relative). `r_e^2`, `fluence`, `steps`, `capture_fraction` remain PASS; `polar`, `omega_pixel`, `cos_2theta` MINOR. `I_pixel_final` mirrors the raw accumulation delta (−0.17343 relative).
1259:    Metrics: Harness captured 10 TRACE_PY_PHI lines (φ=0° to 0.1°) + 40 TRACE_PY lines; comparison script identifies I_before_scaling as first divergence (C=943654.809, PyTorch=713431, -24.4% rel); 5 divergent factors total (I_before_scaling, polar, omega_pixel, cos_2theta, I_pixel_final); r_e², fluence, steps, capture_fraction all PASS (≤1e-6 tolerance). Pytest 4/4 passed in 7.86s.
1261:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_20251119.log` — Fresh main trace (40 lines, F_cell=190.27, I_before_scaling=713431)
1265:      - `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json` — Structured per-factor metrics with first_divergence="I_before_scaling"
1288:    Metrics: Harness probe confirms hkl_data attached (lookup returns F=100 for (1,12,3), F=0 for out-of-range). Comparison identifies I_before_scaling as first divergence. Test suite passes 4/4 variants (tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics).
1299:      - **First divergence confirmed:** I_before_scaling (C=943654.809, Py=0) diverges because pixel maps to reflection not in HKL grid
1306:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log:1-35` — TRACE_PY run showing `F_cell=0` / `I_before_scaling=0` even though hkl=(1,12,3) exists in scaled.hkl.
1322:      - **Pixel intensity zero:** I_before_scaling=0, I_pixel_final=0 indicates F_cell=0 for this pixel, matching trace line 26
1331:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling_refreshed.log` — latest output still populated with placeholders (`I_before_scaling NOT_EXTRACTED`, `polar 0`, `I_pixel_final 0`).
1337:    Metrics: Initial comparison shows 4 divergent factors (I_before_scaling=MISSING, polar=CRITICAL 0 vs 0.9146, cos_2theta=MISSING, I_pixel_final=CRITICAL 0 vs 2.88e-7). Perfect matches for r_e_sqr, fluence, steps, capture_fraction, omega_pixel.
1340:      - `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_comparison_initial.md` - Initial comparison results showing first divergence is I_before_scaling (MISSING due to placeholder)
[2025-10-08T04:05:03] tokens used: 142,883

[2025-10-08T04:05:29] thinking

**Organizing updated multi-phase plan structure**

This is a solid strategy for reshaping the plan into clear phases L through O, with detailed task tables and states that reflect current uncertainties. I’m gathering the context, dependencies, and reproduction commands to frame the doc updates, normalization fixes, and testing comprehensively. Now I’ll prepare the new plan content mindful of marking open, in-progress, or done tasks only where warranted. This rewrite will also align fix_plan next actions to the new structure for smooth coordination.
[2025-10-08T04:05:54] exec bash -lc "cat <<'EOF' > plans/active/cli-noise-pix0/plan.md
## Context
- Initiative: CLI-FLAGS-003 — unlock the supervisor parity command by aligning PyTorch CLI behavior with nanoBragg.c for "'`-nonoise` and `-pix0_vector_mm`.
- Current Objective: Finish the remaining φ=0 parity, scaling, and normalization work so the authoritative command below produces ≥0.9995 correlation, sum ratio 0.99–1.01, and ≤1 px mean peak distance.
  - Authoritative command (C + PyTorch parity harness):
    ```bash
    nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
    ```
- Dependencies & references:
  - `specs/spec-a-cli.md` — Canonical CLI semantics for noise suppression and detector vectors.
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline (no carryover).
  - `docs/architecture/detector.md §5` — pix0 geometry formulas for BEAM/SAMPLE pivots.
  - `docs/development/c_to_pytorch_config_map.md` — Flag mapping and implicit pivot/convention rules.
  - `docs/development/testing_strategy.md §§1.4–2` — Required device/dtype smoke cadence and CLI acceptance tests.
  - `docs/bugs/verified_c_bugs.md:166-204 (C-PARITY-001)` — Source of the φ carryover bug that parity mode must emulate.
  - `plans/active/cli-phi-parity-shim/plan.md` — Companion plan governing the opt-in parity shim (Phase C complete, Phase D docs pending).
  - `reports/2025-10-cli-flags/phase_l/` — Canonical evidence directory (rot_vector, parity_shim, scaling_audit, nb_compare, supervisor_command).
- Status Snapshot (2025-12-02):
  - `-nonoise` CLI plumbing merged and covered by tests; noise writers are skipped when flag present.
  - pix0 precedence fixes landed; SAMPLE pivot error corrected to ≤0.2 µm (Attempt #129).
  - Spec-compliant φ rotation restored; optional C-parity shim implemented with dual tolerance decision (|Δk| ≤ 1e-6 spec, ≤5e-5 c-parity) pending documentation sync.
  - Scaling audit still shows first divergence at `I_before_scaling` (F_latt mismatch around HKL ≈ (−7,−1,−14)). Normalization fix + ROI nb-compare remain blocking.
  - Supervisor command parity run still outstanding; latest nb-compare attempt shows correlation ≈0.9965 and intensity ratio ≈1.26e5.
- Artifact Storage Convention: place new work in `reports/2025-10-cli-flags/phase_l/<phase_folder>/<timestamp>/` with `commands.txt`, raw logs, metrics JSON, and SHA256 hashes. Reference these paths in docs/fix_plan.md attempt logs and `fix_checklist.md`.

### Completed Foundations (Phases A–K)
Goal: Preserve provenance for earlier detector parity, pix0 precedence, and CLI parsing fixes while keeping this plan focused on the remaining gates.
Prereqs: Review archived evidence under `reports/2025-10-cli-flags/phase_[a-k]/` and Attempt log #1–#115 in `docs/fix_plan.md`.
Exit Criteria: Maintain pointers so regressions can be traced quickly; no further action required unless new bugs surface.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K0 | Summary of prior phases | [D] | Parity pivots, pix0 precedence, and CLI parsing updates are recorded in `docs/fix_plan.md` Attempts #12–#115 and `reports/2025-10-cli-flags/` subfolders (phase_a … phase_k). See `PHASE_5_FINAL_VALIDATION_REPORT.md` for the last successful alignment before current regressions. |
| K1 | References for regression context | [D] | Use `reports/2025-10-cli-flags/phase_l/scaling_audit/` for current normalization deltas, and `parity_shim/` directories for φ carryover evidence. These remain authoritative until superseded. |

### Phase L — φ=0 Parity & Documentation Sync
Goal: Align documentation, checklists, and tests with the dual-mode (spec vs c-parity) behavior so VG‑1 tolerances are unambiguous.
Prereqs: `plans/active/cli-phi-parity-shim/plan.md` Phase C complete (C1–C4 ✅), dtype probe artifacts stored under `parity_shim/20251201_dtype_probe/`.
Exit Criteria: Updated documentation/tests/checklists reflecting the 1e-6 (spec) vs 5e-5 (c-parity) tolerances, Attempt log recorded, and plan ready to advance to scaling fixes.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L1 | Sync tolerance notes into plan/checklists | [P] | Update this plan (current document), `plans/active/cli-phi-parity-shim/plan.md` (Phase D), and `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` to cite the dual-threshold decision. Ensure `fix_checklist.md` VG-1 rows reference |Δrot_b| ≤1e-6 (spec) and |Δk| ≤5e-5 (c-parity). |
| L2 | Refresh documentation set | [ ] | Edit `reports/.../phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md` (add parity shim availability), and relevant user/CLI docs (e.g., `README_PYTORCH.md`) to describe `--phi-carryover-mode`. Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output afterwards. |
| L3 | Log Attempt + fix_checklist updates | [ ] | Append an Attempt entry to `docs/fix_plan.md` summarizing the documentation sync and referencing artifact paths. Update `fix_checklist.md` VG-1 row with completion notes and link to `reports/.../diagnosis.md`. |

### Phase M — Structure-Factor & Normalization Parity (VG‑2)
Goal: Eliminate the `I_before_scaling` divergence by ensuring PyTorch fetches the same HKL amplitudes and lattice factors as C for the supervisor ROI pixels.
Prereqs: Phase L complete so traces/tests use aligned tolerances. Instrumentation from Phase L2b (`trace_harness.py`, simulator taps) already in place.
Exit Criteria: `trace_harness.py` comparisons show `F_cell`, `F_latt`, and `I_before_scaling` deltas ≤1e-6 relative, with artifacts under `reports/.../scaling_validation/`. Regression tests cover the fixed code path.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| M1 | Audit HKL lookup parity | [ ] | Use `trace_harness.py` to log `hkl_frac`, integer HKL indices, and fetched amplitudes for pixel (685,1039). Compare against C trace (`c_trace_phi_20251123.log`). Store diff in `reports/.../scaling_validation/<timestamp>/hkldata.md`. |
| M2 | Fix lattice factor propagation | [ ] | Investigate `_compute_structure_factors` and `Crystal._tricubic_interpolation` for cases returning zero F_cell. Implement fix with nanoBragg.c reference (lines 2604–3278). Add targeted pytest (`tests/test_cli_scaling_phi0.py::test_I_before_scaling_matches_c`) covering the problematic HKL. |
| M3 | Re-run scaling comparison | [ ] | Execute `python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039` (CPU + CUDA). Confirm `metrics.json` reports first_divergence=None. Update Attempt log and `scaling_audit/scaling_comparison.md`. |
| M4 | Documentation + checklist | [ ] | Summarize findings in `scaling_audit/summary.md`, update `fix_checklist.md` VG-2 row, and log Attempt with metrics (I_before_scaling ratio, F_latt deltas). |

### Phase N — ROI nb-compare Parity (VG‑3 & VG‑4)
Goal: Once scaling is fixed, prove end-to-end image parity on the supervisor ROI using nb-compare and refreshed C/PyTorch outputs.
Prereqs: Phase M complete (scaling metrics green). Ensure documentation sync from Phase L2 finished.
Exit Criteria: nb-compare metrics satisfy correlation ≥0.9995, sum_ratio 0.99–1.01, peak alignment thresholds, with evidence stored under `reports/.../nb_compare_phi_fix/`.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| N1 | Regenerate outputs | [ ] | Run the supervisor command for both C (`NB_C_BIN=./golden_suite_generator/nanoBragg`) and PyTorch (`KMP_DUPLICATE_LIB_OK=TRUE nanoBragg --phi-carryover-mode c-parity ...`). Store float images and metadata under a new timestamp directory. |
| N2 | Execute nb-compare | [ ] | `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/<timestamp>/ -- [command args]`. Capture `summary.json`, PNG visualizations, and CLI stdout. |
| N3 | Analyze + log | [ ] | Document correlation, RMSE, peak deltas in `analysis.md`. Update `docs/fix_plan.md` Attempts (VG-3/VG-4) and `fix_checklist.md` with pass/fail, thresholds, and artifact paths. |

### Phase O — Supervisor Command Closure (VG‑5)
Goal: Perform the final supervisor parity rerun, close out CLI-FLAGS-003, and archive artifacts.
Prereqs: Phases L–N complete with green metrics.
Exit Criteria: Supervisor command parity rerun recorded, Attempt logged with metrics, all documentation updated, and plan ready for archival.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| O1 | Final parity rerun | [ ] | Execute authoritative command via harness (CPU mandatory, CUDA optional) and store outputs in `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/<timestamp>/`. Include stdout/stderr, SHA256, and environment JSON. |
| O2 | Attempt + documentation | [ ] | Add Attempt entry summarizing metrics (correlation, sum_ratio, mean_peak_distance), update `fix_checklist.md` VG-5 row, and note closure in `docs/bugs/verified_c_bugs.md` if behavior changes. |
| O3 | Archive + handoff | [ ] | Move stabilized artifacts to `reports/archive/cli-flags-003/`, update this plan’s status to “ready for archive,” and provide final supervisor notes for future maintenance. |
EOF
' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:05:55] bash -lc "cat <<'EOF' > plans/active/cli-noise-pix0/plan.md
## Context
- Initiative: CLI-FLAGS-003 — unlock the supervisor parity command by aligning PyTorch CLI behavior with nanoBragg.c for "'`-nonoise` and `-pix0_vector_mm`.
- Current Objective: Finish the remaining φ=0 parity, scaling, and normalization work so the authoritative command below produces ≥0.9995 correlation, sum ratio 0.99–1.01, and ≤1 px mean peak distance.
  - Authoritative command (C + PyTorch parity harness):
    ```bash
    nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
    ```
- Dependencies & references:
  - `specs/spec-a-cli.md` — Canonical CLI semantics for noise suppression and detector vectors.
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline (no carryover).
  - `docs/architecture/detector.md §5` — pix0 geometry formulas for BEAM/SAMPLE pivots.
  - `docs/development/c_to_pytorch_config_map.md` — Flag mapping and implicit pivot/convention rules.
  - `docs/development/testing_strategy.md §§1.4–2` — Required device/dtype smoke cadence and CLI acceptance tests.
  - `docs/bugs/verified_c_bugs.md:166-204 (C-PARITY-001)` — Source of the φ carryover bug that parity mode must emulate.
  - `plans/active/cli-phi-parity-shim/plan.md` — Companion plan governing the opt-in parity shim (Phase C complete, Phase D docs pending).
  - `reports/2025-10-cli-flags/phase_l/` — Canonical evidence directory (rot_vector, parity_shim, scaling_audit, nb_compare, supervisor_command).
- Status Snapshot (2025-12-02):
  - `-nonoise` CLI plumbing merged and covered by tests; noise writers are skipped when flag present.
  - pix0 precedence fixes landed; SAMPLE pivot error corrected to ≤0.2 µm (Attempt #129).
  - Spec-compliant φ rotation restored; optional C-parity shim implemented with dual tolerance decision (|Δk| ≤ 1e-6 spec, ≤5e-5 c-parity) pending documentation sync.
  - Scaling audit still shows first divergence at `I_before_scaling` (F_latt mismatch around HKL ≈ (−7,−1,−14)). Normalization fix + ROI nb-compare remain blocking.
  - Supervisor command parity run still outstanding; latest nb-compare attempt shows correlation ≈0.9965 and intensity ratio ≈1.26e5.
- Artifact Storage Convention: place new work in `reports/2025-10-cli-flags/phase_l/<phase_folder>/<timestamp>/` with `commands.txt`, raw logs, metrics JSON, and SHA256 hashes. Reference these paths in docs/fix_plan.md attempt logs and `fix_checklist.md`.

### Completed Foundations (Phases A–K)
Goal: Preserve provenance for earlier detector parity, pix0 precedence, and CLI parsing fixes while keeping this plan focused on the remaining gates.
Prereqs: Review archived evidence under `reports/2025-10-cli-flags/phase_[a-k]/` and Attempt log #1–#115 in `docs/fix_plan.md`.
Exit Criteria: Maintain pointers so regressions can be traced quickly; no further action required unless new bugs surface.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K0 | Summary of prior phases | [D] | Parity pivots, pix0 precedence, and CLI parsing updates are recorded in `docs/fix_plan.md` Attempts #12–#115 and `reports/2025-10-cli-flags/` subfolders (phase_a … phase_k). See `PHASE_5_FINAL_VALIDATION_REPORT.md` for the last successful alignment before current regressions. |
| K1 | References for regression context | [D] | Use `reports/2025-10-cli-flags/phase_l/scaling_audit/` for current normalization deltas, and `parity_shim/` directories for φ carryover evidence. These remain authoritative until superseded. |

### Phase L — φ=0 Parity & Documentation Sync
Goal: Align documentation, checklists, and tests with the dual-mode (spec vs c-parity) behavior so VG‑1 tolerances are unambiguous.
Prereqs: `plans/active/cli-phi-parity-shim/plan.md` Phase C complete (C1–C4 ✅), dtype probe artifacts stored under `parity_shim/20251201_dtype_probe/`.
Exit Criteria: Updated documentation/tests/checklists reflecting the 1e-6 (spec) vs 5e-5 (c-parity) tolerances, Attempt log recorded, and plan ready to advance to scaling fixes.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L1 | Sync tolerance notes into plan/checklists | [P] | Update this plan (current document), `plans/active/cli-phi-parity-shim/plan.md` (Phase D), and `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` to cite the dual-threshold decision. Ensure `fix_checklist.md` VG-1 rows reference |Δrot_b| ≤1e-6 (spec) and |Δk| ≤5e-5 (c-parity). |
| L2 | Refresh documentation set | [ ] | Edit `reports/.../phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md` (add parity shim availability), and relevant user/CLI docs (e.g., `README_PYTORCH.md`) to describe `--phi-carryover-mode`. Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output afterwards. |
| L3 | Log Attempt + fix_checklist updates | [ ] | Append an Attempt entry to `docs/fix_plan.md` summarizing the documentation sync and referencing artifact paths. Update `fix_checklist.md` VG-1 row with completion notes and link to `reports/.../diagnosis.md`. |

### Phase M — Structure-Factor & Normalization Parity (VG‑2)
Goal: Eliminate the `I_before_scaling` divergence by ensuring PyTorch fetches the same HKL amplitudes and lattice factors as C for the supervisor ROI pixels.
Prereqs: Phase L complete so traces/tests use aligned tolerances. Instrumentation from Phase L2b (`trace_harness.py`, simulator taps) already in place.
Exit Criteria: `trace_harness.py` comparisons show `F_cell`, `F_latt`, and `I_before_scaling` deltas ≤1e-6 relative, with artifacts under `reports/.../scaling_validation/`. Regression tests cover the fixed code path.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| M1 | Audit HKL lookup parity | [ ] | Use `trace_harness.py` to log `hkl_frac`, integer HKL indices, and fetched amplitudes for pixel (685,1039). Compare against C trace (`c_trace_phi_20251123.log`). Store diff in `reports/.../scaling_validation/<timestamp>/hkldata.md`. |
| M2 | Fix lattice factor propagation | [ ] | Investigate `_compute_structure_factors` and `Crystal._tricubic_interpolation` for cases returning zero F_cell. Implement fix with nanoBragg.c reference (lines 2604–3278). Add targeted pytest (`tests/test_cli_scaling_phi0.py::test_I_before_scaling_matches_c`) covering the problematic HKL. |
| M3 | Re-run scaling comparison | [ ] | Execute `python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py --pixel 685 1039` (CPU + CUDA). Confirm `metrics.json` reports first_divergence=None. Update Attempt log and `scaling_audit/scaling_comparison.md`. |
| M4 | Documentation + checklist | [ ] | Summarize findings in `scaling_audit/summary.md`, update `fix_checklist.md` VG-2 row, and log Attempt with metrics (I_before_scaling ratio, F_latt deltas). |

### Phase N — ROI nb-compare Parity (VG‑3 & VG‑4)
Goal: Once scaling is fixed, prove end-to-end image parity on the supervisor ROI using nb-compare and refreshed C/PyTorch outputs.
Prereqs: Phase M complete (scaling metrics green). Ensure documentation sync from Phase L2 finished.
Exit Criteria: nb-compare metrics satisfy correlation ≥0.9995, sum_ratio 0.99–1.01, peak alignment thresholds, with evidence stored under `reports/.../nb_compare_phi_fix/`.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| N1 | Regenerate outputs | [ ] | Run the supervisor command for both C (`NB_C_BIN=./golden_suite_generator/nanoBragg`) and PyTorch (`KMP_DUPLICATE_LIB_OK=TRUE nanoBragg --phi-carryover-mode c-parity ...`). Store float images and metadata under a new timestamp directory. |
| N2 | Execute nb-compare | [ ] | `nb-compare --roi 100 156 100 156 --resample --outdir reports/2025-10-cli-flags/phase_l/nb_compare_phi_fix/<timestamp>/ -- [command args]`. Capture `summary.json`, PNG visualizations, and CLI stdout. |
| N3 | Analyze + log | [ ] | Document correlation, RMSE, peak deltas in `analysis.md`. Update `docs/fix_plan.md` Attempts (VG-3/VG-4) and `fix_checklist.md` with pass/fail, thresholds, and artifact paths. |

### Phase O — Supervisor Command Closure (VG‑5)
Goal: Perform the final supervisor parity rerun, close out CLI-FLAGS-003, and archive artifacts.
Prereqs: Phases L–N complete with green metrics.
Exit Criteria: Supervisor command parity rerun recorded, Attempt logged with metrics, all documentation updated, and plan ready for archival.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| O1 | Final parity rerun | [ ] | Execute authoritative command via harness (CPU mandatory, CUDA optional) and store outputs in `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/<timestamp>/`. Include stdout/stderr, SHA256, and environment JSON. |
| O2 | Attempt + documentation | [ ] | Add Attempt entry summarizing metrics (correlation, sum_ratio, mean_peak_distance), update `fix_checklist.md` VG-5 row, and note closure in `docs/bugs/verified_c_bugs.md` if behavior changes. |
| O3 | Archive + handoff | [ ] | Move stabilized artifacts to `reports/archive/cli-flags-003/`, update this plan’s status to “ready for archive,” and provide final supervisor notes for future maintenance. |
EOF
' succeeded in 730ms:

[2025-10-08T04:05:55] tokens used: 149,723

[2025-10-08T04:05:59] thinking

**Updating Next Actions list in fix_plan.md**
[2025-10-08T04:06:00] exec bash -lc "sed -n '454,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:06:00] bash -lc "sed -n '454,520p' docs/fix_plan.md" succeeded in 666ms:
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-10-08 refresh → galph loop i=118):
1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
    Metrics: Evidence-only.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md`
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_results.json`
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/commands.txt`
    Observations/Hypotheses:
      - Automated diff against `trace_py_c_parity.log` vs `c_run.log` shows the first >1e-6 delta at `pix0_vector_meters` (2.85 µm along detector normal).
      - The pix0_z offset propagates to `pixel_pos_meters`, `diffracted_vec`, `scattering_vec_A_inv`, yielding the fixed Δk≈2.845e-05 and ΔF_latt drift observed in VG-1 metrics.
[2025-10-08T04:06:00] tokens used: 152,974

[2025-10-08T04:06:04] thinking

**Updating Next Actions with Phase references**
[2025-10-08T04:06:08] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./docs/fix_plan.md
@@ -459,6 +459,6 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
[2025-10-08T04:06:08] apply_patch(auto_approved=true) exited 0 in 16ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-08T04:06:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.

[2025-10-08T04:06:08] tokens used: 156,189
[2025-10-08T04:06:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:06:14] thinking

**Aligning next steps with updated tasks**

I'm making sure the next actions reflect the updated plan and selected mode ("Docs") with a focus on planning. I’m preparing to create the `input.md` file to instruct Ralph, structuring it with a summary, current mode, focus item ID, and branch info, which I’ll confirm from the git status. This will keep everything coordinated with the Phase L1-L3 doc synchronization tasks.
[2025-10-08T04:06:19] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:06:20] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 720ms:
feature/spec-based-2
[2025-10-08T04:06:20] tokens used: 157,919
[2025-10-08T04:06:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:06:30] thinking

**Outlining documentation update plan**

I'm organizing a detailed plan for doc update tasks on branch feature/spec-based-2, including mapped tests with pytest collect-only, artifact paths, prioritized "Do Now" steps focused on parity shim docs, and fallback instructions. I'll also define pitfalls to avoid and relevant file pointers, making sure test suite runs are minimal and environment variables like KMP_DUPLICATE_LIB_OK are set. To validate references, I'll approximate line numbers in plans using commands like nl and sed.
[2025-10-08T04:06:31] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,200p'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:06:32] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '1,200p'" succeeded in 740ms:
     1	## Context
     2	- Initiative: CLI-FLAGS-003 — unlock the supervisor parity command by aligning PyTorch CLI behavior with nanoBragg.c for `-nonoise` and `-pix0_vector_mm`.
     3	- Current Objective: Finish the remaining φ=0 parity, scaling, and normalization work so the authoritative command below produces ≥0.9995 correlation, sum ratio 0.99–1.01, and ≤1 px mean peak distance.
     4	  - Authoritative command (C + PyTorch parity harness):
     5	    ```bash
     6	    nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0
     7	    ```
     8	- Dependencies & references:
     9	  - `specs/spec-a-cli.md` — Canonical CLI semantics for noise suppression and detector vectors.
    10	  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline (no carryover).
    11	  - `docs/architecture/detector.md §5` — pix0 geometry formulas for BEAM/SAMPLE pivots.
    12	  - `docs/development/c_to_pytorch_config_map.md` — Flag mapping and implicit pivot/convention rules.
    13	  - `docs/development/testing_strategy.md §§1.4–2` — Required device/dtype smoke cadence and CLI acceptance tests.
    14	  - `docs/bugs/verified_c_bugs.md:166-204 (C-PARITY-001)` — Source of the φ carryover bug that parity mode must emulate.
    15	  - `plans/active/cli-phi-parity-shim/plan.md` — Companion plan governing the opt-in parity shim (Phase C complete, Phase D docs pending).
    16	  - `reports/2025-10-cli-flags/phase_l/` — Canonical evidence directory (rot_vector, parity_shim, scaling_audit, nb_compare, supervisor_command).
    17	- Status Snapshot (2025-12-02):
    18	  - `-nonoise` CLI plumbing merged and covered by tests; noise writers are skipped when flag present.
    19	  - pix0 precedence fixes landed; SAMPLE pivot error corrected to ≤0.2 µm (Attempt #129).
    20	  - Spec-compliant φ rotation restored; optional C-parity shim implemented with dual tolerance decision (|Δk| ≤ 1e-6 spec, ≤5e-5 c-parity) pending documentation sync.
[2025-10-08T04:06:32] tokens used: 158,824
[2025-10-08T04:06:32] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:06:34] thinking

**Preparing line number extraction**
[2025-10-08T04:06:35] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:06:36] bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" succeeded in 674ms:
   440	    `PY`
   441	- First Divergence (if known): `parse_and_validate_args` (src/nanobrag_torch/__main__.py:435) calls `read_hkl_file`/`try_load_hkl_or_fdump` without forwarding the parsed dtype, so HKL/Fdump data is always loaded as float32. When the CLI is run with `-dtype float64`, the simulator converts those float32 tensors to float64 later, permanently losing precision relative to the requested double-precision path and violating the DTYPE-DEFAULT-001 guarantee.
   442	- Immediate Next Actions (2025-10-15):
   443	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   444	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   445	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   446	- Attempts History: None — new item.
   447	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   448	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   449	
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
[2025-10-08T04:06:36] tokens used: 160,623
[2025-10-08T04:06:36] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:06:41] thinking

**Preparing to review input.md structure**
[2025-10-08T04:06:42] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:06:43] bash -lc 'cat input.md' succeeded in 729ms:
Summary: Sync the parity-shim docs and checklists with the dual-threshold tolerance decision before we resume nb-compare parity work.
Mode: Docs
Focus: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — Phase L3k.3c.4/5 doc sync
Branch: feature/spec-based-2
Mapped tests: KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py
Artifacts:
- reports/2025-10-cli-flags/phase_l/rot_vector/20251201_dual_threshold/
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (updated section + references)
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md (VG-1 rows updated)
Do Now: CLI-FLAGS-003 L3k.3c.4/5 — KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py (run after documenting the tolerance updates and capture stdout in the new report folder)
If Blocked: If diagnosis.md or fix_checklist.md edits collide with previous supervisor instructions, capture the conflicting text in reports/2025-10-cli-flags/phase_l/rot_vector/20251201_dual_threshold/blocked.md, reference it in docs/fix_plan.md, and halt further doc edits until clarified.
Context Reminders:
- The c-parity shim stays opt-in; spec defaults remain fresh φ rotations (specs/spec-a-core.md:211).
- Dtype probe artifacts live in reports/2025-10-cli-flags/phase_l/parity_shim/20251201_dtype_probe/ — cite them verbatim.
- We cannot change Protected Assets (docs/index.md, loop.sh, supervisor.sh, input.md).
Priorities & Rationale:
- plans/active/cli-phi-parity-shim/plan.md:11 — Status flag shows documentation/test updates are the last blockers post dtype probe.
- plans/active/cli-phi-parity-shim/plan.md:47 — C4 now green but hand-off to documentation (C5) is gated on this loop.
- plans/active/cli-phi-parity-shim/plan.md:57 — C4d remains [P]; syncing plan/checklist here lets us flip it to done.
- docs/fix_plan.md:450 — Next Actions explicitly call for syncing plans/checklists, updating diagnosis, and logging a new attempt before moving to nb-compare.
[2025-10-08T04:06:43] tokens used: 163,955
[2025-10-08T04:06:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:06:51] thinking

**Rewriting instructions for updated plan**
[2025-10-08T04:07:06] exec bash -lc "cat <<'EOF' > input.md
Summary: Lock the φ=0 parity shim documentation and checklists to the dual-threshold tolerance so we can move on to the scaling fix.
Mode: Docs
Focus: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — Phase L1–L3 documentation sync
Branch: feature/spec-based-2
Mapped tests: KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py
Artifacts:
- reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (updated VG-1 section)
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md (VG-1 rows updated)
- docs/bugs/verified_c_bugs.md (C-PARITY-001 addendum)
- docs/fix_plan.md (new Attempt logging Phase L1–L3 completion)
Do Now: Phase L1–L3 — document the relaxed c-parity tolerance, sync plans/checklists/bug log, then run KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py (capture stdout under the new report directory)
If Blocked: If prior edits conflict (merge markers or incompatible instructions), stash copies in reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/blocked.md, note the issue in docs/fix_plan.md, and pause further changes pending supervisor guidance.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:35 — Phase L targets tolerance/documentation sync before scaling work begins; keep the checklist states aligned.
- plans/active/cli-phi-parity-shim/plan.md:66 — Phase D tasks (D1–D3) remain open until diagnosis.md, docs/bugs, and handoff notes are updated.
- docs/fix_plan.md:460 — Next Actions call for Phase L1–L3 completion before the scaling audit resumes.
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116 — Needs a dated subsection citing the dtype probe and dual thresholds.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:12 — VG-1 rows still reference the pre-relaxation tolerance; update them to point at the new artifacts.
- docs/bugs/verified_c_bugs.md:166 — Must mention the opt-in parity shim and relaxed |Δk| ≤ 5e-5 while keeping the spec baseline distinct.
How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync
- printf 'date -u: ' && date -u >> reports/.../20251202_tolerance_sync/commands.txt
- Record every command in commands.txt (including editors, pytest, sha256sum)
- Update reports/.../diagnosis.md with a “2025-12-02 Dual-Threshold Update” subsection referencing parity_shim/20251201_dtype_probe/{analysis_summary.md,delta_metrics.json}
- Edit reports/.../fix_checklist.md VG-1 rows to cite the new evidence and mark VG-1.4 as satisfied under the relaxed tolerance
- Touch plans/active/cli-noise-pix0/plan.md Phase L (mark L1 [D] when doc sync finishes, keep L2/L3 statuses accurate)
- In plans/active/cli-phi-parity-shim/plan.md, move Phase C5/C4d to [D] and activate Phase D1–D3 guidance with the new artifact directory
- Append a paragraph under docs/bugs/verified_c_bugs.md C-PARITY-001 describing the parity shim flag, dual thresholds, and evidence paths
- Run KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py > reports/.../20251202_tolerance_sync/collect_only.log
- (cd reports/.../20251202_tolerance_sync && sha256sum * > sha256.txt)
- Add a new Attempt entry to docs/fix_plan.md under CLI-FLAGS-003 summarizing edits, collect-only output, and the tolerance decision
Pitfalls To Avoid:
- Do not modify production code; this loop is documentation only.
- Keep historical notes intact—append new sections without deleting prior evidence.
- Respect Protected Assets (docs/index.md, loop.sh, supervisor.sh, input.md).
- Ensure commands.txt faithfully reflects every command; no undocumented steps.
- Maintain ASCII only; no smart quotes or non-breaking spaces.
- Avoid running full pytest suites or nb-compare yet; only the mapped collect-only command is allowed.
- Re-run sha256 after every file addition inside the report directory to keep hashes current.
- Mention relaxed tolerance only for c-parity mode; spec mode remains ≤1e-6 everywhere else.
- Verify git diff before commit to confirm only targeted docs changed.
- Leave plan states consistent (no flipping to [D] without evidence stored in the new directory).
Pointers:
- plans/active/cli-noise-pix0/plan.md:35
- plans/active/cli-phi-parity-shim/plan.md:66
- docs/fix_plan.md:460
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:12
- docs/bugs/verified_c_bugs.md:166
- reports/2025-10-cli-flags/phase_l/parity_shim/20251201_dtype_probe/analysis_summary.md:1
Next Up: Phase M1–M3 — scaling parity (audit HKL lookup and fix I_before_scaling) once tolerance/doc sync artifacts are captured.
EOF
" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:07] bash -lc "cat <<'EOF' > input.md
Summary: Lock the φ=0 parity shim documentation and checklists to the dual-threshold tolerance so we can move on to the scaling fix.
Mode: Docs
Focus: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — Phase L1–L3 documentation sync
Branch: feature/spec-based-2
Mapped tests: KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py
Artifacts:
- reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (updated VG-1 section)
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md (VG-1 rows updated)
- docs/bugs/verified_c_bugs.md (C-PARITY-001 addendum)
- docs/fix_plan.md (new Attempt logging Phase L1–L3 completion)
Do Now: Phase L1–L3 — document the relaxed c-parity tolerance, sync plans/checklists/bug log, then run KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py (capture stdout under the new report directory)
If Blocked: If prior edits conflict (merge markers or incompatible instructions), stash copies in reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/blocked.md, note the issue in docs/fix_plan.md, and pause further changes pending supervisor guidance.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:35 — Phase L targets tolerance/documentation sync before scaling work begins; keep the checklist states aligned.
- plans/active/cli-phi-parity-shim/plan.md:66 — Phase D tasks (D1–D3) remain open until diagnosis.md, docs/bugs, and handoff notes are updated.
- docs/fix_plan.md:460 — Next Actions call for Phase L1–L3 completion before the scaling audit resumes.
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116 — Needs a dated subsection citing the dtype probe and dual thresholds.
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:12 — VG-1 rows still reference the pre-relaxation tolerance; update them to point at the new artifacts.
- docs/bugs/verified_c_bugs.md:166 — Must mention the opt-in parity shim and relaxed |Δk| ≤ 5e-5 while keeping the spec baseline distinct.
How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync
- printf 'date -u: ' && date -u >> reports/.../20251202_tolerance_sync/commands.txt
- Record every command in commands.txt (including editors, pytest, sha256sum)
- Update reports/.../diagnosis.md with a “2025-12-02 Dual-Threshold Update” subsection referencing parity_shim/20251201_dtype_probe/{analysis_summary.md,delta_metrics.json}
- Edit reports/.../fix_checklist.md VG-1 rows to cite the new evidence and mark VG-1.4 as satisfied under the relaxed tolerance
- Touch plans/active/cli-noise-pix0/plan.md Phase L (mark L1 [D] when doc sync finishes, keep L2/L3 statuses accurate)
- In plans/active/cli-phi-parity-shim/plan.md, move Phase C5/C4d to [D] and activate Phase D1–D3 guidance with the new artifact directory
- Append a paragraph under docs/bugs/verified_c_bugs.md C-PARITY-001 describing the parity shim flag, dual thresholds, and evidence paths
- Run KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py > reports/.../20251202_tolerance_sync/collect_only.log
- (cd reports/.../20251202_tolerance_sync && sha256sum * > sha256.txt)
- Add a new Attempt entry to docs/fix_plan.md under CLI-FLAGS-003 summarizing edits, collect-only output, and the tolerance decision
Pitfalls To Avoid:
- Do not modify production code; this loop is documentation only.
- Keep historical notes intact—append new sections without deleting prior evidence.
- Respect Protected Assets (docs/index.md, loop.sh, supervisor.sh, input.md).
- Ensure commands.txt faithfully reflects every command; no undocumented steps.
- Maintain ASCII only; no smart quotes or non-breaking spaces.
- Avoid running full pytest suites or nb-compare yet; only the mapped collect-only command is allowed.
- Re-run sha256 after every file addition inside the report directory to keep hashes current.
- Mention relaxed tolerance only for c-parity mode; spec mode remains ≤1e-6 everywhere else.
- Verify git diff before commit to confirm only targeted docs changed.
- Leave plan states consistent (no flipping to [D] without evidence stored in the new directory).
Pointers:
- plans/active/cli-noise-pix0/plan.md:35
- plans/active/cli-phi-parity-shim/plan.md:66
- docs/fix_plan.md:460
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116
- reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md:12
- docs/bugs/verified_c_bugs.md:166
- reports/2025-10-cli-flags/phase_l/parity_shim/20251201_dtype_probe/analysis_summary.md:1
Next Up: Phase M1–M3 — scaling parity (audit HKL lookup and fix I_before_scaling) once tolerance/doc sync artifacts are captured.
EOF
" succeeded in 668ms:

[2025-10-08T04:07:07] tokens used: 168,203
[2025-10-08T04:07:07] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:10] thinking

**Verifying git status for changes**
[2025-10-08T04:07:10] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:11] bash -lc 'git status --short' succeeded in 750ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-08T04:07:11] tokens used: 169,720
[2025-10-08T04:07:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:13] thinking

**Reviewing diffs before finalizing**
[2025-10-08T04:07:13] exec bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:14] bash -lc 'git diff plans/active/cli-noise-pix0/plan.md' succeeded in 694ms:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index ac399b8..1d79ffc 100644
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -1,323 +1,78 @@
 ## Context
-- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
-- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
-- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
-- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
-- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
-- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
-- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
-- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
-- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
-- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
-- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
-- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
-- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
-- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
[2025-10-08T04:07:14] tokens used: 169,964
[2025-10-08T04:07:14] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:16] thinking

**Reviewing large diff for plan fixes**
[2025-10-08T04:07:17] exec bash -lc 'git diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:17] bash -lc 'git diff docs/fix_plan.md' succeeded in 714ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf63..a57087e 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.
[2025-10-08T04:07:17] tokens used: 172,993
[2025-10-08T04:07:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:20] thinking

**Reviewing input diff**
[2025-10-08T04:07:20] exec bash -lc 'git diff input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:21] bash -lc 'git diff input.md' succeeded in 684ms:
diff --git a/input.md b/input.md
index 06d3a95..21b3d61 100644
--- a/input.md
+++ b/input.md
@@ -1,101 +1,52 @@
-Summary: Sync the parity-shim docs and checklists with the dual-threshold tolerance decision before we resume nb-compare parity work.
+Summary: Lock the φ=0 parity shim documentation and checklists to the dual-threshold tolerance so we can move on to the scaling fix.
 Mode: Docs
-Focus: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — Phase L3k.3c.4/5 doc sync
+Focus: [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm — Phase L1–L3 documentation sync
 Branch: feature/spec-based-2
 Mapped tests: KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py
 Artifacts:
-- reports/2025-10-cli-flags/phase_l/rot_vector/20251201_dual_threshold/
-- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (updated section + references)
+- reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/
+- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (updated VG-1 section)
 - reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md (VG-1 rows updated)
-Do Now: CLI-FLAGS-003 L3k.3c.4/5 — KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_scaling_phi0.py (run after documenting the tolerance updates and capture stdout in the new report folder)
-If Blocked: If diagnosis.md or fix_checklist.md edits collide with previous supervisor instructions, capture the conflicting text in reports/2025-10-cli-flags/phase_l/rot_vector/20251201_dual_threshold/blocked.md, reference it in docs/fix_plan.md, and halt further doc edits until clarified.
[2025-10-08T04:07:21] tokens used: 174,121
[2025-10-08T04:07:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:24] thinking

**Appending update to galph_memory**
[2025-10-08T04:07:27] exec bash -lc "cat <<'EOF' >> galph_memory.md
## 2025-12-02 (galph loop — CLI-FLAGS-003 plan refresh)
- Rebuilt "'`plans/active/cli-noise-pix0/plan.md` around new Phases L–O so tolerance/doc sync (L1–L3), scaling parity (M1–M4), nb-compare (N1–N3), and supervisor rerun (O1–O3) are explicit. Prior phases collapsed into a completed summary for easier navigation.
- Updated `docs/fix_plan.md:460-463` Next Actions to align with the new phase IDs (L1–L3, M1–M3, N1–N3) and staged `input.md` with Docs-mode guidance pointing Ralph at Phase L1–L3 deliverables.
- Expect Ralph to produce artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/`, update diagnosis/checklists/bug log, add a fresh Attempt entry, and run the mapped collect-only pytest before we revisit scaling parity (Phase M).
EOF
' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:27] bash -lc "cat <<'EOF' >> galph_memory.md
## 2025-12-02 (galph loop — CLI-FLAGS-003 plan refresh)
- Rebuilt "'`plans/active/cli-noise-pix0/plan.md` around new Phases L–O so tolerance/doc sync (L1–L3), scaling parity (M1–M4), nb-compare (N1–N3), and supervisor rerun (O1–O3) are explicit. Prior phases collapsed into a completed summary for easier navigation.
- Updated `docs/fix_plan.md:460-463` Next Actions to align with the new phase IDs (L1–L3, M1–M3, N1–N3) and staged `input.md` with Docs-mode guidance pointing Ralph at Phase L1–L3 deliverables.
- Expect Ralph to produce artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/`, update diagnosis/checklists/bug log, add a fresh Attempt entry, and run the mapped collect-only pytest before we revisit scaling parity (Phase M).
EOF
' succeeded in 717ms:

[2025-10-08T04:07:27] tokens used: 176,410
[2025-10-08T04:07:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:30] thinking

**Preparing to stage and commit changes**
[2025-10-08T04:07:30] exec bash -lc 'git add -A' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:31] bash -lc 'git add -A' succeeded in 696ms:

[2025-10-08T04:07:31] tokens used: 177,154
[2025-10-08T04:07:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:34] thinking

**Committing plan refresh without tests**
[2025-10-08T04:07:35] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 plan refresh - tests: not run"' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:35] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS-003 plan refresh - tests: not run"' succeeded in 725ms:
[feature/spec-based-2 bc6cc69] SUPERVISOR: CLI-FLAGS-003 plan refresh - tests: not run
 4 files changed, 106 insertions(+), 396 deletions(-)
[2025-10-08T04:07:35] tokens used: 177,465
[2025-10-08T04:07:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:37] thinking

**Preparing to push changes**
[2025-10-08T04:07:38] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-08T04:07:40] bash -lc 'git push' succeeded in 2.21s:
To github.com:hoidn/nanoBragg.git
   fd624d0..bc6cc69  feature/spec-based-2 -> feature/spec-based-2
[2025-10-08T04:07:40] tokens used: 178,553
[2025-10-08T04:07:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.


[2025-10-08T04:07:46] thinking

**Preparing final message summary**

I'm gathering all the key updates from the plan, fix_plan, input, and memory, referencing specific file paths and line numbers. I'll also include a clear list of next steps for Ralph, remind that tests weren't run, and mention relevant branches and artifacts—keeping the final message friendly and straightforward with concise bullet points.
[2025-10-08T04:07:47] codex

**Plan Sync**
- Reframed CLI parity plan into fresh Phases L–O so tolerance/doc sync, scaling parity, nb-compare, and supervisor rerun are tracked explicitly (`plans/active/cli-noise-pix0/plan.md:1`).
- Updated fix-plan next actions to point at the new phase IDs (L1–L3, M1–M3, N1–N3) before Ralph resumes scaling work (`docs/fix_plan.md:450`).
- Rewrote `input.md:1` with Docs-mode guidance directing Ralph to Phase L1–L3 tasks, new artifact folder `reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/`, and the mapped collect-only pytest.
- Logged the supervisor decisions for future loops in `galph_memory.md` (tail entry) to keep the tolerance/doc sync context fresh.

Next Steps:
- Ralph should follow the new Do Now in `input.md` (Phase L1–L3) and capture evidence in the 20251202_tolerance_sync directory.
- After the documentation sync lands, move on to Phase M (scaling parity) per the refreshed plan.
[2025-10-08T04:07:49] tokens used: 179,262
[2025-10-08T04:07:49] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index eabdf6352d0f8c9b5706d9431aa41ae6661ff101..a57087e5809801ad549f635f1c9804a879eb1487
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-10-08 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (plan/checklist sync)** — Propagate the tolerance decision into `plans/active/cli-noise-pix0/plan.md` and `reports/2025-10-cli-flags/phase_l/rot_vector/` (`diagnosis.md`, `fix_checklist.md`), attaching the dtype probe artifact paths so VG-1 now enforces spec ≤1e-6 and c-parity ≤5e-5.
-2. **Phase L3k.3c.5 (documentation + Attempt log)** — Update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` with the dual-threshold rationale, add a parity-shim note to `docs/bugs/verified_c_bugs.md`, capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` output, and log the completed step in docs/fix_plan.md with artifact references.
-3. **Phase L3k.3d** — After docs/checklists align, rerun the nb-compare ROI parity sweep (VG-3/VG-4) with c-parity enabled, store results under `reports/2025-10-cli-flags/nb_compare_phi_fix/`, and advance L3k.3e → L3k.4 ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-12-02 refresh → galph loop current):
+1. **Phase L1–L3 (documentation + checklist sync)** — Update this plan, `plans/active/cli-phi-parity-shim/plan.md` (Phase D), `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, and `fix_checklist.md` with the dual tolerance (spec ≤1e-6, c-parity ≤5e-5). Capture `pytest --collect-only -q tests/test_cli_scaling_phi0.py` and log the documentation Attempt once artifacts exist.
+2. **Phase M1–M3 (scaling parity)** — Use `trace_harness.py` to audit HKL lookups, fix the `F_cell`/`F_latt` pipeline so `I_before_scaling` matches C within 1e-6, rerun scaling metrics on CPU+CUDA, and update `scaling_audit/summary.md` plus Attempt history.
+3. **Phase N1–N3 (nb-compare ROI parity)** — After scaling is green, regenerate C/PyTorch outputs, execute `nb-compare` on the 100×100 ROI, analyze results, and record VG-3/VG-4 completion before scheduling the final supervisor command rerun (Phase O).
 - Attempts History:
   * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
     Metrics: Evidence-only.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   bc6cc69..bf5f1ae  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=134...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=134
Updating bf5f1ae..55077fb
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   bf5f1ae..55077fb  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=134
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 55077fb..aea858a
Fast-forward
 docs/fix_plan.md                                   |  27 +-
 .../rot_vector/20251202_tolerance_sync/blocked.md  |  71 ++
 .../20251202_tolerance_sync/collect_only.log       | 711 +++++++++++++++++++++
 .../20251202_tolerance_sync/commands.txt           |   5 +
 .../rot_vector/20251202_tolerance_sync/sha256.txt  |   3 +
 5 files changed, 813 insertions(+), 4 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/blocked.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/collect_only.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/commands.txt
 create mode 100644 reports/2025-10-cli-flags/phase_l/rot_vector/20251202_tolerance_sync/sha256.txt
From github.com:hoidn/nanoBragg
   55077fb..aea858a  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating aea858a..0a8a589
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   aea858a..0a8a589  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=135
Ralph completed iteration 134; proceeding to 135
