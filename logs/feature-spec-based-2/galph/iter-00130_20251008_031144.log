Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=130
To github.com:hoidn/nanoBragg.git
   8b7ef1d..28aacfb  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-08T03:11:48] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-08T03:11:48] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
<4>
run pyrefly check src/. triage the errors and delegate the fixing of them to ralph. be careful about test suite regressions.
</4>
<5>
delegate to ralph a full run of the test suite and triage of the failing test. review, classing various errors as either implementation bugs or consequences of test deprecation. then systematically fix the failing tests.
</5>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-08T03:11:51] thinking

**Preparing to run git pull with timeout**
[2025-10-08T03:11:51] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:11:53] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.08s:
Already up to date.
[2025-10-08T03:11:53] tokens used: 14,191

[2025-10-08T03:11:55] thinking

**Preparing to read latest galph_memory**
[2025-10-08T03:11:55] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:11:56] bash -lc 'cat galph_memory.md' succeeded in 748ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-08T03:11:56] tokens used: 14,437

[2025-10-08T03:11:58] thinking

**Preparing to read documentation**
[2025-10-08T03:11:59] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:11:59] bash -lc 'cat docs/index.md' succeeded in 654ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-08T03:11:59] tokens used: 17,440

[2025-10-08T03:12:01] thinking

**Opening next spec file**
[2025-10-08T03:12:02] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:02] bash -lc 'cat specs/spec-a.md' succeeded in 670ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-08T03:12:02] tokens used: 36,250

[2025-10-08T03:12:04] thinking

**Opening spec-a-core**
[2025-10-08T03:12:04] exec bash -lc 'cat specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:05] bash -lc 'cat specs/spec-a-core.md' succeeded in 792ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-08T03:12:05] tokens used: 36,586

[2025-10-08T03:12:07] thinking

**Opening architecture documentation**
[2025-10-08T03:12:08] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:08] bash -lc 'cat arch.md' succeeded in 725ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-08T03:12:08] tokens used: 39,797

[2025-10-08T03:12:10] thinking

**Reading configuration map document**
[2025-10-08T03:12:11] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:11] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 730ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-08T03:12:11] tokens used: 42,564

[2025-10-08T03:12:13] thinking

**Searching for debugging documentation**
[2025-10-08T03:12:14] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:14] bash -lc 'cat docs/debugging/debugging.md' succeeded in 706ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-08T03:12:14] tokens used: 44,439

[2025-10-08T03:12:17] thinking

**Checking fix_plan file location**
[2025-10-08T03:12:18] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:21] bash -lc 'cat docs/fix_plan.md' succeeded in 2.92s:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-08T03:12:21] tokens used: 47,890

[2025-10-08T03:12:22] thinking

**Starting with testing strategy document**
[2025-10-08T03:12:23] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:23] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 707ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-08T03:12:23] tokens used: 50,872

[2025-10-08T03:12:28] thinking

**Preparing to inspect active plans**
[2025-10-08T03:12:28] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:29] bash -lc 'ls plans/active' succeeded in 728ms:
cli-noise-pix0
cli-phi-parity-shim
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-08T03:12:29] tokens used: 53,605

[2025-10-08T03:12:33] thinking

**Preparing for long-term goal analysis**
[2025-10-08T03:12:34] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:34] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 714ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-08T03:12:34] tokens used: 54,720

[2025-10-08T03:12:42] thinking

**Reviewing long-term goals and plan**

I’m focusing on understanding the big picture, especially about the phi carryover bug and test parallelization. I’ll dig into relevant docs and plans to see what’s done and what needs verifying, starting with the vectorization plan to gather more context before moving forward.
[2025-10-08T03:12:44] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:45] bash -lc 'cat plans/active/vectorization.md' succeeded in 693ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-30): Phases A–D complete — gather vectorization (commit 12742e5) and batched polynomials (commit f796861) are merged with CPU+CUDA evidence in `reports/2025-10-vectorization/phase_d/`. Parity/perf validation (Phase E) is the active gate before detector absorption vectorization (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T03:12:45] tokens used: 59,039

[2025-10-08T03:12:47] thinking

**Verifying plan details and related files**
[2025-10-08T03:12:48] exec bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:49] bash -lc 'cat plans/active/cli-phi-parity-shim/plan.md' succeeded in 668ms:
## Context
- Initiative: CLI-FLAGS-003 (`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
- Dependencies:
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).

### Phase A — Spec Baseline Confirmation (Prerequisite)
Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T03:12:49] tokens used: 60,693

[2025-10-08T03:12:51] thinking

**Checking for known phi bug**
[2025-10-08T03:12:52] exec bash -lc 'cat docs/bugs/verified_c_bugs.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:12:53] bash -lc 'cat docs/bugs/verified_c_bugs.md' succeeded in 670ms:
# Verified `nanoBragg.c` Bugs (2025-10)

## Severity Overview
- **High:** C-IMPL-BUG-002, C-DESIGN-FLAW-001, C-DESIGN-FLAW-003, NANO-C-BUG-001, NANO-C-BUG-002
- **Medium:** C-DESIGN-FLAW-002, C-DESIGN-FLAW-005, C-PARITY-001
- **Low:** C-LOGGING-BUG-001

Artifact logs for the reproductions below live under `docs/bugs/artifacts/`.

---

### C-IMPL-BUG-002 — Incorrect Angle Units in `mosaic_rotation_umat` (High)
**Summary:** The random misset path feeds `90.0` (degrees) into `mosaic_rotation_umat`, but the helper interprets angles in radians. The code therefore constructs rotation matrices using a 90-radian cap (≈5156°), which produces non-physical orientations.

**Reproduction:**
```bash
./golden_suite_generator/nanoBragg \
  -cell 50 60 70 80 90 100 \
  -misset random \
  -default_F 1 -N 0 \
[2025-10-08T03:12:53] tokens used: 62,954

[2025-10-08T03:13:04] thinking

**Reviewing bug and plan alignment**

I'm carefully checking the documentation and plans around the phi bug and the related C bug to ensure the spec remains unchanged and compliant. There are multiple long-term goals and tasks still in progress, so I’m weighing which parts to focus on next while noting that a Python-based coin flip is the designated next step after this analysis.
[2025-10-08T03:13:05] exec bash -lc "python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:06] bash -lc "python - <<'PY'
import random
print('heads' if random.random() < 0.5 else 'tails')
PY" succeeded in 699ms:
tails
[2025-10-08T03:13:06] tokens used: 66,816

[2025-10-08T03:13:16] thinking

**Assessing plan update necessity**

I'm weighing whether the existing large CLI plan needs updating to align with new instructions and cover all phases fully, especially since previous output hinted at truncation; I plan to verify by checking the complete plan file to confirm if more content exists beyond phase D before deciding if a multi-turn plan update is warranted.
[2025-10-08T03:13:17] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:18] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 686ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-30): Phases A–D complete — gather vectorization (commit 12742e5) and batched polynomials (commit f796861) are merged with CPU+CUDA evidence in `reports/2025-10-vectorization/phase_d/`. Parity/perf validation (Phase E) is the active gate before detector absorption vectorization (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-08T03:13:18] tokens used: 67,697

[2025-10-08T03:13:20] thinking

**Checking file truncation issues**
[2025-10-08T03:13:21] exec bash -lc "sed -n '200,400p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:21] bash -lc "sed -n '200,400p' plans/active/vectorization.md" succeeded in 697ms:

[2025-10-08T03:13:21] tokens used: 69,273

[2025-10-08T03:13:24] thinking

**Investigating file truncation issue**
[2025-10-08T03:13:24] exec bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
print(len(text))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:25] bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
print(len(text))
PY" succeeded in 696ms:
10355
[2025-10-08T03:13:25] tokens used: 69,503

[2025-10-08T03:13:29] thinking

**Handling large file output**
[2025-10-08T03:13:29] exec bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('### Phase D')
print(text[start:start+2000])
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:30] bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('### Phase D')
print(text[start:start+2000])
PY" succeeded in 709ms:
### Phase D — Polynomial Evaluation Vectorization (Active Gate)
Goal: Batch the 1D/2D/3D polynomial interpolation helpers (`polint`, `polin2`, `polin3`) so batched gathers avoid nearest-neighbour fallback.
Prereqs: Phase C output confirmed; `design_notes.md` §3 ready; create `reports/2025-10-vectorization/phase_d/` directory.
Exit Criteria: Vectorised polynomial helpers integrated, CPU+CUDA tests passing, documentation + metrics captured.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| D1 | Draft polynomial validation worksheet | [D] | ✅ Attempt #8 (2025-10-07). Worksheet lives at `reports/2025-10-vectorization/phase_d/polynomial_validation.md` with tensor-shape specs, C references (`nanoBragg.c:4150-4187`), gradcheck plan, and tap-point notes. |
| D2 | Implement batched `polint`/`polin2`/`polin3` | [D] | ✅ Attempt #10 (2025-10-07) landed `polint_vectorized`/`polin2_vectorized`/`polin3_vectorized` in `src/nanobrag_torch/utils/physics.py` (commit f796861). CLAUDE Rule #11 docstrings cite `nanoBragg.c:4150-4187`; gradients/device/dtype neutrality validated in `reports/2025-10-vectorization/phase_d/pytest_cpu_pass.log` with supplementary notes in `polynomial_validation.md`. `_tricubic_interpolation` now calls the batched helper (no fallback warning). |
| D3 | Add polynomial regression tests | [D] | ✅ Attempt #9 (2025-10-07). Extended `tests/test_tricubic_vectorized.py` with `TestTricubicPoly` (11 tests covering scalar equivalence, gradient flow, device/dtype parametrisation, batch-shape preservation). XFail markers removed after Phase D2 landing; live logs in `phase_d/pytest_cpu_pass.log`. Artifacts: `phase_d/collect.log`, `phase_d/pytest_cpu.log`, `phase_d/implementation_notes.md`. |
| D4 | Execute targeted pytest sweep | [D] | ✅ Attempt #11 (2025-10-07). CPU: 11/11 passed (2.37s), CUDA: 11/11 passed (2.36s), AT-STR-002: 3/3 passed (2.13s). Artifacts: `phase_d/pytest_d4_cpu.log`, `phase_d/pytest_d4_cuda.log`, `phase_d/pytest_d4_acce
[2025-10-08T03:13:30] tokens used: 70,557

[2025-10-08T03:13:32] thinking

**Reviewing remaining plan phases**
[2025-10-08T03:13:33] exec bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('### Phase E')
print(text[start:start+2000])
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:33] bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('### Phase E')
print(text[start:start+2000])
PY" succeeded in 708ms:
### Phase E — Integration, Parity, and Performance Validation
Goal: Confirm the full tricubic interpolation path stays vectorised, maintains parity, and improves performance per PERF-PYTORCH-004 objectives.
Prereqs: Phase D tasks D1–D4 complete; nearest-neighbour fallback eliminated for batched queries.
Exit Criteria: Parity metrics (tests + nb-compare/ROI) pass, microbenchmarks show expected speedup, documentation + fix_plan updated.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| E1 | Verify acceptance & regression tests | [ ] | Re-run `tests/test_tricubic_vectorized.py` (full class) and `tests/test_at_str_002.py` on CPU+CUDA; include gradcheck markers if present. Capture logs to `phase_e/pytest_cpu.log`, `phase_e/pytest_cuda.log`, and `phase_e/collect.log` (collect-only proof). Note torch/cuda versions in `phase_e/env.json`. |
| E2 | Run microbenchmarks post-vectorization | [ ] | Execute `scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --device {cpu,cuda} --repeats 200 --outdir reports/2025-10-vectorization/phase_e/perf` to compare against Phase A baselines. Summarise warm/cold timings and speedups in `phase_e/perf_summary.md`, updating `phase_e/perf_results.json`. |
| E3 | Document parity/perf summary | [ ] | Produce `phase_e/summary.md` capturing correlation metrics (target corr≥0.9995 vs scalar baseline), highlight any tolerance deltas, and record gradient/device neutrality confirmation. Reference nb-compare artifacts if generated. Update docs/fix_plan Next Actions with the new evidence paths. |

### Phase F — Detector Absorption Vectorization
Goal: Batch detector absorption loops over `detector_thicksteps` and oversample dimensions, reusing the tricubic vectorization patterns while keeping physics parity.
Prereqs: Phase E exit criteria satisfied; confirm current absorption baseline artifacts (Phase A3) on hand.
Exit Criteria: Vectorised absorption in production path, tests/benchmarks passing, documentation updated.

[2025-10-08T03:13:33] tokens used: 71,436

[2025-10-08T03:13:35] thinking

**Proceeding with next steps**
[2025-10-08T03:13:36] exec bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('### Phase F')
print(text[start:start+2000])
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:36] bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('### Phase F')
print(text[start:start+2000])
PY" succeeded in 695ms:
### Phase F — Detector Absorption Vectorization
Goal: Batch detector absorption loops over `detector_thicksteps` and oversample dimensions, reusing the tricubic vectorization patterns while keeping physics parity.
Prereqs: Phase E exit criteria satisfied; confirm current absorption baseline artifacts (Phase A3) on hand.
Exit Criteria: Vectorised absorption in production path, tests/benchmarks passing, documentation updated.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| F1 | Author absorption vectorization design | [ ] | Draft `phase_f/design_notes.md` (tensor layout, broadcasting, device/dtype considerations). Cite `nanoBragg.c:3375-3450` and detector spec docs. |
| F2 | Implement batched absorption | [ ] | Update `_apply_detector_absorption` (or equivalent) to operate on broadcast tensors (slow×fast×thicksteps). Add C reference docstrings and ensure differentiability. |
| F3 | Add regression + perf tests | [ ] | Extend `tests/test_at_abs_001.py` with device parametrisation; add targeted benchmarks via `scripts/benchmarks/absorption_baseline.py --outdir .../phase_f/perf`. Capture CPU/CUDA logs. |
| F4 | Summarise results + update fix_plan | [ ] | Document outcomes in `phase_f/summary.md`, note parity evidence (nb-compare if applicable), and update docs/fix_plan attempt history. |

### Phase G — Documentation & Handoff
Goal: Ensure all vectorization changes are documented, reproducible, and integrated with performance guidance.
Prereqs: Phases D–F exit criteria met.
Exit Criteria: Architecture/runtime docs updated; fix_plan closed; supervisor input ready for performance initiative follow-ups.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| G1 | Update docs & checklists | [ ] | Refresh `docs/development/pytorch_runtime_checklist.md` (if needed), `docs/architecture/pytorch_design.md`, and add lessons learned note. Record changes in docs/fix_plan. |
[2025-10-08T03:13:36] tokens used: 72,805

[2025-10-08T03:13:38] thinking

**Requesting additional details for G2**
[2025-10-08T03:13:39] exec bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('| G2')
print(text[start:start+500])
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:13:40] bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
start = text.find('| G2')
print(text[start:start+500])
PY" succeeded in 717ms:
| G2 | Final attempt log & closure | [ ] | Log concluding Attempt in docs/fix_plan.md, summarise metrics, and mark [VECTOR-TRICUBIC-001] as done. Coordinate with PERF-PYTORCH-004 benchmarks for follow-up perf tasks. |

[2025-10-08T03:13:40] tokens used: 73,493

[2025-10-08T03:14:05] thinking

**Evaluating need to update plan**
[2025-10-08T03:14:05] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:14:06] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim' succeeded in 743ms:
20251007T232657Z
20251008T005247Z
20251008T011326Z
20251008T012304Z
20251008T013345Z
20251008T021659Z
20251008T023140Z
20251008T023956Z
20251008T030000Z
20251008T030001Z
c_parity_run.log
pytest_collect.log
spec_run.log
trace_py_c_parity.log
trace_py_spec.log
[2025-10-08T03:14:06] tokens used: 75,614

[2025-10-08T03:14:08] thinking

**Checking for summary files**
[2025-10-08T03:14:09] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:14:10] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z' succeeded in 663ms:
c_float.bin
c_parity_run.log
c_run.log
c_trace_phi.log
comparison_c_parity_stdout.txt
comparison_c_parity_stdout2.txt
comparison_spec_stdout.txt
comparison_spec_stdout2.txt
comparison_summary.md
comparison_summary_c_parity.md
comparison_summary_spec.md
config_snapshot.json
delta_metrics.json
mosflm_matrix_probe_output.log
pytest_collect.log
sha256.txt
spec_run.log
trace_py_c_parity.log
trace_py_c_parity_per_phi.json
trace_py_c_parity_per_phi.log
[2025-10-08T03:14:10] tokens used: 75,893

[2025-10-08T03:14:12] thinking

**Checking comparison files**
[2025-10-08T03:14:13] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/delta_metrics.json' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:14:14] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/delta_metrics.json' succeeded in 689ms:
{
  "spec": {
    "entries": [
      {
        "phi_tic": 0,
        "phi_deg": 0.0,
        "delta_k": 0.018116486800789033,
        "delta_F_latt_b": 1.9122277478729481
      },
      {
        "phi_tic": 1,
        "phi_deg": 0.01,
        "delta_k": 2.830200878900513e-05,
        "delta_F_latt_b": 0.0033762176981319003
      },
      {
        "phi_tic": 2,
        "phi_deg": 0.02,
        "delta_k": 2.8320696513928212e-05,
        "delta_F_latt_b": 0.004039919249830992
[2025-10-08T03:14:14] tokens used: 76,306

[2025-10-08T03:14:17] thinking

**Noticing constant small delta in c_parity mode**

I see a small consistent offset in c_parity mode delta that might come from the pix0_z value or how the scattering vector normalization works, so I want to look more closely at pix0_z and check if there's a `comparison_summary_c_parity.md` that can clarify this artifact.
[2025-10-08T03:14:18] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/comparison_summary_c_parity.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:14:19] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/comparison_summary_c_parity.md' exited 1 in 699ms:
cat: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/comparison_summary_c_parity.md: No such file or directory
[2025-10-08T03:14:19] tokens used: 78,133

[2025-10-08T03:14:22] thinking

**Noting timestamp**
[2025-10-08T03:14:23] exec bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:14:23] bash -lc 'ls reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z' succeeded in 680ms:
commands.txt
diff_results.json
diff_summary.md
[2025-10-08T03:14:23] tokens used: 79,240

[2025-10-08T03:14:25] thinking

**Opening diff summary**
[2025-10-08T03:14:26] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:14:27] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md' succeeded in 717ms:
# PyTorch vs C Trace Diff Summary (phi_tic=0, c-parity mode)
- Source Py log: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/trace_py_c_parity.log
- Source C log: reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_run.log
- Tolerance for first divergence check: 1e-06
- First variable exceeding tolerance:
  - name: pix0_vector_meters
  - max abs diff: 2.851329e-06
  - PyTorch values: [-0.21647571314293, 0.21634316475225, -0.23019526562923]
  - C values: [-0.216475836204836, 0.216343050492215, -0.230192414300537]

## Top 10 Differences by magnitude
- I_before_scaling: max diff 1.076850e+05; PyTorch=[835969.763932785]; C=[943654.809237549]
- scattering_vec_A_inv: max diff 3.631733e+04; PyTorch=[-1556209718.94149, 3933442655.0731, 913925676.642357]; C=[-1556230686.07047, 3933478972.39855, 913944567.685604]
- F_latt: max diff 3.129724e-02; PyTorch=[-2.35189941276007]; C=[-2.38319665299058]
- F_latt_c: max diff 1.618980e-02; PyTorch=[0.944771205212293]; C=[0.960961003611676]
- F_latt_a: max diff 7.725422e-03; PyTorch=[-2.36785278241508]; C=[-2.36012735995387]
- F_latt_b: max diff 5.293402e-04; PyTorch=[1.051325983228]; C=[1.05079664302326]
- hkl_frac: max diff 1.511599e-04; PyTorch=[-6.87946075907243, -0.607227388110849, -13.7661473655243]; C=[-6.8795206024501, -0.607255839576692, -13.766298525469]
- rot_b_star_A_inv: max diff 5.162400e-05; PyTorch=[-0.0031263923013923, 0.0103860193252683, -0.0328730297264385]; C=[-0.0031263923013923, 0.0104376433251433, -0.0328566748566749]
- rot_a_star_A_inv: max diff 4.616167e-05; PyTorch=[-0.0290510954135954, -0.0293789623945766, 0.0107960388161901]; C=[-0.0290510954135954, -0.0293958845208845, 0.0107498771498771]
[2025-10-08T03:14:27] tokens used: 79,446

[2025-10-08T03:14:41] thinking

**Updating diagnostic task plan**

I’m updating the plan file to add a new phased subsection with detailed tasks focused on diagnosing the pix0_vector differences. This includes breaking down Phase C into C4 subtasks like validating diff summaries, tracing pix0_z differences, and evaluating vector consistency, with clear task states and guidance linked to scripts and reports. I’ll ensure the plan follows the phased format with tables and narrative updates to align with all related docs and instructions.
[2025-10-08T03:14:50] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-phi-parity-shim/plan.md
@@ -49,2 +49,11 @@
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
[2025-10-08T03:14:50] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T03:14:50] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.

[2025-10-08T03:14:50] tokens used: 82,110
[2025-10-08T03:14:50] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:14:53] thinking

**Verifying configuration file existence**
[2025-10-08T03:14:54] exec bash -lc 'ls configs' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:14:55] bash -lc 'ls configs' exited 1 in 674ms:
ls: configs: No such file or directory
[2025-10-08T03:14:55] tokens used: 83,913
[2025-10-08T03:14:55] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:14:58] thinking

**Verifying config file locations**
[2025-10-08T03:14:59] exec bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/commands.txt' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:00] bash -lc 'cat reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/commands.txt' succeeded in 707ms:
python scripts used (run from repo root):
python - <<'PY'
import re
from pathlib import Path
import json

base = Path('reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z')
py_log = base / 'trace_py_c_parity.log'
c_log = base / 'c_run.log'

pat = re.compile(r'^TRACE_(PY|C):\s*([^\s]+)\s*(.*)$')

def parse_values(rest):
    values = []
    for token in rest.split():
        if ':' in token:
            token = token.split(':')[-1]
        try:
            values.append(float(token))
        except ValueError:
[2025-10-08T03:15:00] tokens used: 84,138
[2025-10-08T03:15:00] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:03] thinking

**Reevaluating script usage for diff summary**
[2025-10-08T03:15:04] exec bash -lc 'ls scripts' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:05] bash -lc 'ls scripts' succeeded in 659ms:
__init__.py
__pycache__
analyze_at012_plateau.py
analyze_correlation_fix.py
analyze_peak_displacement_at012.py
analyze_pix0_discrepancy.py
analyze_radial_intensity.py
analyze_rotation_offset.py
analyze_simple_cubic_gap.py
analyze_tilted_correlation.py
analyze_tilted_mismatch.py
analyze_triclinic_correlation.py
benchmarks
c_reference_runner.py
c_reference_utils.py
check_detector_pix0.py
compare_c_py_intensity_scaling.py
compare_c_python_pix0.py
compare_detector_geometry.py
compare_per_phi_traces.py
[2025-10-08T03:15:05] tokens used: 85,330
[2025-10-08T03:15:05] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:10] thinking

**Verifying correct script reference**
[2025-10-08T03:15:10] exec bash -lc 'head -n 40 scripts/compare_per_phi_traces.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:11] bash -lc 'head -n 40 scripts/compare_per_phi_traces.py' succeeded in 699ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Compare C vs PyTorch per-φ traces

Identifies the first φ where Δk exceeds tolerance (5e-4) to isolate the φ-grid mismatch.
"""

import json
import sys
from pathlib import Path

def parse_c_trace(log_file):
    """Parse C trace log file."""
    traces = []
    with open(log_file) as f:
        for line in f:
            if line.startswith('TRACE_C_PHI'):
                parts = line.split()
                traces.append({
                    'phi_tic': int(parts[1].split('=')[1]),
[2025-10-08T03:15:11] tokens used: 86,561
[2025-10-08T03:15:11] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:14] thinking

**Checking trace_per_phi.py for JSON output**
[2025-10-08T03:15:15] exec bash -lc 'head -n 60 scripts/trace_per_phi.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:15] bash -lc 'head -n 60 scripts/trace_per_phi.py' succeeded in 706ms:
#!/usr/bin/env python3
"""
CLI-FLAGS-003 Phase K3e: Per-φ Miller Index Parity

This script captures Miller index + lattice factor traces for each φ step
(φ_tic=0…9) to diagnose the φ-grid mismatch between C and PyTorch.

Context: PyTorch reports k≈1.9997 (φ=0°) while C reports k≈1.9928 (φ=0.09°),
causing a 21.6% F_latt_b inflation. This per-φ dump will isolate the first φ
where Δk exceeds tolerance.

Usage:
    PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/trace_per_phi.py \\
        --outdir reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi/

Output:
    - per_phi_pytorch.json: Full per-φ trace data (PyTorch)
    - per_phi_summary.md: Comparison summary with first divergence
    - (C trace expected from instrumented nanoBragg.c separately)
"""
[2025-10-08T03:15:15] tokens used: 87,114
[2025-10-08T03:15:15] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:19] thinking

**Checking script arguments for correct command**
[2025-10-08T03:15:21] exec bash -lc "python - <<'PY'
from pathlib import Path
text = Path('scripts/trace_per_phi.py').read_text()
import re
m = re.search(r'parser = argparse\\.ArgumentParser\\((["'^'"\\n]+)\\)', text)
if m:
    print('found parser definition')
else:
    print('no parser def?')
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:22] bash -lc "python - <<'PY'
from pathlib import Path
text = Path('scripts/trace_per_phi.py').read_text()
import re
m = re.search(r'parser = argparse\\.ArgumentParser\\((["'^'"\\n]+)\\)', text)
if m:
    print('found parser definition')
else:
    print('no parser def?')
PY" succeeded in 707ms:
no parser def?
[2025-10-08T03:15:22] tokens used: 88,631
[2025-10-08T03:15:22] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:24] thinking

**Checking for argparse usage**
[2025-10-08T03:15:25] exec bash -lc 'grep -n "ArgumentParser" -n scripts/trace_per_phi.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:25] bash -lc 'grep -n "ArgumentParser" -n scripts/trace_per_phi.py' succeeded in 699ms:
175:    parser = argparse.ArgumentParser(
[2025-10-08T03:15:25] tokens used: 89,261
[2025-10-08T03:15:25] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.

[2025-10-08T03:15:28] exec bash -lc "sed -n '175,230p' scripts/trace_per_phi.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:29] bash -lc "sed -n '175,230p' scripts/trace_per_phi.py" succeeded in 748ms:
    parser = argparse.ArgumentParser(
        description='CLI-FLAGS-003 Phase K3e: Per-φ Miller index parity'
    )
    parser.add_argument(
        '--outdir',
        type=Path,
        default=Path('reports/2025-10-cli-flags/phase_k/f_latt_fix/per_phi'),
        help='Output directory for per-φ traces'
    )
    parser.add_argument(
        '--pixel-s',
        type=int,
        default=133,
        help='Slow pixel coordinate (default: 133, from Phase K traces)'
    )
    parser.add_argument(
        '--pixel-f',
        type=int,
        default=134,
        help='Fast pixel coordinate (default: 134, from Phase K traces)'
[2025-10-08T03:15:29] tokens used: 89,480
[2025-10-08T03:15:29] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:33] thinking

**Aligning plan with script usage**
[2025-10-08T03:15:34] exec bash -lc 'ls scripts | grep trace_harness' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:35] bash -lc 'ls scripts | grep trace_harness' exited 1 in 701ms:

[2025-10-08T03:15:35] tokens used: 91,006
[2025-10-08T03:15:35] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:39] thinking

**Verifying existence of trace script**
[2025-10-08T03:15:39] exec bash -lc 'head -n 40 scripts/check_detector_pix0.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:40] bash -lc 'head -n 40 scripts/check_detector_pix0.py' succeeded in 702ms:
#!/usr/bin/env python3
"""Check what pix0_vector value the detector is actually producing."""

import os

os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

import torch
from src.nanobrag_torch.config import DetectorConfig, DetectorConvention, DetectorPivot
from src.nanobrag_torch.models.detector import Detector

# Create detector config
config = DetectorConfig(
    distance_mm=100.0,
    pixel_size_mm=0.1,
    spixels=1024,
    fpixels=1024,
    beam_center_s=61.2,  # mm
    beam_center_f=61.2,  # mm
    detector_convention=DetectorConvention.MOSFLM,
[2025-10-08T03:15:40] tokens used: 91,346
[2025-10-08T03:15:40] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:43] thinking

**Adjusting script reference to valid path**
[2025-10-08T03:15:43] exec bash -lc 'head -n 20 scripts/analyze_pix0_discrepancy.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:44] bash -lc 'head -n 20 scripts/analyze_pix0_discrepancy.py' succeeded in 672ms:
#!/usr/bin/env python3
"""
Comprehensive analysis of pix0_vector discrepancy for Phase 4.1.

This script compares all available pix0 calculations:
1. Manual calculation (reference implementation)
2. PyTorch Detector class
3. Actual C implementation (from trace)
4. Expected C values (from problem statement)

The goal is to identify the exact source of the discrepancy.
"""

import os
import sys
import numpy as np
import torch
from pathlib import Path

# Add src directory to path
[2025-10-08T03:15:44] tokens used: 92,007
[2025-10-08T03:15:44] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:15:48] thinking

**Refining plan with existing scripts**
[2025-10-08T03:15:49] exec bash -lc 'grep -n "def main" -n scripts/analyze_pix0_discrepancy.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:50] bash -lc 'grep -n "def main" -n scripts/analyze_pix0_discrepancy.py' succeeded in 727ms:
315:def main():
[2025-10-08T03:15:50] tokens used: 92,496
[2025-10-08T03:15:50] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.

[2025-10-08T03:15:54] exec bash -lc "sed -n '315,360p' scripts/analyze_pix0_discrepancy.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:15:55] bash -lc "sed -n '315,360p' scripts/analyze_pix0_discrepancy.py" succeeded in 694ms:
def main():
    """Main analysis function."""
    print("Comprehensive pix0_vector Discrepancy Analysis")
    print("=" * 80)
    
    # Parse C trace data
    print("Loading C trace data...")
    c_data = parse_c_trace()
    
    if c_data is None:
        print("❌ Failed to load C trace data")
        return
    
    print(f"✅ Loaded C trace with {len(c_data)} parameters")
    
    # Calculate manual reference
    print("\nCalculating manual reference...")
    manual_data = manual_calculation()
    
    # Get PyTorch results
[2025-10-08T03:15:55] tokens used: 92,721
[2025-10-08T03:15:55] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:16:01] thinking

**Revising plan steps for script usage**

I'm considering how to update the plan instructions to replace references to nonexistent scripts with actual commands for regenerating data files and gathering geometry inputs from logs or scripts. I'll suggest adapting existing scripts or parsing logs for needed values, aiming to keep instructions practical and avoid missing components.
[2025-10-08T03:16:03] exec bash -lc "sed -n '1,160p' scripts/debug_detector_pix0_calc.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:16:03] bash -lc "sed -n '1,160p' scripts/debug_detector_pix0_calc.py" succeeded in 718ms:
#!/usr/bin/env python3
"""
Debug the Detector class pix0_vector calculation to see where it differs.
"""

import os
import sys
import torch
import numpy as np

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

# Set PyTorch environment for MKL compatibility
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

from nanobrag_torch.config import DetectorConfig, DetectorConvention, DetectorPivot
from nanobrag_torch.models.detector import Detector

def debug_detector_calculation():
[2025-10-08T03:16:03] tokens used: 94,584
[2025-10-08T03:16:03] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..d2d3d85c40491f0ac6bbee50a87205de5343f2e4
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
+| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:16:07] thinking

**Updating plan with script references**
[2025-10-08T03:16:12] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-phi-parity-shim/plan.md
@@ -54,4 +54,4 @@
 | C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
-| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/compare_per_phi_traces.py --mode c-parity --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/ --trace-config configs/cli_phase_l/pix0_probe.json` to regenerate traces after any geometry tweak. Capture both `trace_py_*` logs and the autogenerated `diff_summary.md`; verify the first divergence remains `pix0_vector_meters` before proceeding. |
-| C4c | Instrument detector geometry inputs | [ ] | Extend `reports/.../diagnosis.md` with a table logging `distance`, `close_distance`, `beam_center_m`, and raw `pix0_vector_mm` from both C and PyTorch runs (use `scripts/trace_harness.py --dump-detector` once Ralph adds the flag). Goal: isolate whether the z-offset originates from pivot recalculation vs. rounding in `Detector._build_pix0`. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/.../<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
 | C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
[2025-10-08T03:16:12] apply_patch(auto_approved=true) exited 0 in 15ms:
Success. Updated the following files:
M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T03:16:12] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..3160471ac8d8f5151e1647d98603d2c7f7a06d9a
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/.../<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.

[2025-10-08T03:16:12] tokens used: 98,345
[2025-10-08T03:16:12] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..3160471ac8d8f5151e1647d98603d2c7f7a06d9a
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/.../<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:16:18] thinking

**Clarifying report file paths**
[2025-10-08T03:16:22] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-phi-parity-shim/plan.md
@@ -54,3 +54,3 @@
 | C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
-| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/.../<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
 | C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
[2025-10-08T03:16:22] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T03:16:22] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.

[2025-10-08T03:16:23] tokens used: 99,834
[2025-10-08T03:16:23] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:16:27] thinking

**Preparing to update fix_plan documentation**
[2025-10-08T03:16:28] exec bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:16:29] bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' succeeded in 655ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
482:      - `src/nanobrag_torch/models/detector.py:651-654` — Added comment block documenting fix references CLI-FLAGS-003 Phase L3k.3c.4, C code lines 1739-1745
541:      - **Recommended path forward**: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior
803:  * [2025-10-22] Attempt #116 (ralph loop CLI-FLAGS-003 L3k.3c.3) — Result: **VG-1 LOCKED** ✅ (**Phase L3k.3c.3 COMPLETE**). Updated test expectations with 10-digit spec baselines and ≤1e-6 tolerances.
953:      - C trace evidence indicates state carryover within the reference implementation. Until we either patch the C code or emulate this behavior, PyTorch must conform to the reference output to unblock CLI-FLAGS-003.
2314:  * [2025-11-23] Attempt #111 (ralph loop, CLI-FLAGS-003 L3k.3c.3) — Result: **SUCCESS** (VG-1 validation COMPLETE). **Per-φ parity achieved; all 10 φ steps match C within tolerance.**
[2025-10-08T03:16:29] tokens used: 100,543
[2025-10-08T03:16:29] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:16:33] thinking

**Locating insertion point for new tasks**
[2025-10-08T03:16:35] exec bash -lc "sed -n '450,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:16:36] bash -lc "sed -n '450,520p' docs/fix_plan.md" succeeded in 704ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-27 refresh → galph loop i=118):
1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-10-08] Attempt #128 (galph loop — parity evidence) — Result: **EVIDENCE UPDATE** (Phase L3k.3c.4 diagnostics). **No tests executed** (analysis-only).
    Metrics: Evidence-only.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md`
      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_results.json`
[2025-10-08T03:16:36] tokens used: 101,729
[2025-10-08T03:16:36] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:16:41] thinking

**Analyzing conflicting fix status**
[2025-10-08T03:16:42] exec bash -lc "rg -n \"2\\.845\" docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:16:43] bash -lc "rg -n \"2\\.845\" docs/fix_plan.md" succeeded in 724ms:
461:1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
473:      - The pix0_z offset propagates to `pixel_pos_meters`, `diffracted_vec`, `scattering_vec_A_inv`, yielding the fixed Δk≈2.845e-05 and ΔF_latt drift observed in VG-1 metrics.
619:    Metrics: Parity evidence capture. Spec mode: Δk(φ₀)=1.811649e-02 (DIVERGE expected), c-parity mode: max Δk=2.845147e-05 (< 1e-6 ✓). Targeted tests: 2/2 passed in 2.12s.
632:      - **C-parity mode achieves parity**: All φ steps within tolerance (max Δk=2.845e-05), successfully reproduces C-PARITY-001 bug documented in docs/bugs/verified_c_bugs.md:166-204
643:  * [2025-10-08] Attempt #122 (galph loop, Mode: Parity/Evidence) — Result: **VG-1 REGRESSION** (Phase C4 evidence recapture). **New tolerance (≤1e-6) unmet; c-parity shim still drifts by 2.845e-05 at all φ steps.**
644:    Metrics: Spec mode unchanged (Δk(φ₀)=1.811649e-02, expected). C-parity mode max Δk=2.845147e-05 (>1e-6 ❌), max ΔF_latt_b=4.36e-03. Targeted pytest selectors still pass (TestPhiCarryoverBehavior 6 passed/6 skipped; TestPhiZeroParity 2 passed).
649:      - `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T011326Z/delta_metrics.json` — spec vs parity deltas, highlights Δk plateau at 2.845e-05
654:      - Raising VG-1 tolerance to 1e-6 exposes residual drift; parity shim currently mirrors prior plateau (≈2.845e-05) seen in Attempt #121.
661:  * [2025-10-08] Attempt #123 (ralph loop i=125, Mode: Parity/Evidence) — Result: **EVIDENCE COMPLETE** (Phase C4 fresh parity evidence captured). **VG-1 remains unmet (Δk=2.845e-05 > 1e-6 target), but dual-mode validation successful and all tests pass.**
662:    Metrics: Spec mode φ=0 Δk=1.811649e-02 (EXPECTED divergence per spec); φ=1..9 max Δk=2.845e-05 (OK). C-parity mode all φ steps max Δk=2.845e-05 (reproduces C-PARITY-001 but >1e-6). Targeted tests: TestPhiCarryoverBehavior 12/12 passed (2.56s), TestPhiZeroParity 2/2 passed (2.13s). Focused suite: 54/54 passed (2.74s). Test collection: 699 tests collected successfully.
675:      - **C-parity mode functional:** Successfully reproduces C-PARITY-001 bug; all φ steps have consistent ~2.845e-05 drift
714:    Metrics: Spec mode Δk(φ₀)=1.811649e-02 (expected spec divergence); c-parity max Δk=2.8451466e-05 (>1e-6) and max ΔF_latt_b=4.36e-03 (>1e-4). Targeted pytest `--collect-only` for `tests/test_cli_scaling_phi0.py` and `tests/test_phi_carryover_mode.py` succeeded (699 tests collected).
722:      - The persistent 2.845e-05 plateau points toward rounding in reciprocal vector regeneration or h·a dot-product evaluation; additional tap points are required to locate the mismatch.
728:    Metrics: Enhanced trace capture (no test execution beyond pytest --collect-only 35 tests). Spec mode φ=0 Δk=1.811649e-02 (EXPECTED divergence per spec); c-parity mode all φ steps max Δk=2.845147e-05 (>1e-6 but systematic plateau). Key finding: S vector CONSTANT (correct), V_actual CONSTANT (correct), reciprocal Y-components vary smoothly with φ (correct).
743:      - **Root cause of 2.845e-05 plateau identified**: Residual Δk originates from floating-point precision differences in the reciprocal vector recalculation chain (real → reciprocal → real → reciprocal per CLAUDE Rule #13). Y-component differences of ~1e-6 to ~5e-6 propagate through dot(S, b) to produce ~2.8e-05 deltas in k_frac.
751:      2. **Supervisor Decision Required**: Accept 2.845e-05 plateau as engineering tolerance (update VG-1 to Δk ≤ 5e-5) OR investigate precision chain further (Option B in diagnosis.md)
755:    Metrics: Evidence-only loop (no pytest execution). `scripts/compare_per_phi_traces.py` reported 1 DIVERGE (φ=0), 9 OK (φ≥0.01°); Δk(φ₀)=1.8116×10⁻², Δk(φ₁…φ₉)≤2.845×10⁻⁵.
765:      - PyTorch reuses the unrotated base vector at φ₀ (rot_b_y = 0.7173197865486145 Å), then matches C for φ≥1 (Δk ≤ 2.845×10⁻⁵)
2315:    Metrics: Per-φ comparison max Δk = 2.845e-05 (threshold: 5e-4 ✓). PyTorch φ=0 k_frac = -0.607227, C φ=0 k_frac = -0.607256 (Δ=2.85e-05 ✓). test_rot_b_matches_c: PASSED. test_k_frac_phi0_matches_c: FAILED (test configuration mismatch - uses MOSFLM convention instead of CUSTOM). Test collection: 655 tests.
2329:  * [2025-11-26] Attempt #114 (galph loop i=112 — review) — Result: **REOPENED**. Verified attempts #111/#113: per-φ traces still report max Δk = 2.845e-05 and Δb_y ≈ 4.57×10⁻² Å, exceeding the VG-1 tolerance (≤1e-6). `tests/test_cli_scaling_phi0.py::test_k_frac_phi0_matches_c` remains red, and the generated artifact path `reports/2025-10-cli-flags/phase_l/per_phi/reports/...` duplicates directory segments. Plan and fix-plan updated to keep L3k.3c.3 open, require refreshed traces with tighter tolerances, and add a documentation task to record the spec-vs-parity contract before implementation proceeds.
[2025-10-08T03:16:43] tokens used: 104,546
[2025-10-08T03:16:43] turn diff:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:16:51] thinking

**Updating Next Actions to reflect new diagnostics**
[2025-10-08T03:16:56] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -460,3 +460,3 @@
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
[2025-10-08T03:16:56] apply_patch(auto_approved=true) exited 0 in 24ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-08T03:16:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.

[2025-10-08T03:16:56] tokens used: 107,269
[2025-10-08T03:16:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:17:01] thinking

**Preparing input.md with plan details**

I’m organizing the next step to create `input.md` based on the updated plan, focusing on the fix for CLI-FLAGS-003 and including formatted sections like summary, mode, and focus. I’ll also verify the current git branch before finalizing.
[2025-10-08T03:17:02] exec bash -lc 'git rev-parse --abbrev-ref HEAD' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:17:03] bash -lc 'git rev-parse --abbrev-ref HEAD' succeeded in 671ms:
feature/spec-based-2
[2025-10-08T03:17:03] tokens used: 109,033
[2025-10-08T03:17:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:17:25] thinking

**Organizing detailed task instructions and planning**

I'm sorting through complex instructions for a feature branch focused on parity evidence collection using scripts instead of direct tests. I’m carefully assembling a one-line Do Now command combining environment setup, script execution, and test collection to follow strict guidelines. Alongside, I’ll draft supporting documentation sections with file references and commands to help guide ongoing work smoothly.
[2025-10-08T03:17:33] exec bash -lc "cat <<'EOF' > input.md
Summary: Regenerate per-φ parity traces and log detector geometry so we can kill the residual Δk plateau before rerunning the supervisor command.
Mode: Parity
Focus: CLI-FLAGS-003 – Phase L3k.3c.4 parity shim diagnostics
Branch: feature/spec-based-2
Mapped tests: none — evidence-only (trace harness)
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md
Do Now: CLI-FLAGS-003 L3k.3c.4 parity shim diagnostics — OUTDIR=reports/2025-10-cli-flags/phase_l/parity_shim/"'$(date -u +%Y%m%dT%H%M%SZ) && KMP_DUPLICATE_LIB_OK=TRUE python scripts/trace_per_phi.py --outdir "$OUTDIR" && python scripts/compare_per_phi_traces.py "$OUTDIR"/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log && pytest --collect-only -q tests/test_cli_scaling_phi0.py tests/test_phi_carryover_mode.py
If Blocked: Capture the failing command + stderr in reports/2025-10-cli-flags/phase_l/parity_shim/ATTEMPTS.md and ping Galph before retrying.
Priorities & Rationale:
- specs/spec-a-core.md:204 — spec mandates φ loop resets each step; diagnostics must confirm we stay spec-compliant.
- docs/bugs/verified_c_bugs.md:166 — C-PARITY-001 describes the carryover bug the shim emulates; use it to justify evidence expectations.
- plans/active/cli-phi-parity-shim/plan.md:70 — Follow the new C4 diagnostic checklist (rows C4b–C4d) so we finally eliminate the pix0_z drift.
- docs/fix_plan.md:455 — Current Next Actions require refreshed per-φ evidence and a detector geometry table before Phase L3k progresses.
How-To Map:
- Set OUTDIR as shown in Do Now; keep each iteration under reports/2025-10-cli-flags/phase_l/parity_shim/.
- First command emits per_phi_pytorch.json; second command regenerates delta_metrics.json & diff_summary.md in the same OUTDIR.
- After scripts finish, append the geometry comparison table to reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (note exact C vs Py values).
- Store sha256 sums via `shasum -a 256 "$OUTDIR"/* > "$OUTDIR"/sha256.txt` once artifacts land.
Pitfalls To Avoid:
- Do not edit production code; this loop is evidence-only.
- Preserve existing traces; never overwrite reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/.
- Keep tensors on their original device when running scripts (no `.cpu()` hacks).
- Respect Protected Assets in docs/index.md (no moves/deletes of loop.sh, supervisor.sh, input.md).
- Avoid rerunning full pytest; collect-only is sufficient this loop.
- Document any command failures immediately in attempts history before rerunning.
- Use UTC timestamps for new report directories.
- Ensure KMP_DUPLICATE_LIB_OK is set for every torch script.
Pointers:
- plans/active/cli-phi-parity-shim/plan.md:86
- docs/fix_plan.md:455
- reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md
Next Up:
- CLI-FLAGS-003 L3k.3c.5 — update documentation/tests once Δk ≤ 1e-6 and traces are green.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:17:34] bash -lc "cat <<'EOF' > input.md
Summary: Regenerate per-φ parity traces and log detector geometry so we can kill the residual Δk plateau before rerunning the supervisor command.
Mode: Parity
Focus: CLI-FLAGS-003 – Phase L3k.3c.4 parity shim diagnostics
Branch: feature/spec-based-2
Mapped tests: none — evidence-only (trace harness)
Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md
Do Now: CLI-FLAGS-003 L3k.3c.4 parity shim diagnostics — OUTDIR=reports/2025-10-cli-flags/phase_l/parity_shim/"'$(date -u +%Y%m%dT%H%M%SZ) && KMP_DUPLICATE_LIB_OK=TRUE python scripts/trace_per_phi.py --outdir "$OUTDIR" && python scripts/compare_per_phi_traces.py "$OUTDIR"/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log && pytest --collect-only -q tests/test_cli_scaling_phi0.py tests/test_phi_carryover_mode.py
If Blocked: Capture the failing command + stderr in reports/2025-10-cli-flags/phase_l/parity_shim/ATTEMPTS.md and ping Galph before retrying.
Priorities & Rationale:
- specs/spec-a-core.md:204 — spec mandates φ loop resets each step; diagnostics must confirm we stay spec-compliant.
- docs/bugs/verified_c_bugs.md:166 — C-PARITY-001 describes the carryover bug the shim emulates; use it to justify evidence expectations.
- plans/active/cli-phi-parity-shim/plan.md:70 — Follow the new C4 diagnostic checklist (rows C4b–C4d) so we finally eliminate the pix0_z drift.
- docs/fix_plan.md:455 — Current Next Actions require refreshed per-φ evidence and a detector geometry table before Phase L3k progresses.
How-To Map:
- Set OUTDIR as shown in Do Now; keep each iteration under reports/2025-10-cli-flags/phase_l/parity_shim/.
- First command emits per_phi_pytorch.json; second command regenerates delta_metrics.json & diff_summary.md in the same OUTDIR.
- After scripts finish, append the geometry comparison table to reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md (note exact C vs Py values).
- Store sha256 sums via `shasum -a 256 "$OUTDIR"/* > "$OUTDIR"/sha256.txt` once artifacts land.
Pitfalls To Avoid:
- Do not edit production code; this loop is evidence-only.
- Preserve existing traces; never overwrite reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/.
- Keep tensors on their original device when running scripts (no `.cpu()` hacks).
- Respect Protected Assets in docs/index.md (no moves/deletes of loop.sh, supervisor.sh, input.md).
- Avoid rerunning full pytest; collect-only is sufficient this loop.
- Document any command failures immediately in attempts history before rerunning.
- Use UTC timestamps for new report directories.
- Ensure KMP_DUPLICATE_LIB_OK is set for every torch script.
Pointers:
- plans/active/cli-phi-parity-shim/plan.md:86
- docs/fix_plan.md:455
- reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md
- reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md
Next Up:
- CLI-FLAGS-003 L3k.3c.5 — update documentation/tests once Δk ≤ 1e-6 and traces are green.
EOF
' succeeded in 664ms:

[2025-10-08T03:17:34] tokens used: 112,130
[2025-10-08T03:17:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:17:39] thinking

**Preparing for final commit and summary**
[2025-10-08T03:17:39] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:17:40] bash -lc 'git status --short' succeeded in 701ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T03:17:40] tokens used: 113,912
[2025-10-08T03:17:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:17:43] thinking

**Reviewing plan diffs**
[2025-10-08T03:17:43] exec bash -lc 'git diff plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:17:44] bash -lc 'git diff plans/active/cli-phi-parity-shim/plan.md' succeeded in 696ms:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5..9c8b691 100644
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@ Exit Criteria: Production code contains opt-in shim, tests/logs stored, fix_plan
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.
[2025-10-08T03:17:44] tokens used: 114,182
[2025-10-08T03:17:44] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:17:47] thinking

**Reviewing plan diff**
[2025-10-08T03:17:48] exec bash -lc 'git diff docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:17:48] bash -lc 'git diff docs/fix_plan.md' succeeded in 694ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333..65bf71f 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
[2025-10-08T03:17:48] tokens used: 115,336
[2025-10-08T03:17:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:17:50] thinking

**Checking for input differences**
[2025-10-08T03:17:51] exec bash -lc 'git diff input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:17:51] bash -lc 'git diff input.md' succeeded in 699ms:
diff --git a/input.md b/input.md
index 087b687..c8d031a 100644
--- a/input.md
+++ b/input.md
@@ -1,38 +1,34 @@
-Summary: Verify φ=0 rotations stay spec-compliant and capture fresh documentation before expanding the parity shim.
-Mode: Docs
-Focus: CLI-FLAGS-003 – Handle -nonoise and -pix0_vector_mm
+Summary: Regenerate per-φ parity traces and log detector geometry so we can kill the residual Δk plateau before rerunning the supervisor command.
+Mode: Parity
+Focus: CLI-FLAGS-003 – Phase L3k.3c.4 parity shim diagnostics
 Branch: feature/spec-based-2
-Mapped tests: tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c, tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec
-Artifacts: reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/
-Do Now: CLI-FLAGS-003 Phase L3k.3c.3 (spec baseline enforcement) — KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_matches_spec -q
-If Blocked: Run `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only tests/test_cli_scaling_phi0.py -q`, log the collector output under `reports/2025-12-cli-flags/phase_l/spec_baseline_refresh/collect.log`, and note the blockage in docs/fix_plan.md Attempt history before proceeding.
+Mapped tests: none — evidence-only (trace harness)
+Artifacts: reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/; reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md
+Do Now: CLI-FLAGS-003 L3k.3c.4 parity shim diagnostics — OUTDIR=reports/2025-10-cli-flags/phase_l/parity_shim/$(date -u +%Y%m%dT%H%M%SZ) && KMP_DUPLICATE_LIB_OK=TRUE python scripts/trace_per_phi.py --outdir "$OUTDIR" && python scripts/compare_per_phi_traces.py "$OUTDIR"/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log && pytest --collect-only -q tests/test_cli_scaling_phi0.py tests/test_phi_carryover_mode.py
+If Blocked: Capture the failing command + stderr in reports/2025-10-cli-flags/phase_l/parity_shim/ATTEMPTS.md and ping Galph before retrying.
[2025-10-08T03:17:51] tokens used: 116,368
[2025-10-08T03:17:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:17:57] thinking

**Appending update to galph_memory.md**
[2025-10-08T03:17:59] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-12-?? (galph loop — parity diagnostics refresh)
- Added C4 diagnostic checklist to "'`plans/active/cli-phi-parity-shim/plan.md` so Ralph regenerates per-φ traces via `trace_per_phi.py`, reruns `compare_per_phi_traces.py`, and captures detector geometry comparisons before touching implementation.
- Updated `docs/fix_plan.md` Next Actions for CLI-FLAGS-003 to point explicitly at the checklist and geometry table deliverable.
- Issued Parity-mode `input.md` directing Ralph to produce new artifacts under `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/`, append geometry data to `rot_vector/diagnosis.md`, and log collect-only pytest output.
- Expect Ralph to follow C4b–C4d, then update diagnosis.md and attempt history once Δk ≤ 1e-6.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:18:00] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-12-?? (galph loop — parity diagnostics refresh)
- Added C4 diagnostic checklist to "'`plans/active/cli-phi-parity-shim/plan.md` so Ralph regenerates per-φ traces via `trace_per_phi.py`, reruns `compare_per_phi_traces.py`, and captures detector geometry comparisons before touching implementation.
- Updated `docs/fix_plan.md` Next Actions for CLI-FLAGS-003 to point explicitly at the checklist and geometry table deliverable.
- Issued Parity-mode `input.md` directing Ralph to produce new artifacts under `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/`, append geometry data to `rot_vector/diagnosis.md`, and log collect-only pytest output.
- Expect Ralph to follow C4b–C4d, then update diagnosis.md and attempt history once Δk ≤ 1e-6.
EOF
' succeeded in 680ms:

[2025-10-08T03:18:00] tokens used: 118,979
[2025-10-08T03:18:00] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:18:04] thinking

**Verifying memory file staging**
[2025-10-08T03:18:04] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:18:05] bash -lc 'git status --short' succeeded in 687ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-phi-parity-shim/plan.md
[2025-10-08T03:18:05] tokens used: 119,388
[2025-10-08T03:18:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:18:11] thinking

**Staging all changes**
[2025-10-08T03:18:12] exec bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:18:13] bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-phi-parity-shim/plan.md' succeeded in 693ms:

[2025-10-08T03:18:13] tokens used: 119,979
[2025-10-08T03:18:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:18:17] thinking

**Committing with formatted message**
[2025-10-08T03:18:17] exec bash -lc 'git commit -m "SUPERVISOR: CLI parity diagnostics plan - tests: not run (evidence-only)"' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:18:18] bash -lc 'git commit -m "SUPERVISOR: CLI parity diagnostics plan - tests: not run (evidence-only)"' succeeded in 682ms:
[feature/spec-based-2 e9a09c2] SUPERVISOR: CLI parity diagnostics plan - tests: not run (evidence-only)
 4 files changed, 45 insertions(+), 34 deletions(-)
[2025-10-08T03:18:18] tokens used: 120,219
[2025-10-08T03:18:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:18:20] thinking

**Preparing to push changes**
[2025-10-08T03:18:21] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-08T03:18:23] bash -lc 'git push' succeeded in 2.62s:
To github.com:hoidn/nanoBragg.git
   28aacfb..e9a09c2  feature/spec-based-2 -> feature/spec-based-2
[2025-10-08T03:18:23] tokens used: 120,468
[2025-10-08T03:18:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.


[2025-10-08T03:18:30] thinking

**Summarizing final message plan**

I'm preparing a final message that highlights the main plan updates in key files, notes added diagnostics and instructions, and clarifies that no tests were run yet. I'll organize it with clear sections like Highlights and Next Steps to keep things neat and focused on what Ralph should do next.
[2025-10-08T03:18:31] codex

**Highlights**
- Expanded the parity shim plan with a C4 diagnostic checklist (plans/active/cli-phi-parity-shim/plan.md:47) covering per-φ trace regeneration, geometry capture via `debug_detector_pix0_calc.py`, and reciprocal-vector tap requests so Ralph has concrete steps to eliminate the 2.85 µm pix0_z offset.
- Updated CLI-FLAGS-003 Next Actions to point at the new checklist and require the detector geometry table before advancing Phase L3k (docs/fix_plan.md:458).
- Issued a Parity-mode supervisor brief directing Ralph to run `trace_per_phi.py`/`compare_per_phi_traces.py`, store artifacts under `reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/`, append geometry comparisons, and log collect-only pytest output (input.md).

**Next Steps**
1. Execute C4b–C4d: rerun per-φ traces, refresh delta metrics, and document geometry deltas.
2. Once Δk ≤ 1e-6, proceed to L3k.3c.5 documentation/tests per plan.
[2025-10-08T03:18:33] tokens used: 121,096
[2025-10-08T03:18:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 240e333aca88abfba6be5b680feb451a0949aed3..65bf71f23110679771d32c980204e04dcec827f4
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -458,7 +458,7 @@
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Fresh diff analysis (Attempt #128) shows the first >1e-6 divergence occurs at `pix0_vector_meters` (2.85 µm along detector normal), cascading to `pixel_pos_meters`, `diffracted_vec`, and the scattering vector. Focus diagnostics on eliminating the pix0_z offset (pivot/distance conversions) before rerunning the shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
+1. **Phase L3k.3c.4 (parity shim evidence capture)** — Latest run (`reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`) still plateaus at Δk≈2.845e-05. Follow the C4 diagnostic checklist in `plans/active/cli-phi-parity-shim/plan.md` (rows C4b–C4d): regenerate `per_phi_pytorch.json` via `scripts/trace_per_phi.py`, rerun `scripts/compare_per_phi_traces.py` to refresh `delta_metrics.json`, and append a detector geometry comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. Focus on removing the 2.85 µm `pix0_vector_meters` z-offset before rerunning shim traces, and continue to log pytest collect output + SHA256 hashes each iteration.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — After traces land, execute Phase C5 and Phase D1 of the parity-shim plan: update `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, `docs/bugs/verified_c_bugs.md`, and related checklists to document the opt-in shim, and ensure collect-only evidence exists for both spec/parity selectors.
 3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
diff --git a/plans/active/cli-phi-parity-shim/plan.md b/plans/active/cli-phi-parity-shim/plan.md
index e3562b5c67097c76dc3352718b8c1fba86998840..9c8b691a815fe8235eead2447c79dcedab9bcda5
--- a/plans/active/cli-phi-parity-shim/plan.md
+++ b/plans/active/cli-phi-parity-shim/plan.md
@@ -47,6 +47,15 @@
 | C4 | Capture per-φ traces | [P] | 2025-10-08T02:16Z evidence in `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/`. Fresh C binary trace (`c_trace_phi.log`) captured with 10 `TRACE_C_PHI` lines; spec mode still diverges at φ₀ (Δk=1.8116e-02) and c-parity mode plateaus at Δk=2.845e-05, ΔF_latt_b=4.36e-03 (>VG-1 tolerances 1e-6/1e-4). Keep task open pending investigation into residual φ=0 drift (likely rounding in reciprocal recompute) and follow-up attempt once Δk ≤ 1e-6. |
 | C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |
 
+#### C4 Diagnostic Checklist — Eliminate pix0 Drift
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C4a | Catalogue current first-divergence evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/parity_shim/20251008T023956Z/diff_summary.md` confirms `pix0_vector_meters` differs by 2.85 µm (z-axis), cascading into Δk≈2.845e-05 across all φ. Reference this artifact when starting new diagnostics. |
+| C4b | Reproduce pix0 vector comparison with lightweight harness | [ ] | After each parity tweak run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/trace_per_phi.py --outdir reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>` to emit `per_phi_pytorch.json`, then execute `python scripts/compare_per_phi_traces.py reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/per_phi_pytorch.json reports/2025-10-cli-flags/phase_l/parity_shim/20251008T021659Z/c_trace_phi.log`. Capture the regenerated `delta_metrics.json`/`diff_summary.md` and ensure the first divergence is recorded. |
+| C4c | Instrument detector geometry inputs | [ ] | Use the supervisor command geometry in `scripts/debug_detector_pix0_calc.py` (update args to match Phase L settings) to print `distance`, `close_distance`, `beam_center_(f/s)`, and `pix0_vector`. Mirror those values from the C trace (`c_run.log`) and append a comparison table to `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`. This isolates whether the 2.85 µm offset originates in pivot math or downstream normalization. |
+| C4d | Validate reciprocal-vector recompute impact | [ ] | Once geometry inputs align, rerun the traces and check `rot_a_star_A_inv`/`rot_b_star_A_inv` deltas. If they persist, request Ralph to add optional taps around the reciprocal-to-real recompute (documented in `docs/architecture/c_function_reference.md` §§Crystal Rotations) so we can confirm whether scaling or normalization introduces the residual. |
+
 ### Phase D — Documentation & Handoff
 Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
 Prereqs: Phase C complete, evidence uploaded.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   e9a09c2..2742ca0  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=130...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=130
Updating 2742ca0..c1017be
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   2742ca0..c1017be  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=130
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating c1017be..f0eca6c
Fast-forward
 docs/fix_plan.md                                   |  18 +++
 .../20251008T031911Z/comparison_summary.md         |  49 +++++++
 .../per_phi_pytorch_20251007-201915.json           | 154 +++++++++++++++++++++
 .../per_phi_summary_20251007-201915.md             |  26 ++++
 .../parity_shim/20251008T031911Z/sha256.txt        |   3 +
 5 files changed, 250 insertions(+)
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T031911Z/comparison_summary.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T031911Z/per_phi_pytorch_20251007-201915.json
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T031911Z/per_phi_summary_20251007-201915.md
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251008T031911Z/sha256.txt
From github.com:hoidn/nanoBragg
   c1017be..f0eca6c  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating f0eca6c..7325333
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   f0eca6c..7325333  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=131
Ralph completed iteration 130; proceeding to 131
