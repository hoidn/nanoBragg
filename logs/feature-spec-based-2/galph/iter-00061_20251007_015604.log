Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=61
To github.com:hoidn/nanoBragg.git
   11a8b87..500c82f  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T01:56:08] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T01:56:08] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor evidence mode (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Supervisor Evidence Gate (internal-only): No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Mode flags: Mode flags are combinable and refine execution; do not include any Phase label in input.md.
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-07T01:56:10] thinking

**Preparing to update repository**
[2025-10-07T01:56:11] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:13] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.11s:
Already up to date.
[2025-10-07T01:56:13] tokens used: 13,129

[2025-10-07T01:56:15] thinking

**Preparing to read galph_memory.md**
[2025-10-07T01:56:15] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:16] bash -lc 'cat galph_memory.md' succeeded in 700ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T01:56:16] tokens used: 13,382

[2025-10-07T01:56:18] thinking

**Starting to read documentation files**
[2025-10-07T01:56:19] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:19] bash -lc 'cat docs/index.md' succeeded in 708ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T01:56:19] tokens used: 16,310

[2025-10-07T01:56:23] thinking

**Preparing to review key documentation**
[2025-10-07T01:56:24] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:24] bash -lc 'cat specs/spec-a.md' succeeded in 706ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T01:56:24] tokens used: 18,081

[2025-10-07T01:56:26] thinking

**Considering shard reading requirements**
[2025-10-07T01:56:27] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:27] bash -lc 'cat arch.md' succeeded in 708ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T01:56:27] tokens used: 18,443

[2025-10-07T01:56:30] thinking

**Locating configuration documentation**
[2025-10-07T01:56:30] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:31] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 690ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T01:56:31] tokens used: 39,136

[2025-10-07T01:56:32] thinking

**Examining debugging documentation**
[2025-10-07T01:56:33] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:34] bash -lc 'cat docs/debugging/debugging.md' succeeded in 710ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T01:56:34] tokens used: 41,029

[2025-10-07T01:56:37] thinking

**Preparing to review fix_plan.md**
[2025-10-07T01:56:39] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:39] bash -lc 'cat docs/fix_plan.md' succeeded in 671ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-07T01:56:39] tokens used: 43,539

[2025-10-07T01:56:41] thinking

**Pausing file review before next document**
[2025-10-07T01:56:42] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:42] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 676ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T01:56:42] tokens used: 46,432

[2025-10-07T01:56:48] thinking

**Preparing for code analysis**
[2025-10-07T01:56:48] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:49] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 762ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot addendum (2025-10-06T17:59 replayed 2025-11-09): Re-running Phase L1 with `Fdump_scaled_20251006175946.bin` shows the cache stores 182,700 doubles (≈9,534 more than the 173,166 expected from header ranges) and that reflections shift by Δk≈+10–12 / Δl≈−2…−8 relative to HKL indices. Use this dataset to reverse-engineer the C layout before touching PyTorch HKL IO.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
- Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
- Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
[2025-10-07T01:56:49] tokens used: 49,211

[2025-10-07T01:56:51] thinking

**Reviewing vectorization plan**
[2025-10-07T01:56:52] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:56:53] bash -lc 'cat plans/active/vectorization.md' succeeded in 682ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-09): Phase A remains untouched; no artifacts exist under `reports/2025-10-vectorization/phase_a/`, so Ralph must prioritise A1–A3 baseline capture before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
[2025-10-07T01:56:53] tokens used: 52,257

[2025-10-07T01:56:58] thinking

**Analyzing long-term goals and CLI flag status**

I’m digging into the code and plan docs to compare the current state against the user’s long-term goals, especially focusing on the CLI’s support for the -nonoise and -pix0_vector_mm flags. I want to verify what’s implemented, understand outstanding tasks from the plan, and pinpoint any gaps needing attention to move forward. Let’s explore the relevant fix_plan sections like CLI-FLAGS-003 and check the codebase for progress.
[2025-10-07T01:57:00] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:01] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 744ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-07T01:57:01] tokens used: 55,233

[2025-10-07T01:57:03] thinking

**Navigating to specific code section**
[2025-10-07T01:57:03] exec bash -lc "sed -n '448,700p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:04] bash -lc "sed -n '448,700p' docs/fix_plan.md" succeeded in 729ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
- Next Actions (2025-10-17 sync):
  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-07T01:57:04] tokens used: 55,542

[2025-10-07T01:57:09] thinking

**Analyzing pending CLI and vectorization tasks**

I’m focusing on understanding the gaps blocking the long-term goal of running the command, especially around normalization issues and CLI command parity. I plan to inspect related code—like noise flags in `src/nanobrag_torch/cli.py`—and check for vectorization tasks that haven’t started yet, so I can build a clear analysis before moving forward.
[2025-10-07T01:57:10] exec bash -lc 'rg -n "nonoise" -g"*.py" src' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:11] bash -lc 'rg -n "nonoise" -g"*.py" src' succeeded in 707ms:
src/nanobrag_torch/__main__.py:339:    parser.add_argument('-nonoise', action='store_true',
src/nanobrag_torch/__main__.py:711:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1185:        # CLI-FLAGS-003: Honor -nonoise flag
[2025-10-07T01:57:11] tokens used: 58,816

[2025-10-07T01:57:13] thinking

**Reviewing relevant lines**
[2025-10-07T01:57:14] exec bash -lc "sed -n '300,360p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:14] bash -lc "sed -n '300,360p' src/nanobrag_torch/__main__.py" succeeded in 682ms:
    parser.add_argument('-oversample_thick', action='store_true',
                        help='Recompute absorption per subpixel')
    parser.add_argument('-oversample_polar', action='store_true',
                        help='Recompute polarization per subpixel')
    parser.add_argument('-oversample_omega', action='store_true',
                        help='Recompute solid angle per subpixel')
    parser.add_argument('-roi', nargs=4, type=int,
                        metavar=('xmin', 'xmax', 'ymin', 'ymax'),
                        help='Pixel index limits (inclusive, zero-based)')

    # Background
    parser.add_argument('-water', type=float, metavar='µm',
                        help='Water background size (µm)')

    # Source intensity
    parser.add_argument('-fluence', type=float, metavar='photons/m^2',
                        help='Fluence (photons/m^2)')
    parser.add_argument('-flux', type=float, metavar='photons/s',
                        help='Flux (photons/s)')
    parser.add_argument('-exposure', type=float, metavar='s',
[2025-10-07T01:57:14] tokens used: 59,117

[2025-10-07T01:57:16] thinking

**Checking code near line 1185**
[2025-10-07T01:57:16] exec bash -lc "sed -n '700,760p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:17] bash -lc "sed -n '700,760p' src/nanobrag_torch/__main__.py" succeeded in 716ms:
    # Interpolation
    if args.interpolate:
        config['interpolate'] = True
    elif args.nointerpolate:
        config['interpolate'] = False

    # Output files
    config['floatfile'] = args.floatfile
    config['intfile'] = args.intfile
    config['pgmfile'] = args.pgmfile
    config['noisefile'] = args.noisefile
    config['suppress_noise'] = args.nonoise
    config['scale'] = args.scale
    config['adc'] = args.adc
    config['pgmscale'] = args.pgmscale
    config['seed'] = args.seed if args.seed else int(-time.time())

    # Sourcefile (store path for later processing)
    if args.sourcefile:
        config['sourcefile'] = args.sourcefile
[2025-10-07T01:57:17] tokens used: 60,158

[2025-10-07T01:57:18] thinking

**Checking specific line reference**
[2025-10-07T01:57:19] exec bash -lc "sed -n '1160,1205p' src/nanobrag_torch/__main__.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:20] bash -lc "sed -n '1160,1205p' src/nanobrag_torch/__main__.py" succeeded in 691ms:
                filepath=config['intfile'],
                image_data=scaled_int,
                pixel_size_mm=detector_config.pixel_size_mm,
                distance_mm=detector_config.distance_mm,
                wavelength_angstrom=beam_config.wavelength_A,
                beam_center_x_mm=detector_config.beam_center_s,
                beam_center_y_mm=detector_config.beam_center_f,
                close_distance_mm=detector_config.close_distance_mm,
                phi_deg=config.get('phi_deg', 0.0),
                osc_start_deg=config.get('phi_deg', 0.0),
                osc_range_deg=config.get('osc_deg', 0.0),
                twotheta_deg=config.get('twotheta_deg', 0.0),
                convention=detector_config.detector_convention.name,
                scale=1.0,  # Already scaled
                adc_offset=0.0  # Already applied ADC
            )
            print(f"Wrote SMV image to {config['intfile']}")

        if config.get('pgmfile'):
            # Write PGM per AT-CLI-006
[2025-10-07T01:57:20] tokens used: 61,227

[2025-10-07T01:57:22] thinking

**Verifying CLI parameter support**
[2025-10-07T01:57:23] exec bash -lc 'rg -n "pix0_vector" -g"*.py" src' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:24] bash -lc 'rg -n "pix0_vector" -g"*.py" src' succeeded in 720ms:
src/nanobrag_torch/__main__.py:187:    parser.add_argument('-pix0_vector', nargs=3, type=float,
src/nanobrag_torch/__main__.py:190:    parser.add_argument('-pix0_vector_mm', nargs=3, type=float,
src/nanobrag_torch/__main__.py:462:            args.pix0_vector, args.pix0_vector_mm]):
src/nanobrag_torch/__main__.py:557:    if args.pix0_vector and args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:558:        raise ValueError("Cannot specify both -pix0_vector and -pix0_vector_mm simultaneously")
src/nanobrag_torch/__main__.py:560:    if args.pix0_vector:
src/nanobrag_torch/__main__.py:561:        config['custom_pix0_vector'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:562:        # pix0_vector is in meters, convert to config
src/nanobrag_torch/__main__.py:563:        config['pix0_override_m'] = tuple(args.pix0_vector)
src/nanobrag_torch/__main__.py:564:    elif args.pix0_vector_mm:
src/nanobrag_torch/__main__.py:566:        config['pix0_override_m'] = tuple(x * 0.001 for x in args.pix0_vector_mm)
src/nanobrag_torch/__main__.py:567:        config['custom_pix0_vector'] = config['pix0_override_m']
src/nanobrag_torch/models/detector.py:134:        # Calculate and cache pix0_vector (position of first pixel)
src/nanobrag_torch/models/detector.py:135:        self._calculate_pix0_vector()
src/nanobrag_torch/models/detector.py:144:        self._cached_pix0_vector = self.pix0_vector.clone()
src/nanobrag_torch/models/detector.py:147:        # These will be set properly in _calculate_pix0_vector
src/nanobrag_torch/models/detector.py:152:        if not hasattr(self, 'pix0_vector'):
src/nanobrag_torch/models/detector.py:153:            self.pix0_vector: Optional[torch.Tensor] = None
src/nanobrag_torch/models/detector.py:237:        # Recalculate pix0_vector when geometry changes
src/nanobrag_torch/models/detector.py:238:        self._calculate_pix0_vector()
[2025-10-07T01:57:24] tokens used: 62,128

[2025-10-07T01:57:28] thinking

**Reviewing detector logic and plan phases**
[2025-10-07T01:57:29] exec bash -lc "sed -n '700,1100p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:29] bash -lc "sed -n '700,1100p' plans/active/cli-noise-pix0/plan.md" succeeded in 675ms:

[2025-10-07T01:57:29] tokens used: 65,283

[2025-10-07T01:57:32] thinking

**Verifying document length**
[2025-10-07T01:57:33] exec bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:33] bash -lc 'wc -l plans/active/cli-noise-pix0/plan.md' succeeded in 715ms:
     229 plans/active/cli-noise-pix0/plan.md
[2025-10-07T01:57:33] tokens used: 65,834

[2025-10-07T01:57:39] thinking

**Starting detailed troubleshooting analysis**
[2025-10-07T01:57:40] exec bash -lc "sed -n '700,980p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:41] bash -lc "sed -n '700,980p' docs/fix_plan.md" succeeded in 687ms:
      - `reports/2025-10-cli-flags/phase_k/base_lattice/compare_traces.py` — K3f3 comparison script
      - `reports/2025-10-cli-flags/phase_k/base_lattice/trace_harness.py` — K3f2 PyTorch harness
      - `reports/2025-10-cli-flags/phase_k/base_lattice/run_c_trace.sh` — K3f1 C capture script
      - `reports/2025-10-cli-flags/phase_k/base_lattice/metadata.json` — Environment snapshot
    Observations/Hypotheses:
      - **40.51× scaling factor consistent across all reciprocal vectors:** Strongly suggests λ-scaling applied twice
      - **MOSFLM matrix files already contain λ-scaled vectors:** C code shows `scaling factor = 1e-10/lambda0 = 1.02375`
      - **PyTorch may be re-scaling in `read_mosflm_matrix()` or `Crystal.compute_cell_tensors()`:** Need to verify whether function expects raw or pre-scaled input
      - **Real vector cascade:** 405,149× error in real vectors derives from reciprocal error via cross-product calculation
      - **Miller index impact:** Massive lattice error explains the Δk≈6 mismatch from Phase K3e
    Next Actions (Phase K3f4):
      1. Investigate `src/nanobrag_torch/io/mosflm.py:read_mosflm_matrix()` — verify λ-scaling expectations
      2. Review `src/nanobrag_torch/models/crystal.py:compute_cell_tensors()` — check MOSFLM branch for double-scaling
      3. Compare with C code (`nanoBragg.c:3135-3148`) to understand expected input format
      4. Test hypothesis: remove λ-scaling from reader output OR adjust compute_cell_tensors() to skip scaling when MOSFLM vectors provided
      5. Document chosen fix approach in base_lattice/README.md and update plan before implementing
  * [2025-11-08] Attempt #47 (galph) — Result: **EVIDENCE COMPLETE** (Phase K3f4 root-cause documentation). **MOSFLM rescale fix validated; cell tensors now match C.**
    Metrics: PyTorch float64 CPU run reported V_cell=24682.256630 Å³ vs C 24682.3 (Δ=4.3e-5), |a|=26.751388 Å, |b|=31.309964 Å, |c|=33.673354 Å (all <1.7e-6 relative); |a*|=0.042704 Å⁻¹ (matches C reciprocal magnitude).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt` — Inline `KMP_DUPLICATE_LIB_OK=TRUE python - <<'PY'` reproduction and outputs.
[2025-10-07T01:57:41] tokens used: 66,667

[2025-10-07T01:57:45] thinking

**Reviewing progress and next steps**
[2025-10-07T01:57:46] exec bash -lc 'tail -n 40 docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:47] bash -lc 'tail -n 40 docs/fix_plan.md' succeeded in 686ms:
      - If projection approach is wrong, implement simpler direct assignment and retest
  * [2025-10-06] Attempt #23 — Phase H3b1 complete (ralph) **CRITICAL DISCOVERY: C-code ignores `-pix0_vector_mm` when custom vectors provided**
    Metrics: C traces WITH/WITHOUT `-pix0_vector_mm` are IDENTICAL; PyTorch delta is sub-micron (<0.5µm); C vs PyTorch pix0 Y-error remains 1.14mm
    Artifacts:
      - `reports/2025-10-cli-flags/phase_h/implementation/c_trace_with_override.log` — C run WITH `-pix0_vector_mm` flag
      - `reports/2025-10-cli-flags/phase_h/implementation/c_trace_without_override.log` — C run WITHOUT `-pix0_vector_mm` flag
      - `reports/2025-10-cli-flags/phase_h/implementation/trace_py_with_override.log` — PyTorch run WITH `pix0_override_m`
      - `reports/2025-10-cli-flags/phase_h/implementation/trace_py_without_override.log` — PyTorch run WITHOUT `pix0_override_m`
      - `reports/2025-10-cli-flags/phase_h/implementation/pix0_mapping_analysis.md` — Complete comparative analysis and implementation guidance
      - `reports/2025-10-cli-flags/phase_h/trace_harness_no_override.py` — Modified trace harness for no-override case
    Observations/Hypotheses:
      - **C-code behavior**: When custom detector vectors (`-odet_vector`, `-sdet_vector`, `-fdet_vector`) are provided, the C code produces IDENTICAL geometry whether `-pix0_vector_mm` is present or not. All values (pix0_vector, Fbeam, Sbeam, Fclose, Sclose, distance) are byte-for-byte identical in both traces.
      - **Precedence rule**: Custom detector vectors OVERRIDE and render `-pix0_vector_mm` inert. The custom vectors already encode detector position/orientation implicitly; C derives pix0 FROM custom vectors, not from the pix0_vector flag.
      - **PyTorch delta**: WITH vs WITHOUT pix0_override shows <0.5µm differences (X:0.115µm, Y:0.474µm, Z:0.005µm) - essentially numerical noise.
      - **Cross-platform gap**: C pix0_vector vs PyTorch (with override) shows 1.14mm Y-axis error, exactly matching prior Phase H3a/Attempt #22 findings.
      - **Root cause of Attempt #22 failure**: Implementation tried to apply pix0_override via projection math, but C-code precedence means the override should be IGNORED when custom vectors are present. The supervisor command provides BOTH custom vectors AND `-pix0_vector_mm`, so C ignores the latter.
    Next Actions:
      - **H3b2**: Implement correct precedence in `Detector._calculate_pix0_vector`: IF `custom_fdet_vector` is set, derive pix0 from custom vectors (existing CUSTOM pathway) and IGNORE `pix0_override_m`. ONLY apply `pix0_override_m` when custom vectors are absent.
      - **H3b3**: Update regression test `test_pix0_vector_mm_beam_pivot` to verify C-matching behavior: when custom vectors + pix0_override both provided, pix0_override has NO EFFECT.
      - **H4**: After precedence fix lands, rerun supervisor command parity to confirm 1.14mm Y-error disappears (since PyTorch will now ignore the override just like C does).
[2025-10-07T01:57:47] tokens used: 70,001

[2025-10-07T01:57:51] thinking

**Preparing to run coin flip**
[2025-10-07T01:57:52] exec bash -lc "python -c 'import random; print(\"heads\" if random.random()<0.5 else \"tails\")'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:52] bash -lc "python -c 'import random; print(\"heads\" if random.random()<0.5 else \"tails\")'" succeeded in 795ms:
heads
[2025-10-07T01:57:52] tokens used: 120,549

[2025-10-07T01:57:55] thinking

**Reviewing recent commit history**
[2025-10-07T01:57:55] exec bash -lc 'git log -n 10 --oneline' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:57:56] bash -lc 'git log -n 10 --oneline' succeeded in 696ms:
500c82f [SYNC i=61] actor=galph status=running
11a8b87 [SYNC i=61] actor=ralph → next=galph status=ok ralph_commit=3e47b38
3e47b38 CLI-FLAGS-003 L1d: HKL parity verified with fresh C cache
1719050 [SYNC i=60] actor=ralph status=running
a1429f2 [SYNC i=60] actor=galph → next=ralph status=ok galph_commit=0ea4b8b
0ea4b8b SUPERVISOR: CLI L1d prep - tests: not run
de25603 [SYNC i=60] actor=galph status=running
cf691f6 [SYNC i=60] actor=ralph → next=galph status=ok ralph_commit=4efadee
4efadee [SYNC i=60] actor=ralph status=running
572217b CLI-FLAGS-003 Phase L1c: Fix HKL/Fdump padding to match C binary format
[2025-10-07T01:57:56] tokens used: 120,762

[2025-10-07T01:58:06] thinking

**Reviewing recent commits for regressions**
[2025-10-07T01:58:07] exec bash -lc 'git show 3e47b38 --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:08] bash -lc 'git show 3e47b38 --stat' succeeded in 901ms:
commit 3e47b38d0c1c3fa5b84c48ce46e5dec58014ba13
Author: ollie <ohoidn>
Date:   Mon Oct 6 18:55:05 2025 -0700

    CLI-FLAGS-003 L1d: HKL parity verified with fresh C cache
    
    - Regenerated C Fdump cache using supervisor command flags (Na=36, Nb=47, Nc=29)
    - Achieved perfect HKL parity: max |ΔF|=0.0, 0 mismatches
    - Artifacts: Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json
    - Phase L2 prerequisites met—structure factors match C exactly
    
    Tests: Collection verified (1 test collected in 2.12s)
    Metrics: Max |ΔF|=0.0 electrons, rel RMS=0.0, shape [49,57,62]
    Plan: Updated Phase L1d to [D] complete, logged Attempt #54
    Next: Phase L2 scaling-chain diagnostics

 docs/fix_plan.md                                   | 15 +++++-
 plans/active/cli-noise-pix0/plan.md                |  2 +-
 .../phase_l/hkl_parity/metrics_20251109.json       | 59 ++++++++++++++++++++
 .../phase_l/hkl_parity/summary_20251109.md         | 63 ++++++++++++++++++++++
[2025-10-07T01:58:08] tokens used: 121,343

[2025-10-07T01:58:10] thinking

**Reviewing plan updates and artifacts**
[2025-10-07T01:58:11] exec bash -lc 'git show 4efadee --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:12] bash -lc 'git show 4efadee --stat' succeeded in 659ms:
commit 4efadee462ae863778d23e4cf460ab27c44b2d4e
Author: ollie <ohoidn>
Date:   Mon Oct 6 18:44:03 2025 -0700

    [SYNC i=60] actor=ralph status=running

 docs/fix_plan.md | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)
[2025-10-07T01:58:12] tokens used: 121,860

[2025-10-07T01:58:14] thinking

**Evaluating ambiguous commit**
[2025-10-07T01:58:16] exec bash -lc 'git show 572217b --stat' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:17] bash -lc 'git show 572217b --stat' succeeded in 695ms:
commit 572217bad2ecc0710957a4aa342c6baaf3695ba8
Author: ollie <ohoidn>
Date:   Mon Oct 6 18:41:22 2025 -0700

    CLI-FLAGS-003 Phase L1c: Fix HKL/Fdump padding to match C binary format
    
    Implements Phase L1c of CLI-FLAGS-003 plan to align HKL cache IO with
    nanoBragg C semantics.
    
    **Problem:** PyTorch calculated h_range = h_max - h_min (span) while C
    uses h_range = h_max - h_min + 1 (count of values). This caused C to
    write (h_range+1)³ doubles (with padding) while PyTorch expected h_range³.
    
    **Root Cause:** C code (nanoBragg.c:2405) defines ranges as value counts:
      h_range = h_max - h_min + 1
    Then allocates (h_range+1)³ and writes all elements including padding.
    
    **Fix:**
    - `read_hkl_file()`: Changed h_range calculation to C-style (+1)
    - `read_fdump()`: Read padded (h_range+1)³, trim to h_range³
[2025-10-07T01:58:17] tokens used: 122,200

[2025-10-07T01:58:19] thinking

**Evaluating recent HKL fix**
[2025-10-07T01:58:20] exec bash -lc 'git show 572217bad2ecc0710957a4aa342c6baaf3695ba8' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:21] bash -lc 'git show 572217bad2ecc0710957a4aa342c6baaf3695ba8' succeeded in 713ms:
commit 572217bad2ecc0710957a4aa342c6baaf3695ba8
Author: ollie <ohoidn>
Date:   Mon Oct 6 18:41:22 2025 -0700

    CLI-FLAGS-003 Phase L1c: Fix HKL/Fdump padding to match C binary format
    
    Implements Phase L1c of CLI-FLAGS-003 plan to align HKL cache IO with
    nanoBragg C semantics.
    
    **Problem:** PyTorch calculated h_range = h_max - h_min (span) while C
    uses h_range = h_max - h_min + 1 (count of values). This caused C to
    write (h_range+1)³ doubles (with padding) while PyTorch expected h_range³.
    
    **Root Cause:** C code (nanoBragg.c:2405) defines ranges as value counts:
      h_range = h_max - h_min + 1
    Then allocates (h_range+1)³ and writes all elements including padding.
    
    **Fix:**
    - `read_hkl_file()`: Changed h_range calculation to C-style (+1)
    - `read_fdump()`: Read padded (h_range+1)³, trim to h_range³
[2025-10-07T01:58:21] tokens used: 123,034

[2025-10-07T01:58:25] thinking

**Assessing plan and test results**

I’m reviewing a large commit with tests added that align with the plan, considering if there are regressions. Now, I need to comment on recent work quality and decide whether a new plan is needed or if the existing `cli-noise-pix0` plan requires updates, especially examining Phase L beyond L1 subphases for possible L2 definitions.
[2025-10-07T01:58:26] exec bash -lc 'rg "Phase L2" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:27] bash -lc 'rg "Phase L2" -n plans/active/cli-noise-pix0/plan.md' succeeded in 728ms:
229:| L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
[2025-10-07T01:58:27] tokens used: 130,215

[2025-10-07T01:58:33] thinking

**Identifying missing plan phases**
[2025-10-07T01:58:34] exec bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:35] bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' succeeded in 712ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
1432:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-07T01:58:35] tokens used: 131,648

[2025-10-07T01:58:38] thinking

**Reading specific section**
[2025-10-07T01:58:39] exec bash -lc "sed -n '1432,1600p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:39] bash -lc "sed -n '1432,1600p' docs/fix_plan.md" succeeded in 733ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_planning (Phase A evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions (2025-11-09 refresh):
  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry (currently no artifacts exist, so this is blocking).
  2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
  3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * (pending) — Capture Phase A baseline artifacts and update this log.
- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.
- Exit Criteria (quote thresholds from spec):
  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).
[2025-10-07T01:58:39] tokens used: 131,863

[2025-10-07T01:58:48] thinking

**Reviewing codebase for scaling issues**

I'm mapping out the next steps to analyze the codebase deeply, focusing on unresolved scaling and normalization gaps. The plan hints at incomplete phases targeting a large scaling mismatch, especially around normalization in the simulator. I'll investigate simulator.py and related scaling logic to identify key debugging hypotheses aligned with the long-term goals.
[2025-10-07T01:58:49] exec bash -lc 'rg -n "fluence" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:50] bash -lc 'rg -n "fluence" src/nanobrag_torch/simulator.py' succeeded in 911ms:
512:        # Use fluence from beam config (AT-FLU-001)
513:        self.fluence = torch.tensor(self.beam_config.fluence, device=self.device, dtype=self.dtype)
1067:            * self.fluence
1315:                    # Calculate I_before_scaling (this is before r_e^2 * fluence / steps)
1323:                    print(f"TRACE_PY: fluence_photons_per_m2 {self.fluence.item():.15g}")
1369:                print(f"TRACE: Fluence = {self.fluence:.12e}")
1374:                print(f"  normalized * r_e^2 * fluence")
1375:                print(f"  = {normalized_intensity[target_slow, target_fast].item():.12e} * {self.r_e_sqr:.12e} * {self.fluence:.12e}")
1385:        I_bg = (F_bg^2) · r_e^2 · fluence · (water_size^3) · 1e6 · Avogadro / water_MW
1390:        - fluence = photons per square meter
1414:            * self.fluence
[2025-10-07T01:58:50] tokens used: 134,129

[2025-10-07T01:58:52] thinking

**Inspecting scaling code section**
[2025-10-07T01:58:53] exec bash -lc "sed -n '1260,1380p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:58:53] bash -lc "sed -n '1260,1380p' src/nanobrag_torch/simulator.py" succeeded in 721ms:

                    a_star_vec = rot_a_star[0, 0] if len(rot_a_star.shape) > 1 else rot_a_star
                    b_star_vec = rot_b_star[0, 0] if len(rot_b_star.shape) > 1 else rot_b_star
                    c_star_vec = rot_c_star[0, 0] if len(rot_c_star.shape) > 1 else rot_c_star

                    print(f"TRACE_PY: rot_a_star_A_inv {a_star_vec[0].item():.15g} {a_star_vec[1].item():.15g} {a_star_vec[2].item():.15g}")
                    print(f"TRACE_PY: rot_b_star_A_inv {b_star_vec[0].item():.15g} {b_star_vec[1].item():.15g} {b_star_vec[2].item():.15g}")
                    print(f"TRACE_PY: rot_c_star_A_inv {c_star_vec[0].item():.15g} {c_star_vec[1].item():.15g} {c_star_vec[2].item():.15g}")

                    # Calculate Miller indices using scattering vector and real-space vectors
                    # Following nanoBragg.c convention: h = dot(a, scattering)
                    coords_ang = pixel_coords_meters[target_slow, target_fast] * 1e10  # m to Å
                    pixel_mag = torch.sqrt(torch.sum(coords_ang * coords_ang))
                    diffracted_unit = coords_ang / pixel_mag
                    incident_unit = self.incident_beam_direction
                    scattering_vec = (diffracted_unit - incident_unit) / self.wavelength

                    from nanobrag_torch.utils.geometry import dot_product
                    h = dot_product(scattering_vec.unsqueeze(0), a_vec.unsqueeze(0)).item()
                    k = dot_product(scattering_vec.unsqueeze(0), b_vec.unsqueeze(0)).item()
[2025-10-07T01:58:53] tokens used: 135,218

[2025-10-07T01:59:00] thinking

**Examining scaling discrepancies in simulation**

I’m focusing on the main scaling code in the simulator to find differences with the C version, especially around normalization like `normalize_intensity`. The lingering intensity mismatch after phase fixes suggests I need to dig into hypotheses about noise, exposures, and flux-to-fluence conversions, so I’ll check the beam configuration handling in the PyTorch code next.
[2025-10-07T01:59:03] exec bash -lc 'rg -n "class Beam" -g"*.py" src' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:04] bash -lc 'rg -n "class Beam" -g"*.py" src' succeeded in 885ms:
src/nanobrag_torch/config.py:485:class BeamConfig:
[2025-10-07T01:59:04] tokens used: 138,543

[2025-10-07T01:59:06] thinking

**Checking relevant section**
[2025-10-07T01:59:06] exec bash -lc "sed -n '485,620p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:07] bash -lc "sed -n '485,620p' src/nanobrag_torch/config.py" succeeded in 748ms:
class BeamConfig:
    """Configuration for X-ray beam properties.

    Supports multiple sources for beam divergence and spectral dispersion (AT-SRC-001).
    """

    # Basic beam properties
    wavelength_A: float = 1.0  # X-ray wavelength in Angstroms (matches C default)

    # Source geometry (simplified)
    N_source_points: int = 1  # Number of source points for beam divergence
    source_distance_mm: float = 10000.0  # Distance from source to sample (mm)
    source_size_mm: float = 0.0  # Source size (0 = point source)

    # Multiple sources support (AT-SRC-001)
    source_directions: Optional[torch.Tensor] = None  # (N, 3) unit direction vectors from sample to sources
    source_weights: Optional[torch.Tensor] = None  # (N,) source weights (ignored per spec, all equal)
    source_wavelengths: Optional[torch.Tensor] = None  # (N,) wavelengths in meters for each source

    # Beam polarization
[2025-10-07T01:59:07] tokens used: 138,781

[2025-10-07T01:59:10] thinking

**Verifying fluence calculation units**
[2025-10-07T01:59:10] exec bash -lc 'rg -n "total_steps" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:11] bash -lc 'rg -n "total_steps" src/nanobrag_torch/simulator.py' exited 1 in 676ms:

[2025-10-07T01:59:11] tokens used: 140,173

[2025-10-07T01:59:13] thinking

**Searching references to steps**
[2025-10-07T01:59:13] exec bash -lc 'rg -n "phi_steps" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:14] bash -lc 'rg -n "phi_steps" src/nanobrag_torch/simulator.py' succeeded in 702ms:
458:            if hasattr(crystal_config, 'phi_steps'):
459:                self.crystal.config.phi_steps = crystal_config.phi_steps
842:        phi_steps = self.crystal.config.phi_steps
846:        steps = source_norm * phi_steps * mosaic_domains * oversample * oversample  # Include sources and oversample^2
1324:                    print(f"TRACE_PY: steps {self.crystal.config.phi_steps}")
[2025-10-07T01:59:14] tokens used: 140,420

[2025-10-07T01:59:16] thinking

**Checking for scaling implementation**
[2025-10-07T01:59:17] exec bash -lc "sed -n '780,900p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:18] bash -lc "sed -n '780,900p' src/nanobrag_torch/simulator.py" succeeded in 688ms:
            print(f"auto-selected {oversample}-fold oversampling")

        # For now, we'll implement the base case without oversampling for this test
        # The full subpixel implementation will come later
        # This matches the current implementation which doesn't yet have subpixel sampling

        # PERF-PYTORCH-004 P3.4: Use cached ROI mask instead of rebuilding every run
        roi_mask = self._cached_roi_mask

        # PERF-PYTORCH-004 P3.4: Use cached pixel coordinates instead of fetching/converting every run
        pixel_coords_meters = self._cached_pixel_coords_meters

        # Get rotated lattice vectors for all phi steps and mosaic domains
        # Shape: (N_phi, N_mos, 3)
        # PERF-PYTORCH-006: Convert crystal vectors to correct device/dtype
        if override_a_star is None:
            (rot_a, rot_b, rot_c), (rot_a_star, rot_b_star, rot_c_star) = (
                self.crystal.get_rotated_real_vectors(self.crystal.config)
            )
            # Convert to correct dtype/device
[2025-10-07T01:59:18] tokens used: 140,736

[2025-10-07T01:59:21] thinking

**Verifying final scaling implementation**
[2025-10-07T01:59:23] exec bash -lc 'rg -n "physical_intensity" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:24] bash -lc 'rg -n "physical_intensity" src/nanobrag_torch/simulator.py' succeeded in 703ms:
1064:        physical_intensity = (
1073:            physical_intensity = physical_intensity + water_background
1079:        if physical_intensity.shape != roi_mask.shape:
1081:            actual_spixels, actual_fpixels = physical_intensity.shape
1082:            roi_mask = torch.ones_like(physical_intensity)
1098:                if self.detector.config.mask_array.shape == physical_intensity.shape:
1104:        # Ensure roi_mask is on the same device as physical_intensity
1105:        roi_mask = roi_mask.to(physical_intensity.device)
1106:        physical_intensity = physical_intensity * roi_mask
1123:                physical_intensity,
1135:        return physical_intensity.to(dtype=self.dtype)
1138:                           physical_intensity,
1149:            physical_intensity: Final intensity values
1166:            if 0 <= target_slow < physical_intensity.shape[0] and 0 <= target_fast < physical_intensity.shape[1]:
1168:                print(f"  Final intensity: {physical_intensity[target_slow, target_fast].item():.6e}")
1183:            print(f"  Image shape: {physical_intensity.shape[0]} x {physical_intensity.shape[1]} pixels")
1184:            print(f"  Max intensity: {physical_intensity.max().item():.6e}")
1185:            print(f"  Min intensity: {physical_intensity.min().item():.6e}")
1186:            print(f"  Mean intensity: {physical_intensity.mean().item():.6e}")
1189:            max_val = physical_intensity.max()
[2025-10-07T01:59:24] tokens used: 142,469

[2025-10-07T01:59:26] thinking

**Inspecting formula near line 1064**
[2025-10-07T01:59:26] exec bash -lc "sed -n '1030,1085p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:27] bash -lc "sed -n '1030,1085p' src/nanobrag_torch/simulator.py" succeeded in 714ms:
            pixel_size_m = torch.as_tensor(self.detector.pixel_size, device=airpath_m.device, dtype=airpath_m.dtype)

            # Calculate solid angle (omega) based on point_pixel mode
            if self.detector.config.point_pixel:
                # Point pixel mode: ω = 1 / R^2
                omega_pixel = 1.0 / (airpath_m * airpath_m)
            else:
                # Standard mode with obliquity correction
                # ω = (pixel_size^2 / R^2) · (close_distance/R)
                omega_pixel = (
                    (pixel_size_m * pixel_size_m)
                    / (airpath_m * airpath_m)
                    * close_distance_m
                    / airpath_m
                )

            # Apply omega directly
            normalized_intensity = normalized_intensity * omega_pixel

        # Apply detector absorption if configured (AT-ABS-001)
[2025-10-07T01:59:27] tokens used: 143,639

[2025-10-07T01:59:29] thinking

**Verifying normalization step division**
[2025-10-07T01:59:30] exec bash -lc 'rg -n "/ steps" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:31] bash -lc 'rg -n "/ steps" src/nanobrag_torch/simulator.py' succeeded in 683ms:
936:            subpixel_physics_intensity_all = subpixel_physics_intensity_all / steps
1013:            normalized_intensity = intensity / steps
1315:                    # Calculate I_before_scaling (this is before r_e^2 * fluence / steps)
[2025-10-07T01:59:31] tokens used: 144,457

[2025-10-07T01:59:36] thinking

**Investigating intensity calculation discrepancies**
[2025-10-07T01:59:37] exec bash -lc 'rg -n "intensity =" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:38] bash -lc 'rg -n "intensity =" src/nanobrag_torch/simulator.py' succeeded in 658ms:
308:    intensity = F_total * F_total  # |F|^2
317:        intensity = intensity * keep_mask.to(intensity.dtype)
321:    intensity = torch.sum(intensity, dim=(-2, -1))
371:            intensity = intensity * polar
397:            intensity = intensity * polar
409:            intensity = torch.sum(intensity * weights_broadcast, dim=0)
412:            intensity = torch.sum(intensity, dim=0)
975:            accumulated_intensity = torch.sum(intensity_all, dim=2)
981:                accumulated_intensity = accumulated_intensity * last_omega
984:            normalized_intensity = accumulated_intensity
999:                intensity = self._compute_physics_for_position(
1008:                intensity = self._compute_physics_for_position(
1013:            normalized_intensity = intensity / steps
1047:            normalized_intensity = normalized_intensity * omega_pixel
1056:            normalized_intensity = self._apply_detector_absorption(
1064:        physical_intensity = (
1073:            physical_intensity = physical_intensity + water_background
1106:        physical_intensity = physical_intensity * roi_mask
1190:            max_pos = (physical_intensity == max_val).nonzero()[0]
[2025-10-07T01:59:38] tokens used: 145,587

[2025-10-07T01:59:41] thinking

**Checking physics computation function**
[2025-10-07T01:59:42] exec bash -lc "sed -n '200,420p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:43] bash -lc "sed -n '200,420p' src/nanobrag_torch/simulator.py" succeeded in 1.38s:
    k0 = torch.round(k)
    l0 = torch.round(l)

    # Look up structure factors
    F_cell = crystal_get_structure_factor(h0, k0, l0)

    # Ensure F_cell is on the same device as h (device-neutral implementation per Core Rule #16)
    # The crystal.get_structure_factor may return CPU tensors even when h0/k0/l0 are on CUDA
    if F_cell.device != h.device:
        F_cell = F_cell.to(device=h.device)

    # Calculate lattice structure factor
    #
    # C-Code Implementation Reference (from nanoBragg.c, lines 3062-3081):
    # ```c
    # /* structure factor of the lattice (paralelpiped crystal)
    #     F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
    # */
    # F_latt = 1.0;
    # if(xtal_shape == SQUARE)
[2025-10-07T01:59:43] tokens used: 147,089

[2025-10-07T01:59:52] thinking

**Evaluating scaling discrepancies and planning next steps**

I'm analyzing possible reasons for the scaling mismatch, considering factors like polarization, steps, and missing `capture_fraction` in the C code. I'll check the plan and fix_plan files for any outstanding or missing phases and next actions, especially around CLI-FLAGS-003 after attempt #54, to identify what tasks remain for handling scaling normalization.
[2025-10-07T01:59:54] exec bash -lc 'rg "Next Actions" -n docs/fix_plan.md | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T01:59:54] bash -lc 'rg "Next Actions" -n docs/fix_plan.md | head' succeeded in 981ms:
44:    Next Actions: Update `plans/active/repo-hygiene-002/plan.md` task H4 guidance to reference Protected Assets, then verify the checklist is followed in the next hygiene pass.
49:    Next Actions: Capture proof-of-compliance during the next hygiene loop and keep plan cross-references fresh.
54:    Next Actions: Update plan task H4 with the mandatory docs/index.md scan, then record a compliance log during the next REPO-HYGIENE-002 execution.
78:    Next Actions: Complete plan H1–H6 (baseline snapshot, restore canonical file, purge stray reports, rerun parity smoke tests, log closure).
83:    Next Actions: Record closure in plan notes and keep baseline snapshot for future hygiene audits.
88:    Next Actions: Execute plan tasks H1–H4 on a dedicated branch: capture baseline file (`git show 92ac528^:golden_suite_generator/nanoBragg.c`), restore it locally, archive `reports/2025-09-30-AT-021-traces/` under `reports/archive/`, remove the duplicate `fix_plan.md`, then run H5 parity smoke before logging completion in H6.
93:    Next Actions: None - item closed successfully. Keep baseline snapshot for future hygiene audits.
112:- Immediate Next Actions (2025-10-15):
124:    Next Actions: Proceed to Phase 2 multi-device validation.
129:    Next Actions: Implement plan tasks P2.1–P2.5 (CLI extension, CPU/CUDA runs, Dynamo logs), then P3.0/P3.0b/P3.0c–P3.5 (multi-source defaults + polarization + normalization, benchmark hardening, ROI caching, C comparison).
[2025-10-07T01:59:54] tokens used: 151,085

[2025-10-07T01:59:59] thinking

**Searching for CLI entry context**
[2025-10-07T02:00:00] exec bash -lc "rg \"Next Actions\" -n docs/fix_plan.md | sed -n '15,45p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:00:01] bash -lc "rg \"Next Actions\" -n docs/fix_plan.md | sed -n '15,45p'" succeeded in 724ms:
154:    Next Actions: Ralph to execute plan tasks P3.0–P3.0c in order, capture multi-source trace comparisons, then proceed to benchmarking tasks once physics parity is restored.
159:    Next Actions: Ralph to finish P3.0–P3.4, then rerun CPU/CUDA benchmarks and produce the Phase 3 summary per plan guidance before reconsidering Phase 4.
164:    Next Actions: Re-open plan tasks P3.0/P3.0b/P3.0c/P3.4 in code, implement guarded seeding + per-source polarization + post-sum weighting before normalization, then hoist ROI/misset tensors ahead of re-running benchmarks. Only after those fixes land should Ralph resume P3.2/P3.3 measurements.
169:    Next Actions: Same as Attempt #12 — execute plan tasks P3.0b/P3.0c/P3.4 under `prompts/debug.md`, capturing 3-source C/Py traces and refreshed CPU benchmarks once fixes land.
174:    Next Actions: Ralph to execute updated plan tasks P3.0–P3.0c (multi-source defaults, per-source polarization, normalization) and P3.4 (ROI/misset caching) with the new artifact targets before rerunning P3.2/P3.3 benchmarks.
179:    Next Actions: Ralph to execute plan tasks P3.0b (per-source polarization) and P3.0c (normalization validation with weighted sources) with new trace/benchmark artifacts, then deliver P3.4 ROI/misset caching before re-running P3.2/P3.3 benchmarks.
184:    Next Actions: Execute updated P3.0c tasks: build two-source weighted comparison, capture C vs PyTorch metrics, and decide on the correct weighting model. Block P3.2/P3.3 benchmarking until this parity evidence exists.
189:    Next Actions: (1) Replace `.contiguous()` with `.clone()` in polarization paths and rerun CUDA benchmarks (P3.3). (2) After CUDA data collected, analyze combined CPU+CUDA results and decide P3.5 (proceed to Phase 4 or close out).
194:    Next Actions: Run P3.3 CUDA benchmarks once cudagraph blocker is cleared; finish P3.0c weighted-source validation before issuing the Phase 3 decision (P3.5).
198:    Next Actions: Execute P3.0c weighted-source parity checklist (two-source unequal weights) and capture regression evidence before rerunning P3.2/P3.3 benchmarks; investigate 1024² CPU hotspot once parity decision recorded.
207:    Next Actions: Review Phase B findings (B4 shows 1.11-1.15× performance, within 10% of ≤1.2× target). Decide whether to proceed to Phase C diagnostics or close plan as target nearly achieved.
209:    Next Actions: Deliver P3.0c artifacts (two-source unequal weights) per plan guidance, fix normalization semantics, then rerun CPU/CUDA benchmarks (P3.2/P3.3) before issuing the Phase 3 memo (P3.5).
211:    Next Actions: Execute P3.0c weighted-source validation (two-source unequal weights, CPU+CUDA, nb-compare + pytest), then revisit CPU 1024² deficit in the Phase 3 memo (P3.5). Update plan table to link new CUDA artifacts once parity evidence is captured.
216:    Next Actions: Mark P3.0c as `[X]` in plan; proceed with Phase 3 memo (P3.5) incorporating existing CPU/CUDA benchmark data and the 1024² CPU deficit analysis.
221:    Next Actions: Repair the validation script, regenerate CPU/CUDA results with unequal weights, archive outputs under `reports/benchmarks/<date>-multi-source-normalization/`, then resume P3.2/P3.3 and P3.5.
226:    Next Actions: Mark P3.0c as complete in plan.md; Phase 3 complete—all tasks delivered with valid parity evidence.
231:    Next Actions: Ralph to extend the script with an `--out` flag or timestamped default, rerun validation, and update plan/fix-plan entries with new artifact paths.
236:    Next Actions: Mark plan.md task A0 as `[X]` complete. Proceed with A1-A4 baseline benchmarks.
241:    Next Actions: Re-execute Attempt #22 corrective actions (fix validation script with BeamConfig-based weights), regenerate P3.0c artifacts, then update Phase 3 decision memo if weighted-source semantics change. Keep memo marked PROVISIONAL until P3.0c re-validated.
246:    Next Actions: Mark P3.0c as `[X]` in plan.md; finalize Phase 3 decision memo (P3.5) removing PROVISIONAL status. Phase 3 complete—all tasks delivered with valid parity evidence.
[2025-10-07T02:00:01] tokens used: 151,581

[2025-10-07T02:00:12] thinking

**Evaluating plan updates for CLI normalization phases**

I’m sorting through the current plan status and instructions for Step 3, realizing the existing CLI plan only covers Phase L1 and misses next phases needed for normalization tasks. I plan to extend it with phases like L2 and L3 by reviewing scaling metrics and past reports to define detailed tasks, so the plan accurately addresses the upcoming work.
[2025-10-07T02:00:13] exec bash -lc 'cat reports/2025-10-cli-flags/phase_i/supervisor_command/README.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:00:14] bash -lc 'cat reports/2025-10-cli-flags/phase_i/supervisor_command/README.md' succeeded in 671ms:
# CLI-FLAGS-003 Phase I3 Supervisor Command Evidence

**Date:** 2025-10-06
**Engineer:** Ralph (Loop i=32)
**Status:** ❌ PARITY FAILURE - Intensity scaling discrepancy (×124,538)
**Plan Reference:** `plans/active/cli-noise-pix0/plan.md:110`, `docs/fix_plan.md:448`

## Executive Summary

Executed Phase I3 final parity validation per supervisor input. Both C and PyTorch implementations completed successfully, but **parity check failed** with:
- **Correlation:** 0.9978 (< 0.999 threshold)
- **Sum Ratio (Py/C):** 124,538× (should be ~1.0)
- **Max Intensity:** C=446, PyTorch=5.411×10⁷ (121,000× discrepancy)

**Root Cause:** Intensity scaling/normalization bug in PyTorch implementation. Values are consistent in pattern (high correlation) but catastrophically wrong in absolute magnitude.

## nb-compare Tooling Fix (Successfully Deployed)

### Issue
`scripts/nb_compare.py` failed to parse non-standard detector dimensions (`-detpixels_x 2463 -detpixels_y 2527`), causing:
[2025-10-07T02:00:14] tokens used: 153,930

[2025-10-07T02:00:24] thinking

**Planning scaling and normalization audit**

I’m mapping out phases to address scaling issues, including auditing the scaling chain, implementing normalization fixes, and rerunning supervisor commands. To update the plan properly, I need to gather and reference relevant docs—like `specs/spec-a-core.md` and architecture or debugging guides—to support these phases and hypotheses before drafting the detailed plan. I’ll start by reviewing the core spec to pinpoint pertinent scaling sections.
[2025-10-07T02:00:27] exec bash -lc 'cat specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:00:27] bash -lc 'cat specs/spec-a-core.md' succeeded in 720ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-07T02:00:27] tokens used: 158,165

[2025-10-07T02:00:47] thinking

**Outlining multi-phase plan update**

I’m gathering references and drafting detailed additions for phases L2 through L4 in the CLI noise pix0 plan, focusing on scaling audits, normalization fixes, and supervisor command validation. I’ll carefully append these with goals, prerequisites, exit criteria, and task tables while linking relevant docs and preparing to update related files and commit.
[2025-10-07T02:01:04] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -229 +229,35 @@
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |
[2025-10-07T02:01:04] apply_patch(auto_approved=true) exited 0 in 13ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T02:01:04] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |

[2025-10-07T02:01:04] tokens used: 164,338
[2025-10-07T02:01:04] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:01:10] thinking

**Revising Next Actions section**
[2025-10-07T02:01:16] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,6 +457,6 @@
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
[2025-10-07T02:01:16] apply_patch(auto_approved=true) exited 0 in 24ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T02:01:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |

[2025-10-07T02:01:16] tokens used: 167,407
[2025-10-07T02:01:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:01:26] thinking

**Preparing structured input.md content**

I’m focusing on creating a detailed `input.md` memo for Step 3.5 with specific sections aligned to the CLI-FLAGS-003 Phase L scaling issue, referencing relevant docs, and planning to verify the current git branch before proceeding.
[2025-10-07T02:01:28] exec bash -lc 'git branch --show-current' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:01:29] bash -lc 'git branch --show-current' succeeded in 914ms:
feature/spec-based-2
[2025-10-07T02:01:29] tokens used: 168,702
[2025-10-07T02:01:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:01:43] thinking

**Analyzing Do Now for scaling task**
[2025-10-07T02:01:44] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:01:45] bash -lc 'cat input.md' succeeded in 864ms:
Summary: Regenerate C HKL cache and confirm PyTorch HKL parity so Phase L can advance to scaling diagnostics.
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L1d structure-factor parity refresh
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip
Artifacts: reports/2025-10-cli-flags/phase_l/hkl_parity/summary_20251109.md; reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_20251109.json; reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_c_20251109.bin
Do Now: CLI-FLAGS-003 L1d — KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python scripts/validation/compare_structure_factors.py --hkl scaled.hkl --fdump reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_c_20251109.bin --out reports/2025-10-cli-flags/phase_l/hkl_parity/summary_20251109.md --metrics reports/2025-10-cli-flags/phase_l/hkl_parity/metrics_20251109.json
If Blocked: Capture the blocking command output under reports/2025-10-cli-flags/phase_l/hkl_parity/attempt_blocked.log and note the failure in docs/fix_plan.md Attempts before escalating.
Priorities & Rationale:
- specs/spec-a-cli.md:1 — CLI spec mandates C↔Py structure-factor parity before flag acceptance is complete.
- docs/architecture/detector.md:5 — Ensures pix0/pivot context used when interpreting parity deltas.
- docs/development/testing_strategy.md:120 — Parallel validation matrix requires targeted parity checks before full nb-compare reruns.
- plans/active/cli-noise-pix0/plan.md:218 — L1d exit criteria define the evidence bundle we must collect this loop.
How-To Map:
- export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md
- Regenerate the cache first: NB_C_BIN=./golden_suite_generator/nanoBragg nanoBragg -mat A.mat -floatfile /tmp/discard.bin -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 -floatfile /dev/null -intfile /dev/null -noiseimage /dev/null -Fdump reports/2025-10-cli-flags/phase_l/hkl_parity/Fdump_c_20251109.bin
- Then run the Do Now command to produce summary and metrics; keep outputs under reports/2025-10-cli-flags/phase_l/hkl_parity/.
- Validate mapped pytest node with `KMP_DUPLICATE_LIB_OK=TRUE pytest --collect-only -q tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (collection only under supervisor evidence gate).
Pitfalls To Avoid:
- Do not skip setting KMP_DUPLICATE_LIB_OK before any torch import or CLI call.
[2025-10-07T02:01:45] tokens used: 170,030
[2025-10-07T02:01:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:01:55] thinking

**Drafting detailed input.md content**

I'm putting together a comprehensive `input.md` file that matches the new plan for auditing the scaling chain in supervisor mode, carefully including headers, summaries, mapped tests (noting none), artifacts, precise instructions for instrumentation and running commands with environment variables, plus sections on priorities, how-to, pitfalls, pointers, and next steps—all tailored to keep the file concise yet thorough and aligned with given guidelines.
[2025-10-07T02:02:07] exec bash -lc "cat <<'EOF' > input.md
Summary: Capture C vs PyTorch scaling traces for the supervisor command to isolate the intensity normalization divergence.
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L2 scaling chain audit
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_l/scaling_audit/{c_trace_scaling.log,trace_py_scaling.log,scaling_audit_summary.md}
Do Now: CLI-FLAGS-003 L2a — instrument nanoBragg.c then run "'`NB_C_BIN=./golden_suite_generator/nanoBragg nanoBragg -mat A.mat -floatfile /dev/null -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 2>&1 | tee reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`
If Blocked: Capture the failing instrumentation or command output under `reports/2025-10-cli-flags/phase_l/scaling_audit/attempt_blocked.log`, annotate the issue in docs/fix_plan.md Attempts/L2c guidance, and pause for supervisor direction.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:233 — Phase L2 defines the scaling audit prerequisites for unblocking normalization fixes.
- docs/fix_plan.md:448 — CLI-FLAGS-003 entry now calls for L2a–L2c before any further nb-compare runs.
- specs/spec-a-core.md:300 — Scaling constants (r_e², fluence, steps) are normative and must be matched term-by-term.
- docs/architecture/pytorch_design.md:180 — Describes the expected normalization order in the PyTorch simulator.
- docs/development/testing_strategy.md:200 — Parallel validation requires identifying the first divergence before implementing fixes.
How-To Map:
- export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md
- Edit `golden_suite_generator/nanoBragg.c` around lines 3005–3335 to add `TRACE_C` logs for I_before_scaling, omega, polarization, capture_fraction, steps, r_e², fluence, and final intensity; rebuild with `make -C golden_suite_generator` before running the Do Now command.
- Create `reports/2025-10-cli-flags/phase_l/scaling_audit/` ahead of time (`mkdir -p ...`) so logs land in a clean directory.
- After gathering the C trace, duplicate the logged variable list in the PyTorch harness (`reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` or new Phase L copy) and execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py > reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log`.
- Align the two traces using a small diff script (`python reports/2025-10-cli-flags/phase_l/scaling_audit/compare_scaling_traces.py ...`) and summarise deltas in `scaling_audit_summary.md`.
- Supervisor evidence gate: only run `pytest --collect-only -q tests/test_cli_scaling.py` if you need to confirm selectors; do not execute tests fully this loop.
Pitfalls To Avoid:
- Do not leave instrumentation committed; capture patches separately and revert once traces are collected.
- Always set `KMP_DUPLICATE_LIB_OK=TRUE` before any Python command touching torch.
- Keep new artifacts under `reports/2025-10-cli-flags/phase_l/`; no ad-hoc paths.
- Preserve device/dtype neutrality in the PyTorch harness (avoid `.cpu()`/`.item()` on differentiable tensors).
- Respect Protected Assets (docs/index.md) — no deletions or renames of indexed files.
- Do not rerun nb-compare until scaling audit identifies the root cause.
- Avoid running the full pytest suite; stick to targeted collection checks only.
- Ensure beam/detector inputs exactly match the supervisor command; no shortcuts or simplified configs.
- Record any deviations or intermediate findings immediately in docs/fix_plan.md Attempt history.
Pointers:
- plans/active/cli-noise-pix0/plan.md:233
- docs/fix_plan.md:448
- specs/spec-a-core.md:300
- docs/architecture/pytorch_design.md:180
- docs/development/testing_strategy.md:200
Next Up: Phase L2b PyTorch trace capture once the C scaling log lands.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:08] bash -lc "cat <<'EOF' > input.md
Summary: Capture C vs PyTorch scaling traces for the supervisor command to isolate the intensity normalization divergence.
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L2 scaling chain audit
Branch: feature/spec-based-2
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_l/scaling_audit/{c_trace_scaling.log,trace_py_scaling.log,scaling_audit_summary.md}
Do Now: CLI-FLAGS-003 L2a — instrument nanoBragg.c then run "'`NB_C_BIN=./golden_suite_generator/nanoBragg nanoBragg -mat A.mat -floatfile /dev/null -hkl scaled.hkl -nonoise -nointerpolate -oversample 1 -exposure 1 -flux 1e18 -beamsize 1.0 -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080 -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866 -beam_vector 0.00051387949 0.0 -0.99999986 -Na 36 -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0 2>&1 | tee reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`
If Blocked: Capture the failing instrumentation or command output under `reports/2025-10-cli-flags/phase_l/scaling_audit/attempt_blocked.log`, annotate the issue in docs/fix_plan.md Attempts/L2c guidance, and pause for supervisor direction.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:233 — Phase L2 defines the scaling audit prerequisites for unblocking normalization fixes.
- docs/fix_plan.md:448 — CLI-FLAGS-003 entry now calls for L2a–L2c before any further nb-compare runs.
- specs/spec-a-core.md:300 — Scaling constants (r_e², fluence, steps) are normative and must be matched term-by-term.
- docs/architecture/pytorch_design.md:180 — Describes the expected normalization order in the PyTorch simulator.
- docs/development/testing_strategy.md:200 — Parallel validation requires identifying the first divergence before implementing fixes.
How-To Map:
- export AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md
- Edit `golden_suite_generator/nanoBragg.c` around lines 3005–3335 to add `TRACE_C` logs for I_before_scaling, omega, polarization, capture_fraction, steps, r_e², fluence, and final intensity; rebuild with `make -C golden_suite_generator` before running the Do Now command.
- Create `reports/2025-10-cli-flags/phase_l/scaling_audit/` ahead of time (`mkdir -p ...`) so logs land in a clean directory.
- After gathering the C trace, duplicate the logged variable list in the PyTorch harness (`reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` or new Phase L copy) and execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py > reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log`.
- Align the two traces using a small diff script (`python reports/2025-10-cli-flags/phase_l/scaling_audit/compare_scaling_traces.py ...`) and summarise deltas in `scaling_audit_summary.md`.
- Supervisor evidence gate: only run `pytest --collect-only -q tests/test_cli_scaling.py` if you need to confirm selectors; do not execute tests fully this loop.
Pitfalls To Avoid:
- Do not leave instrumentation committed; capture patches separately and revert once traces are collected.
- Always set `KMP_DUPLICATE_LIB_OK=TRUE` before any Python command touching torch.
- Keep new artifacts under `reports/2025-10-cli-flags/phase_l/`; no ad-hoc paths.
- Preserve device/dtype neutrality in the PyTorch harness (avoid `.cpu()`/`.item()` on differentiable tensors).
- Respect Protected Assets (docs/index.md) — no deletions or renames of indexed files.
- Do not rerun nb-compare until scaling audit identifies the root cause.
- Avoid running the full pytest suite; stick to targeted collection checks only.
- Ensure beam/detector inputs exactly match the supervisor command; no shortcuts or simplified configs.
- Record any deviations or intermediate findings immediately in docs/fix_plan.md Attempt history.
Pointers:
- plans/active/cli-noise-pix0/plan.md:233
- docs/fix_plan.md:448
- specs/spec-a-core.md:300
- docs/architecture/pytorch_design.md:180
- docs/development/testing_strategy.md:200
Next Up: Phase L2b PyTorch trace capture once the C scaling log lands.
EOF
' succeeded in 880ms:

[2025-10-07T02:02:08] tokens used: 173,301
[2025-10-07T02:02:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:11] thinking

**Ensuring git hygiene compliance**
[2025-10-07T02:02:11] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:12] bash -lc 'git status --short' succeeded in 753ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T02:02:12] tokens used: 175,007
[2025-10-07T02:02:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:16] thinking

**Preparing to commit changes**
[2025-10-07T02:02:17] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:18] bash -lc 'git diff' succeeded in 691ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2..04cc9ab 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/input.md b/input.md
[2025-10-07T02:02:18] tokens used: 175,242
[2025-10-07T02:02:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:22] thinking

**Appending update to galph_memory.md**
[2025-10-07T02:02:30] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/galph_memory.md
@@ -1387 +1387,12 @@
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
[2025-10-07T02:02:30] apply_patch(auto_approved=true) exited 0 in 28ms:
Success. Updated the following files:
M galph_memory.md
[2025-10-07T02:02:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |

[2025-10-07T02:02:31] tokens used: 178,190
[2025-10-07T02:02:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:34] thinking

**Verifying memory append and git status**
[2025-10-07T02:02:34] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:35] bash -lc 'git status --short' succeeded in 834ms:
 M docs/fix_plan.md
 M galph_memory.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T02:02:35] tokens used: 180,092
[2025-10-07T02:02:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:38] thinking

**Staging changes before commit**
[2025-10-07T02:02:38] exec bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:39] bash -lc 'git add docs/fix_plan.md galph_memory.md input.md plans/active/cli-noise-pix0/plan.md' succeeded in 675ms:

[2025-10-07T02:02:39] tokens used: 180,348
[2025-10-07T02:02:39] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:43] thinking

**Committing with descriptive message**
[2025-10-07T02:02:47] exec bash -lc 'git commit -m "SUPERVISOR: CLI Phase L2 planning - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:47] bash -lc 'git commit -m "SUPERVISOR: CLI Phase L2 planning - tests: not run"' succeeded in 730ms:
[feature/spec-based-2 4119716] SUPERVISOR: CLI Phase L2 planning - tests: not run
 4 files changed, 79 insertions(+), 32 deletions(-)
[2025-10-07T02:02:47] tokens used: 180,594
[2025-10-07T02:02:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:49] thinking

**Preparing to push changes**
[2025-10-07T02:02:50] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:52] bash -lc 'git push' succeeded in 2.31s:
To github.com:hoidn/nanoBragg.git
   500c82f..4119716  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T02:02:52] tokens used: 180,884
[2025-10-07T02:02:52] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:02:55] thinking

**Confirming cleanliness**
[2025-10-07T02:02:56] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:02:56] bash -lc 'git status --short' succeeded in 728ms:

[2025-10-07T02:02:56] tokens used: 181,031
[2025-10-07T02:02:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:03:05] thinking

**Summarizing final analysis and plan details**

I’m preparing a comprehensive final message that covers the initial analysis of long-term goals, summarizes identified issues and gaps including the vectorization plan status, and ranks hypotheses about the scaling problem with confidence levels. I’ll also review Ralph’s contributions noting progress and no regressions, present our updated plan with relevant file line references, highlight new instructions for Ralph, and specify next steps focused on the top-ranked hypothesis. To ensure clarity, I’ll gather exact line numbers from the plan document for accurate referencing. Let’s integrate all these points into a clear, bullet-listed final response.
[2025-10-07T02:03:07] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,320p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:03:08] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '200,320p'" succeeded in 770ms:
   200	
   201	| ID | Task Description | State | How/Why & Guidance |
   202	| --- | --- | --- | --- |
   203	| K3f1 | Capture C baseline for lattice + scattering | [D] | ✅ Artifacts captured in `base_lattice/c_trace.log` & `c_stdout.txt` (2025-11-08); trace logs include MOSFLM scaling, real vectors, and φ=0 scattering lines. |
   204	| K3f2 | Extend PyTorch trace harness with matching fields | [D] | ✅ `trace_harness.py` now emits `TRACE_PY_BASE` using the corrected pixel vector path; output stored in `base_lattice/trace_py.log` (float64, CPU). |
   205	| K3f3 | Diff base traces & isolate first divergence | [D] | ✅ `base_lattice/summary.md` compares logs and flags the first divergence at `a_star`/real vectors with ~40.5× magnitude gap, confirming Δh≈6.0 stems from unit-scale drift. |
   206	| K3f4 | Record root cause & fix outline | [D] | 2025-11-08 update appended to `base_lattice/summary.md` documenting the placeholder-volume root cause and the 46ba36b fix; evidence lives under `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/`. Coordinate docs/fix_plan Next Actions so K3g3 focuses on scaling parity. |
   207	
   208	#### Phase K3g — MOSFLM real-vector rescale implementation
   209	Goal: Mirror nanoBragg.c’s MOSFLM branch so PyTorch recomputes real lattice vectors, volumes, and reciprocal duals from the supplied A* matrix before φ/mosaic rotations.
   210	Prereqs: K3f4 root-cause doc committed; guard tasks K3a/K3b still green.
   211	Exit Criteria: `Crystal.compute_cell_tensors` updates documented with in-code C reference, `tests/test_cli_scaling.py::test_f_latt_square_matches_c` passes at default tolerances, Δh/Δk/Δl in base trace <5e-4, and fix_plan Attempt #46 records parity metrics.
   212	
   213	| ID | Task Description | State | How/Why & Guidance |
   214	| --- | --- | --- | --- |
   215	| K3g1 | Recompute MOSFLM cell metrics inside `Crystal.compute_cell_tensors` | [D] | Commit 46ba36b landed MOSFLM branch with C reference, recomputing `V_star`, `V_cell`, `a/b/c` and updating reciprocal duals. See `tests/test_cli_scaling.py::TestMOSFLMCellVectors` and `reports/.../post_fix/cell_tensors_py.txt`. |
   216	| K3g2 | Add regression coverage for MOSFLM cell rebuild | [D] | Added `TestMOSFLMCellVectors::test_mosflm_cell_vectors` validating V_cell and |a|,|b|,|c| to ≤5e-4 against C reference; artifacts stored under `phase_k/base_lattice/post_fix/`. |
   217	| K3g3 | Re-run scaling & parity evidence | [D] | ✅ Attempt #49 (2025-10-06) — `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` now passes after isolating HKL caches; `phase_k/f_latt_fix/post_fix/` holds refreshed traces and nb-compare artifacts. |
   218	
   219	### Phase L — Supervisor Command Normalization
[2025-10-07T02:03:08] tokens used: 181,598
[2025-10-07T02:03:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:03:11] thinking

**Continuing section capture**
[2025-10-07T02:03:12] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '229,320p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:03:12] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '229,320p'" succeeded in 674ms:
   229	| L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
   230	
   231	### Phase L2 — Scaling Chain Audit
   232	Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
   233	Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
   234	Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
   235	
   236	| ID | Task Description | State | How/Why & Guidance |
   237	| --- | --- | --- | --- |
   238	| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
   239	| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
   240	| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
   241	
   242	### Phase L3 — Normalization Fix Implementation
   243	Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
   244	Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
   245	Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
   246	
   247	| ID | Task Description | State | How/Why & Guidance |
   248	| --- | --- | --- | --- |
[2025-10-07T02:03:12] tokens used: 183,349
[2025-10-07T02:03:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:03:15] thinking

**Preparing to reference docs lines**
[2025-10-07T02:03:16] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '448,470p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:03:16] bash -lc "nl -ba docs/fix_plan.md | sed -n '448,470p'" succeeded in 692ms:
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
   458	- Next Actions (2025-11-09 refresh):
   459	  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
   460	  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
   461	  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
   462	- Attempts History:
   463	  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
   464	    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
   465	    Artifacts:
   466	      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
   467	      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-07T02:03:16] tokens used: 185,136
[2025-10-07T02:03:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:03:26] thinking

**Organizing final message structure**
[2025-10-07T02:03:26] exec bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,120p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T02:03:27] bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,120p'" succeeded in 873ms:
     1	## Context
     2	- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
     3	- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
     4	- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
     5	- Gap Snapshot (2025-11-09): Phase A remains untouched; no artifacts exist under `reports/2025-10-vectorization/phase_a/`, so Ralph must prioritise A1–A3 baseline capture before any implementation edits. docs/fix_plan.md item VECTOR-TRICUBIC-001 lists these as the gating next actions.
     6	
     7	### Phase A — Evidence & Baseline Capture
     8	Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
     9	Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
    10	Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.
    11	
    12	| ID | Task Description | State | How/Why & Guidance |
    13	| --- | --- | --- | --- |
    14	| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
    15	| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
    16	| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |
    17	
    18	### Phase B — Tricubic Vectorization Design
    19	Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
    20	Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
[2025-10-07T02:03:27] tokens used: 186,865
[2025-10-07T02:03:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |


[2025-10-07T02:03:33] thinking

**Preparing final summary message**

I'll organize a clear, sectioned final answer covering loop highlights, long-term goals with references to the plan and fixes, hypotheses with evidence and ranking, review of Ralph’s commits with feedback, touched files mentioning line references but no full dumps, and next steps including a note that no tests were run. This structure should present everything comprehensively and clearly.
[2025-10-07T02:03:34] codex

**Loop Highlights**
- Extended the CLI parity roadmap with new Phase L2–L4 audit/fix/validation stages so the scaling gap has a concrete playbook (`plans/active/cli-noise-pix0/plan.md:231`).
- Updated fix-plan guidance to steer Ralph toward the scaling-trace workstream in the next attempt (`docs/fix_plan.md:448`).
- Issued a fresh supervisor memo that points Ralph at Phase L2a instrumentation and logs (`input.md`).

**Long-Term Goals**
- Goal 1 (supervisor command parity): HKL parity is locked, but the 1.26×10⁵ intensity mismatch remains. The new Phase L blocks capture C/Py scaling traces, implement the normalization fix, then rerun nb-compare (`plans/active/cli-noise-pix0/plan.md:231` and `docs/fix_plan.md:458`). Execution now depends on delivering the L2 trace artefacts under `reports/2025-10-cli-flags/phase_l/`.
- Goal 2 (vectorization): Still at Phase A baseline—no artefacts exist yet, so Ralph must record current tricubic/absorption performance before touching code (`plans/active/vectorization.md:1-20`). This work stays queued until the CLI blocker clears.

**Hypotheses & Triage (scaling gap)**
- H1 – Fluence mis-scaling (confidence: medium-high): C logs show 1.27×10²⁴ photons/m², while PyTorch may reuse the default 1.259e26 baseline. Confirm by comparing the `fluence` lines once L2a/L2b traces land (`reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json`). Next step: run the instrumented C command from the new Do Now and inspect the logged fluence.
- H2 – Missing capture_fraction/omega application when oversample=1 (confidence: medium): nb-compare correlation is high but magnitude explodes, matching symptoms of an omitted geometric factor. L2 traces should dump `omega_pixel` and `capture_fraction` to validate parity.
- H3 – Steps divisor mismatch (confidence: low-medium): A double divide or wrong step count (should be 10) would produce an exact power-of-ten error. Verify the `steps` values captured during the L2 audit to rule this out quickly.

**Ralph Review (last ~10 iterations)**
- Commit `572217b` raised HKL/Fdump parity coverage with solid regression tests and passed locally—good evidence discipline, no regressions spotted.
- Commit `3e47b38` added the fresh C cache + parity artefacts, keeping docs in sync. Overall work productively cleared Phase L1; no course correction needed.

**Next Steps for Ralph**
1. Execute Phase L2a per the new input memo: instrument `golden_suite_generator/nanoBragg.c`, rebuild, and capture `c_trace_scaling.log`.
2. Follow with Phase L2b/L2c: mirror the trace variables in the PyTorch harness, diff results, and log Attempt #55 once the first divergent factor is identified.

Tests not run (evidence-only loop).
[2025-10-07T02:03:42] tokens used: 189,218
[2025-10-07T02:03:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 164fdb2dd3b3c2afeff87424840dd5075155bc5c..04cc9ab19c126d45103befc41fb9a692b39e42e3
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase K3e evidence reveals a **fundamental lattice/geometry mismatch**, not a φ-grid offset. C reports `k_frac≈−3.857` across all φ steps while PyTorch reports `k_frac≈−9.899` (Δk≈6.04 at φ=0°). This 6-unit discrepancy indicates the base reciprocal lattice vectors or scattering geometry differ before any φ rotation is applied.
-- Next Actions (2025-10-17 sync):
-  1. Phase L1b ✅ — Layout analysis complete (Attempt #52). `scripts/validation/analyze_fdump_layout.py` + `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md` document that nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via the `for(h0=0; h0<=h_range; h0++)` loops, leaving 9,534 zero-padded entries per cache.
-  2. Phase L1c ✅ — (Attempt #53) Updated PyTorch HKL cache IO (`src/nanobrag_torch/io/hkl.py::read_fdump`/`write_fdump`) to match C padding layout exactly. Added regression test `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` achieving max |ΔF| = 0.0 (perfect parity). Fixed h_range calculation to C-style (h_max - h_min + 1), padded writes to (range+1)³, trimmed reads to range³.
-  3. Phase L1d ✅ — (Attempt #54) Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly.
+- Next Actions (2025-11-09 refresh):
+  1. Phase L2a — Instrument nanoBragg.c scaling chain and capture TRACE_C logs under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log` (commit instrumentation separately, then revert per SOP).
+  2. Phase L2b — Extend PyTorch trace harness to log identical scaling terms (I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence) and store output as `trace_py_scaling.log` in the same directory.
+  3. Phase L2c — Diff the traces via `compare_scaling_traces.py`, author `scaling_audit_summary.md` with first-divergence metrics, and log Attempt #55 referencing plan Phase L2.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 999850143eddb96496cc3c52dfb3957175404d9c..ae6351854e3ad2c9d342b8b0ea166cc7afbefd22
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1385,3 +1385,14 @@
 - Authored new `input.md` (Mode=Parity) directing Ralph to regenerate the C Fdump cache and rerun `scripts/validation/compare_structure_factors.py` for Phase L1d, storing outputs under `reports/2025-10-cli-flags/phase_l/hkl_parity/`.
 - Hypotheses refined: (1) With padding fix, expect HKL parity to hit max |ΔF| ≤ 1e-6 once rerun; (2) if Δk≈6 persists afterward, capture fresh per-φ traces (Plan K3f/K3g) to isolate reciprocal-vector drift; (3) remaining intensity gap likely tied to sincg normalization order pending new evidence.
 - Follow-up for Ralph: Execute L1d per memo, update docs/fix_plan Attempts with metrics, and prep Phase L2 scaling diagnostics if parity clears.
+
+## 2025-11-09 (galph loop — Phase L2 kickoff)
+- Coin flip landed heads; reviewed recent Ralph commits (`572217b`, `3e47b38`) — HKL padding/parity artifacts look solid, no regressions observed.
+- Deep-dive into CLI parity status: scaling mismatch (sum_ratio≈1.26e5) still open; plan lacked Phase L coverage beyond L1. Vectorization initiative remains untouched pending CLI closure.
+- Updated `plans/active/cli-noise-pix0/plan.md` with Phases L2–L4 (scaling audit → normalization fix → supervisor rerun) including checklist tasks and artifact targets under `reports/2025-10-cli-flags/phase_l/`.
+- Refreshed `docs/fix_plan.md` Next Actions to point Ralph at Phase L2a–L2c; authored new `input.md` instructing instrumentation + C trace capture for the scaling audit.
+- Hypotheses (scaling divergence):
+  1. Missing capture_fraction/omega application during oversample=1 path (Confidence: medium; C LOG shows capture_fraction=1 even when oversample flags off). Next confirming step: inspect TRACE_C vs TRACE_PY ordering once L2 traces exist.
+  2. Misapplied steps divisor (possible double divide) leading to ×10 discrepancy that compounds with other factors (Confidence: low-medium). Next step: compare `steps` values logged in L2 traces.
+  3. Fluence scaling mismatch (BeamConfig vs C computed area) causing ×~1.27e5 ratio (Confidence: medium-high, matches numeric magnitude). Next step: verify fluence logged from C vs PyTorch traces in L2a/L2b.
+- Follow-up for Ralph: execute new input.md focusing on Phase L2a; once traces captured, proceed through L2b/L2c before touching implementation.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4a9b8f12465e9c82e47ecddcc8fd0598b6c767bf..20a81e37db58b607114c96ae70718f234c7ef8cd
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -227,3 +227,37 @@
 | L1b | Diagnose binary-layout mismatch between HKL and Fdump | [D] | ✅ Attempt #52 (2025-10-06) produced `scripts/validation/analyze_fdump_layout.py` plus `reports/2025-10-cli-flags/phase_l/hkl_parity/layout_analysis.md`. Confirmed nanoBragg writes `(h_range+2)×(k_range+2)×(l_range+2)` voxels via `for(h0=0; h0<=h_range; h0++)` loops (see `nanoBragg.c:2400-2486`), leaving 9,534 zero-padded entries. PyTorch reader must drop the padded plane per axis. |
 | L1c | Align PyTorch HKL cache reader/writer with confirmed layout | [D] | ✅ Attempt #53 (2025-10-17): Updated `src/nanobrag_torch/io/hkl.py` to honour `(range+1)` padding, added C-code docstring quotes per Rule #11, and introduced `tests/test_cli_flags.py::TestHKLFdumpParity::test_scaled_hkl_roundtrip` (max |ΔF| = 0.0, mismatches = 0). |
 | L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |
+
+### Phase L2 — Scaling Chain Audit
+Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
+Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
+Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L2a | Instrument C scaling chain | [ ] | Add TRACE_C lines around nanoBragg.c intensity scaling loop (lines 3005-3095, 3240-3335). Recompile via `make -C golden_suite_generator`. Run the supervisor command with `NB_C_BIN=./golden_suite_generator/nanoBragg` and stash stdout under `reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`. Document edits in `instrumentation_notes.md` before removing instrumentation. |
+| L2b | Extend PyTorch trace harness | [ ] | Update `reports/2025-10-cli-flags/phase_i/supervisor_command/trace_harness.py` (or create `phase_l/scaling_audit/trace_harness.py`) to log the same quantities: I_before_scaling, ω, polarization, capture_fraction, steps, r_e², fluence, final intensity. Execute with `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python trace_harness.py` and store output as `trace_py_scaling.log`. |
+| L2c | Diff traces & record first divergence | [ ] | Build a comparison notebook or script (`compare_scaling_traces.py`) that aligns TRACE_C vs TRACE_PY lines and reports percentage deltas per factor. Summarize findings in `scaling_audit_summary.md`, explicitly calling out the earliest divergent term and hypothesized root cause. Update docs/fix_plan.md Attempt #55 with key metrics. |
+
+### Phase L3 — Normalization Fix Implementation
+Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
+Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
+Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L3a | Implement scaling fix in simulator | [ ] | Modify `src/nanobrag_torch/simulator.py` (likely around lines 930-1085) to mirror the C normalization order confirmed in L2. Include mandatory C-code quote per Rule #11. Ensure device/dtype neutrality (no `.cpu()`/`.item()` in differentiable paths). |
+| L3b | Add targeted regression test | [ ] | Extend `tests/test_cli_scaling.py` with a supervisor-command fixture that asserts PyTorch I_before_scaling, ω, polarization, and final intensity match pre-recorded C values within tolerances (≤1e-6 relative). Parametrise over CPU/CUDA when available. |
+| L3c | Validate scaling via script | [ ] | Create `scripts/validation/compare_scaling_chain.py` that consumes the C/Py traces from L2 and reports pass/fail deltas. Run `KMP_DUPLICATE_LIB_OK=TRUE python scripts/validation/compare_scaling_chain.py --c-log ... --py-log ...` and archive output JSON under `reports/2025-10-cli-flags/phase_l/scaling_validation/metrics.json`. |
+| L3d | Update documentation & plans | [ ] | Refresh `docs/fix_plan.md` Attempt history with fix summary, link artifacts, and update this plan table to `[D]` where applicable. If scaling logic touches spec details, annotate `docs/architecture/pytorch_design.md` accordingly. |
+
+### Phase L4 — Supervisor Command Parity Rerun
+Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
+Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
+Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.
+
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| L4a | Rerun supervisor command parity | [ ] | Execute the authoritative command from `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md`, writing outputs to a new timestamped directory. Capture `summary.json`, stdout/stderr, and SHA256 hashes. |
+| L4b | Analyze results & log attempt | [ ] | Update `supervisor_command_rerun/README.md` with metrics, confirm thresholds met, and log Attempt #56 in docs/fix_plan.md summarizing deltas. |
+| L4c | Finalize documentation | [ ] | If parity passes, move key artifacts to `reports/archive/` per SOP, update plan status to ready-for-archive, and prepare closing notes for CLI-FLAGS-003. If parity fails, loop back to L2 with findings. |

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   4119716..025c020  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=61...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=61
Updating 025c020..bd59e66
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   025c020..bd59e66  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=61
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating bd59e66..f3f116b
Fast-forward
 docs/fix_plan.md                                   |  13 +
 .../phase_l/scaling_audit/c_trace_scaling.log      | 342 +++++++++++++++++++++
 .../phase_l/scaling_audit/instrumentation_notes.md | 137 +++++++++
 3 files changed, 492 insertions(+)
 create mode 100644 reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/scaling_audit/instrumentation_notes.md
From github.com:hoidn/nanoBragg
   bd59e66..f3f116b  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating f3f116b..255b404
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   f3f116b..255b404  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=62
Ralph completed iteration 61; proceeding to 62
