Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=50
To github.com:hoidn/nanoBragg.git
   d24d039..d8bed8a  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-06T21:29:10] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-06T21:29:10] User instructions:
<role>
planning, review and analysis. do not make code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 


Debugging Items — Hypothesis + Triage (initial pass):
- Only when the selected item is a debugging or parity analysis task, formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</yes case>
</no case>
- Since you decided there's no need for planning, you will instead focus on review / housekeeping. 
- Once the above is done (or deemed unneeded): review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for this turn.
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</no case>
</3>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
- Phase: <Evidence | Implementation | Validation>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: When the Phase is Evidence, you must not execute tests; any pytest command included here is provided for Ralph’s subsequent loop.
<Do Now guidelines>
Phase Gate (Evidence): If the active plan phase is Evidence, do not run pytest at all (including collection). Limit evidence gathering to non-test probes and command‑line tooling (e.g., scripts/validation/*, minimal parity CLIs). Do not include runnable tests in this loop.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
</3.5>
<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>.


[2025-10-06T21:29:14] thinking

**Preparing to run git pull rebase**
[2025-10-06T21:29:15] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:17] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.06s:
Already up to date.
[2025-10-06T21:29:17] tokens used: 10,777

[2025-10-06T21:29:19] thinking

**Preparing to read documentation**
[2025-10-06T21:29:20] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:21] bash -lc 'cat galph_memory.md' succeeded in 689ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-06T21:29:21] tokens used: 11,633

[2025-10-06T21:29:25] thinking

**Preparing to read key documentation files**
[2025-10-06T21:29:26] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:26] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 670ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-06T21:29:26] tokens used: 15,352

[2025-10-06T21:29:28] thinking

**Reviewing initial lines of spec file**
[2025-10-06T21:29:28] exec bash -lc "sed -n '1,160p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:29] bash -lc "sed -n '1,160p' specs/spec-a.md" succeeded in 674ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-06T21:29:29] tokens used: 16,993

[2025-10-06T21:29:31] thinking

**Considering shard and architecture files**
[2025-10-06T21:29:32] exec bash -lc "sed -n '1,160p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:32] bash -lc "sed -n '1,160p' arch.md" succeeded in 690ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-06T21:29:32] tokens used: 17,331

[2025-10-06T21:29:34] thinking

**Reviewing config map documentation**
[2025-10-06T21:29:34] exec bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:35] bash -lc "sed -n '1,160p' docs/development/c_to_pytorch_config_map.md" succeeded in 711ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-06T21:29:35] tokens used: 20,194

[2025-10-06T21:29:36] thinking

**Preparing to read debugging documentation**
[2025-10-06T21:29:37] exec bash -lc "sed -n '1,160p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:37] bash -lc "sed -n '1,160p' docs/debugging/debugging.md" succeeded in 676ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-06T21:29:37] tokens used: 22,067

[2025-10-06T21:29:40] thinking

**Previewing fix_plan.md contents**
[2025-10-06T21:29:41] exec bash -lc "sed -n '1,160p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:41] bash -lc "sed -n '1,160p' docs/fix_plan.md" succeeded in 691ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
| [CLI-DTYPE-002](#cli-dtype-002-cli-dtype-parity) | CLI dtype parity | High | in_progress |
[2025-10-06T21:29:41] tokens used: 24,794

[2025-10-06T21:29:47] thinking

**Noting large file truncation**
[2025-10-06T21:29:51] exec bash -lc "sed -n '1,160p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:52] bash -lc "sed -n '1,160p' docs/development/testing_strategy.md" succeeded in 657ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-06T21:29:52] tokens used: 27,702

[2025-10-06T21:29:55] thinking

**Inspecting active plans directory**
[2025-10-06T21:29:56] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:56] bash -lc 'ls plans/active' succeeded in 650ms:
cli-noise-pix0
gradcheck-tier2-completion
perf-pytorch-compile-refactor
routing-loop-guard
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-06T21:29:56] tokens used: 30,325

[2025-10-06T21:29:58] thinking

**Reviewing vectorization documentation**
[2025-10-06T21:29:59] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:29:59] bash -lc 'cat plans/active/vectorization.md' succeeded in 675ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py -v` ⇒ save log to `reports/2025-10-vectorization/phase_a/test_at_str_002.log`; confirm nearest-neighbour fallback warning message appears for batched inputs. |
| A2 | Measure current tricubic runtime | [ ] | Author `scripts/benchmarks/tricubic_baseline.py` (device/dtype neutral, honours `KMP_DUPLICATE_LIB_OK=TRUE`) and run `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/tricubic_baseline.py --sizes 256 512 --repeats 5`. Capture CPU timings (and CUDA when available) in `phase_a/tricubic_baseline.md` plus raw JSON/CSV under `phase_a/tricubic_baseline_results.json`. |
| A3 | Record detector absorption baseline | [ ] | Create `scripts/benchmarks/absorption_baseline.py` mirroring A2's interface; execute `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/absorption_baseline.py --sizes 256 512 --repeats 5` alongside `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v`. Store logs in `phase_a/absorption_baseline.md` and metrics in `phase_a/absorption_baseline_results.json`. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
Prereqs: Phase A artifacts uploaded and referenced in docs/fix_plan.md.
Exit Criteria: Design memo (`reports/2025-10-vectorization/phase_b/design_notes.md`) describing target shapes, indexing strategy, gradient expectations, and failure modes; docs/fix_plan.md updated with summary and link.
[2025-10-06T21:29:59] tokens used: 30,559

[2025-10-06T21:30:01] thinking

**Checking related CLI plans**
[2025-10-06T21:30:02] exec bash -lc "sed -n '1,160p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:02] bash -lc "sed -n '1,160p' plans/active/cli-noise-pix0/plan.md" succeeded in 689ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
- Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
- Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
- Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
- Documentation anchors for this focus:
  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
  * `golden_suite_generator/nanoBragg.c` (≈2993-3151) — definitive implementation of the sincg calls and rounding logic.
  * `docs/architecture/pytorch_design.md` — simulator reference; docstring currently claims full-h usage and must be updated post-fix.
  * `docs/development/testing_strategy.md` — authoritative pytest/trace commands for CLI parity evidence.

[2025-10-06T21:30:02] tokens used: 33,161

[2025-10-06T21:30:13] thinking

**Analyzing long-term goals and plans**
[2025-10-06T21:30:19] exec bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:20] bash -lc 'rg -n "CLI-FLAGS-003" docs/fix_plan.md' succeeded in 882ms:
21:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
448:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-06T21:30:20] tokens used: 36,853

[2025-10-06T21:30:22] thinking

**Checking specific line section**
[2025-10-06T21:30:22] exec bash -lc "sed -n '448,640p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:23] bash -lc "sed -n '448,640p' docs/fix_plan.md" succeeded in 683ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
[2025-10-06T21:30:23] tokens used: 37,160

[2025-10-06T21:30:27] thinking

**Planning initial steps**
[2025-10-06T21:30:27] exec bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:28] bash -lc "python - <<'PY'
import random
print(random.choice(['heads','tails']))
PY" succeeded in 719ms:
tails
[2025-10-06T21:30:28] tokens used: 40,307

[2025-10-06T21:30:40] thinking

**Analyzing plan update necessity**
[2025-10-06T21:30:42] exec bash -lc "sed -n '364,447p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:42] bash -lc "sed -n '364,447p' docs/fix_plan.md" succeeded in 757ms:
    Metrics: n/a
    Artifacts: To be captured during Phase A (see plan tasks A1–A3).
    Observations/Hypotheses: Likely rebase dropped prior fix; guard needs reinstatement alongside single-iteration workflow.
    Next Actions: Execute Phase A to document current state, then complete Phases B–C per plan.
  * [2025-10-01] Attempt #1 — Result: success. `loop.sh` now runs a single `git pull` and invokes `prompts/debug.md` only; verification captured in `reports/routing/2025-10-01-loop-verify.txt`.
    Metrics: n/a
    Artifacts: reports/routing/2025-10-01-loop-verify.txt
    Observations/Hypotheses: Guard prevents Ralph from re-entering prompts/main.md while parity tests fail.
    Next Actions: Monitor automation once AT suite is fully green before permitting main prompt.
  * [2025-10-01] Attempt #5 — Result: success (plan Phases A–C complete). Captured audit showing violations (40-iteration loop using prompts/main.md with unconditional push), remediated script to single-execution prompts/debug.md with git pull --rebase and conditional push, verified compliance.
    Metrics: Crystal geometry smoke test 19/19 passed post-change; no regressions.
    Artifacts: reports/routing/20251001-loop-audit.txt (Phase A), reports/routing/20251001-compliance-verified.txt (Phase C), loop.sh (git diff).
    Observations/Hypotheses: Regression had doubled to 40 iterations from prior 20; routing guard now restored per plan exit criteria (single debug.md execution, conditional push, rebase-before-work).
    Next Actions: ✅ Plan archived; continue monitoring automation for future regressions.
  * [2025-10-01] Attempt #9 — Result: success (audit verification complete). Re-ran Phase A audit to confirm loop.sh remains compliant after commit 853cf08 restoration.
    Metrics: loop.sh matches ffd9a5c baseline exactly (zero diff), all three guard elements present.
    Artifacts: `reports/routing/20251001-loop-audit-verification.txt` (comprehensive compliance check showing: timeout 30 git pull --rebase at line 10, prompts/debug.md at line 23, conditional push at lines 26-34).
    Observations/Hypotheses: Despite fix_plan status showing "in_progress", the script is already fully compliant. The confusion arose because Attempt #6 detected regression at c49e3be but Attempt #8 had already resolved it at commit 853cf08. Current HEAD (611cc12) maintains compliance.
    Next Actions: Mark ROUTING-LOOP-001 as done; archive plan to `plans/archive/routing-loop-guard/` per Phase C3 guidance.
- Risks/Assumptions: Ensure future automation edits maintain routing guard.
[2025-10-06T21:30:42] tokens used: 41,071

[2025-10-06T21:30:45] thinking

**Locating vectorization section**
[2025-10-06T21:30:46] exec bash -lc "sed -n '284,360p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:46] bash -lc "sed -n '284,360p' docs/fix_plan.md" succeeded in 677ms:

---


## [PERF-PYTORCH-005-CUDAGRAPHS] CUDA graphs compatibility
- Spec/AT: Core Rule #16 (PyTorch Device & Dtype Neutrality), docs/development/pytorch_runtime_checklist.md §1.4
- Priority: High
- Status: done
- Owner/Date: ralph/2025-09-30 (resolved during PERF-PYTORCH-004 Attempt #19)
- Reproduction (C & PyTorch):
  * C: n/a (CUDA-specific PyTorch issue)
  * PyTorch: `env KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/benchmark_detailed.py --sizes 256 --device cuda --iterations 2`
  * Shapes/ROI: Any detector size on CUDA device
- First Divergence (if known): RuntimeError (`accessing tensor output of CUDAGraphs that has been overwritten by a subsequent run`) at `simulator.py:349` when torch.compile enables CUDA graphs.
- Attempts History:
  * [2025-09-30] Attempt #1 — Result: documented blocker. CUDA execution of P3.3 benchmarks crashed once torch.compile enabled CUDA graphs.
    Metrics: n/a (run aborted).
    Artifacts: /tmp/cuda_benchmark_20250930-214118.log.
    Observations/Hypotheses: Aliased views of `incident_beam_direction` violate CUDA graphs memory safety. Options considered: clone tensors, restructure broadcast, disable graphs, or mark graph step boundaries.
    Next Actions: Prototype clone-based fix prior to disabling graphs.
[2025-10-06T21:30:46] tokens used: 82,432

[2025-10-06T21:30:48] thinking

**Searching for VECTOR-TRICUBIC-001 details**
[2025-10-06T21:30:49] exec bash -lc "sed -n '216,284p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:50] bash -lc "sed -n '216,284p' docs/fix_plan.md" succeeded in 695ms:
    Next Actions: Mark P3.0c as `[X]` in plan; proceed with Phase 3 memo (P3.5) incorporating existing CPU/CUDA benchmark data and the 1024² CPU deficit analysis.
  * [2025-10-10] Attempt #22 (supervisor loop BD) — Result: invalidates Attempt #21. `scripts/validate_weighted_source_normalization.py` mutates `simulator.source_directions/weights/wavelengths`, but the simulator only uses `_source_*` tensors populated from `BeamConfig` during `__init__`. The run therefore fell back to the single-source branch, so the recorded CPU/CUDA totals do not exercise unequal weights. Weighted-source parity evidence remains outstanding.
    Metrics: Analysis only (confirmed `_source_directions is None` after running the script).
    Artifacts: n/a — findings logged here and in `plans/active/perf-pytorch-compile-refactor/plan.md` (P3.0c row).
    Observations/Hypotheses: Need a harness that feeds multi-source tensors through `BeamConfig` (or directly updates `_source_*` caches) before instantiating `Simulator`. Until that exists, P3.0c cannot close nor can Phase 3 be declared complete.
    Next Actions: Repair the validation script, regenerate CPU/CUDA results with unequal weights, archive outputs under `reports/benchmarks/<date>-multi-source-normalization/`, then resume P3.2/P3.3 and P3.5.
  * [2025-09-30] Attempt #26 (ralph loop) — Result: P3.0c COMPLETE (validated). Fixed validation script to use repo-relative path (line 168-174), resolved FileNotFoundError. Re-ran validation successfully with weighted sources (2.0 & 3.0 weights, λ 6.2Å & 8.0Å) plumbed through BeamConfig constructor.
    Metrics: CPU total=5.750597e-05, CUDA total=5.750608e-05, rel_diff=1.771353e-06 (<0.0002% vs threshold 0.01%). Multi-source caching verified: directions shape torch.Size([2,3]), wavelengths [6.2Å, 8.0Å], weights [2.0, 3.0].
    Artifacts: `reports/benchmarks/20250930-multi-source-normalization/validation_results.json`; corrected `scripts/validate_weighted_source_normalization.py` (Path-based output).
    Observations/Hypotheses: Validation now exercises BeamConfig-based source injection, confirming _source_* tensors are properly cached during Simulator.__init__. CPU/CUDA self-consistency proven with unequal weights. Phase 3 decision memo can proceed using existing P3.2/P3.3 benchmark data.
    Next Actions: Mark P3.0c as complete in plan.md; Phase 3 complete—all tasks delivered with valid parity evidence.
  * [2025-10-11] Attempt #27 (supervisor loop BH) — Result: follow-up required. Commit 0a78312 removed the absolute output path but still hard-codes the directory name (`reports/benchmarks/20250930-multi-source-normalization/`), so repeated runs overwrite evidence and Phase A0 remains only partially satisfied. Plan updated to `[P]` with guidance to parameterise the stamp/CLI override before closing the task.
    Metrics: n/a (analysis only).
    Artifacts: plans/active/perf-pytorch-compile-refactor/plan.md (A0 row updated).
    Observations/Hypotheses: Need dynamic stamping (e.g., timestamped directory or CLI argument) so future reruns land under `reports/benchmarks/<date>-.../` per plan expectations. Until then Phase A baseline capture remains blocked.
    Next Actions: Ralph to extend the script with an `--out` flag or timestamped default, rerun validation, and update plan/fix-plan entries with new artifact paths.
  * [2025-10-01] Attempt #28 (ralph loop BJ) — Result: success. Added timestamped default directory and `--outdir` CLI flag to `scripts/validate_weighted_source_normalization.py`.
    Metrics: Validation run successful (CPU total=5.750597e-05, CUDA total=5.750608e-05, rel_diff=1.771353e-06). Core geometry tests 31/31 passed in 5.26s.
    Artifacts: `reports/benchmarks/20251001-004135-multi-source-normalization/validation_results.json` (timestamped), `reports/benchmarks/custom-test/validation_results.json` (CLI override test).
    Observations/Hypotheses: Script now defaults to `reports/benchmarks/YYYYMMDD-HHMMSS-multi-source-normalization/` pattern, ensuring successive runs produce unique directories. CLI flag `--outdir` allows explicit override (relative or absolute paths). Fix unblocks Phase A baseline capture.
[2025-10-06T21:30:50] tokens used: 86,571

[2025-10-06T21:30:52] thinking

**Continuing search for vectorization section**
[2025-10-06T21:30:53] exec bash -lc "sed -n '160,220p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:54] bash -lc "sed -n '160,220p' docs/fix_plan.md" succeeded in 661ms:
  * [2025-10-06] Attempt #12 — Result: supervisor audit. Re-reviewed post-dtype-default commits (`fcbb93a`, `904dc9b`, `b06a6d6`, `8c2ceb4`) and confirmed Phase 3 blockers remain unresolved despite checklist boxes being marked complete.
    Metrics: Analysis only.
    Artifacts: n/a (code review only; see citations below).
    Observations/Hypotheses: (1) `Simulator.__init__` still calls `.to(...)` on `beam_config.source_wavelengths`/`source_weights` without guarding for `None`, so divergence configs that rely on auto-generated tensors crash immediately (`src/nanobrag_torch/simulator.py:427-441`). (2) Multi-source polarization continues to reuse only the first source direction, leaving secondary sources unpolarized and violating AT-SRC-001 (`simulator.py:775-822` and `simulator.py:894-950`). (3) The `steps` normalization still divides by `source_weights.sum()` so intensities average instead of summing (`simulator.py:687-695`). (4) ROI masks and external masks are rebuilt from scratch on every run, causing allocator churn and keeping CPU benchmarks slower than C even after warm caches (`simulator.py:611-629`).
    Next Actions: Re-open plan tasks P3.0/P3.0b/P3.0c/P3.4 in code, implement guarded seeding + per-source polarization + post-sum weighting before normalization, then hoist ROI/misset tensors ahead of re-running benchmarks. Only after those fixes land should Ralph resume P3.2/P3.3 measurements.
  * [2025-10-06] Attempt #13 — Result: supervisor audit (galph loop AS). Confirmed that current HEAD still averages multi-source intensities via `steps` (dividing by `source_weights.sum()`/`n_sources`) and applies polarization using only the primary source (`incident_dirs_batched[0]`) in both oversample and pixel-center paths (`src/nanobrag_torch/simulator.py:714-779, 879-944`). ROI mask reconstruction (`simulator.py:626-642`) and repeated `.to()` conversions on cached detector grids persist, so allocator churn remains a CPU bottleneck. No benchmarks or traces executed this loop.
    Metrics: Analysis only.
    Artifacts: None — findings recorded in `plans/active/perf-pytorch-compile-refactor/plan.md` (Phase 3 notes) and galph_memory.md (2025-10-06 loop AS entry).
    Observations/Hypotheses: Physics semantics unchanged since Attempt #12; Ralph must land P3.0b/P3.0c fixes before new performance data is meaningful. ROI/misset caching (P3.4) and source guard rails remain prerequisites to re-running P3.2/P3.3 benchmarks.
    Next Actions: Same as Attempt #12 — execute plan tasks P3.0b/P3.0c/P3.4 under `prompts/debug.md`, capturing 3-source C/Py traces and refreshed CPU benchmarks once fixes land.
  * [2025-10-07] Attempt #14 — Result: supervisor audit. Reconciled AT-SRC-001 in `specs/spec-a-core.md` with current simulator behavior; confirmed `steps` must divide by the **count** of sources (not the sum of weights) and that ROI mask regeneration at `simulator.py:611-705` remains a CPU bottleneck. Updated `plans/active/perf-pytorch-compile-refactor/plan.md` Phase 3 table with spec citations, explicit reproduction commands (`pytest tests/test_multi_source_integration.py::test_multi_source_intensity_normalization`, `nb-compare --sourcefile ...`) and profiler artifact expectations.
    Metrics: Analysis only.
    Artifacts: plans/active/perf-pytorch-compile-refactor/plan.md (Phase 3 table stamped 2025-10-07), galph_memory.md (loop entry pending at close of supervisor run).
    Observations/Hypotheses: Current code still violates AT-SRC-001 normalization and per-source polarization; ROI/misset tensors and detector constants are rebuilt each run, explaining persistent allocator churn in CPU benchmarks. These must be corrected before any new performance numbers are credible.
    Next Actions: Ralph to execute updated plan tasks P3.0–P3.0c (multi-source defaults, per-source polarization, normalization) and P3.4 (ROI/misset caching) with the new artifact targets before rerunning P3.2/P3.3 benchmarks.
  * [2025-10-08] Attempt #15 — Result: supervisor audit. Re-read `Simulator.run`/`compute_physics_for_position` and confirmed multi-source polarization still collapses to the primary source direction (`incident_dirs_batched[0]`) in both oversample and pixel-center paths; ROI mask allocation and detector grid `.to()` casts re-run every invocation. New `source_norm = n_sources` logic is present but unverified against C weighting.
    Metrics: Analysis only.
    Artifacts: None (findings logged in galph_memory.md — 2025-10-08 loop AY entry).
    Observations/Hypotheses: (1) Polarization should be computed per-source before reduction; current broadcast turns Kahn factors into an average. (2) `roi_mask = torch.ones(...)` (`simulator.py:618-635`) and `detector.get_pixel_coords().to(...)` rebuild large tensors per call, blocking P3.4’s allocator goals. (3) The revised `source_norm = n_sources` path needs validation with a weighted multi-source test to ensure it matches C output. 
    Next Actions: Ralph to execute plan tasks P3.0b (per-source polarization) and P3.0c (normalization validation with weighted sources) with new trace/benchmark artifacts, then deliver P3.4 ROI/misset caching before re-running P3.2/P3.3 benchmarks.
[2025-10-06T21:30:54] tokens used: 90,156

[2025-10-06T21:30:58] thinking

**Searching for vectorization section**
[2025-10-06T21:30:58] exec bash -lc 'grep -n "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:30:59] bash -lc 'grep -n "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' succeeded in 683ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_planning |
1262:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-06T21:30:59] tokens used: 91,661

[2025-10-06T21:31:00] thinking

**Navigating to specific line**
[2025-10-06T21:31:01] exec bash -lc "sed -n '1262,1400p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:02] bash -lc "sed -n '1262,1400p' docs/fix_plan.md" succeeded in 680ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_planning (Phase A evidence outstanding)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions:
  1. Execute plan Phase A tasks A1–A3: author the reusable `scripts/benchmarks/tricubic_baseline.py` and `absorption_baseline.py` harnesses, capture pytest + timing artifacts under `reports/2025-10-vectorization/phase_a/`, and record Attempt #1 in this entry.
  2. Complete Phase B design memo (tensor shapes, broadcasting, gradients) before editing code; update this item with design references (`phase_b/design_notes.md`).
  3. Prioritise Phase C/D implementation work on tricubic interpolation, followed by Phase E parity/perf validation. Detector absorption vectorization (Phase F) follows once tricubic work is stable.
- Attempts History:
  * (pending) — Capture Phase A baseline artifacts and update this log.
- Risks/Assumptions: Must maintain differentiability (no `.item()`, no `torch.linspace` with tensor bounds), preserve device/dtype neutrality (CPU/CUDA parity), and obey Protected Assets rule (all new scripts under `scripts/benchmarks/`). Large tensor indexing may increase memory pressure; ensure ROI caching still works.
- Exit Criteria (quote thresholds from spec):
  * specs/spec-a-parallel.md §2.3 tricubic acceptance tests run without warnings and match C parity within documented tolerances (corr≥0.9995, ≤1e-12 structural duality where applicable).
[2025-10-06T21:31:02] tokens used: 94,761

[2025-10-06T21:31:08] thinking

**Preparing for detailed code analysis**
[2025-10-06T21:31:08] exec bash -lc "sed -n '450,620p' src/nanobrag_torch/models/detector.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:09] bash -lc "sed -n '450,620p' src/nanobrag_torch/models/detector.py" succeeded in 697ms:
            min_ratio = torch.tensor(1e-10, device=self.device, dtype=self.dtype)
            ratio = torch.where(
                torch.abs(ratio) < min_ratio,
                torch.sign(ratio) * min_ratio,
                ratio
            )
            # Handle zero case
            ratio = torch.where(
                ratio == 0,
                min_ratio,
                ratio
            )

            # Update distance based on r-factor
            # If close_distance is specified, use it; otherwise calculate from nominal distance
            if hasattr(self.config, 'close_distance_mm') and self.config.close_distance_mm is not None:
                close_distance = self.config.close_distance_mm / 1000.0  # Convert mm to meters
            else:
                close_distance = abs(ratio * self.distance)  # Default from C code

[2025-10-06T21:31:09] tokens used: 96,967

[2025-10-06T21:31:11] thinking

**Verifying tensor computation method**
[2025-10-06T21:31:12] exec bash -lc 'rg -n "compute_cell_tensors" -n src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:13] bash -lc 'rg -n "compute_cell_tensors" -n src/nanobrag_torch/models/crystal.py' succeeded in 700ms:
412:    def compute_cell_tensors(self) -> dict:
762:    def _compute_cell_tensors_cached(self):
764:        Cached version of compute_cell_tensors to avoid redundant calculations.
772:        return self.compute_cell_tensors()
777:        return self._compute_cell_tensors_cached()["a"]
782:        return self._compute_cell_tensors_cached()["b"]
787:        return self._compute_cell_tensors_cached()["c"]
792:        return self._compute_cell_tensors_cached()["a_star"]
797:        return self._compute_cell_tensors_cached()["b_star"]
802:        return self._compute_cell_tensors_cached()["c_star"]
807:        return self._compute_cell_tensors_cached()["V"]
822:        1. Static missetting rotation (already applied to reciprocal vectors in compute_cell_tensors)
[2025-10-06T21:31:13] tokens used: 101,318

[2025-10-06T21:31:15] thinking

**Reviewing compute_cell_tensors context**
[2025-10-06T21:31:17] exec bash -lc "sed -n '412,620p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:18] bash -lc "sed -n '412,620p' src/nanobrag_torch/models/crystal.py" succeeded in 871ms:
    def compute_cell_tensors(self) -> dict:
        """
        Calculate real and reciprocal space lattice vectors from cell parameters.

        This is the central, differentiable function for all geometry calculations.
        Uses the nanoBragg.c convention to convert cell parameters (a,b,c,α,β,γ)
        to real-space and reciprocal-space lattice vectors.

        This method now supports general triclinic cells and maintains full
        differentiability for all six cell parameters. The computation graph
        is preserved for gradient-based optimization.

        The implementation follows the nanoBragg.c default orientation convention:
        - a* is placed purely along the x-axis
        - b* is placed in the x-y plane
        - c* fills out 3D space

        C-Code Implementation Reference (from nanoBragg.c):

        Volume calculation from cell parameters (lines 1798-1808):
[2025-10-06T21:31:18] tokens used: 101,755

[2025-10-06T21:31:19] thinking

**Continuing investigation of cross-product rescale**
[2025-10-06T21:31:20] exec bash -lc "sed -n '620,840p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:21] bash -lc "sed -n '620,840p' src/nanobrag_torch/models/crystal.py" succeeded in 896ms:
            # Convert radians to degrees and update config
            self.config.misset_deg = (
                math.degrees(rotx),
                math.degrees(roty),
                math.degrees(rotz)
            )

            # Log the generated angles (matching C output format)
            if hasattr(self, 'logger') and self.logger:
                self.logger.info(
                    f"random orientation misset angles: "
                    f"{self.config.misset_deg[0]:.6f} "
                    f"{self.config.misset_deg[1]:.6f} "
                    f"{self.config.misset_deg[2]:.6f} deg"
                )

        # CRITICAL ORDER: Apply misset to INITIAL reciprocal vectors BEFORE real-space calculation
        # This matches C-code sequence (nanoBragg.c lines 2025-2034: misset applied to initial vectors)
        if hasattr(self.config, "misset_deg") and any(
            angle != 0.0 for angle in self.config.misset_deg
[2025-10-06T21:31:21] tokens used: 104,287

[2025-10-06T21:31:25] thinking

**Reviewing rescale gating implementation**
[2025-10-06T21:31:28] exec bash -lc 'rg -n "polarization_factor" src/nanobrag_torch/config.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:29] bash -lc 'rg -n "polarization_factor" src/nanobrag_torch/config.py' succeeded in 724ms:
510:    polarization_factor: float = 0.0  # Kahn polarization factor K in [0,1] (0.0 = compute from geometry, matches C default behavior)
[2025-10-06T21:31:29] tokens used: 106,848

[2025-10-06T21:31:37] thinking

**Analyzing fix_plan and scaling mismatch**
[2025-10-06T21:31:38] exec bash -lc 'rg -n "Phase K" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:38] bash -lc 'rg -n "Phase K" plans/active/cli-noise-pix0/plan.md' succeeded in 780ms:
7:- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
9:- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
10:- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
16:  * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
148:| H5d | Update fix_plan Attempt log | [D] | ✅ 2025-10-22 Attempt #31. docs/fix_plan.md logs the revert metrics and artifacts (Attempt #31), so Phase K normalization work can proceed with the restored baseline. |
160:| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; remains blocked pending Phase K fixes (orientation rescale + polarization default). |
171:| J3 | Update fix_plan Attempt log | [D] | ✅ 2025-10-19: Attempt #28 logged in `docs/fix_plan.md` with complete metrics, artifacts, and hypothesis (F_latt calculation error in sincg lattice shape factor). Phase I3 remains blocked pending Phase K F_latt fix. |
173:### Phase K — Normalization Implementation
[2025-10-06T21:31:38] tokens used: 107,464

[2025-10-06T21:31:44] thinking

**Navigating to Phase K section**
[2025-10-06T21:31:46] exec bash -lc "sed -n '173,280p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:31:46] bash -lc "sed -n '173,280p' plans/active/cli-noise-pix0/plan.md" succeeded in 721ms:
### Phase K — Normalization Implementation
Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
| K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
| K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
| K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |

### Phase L — Final Parity & Regression Sweep
Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
Prereqs: Phases J–K complete; scaling regression tests green.
Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-06T21:31:46] tokens used: 108,186

[2025-10-06T21:31:59] thinking

**Verifying polarization feature implementation**
[2025-10-06T21:32:02] exec bash -lc 'rg -n "-polar" src/nanobrag_torch/__main__.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:32:02] bash -lc 'rg -n "-polar" src/nanobrag_torch/__main__.py' exited 2 in 879ms:
rg: ripgrep requires at least one pattern to execute a search
[2025-10-06T21:32:02] tokens used: 110,112

[2025-10-06T21:32:04] thinking

**Clarifying pattern string format**
[2025-10-06T21:32:05] exec bash -lc 'rg -n "polar" src/nanobrag_torch/__main__.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:32:06] bash -lc 'rg -n "polar" src/nanobrag_torch/__main__.py' succeeded in 742ms:
181:    parser.add_argument('-polar_vector', nargs=3, type=float,
239:    parser.add_argument('-polar', type=float, metavar='K',
240:                        help='Kahn polarization factor (0-1)')
241:    parser.add_argument('-nopolar', action='store_true',
242:                        help='Disable polarization correction')
302:    parser.add_argument('-oversample_polar', action='store_true',
303:                        help='Recompute polarization per subpixel')
461:            args.beam_vector, args.polar_vector, args.spindle_axis,
552:    if args.polar_vector:
553:        config['custom_polar_vector'] = tuple(args.polar_vector)
626:    config['oversample_polar'] = args.oversample_polar
669:    if args.nopolar:
670:        config['nopolar'] = True
671:    elif args.polar is not None:
672:        config['polarization_factor'] = args.polar
772:    if hasattr(beam_config, 'polarization_factor') and beam_config.polarization_factor != 1.0:
773:        print(f"  Polarization factor: {beam_config.polarization_factor:.3f}")
878:            oversample_polar=config.get('oversample_polar', False),
1005:                polarization_axis = torch.tensor([0.0, 0.0, 1.0], dtype=dtype)
1008:                polarization_axis = torch.tensor([0.0, 1.0, 0.0], dtype=dtype)
[2025-10-06T21:32:06] tokens used: 110,384

[2025-10-06T21:32:10] thinking

**Verifying default value consistency in BeamConfig**
[2025-10-06T21:32:10] exec bash -lc "sed -n '430,520p' src/nanobrag_torch/config.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:32:11] bash -lc "sed -n '430,520p' src/nanobrag_torch/config.py" succeeded in 688ms:
        return cls(
            distance_mm=distance_mm if distance_mm is not None else 100.0,
            close_distance_mm=close_distance_mm,
            detector_pivot=detector_pivot,
            **kwargs
        )

    def should_use_custom_convention(self) -> bool:
        """
        Determine if CUSTOM convention should be used based on C code logic.

        The C code switches to CUSTOM convention when:
        1. -twotheta_axis is explicitly passed to the command line
        2. AND the twotheta_axis differs from the default for the current convention

        This exactly replicates the logic in build_nanobragg_command() which only
        passes -twotheta_axis when the axis is NOT the convention default.

        Returns:
            bool: True if CUSTOM convention should be used (no 0.5 pixel offset)
[2025-10-06T21:32:11] tokens used: 120,966

[2025-10-06T21:32:14] thinking

**Reviewing BeamConfig and interpolation functions**

I'm verifying that the default polarization of BeamConfig aligns with the plan, though some tasks might need confirmation through exposures or tests. I want to check if the tricubic interpolation functions, especially `Crystal._tricubic_interpolation`, have been vectorized or still need updating, so I'll search that out in the code.
[2025-10-06T21:32:15] exec bash -lc 'rg -n "tricubic" src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:32:16] bash -lc 'rg -n "tricubic" src/nanobrag_torch/models/crystal.py' succeeded in 703ms:
190:        Implements AT-STR-001 (nearest-neighbor lookup) and AT-STR-002 (tricubic interpolation).
192:        This method handles both nearest-neighbor lookup and differentiable tricubic
196:        The C code performs nearest-neighbor lookup or tricubic interpolation based
216:            return self._tricubic_interpolation(h, k, l)
272:    def _tricubic_interpolation(
301:        /* run the tricubic polynomial interpolation */
383:        # Perform tricubic interpolation
392:        # TODO: Implement fully vectorized tricubic interpolation that handles:
399:                print("WARNING: tricubic interpolation not yet supported for batched inputs")
[2025-10-06T21:32:16] tokens used: 123,206

[2025-10-06T21:32:18] thinking

**Viewing function definition**
[2025-10-06T21:32:19] exec bash -lc "sed -n '272,420p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:32:19] bash -lc "sed -n '272,420p' src/nanobrag_torch/models/crystal.py" succeeded in 668ms:
    def _tricubic_interpolation(
        self, h: torch.Tensor, k: torch.Tensor, l: torch.Tensor  # noqa: E741
    ) -> torch.Tensor:
        """
        Tricubic interpolation of structure factors (AT-STR-002).

        C-Code Implementation Reference (from nanoBragg.c, lines 3152-3209):
        ```c
        if ( ((h-h_min+3)>h_range) ||
             (h-2<h_min)           ||
             ((k-k_min+3)>k_range) ||
             (k-2<k_min)           ||
             ((l-l_min+3)>l_range) ||
             (l-2<l_min)  ) {
            if(babble){
                babble=0;
                printf ("WARNING: out of range for three point interpolation: h,k,l,h0,k0,l0: %g,%g,%g,%d,%d,%d \n", h,k,l,h0,k0,l0);
                printf("WARNING: further warnings will not be printed! ");
            }
            F_cell = default_F;
[2025-10-06T21:32:19] tokens used: 124,543

[2025-10-06T21:32:26] thinking

**Analyzing plan implementation gaps**
[2025-10-06T21:32:28] exec bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:32:29] bash -lc 'ls reports/2025-10-cli-flags/phase_k/f_latt_fix' succeeded in 741ms:
analyze_output.txt
c_image.npy
metrics_after.json
mosflm_rescale.py
orientation_delta.md
py_image.npy
scaling_chain.md
scaling_summary.md
test_metrics_failure.json
trace_diff.txt
trace_py_after.log
trace_py_after_133134.log
[2025-10-06T21:32:29] tokens used: 128,540

[2025-10-06T21:32:53] thinking

**Assessing plan status and next steps**

I’m carefully reviewing the current plan and fix_plan documents to see if tasks like K3a-c are done or still pending. I want to verify if gating and orientation delta updates occurred and if scaling mismatches remain. I’m also checking for any needed plan or documentation updates, especially for vectorization phases, while preparing to identify key debugging hypotheses and focus issues for this task cycle. Finally, I’m planning to review related reports to gather baseline evidence.
[2025-10-06T21:32:56] exec bash -lc 'ls reports | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:32:56] bash -lc 'ls reports | head' succeeded in 855ms:
2025-09-29-AT-PARALLEL-002
2025-09-29-AT-PARALLEL-004
2025-09-29-AT-PARALLEL-006
2025-09-29-AT-PARALLEL-012
2025-09-29-debug-traces-002
2025-09-29-debug-traces-006
2025-09-29-debug-traces-012
2025-09-30-AT-012-debug
2025-09-30-AT-012-peakmatch
2025-09-30-AT-PARALLEL-012
[2025-10-06T21:32:56] tokens used: 129,692

[2025-10-06T21:33:07] thinking

**Evaluating project priorities and next tasks**
[2025-10-06T21:33:09] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:33:10] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md" succeeded in 982ms:
# Scaling Chain Analysis: C vs PyTorch

**Pixel:** (slow=1039, fast=685)

## Key Findings

**First Divergence:** `I_before_scaling`
- C value: 1.480792010454e+15
- PyTorch value: 1.806530429487e+14
- Ratio (Py/C): 1.219976e-01

**Final Intensity Ratio (Py/C):** 1.114e+00

## Full Factor Comparison

| Factor | C Value | PyTorch Value | Ratio (Py/C) | Match? |
|--------|---------|---------------|--------------|--------|
| I_before_scaling | 1.480792e+15 | 1.806530e+14 | 1.219976e-01 | ❌ |
| steps | 1.000000e+01 | 1.000000e+01 | 1.000000e+00 | ✅ |
| r_e_sqr | 7.940792e-30 | 7.940792e-30 | 1.000000e+00 | ✅ |
[2025-10-06T21:33:10] tokens used: 130,320

[2025-10-06T21:33:15] thinking

**Investigating scaling ratio discrepancy**

I’m trying to understand why the scaling difference ratio is about 0.122 instead of 1, suspecting it might be due to rescale gating not executing properly. To confirm, I want to check if gating and polarization default changes are actually committed by looking into the commit history, maybe via `git blame` on key lines like in `Crystal.compute_cell_tensors`. I’ll then get a fresh trace after those changes to be sure before asking Ralph to rerun the scaling chain.
[2025-10-06T21:33:17] exec bash -lc 'git blame -L 620,700 src/nanobrag_torch/models/crystal.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:33:18] bash -lc 'git blame -L 620,700 src/nanobrag_torch/models/crystal.py' succeeded in 841ms:
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 620)             # Convert radians to degrees and update config
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 621)             self.config.misset_deg = (
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 622)                 math.degrees(rotx),
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 623)                 math.degrees(roty),
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 624)                 math.degrees(rotz)
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 625)             )
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 626) 
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 627)             # Log the generated angles (matching C output format)
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 628)             if hasattr(self, 'logger') and self.logger:
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 629)                 self.logger.info(
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 630)                     f"random orientation misset angles: "
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 631)                     f"{self.config.misset_deg[0]:.6f} "
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 632)                     f"{self.config.misset_deg[1]:.6f} "
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 633)                     f"{self.config.misset_deg[2]:.6f} deg"
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 634)                 )
4cc21d4c (ollie 2025-09-18 23:36:31 -0700 635) 
058986f8 (ollie 2025-09-30 14:10:18 -0700 636)         # CRITICAL ORDER: Apply misset to INITIAL reciprocal vectors BEFORE real-space calculation
058986f8 (ollie 2025-09-30 14:10:18 -0700 637)         # This matches C-code sequence (nanoBragg.c lines 2025-2034: misset applied to initial vectors)
fc443fa3 (ollie 2025-07-28 23:24:32 -0700 638)         if hasattr(self.config, "misset_deg") and any(
fc443fa3 (ollie 2025-07-28 23:24:32 -0700 639)             angle != 0.0 for angle in self.config.misset_deg
[2025-10-06T21:33:18] tokens used: 134,916

[2025-10-06T21:33:30] thinking

**Analyzing gating impact on orientation mismatch**

I'm tracing gating additions made in 2025 and questioning if they fully resolve the lattice factor mismatch. It seems gating exists but may be incomplete or insufficient alone since mismatches persist after its introduction. I'll need to dig into configuration checks, code around fallback pipelines, and data reports for clues on lingering orientation differences and hypothesis for 21% discrepancy. Let's explore this puzzle carefully!
[2025-10-06T21:33:31] exec bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_diff.txt" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:33:32] bash -lc "sed -n '1,160p' reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_diff.txt" succeeded in 729ms:
--- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log	2025-10-06 03:22:03.165000376 -0700
+++ reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log	2025-10-06 13:31:20.985565166 -0700
@@ -1,308 +1,75 @@
-WARNING: auto-generating odet_vector
-nanoBragg nanocrystal diffraction simulator - James Holton and Ken Frankel 5-17-17
-custom convention selected.
-pivoting detector around sample
-DETECTOR_FAST_AXIS 0.999982004873912 -0.00599800002923425 -0.000118000000575132
-DETECTOR_SLOW_AXIS -0.0059979996566955 -0.999969942765222 -0.0049129997187971
-DETECTOR_NORMAL_AXIS -8.85282813644494e-05 0.00491361907271126 -0.999987924182263
-DETECTOR_PIX0_VECTOR -0.216475836204836 0.216343050492215 -0.230192414300537
-XDS incident beam: 0.00063187 0.00490992 0.999988
-reading A.mat
-TRACE: Raw matrix values from file:
-TRACE:   a_star (raw) = [-0.0283771, -0.0287139, 0.0105005]
-TRACE:   b_star (raw) = [-0.00305386, 0.0101955, -0.0320944]
-TRACE:   c_star (raw) = [0.0253582, -0.0140005, -0.0103605]
-TRACE:   lambda0 = 0.9768 Angstroms
-TRACE:   scaling factor = 1e-10/lambda0 = 1.02375
-TRACE: After wavelength correction:
[2025-10-06T21:33:32] tokens used: 139,558

[2025-10-06T21:33:38] thinking

**Evaluating plan updates and lattice mismatch causes**
[2025-10-06T21:33:39] exec bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/orientation_delta.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:33:39] bash -lc 'cat reports/2025-10-cli-flags/phase_k/f_latt_fix/orientation_delta.md' succeeded in 715ms:
/home/ollie/Documents/tmp/nanoBragg/reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py:84: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
Please either pass the dim explicitly or simply use torch.linalg.cross.
The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at /pytorch/aten/src/ATen/native/Cross.cpp:63.)
  b_cross_c = torch.cross(b_star_t, c_star_t)
================================================================================
MOSFLM Lattice Vector Rescaling Comparison
================================================================================

MOSFLM A.mat Reciprocal Vectors:
  a* = [-0.0290511  -0.02939588  0.01074988]
  b* = [-0.00312639  0.01043764 -0.03285667]
  c* = [ 0.02596044 -0.01433302 -0.01060661]

Derived Cell Parameters:
  a = 26.751388 Å
  b = 31.309964 Å
  c = 33.673354 Å
  α = 88.686974°
  β = 71.529482°
  γ = 68.137528°
[2025-10-06T21:33:39] tokens used: 143,509

[2025-10-06T21:33:44] thinking

**Investigating force calculation origins**
[2025-10-06T21:33:44] exec bash -lc 'rg -n "F_latt" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:33:45] bash -lc 'rg -n "F_latt" -n src/nanobrag_torch' succeeded in 723ms:
src/nanobrag_torch/simulator.py:216:    #     F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
src/nanobrag_torch/simulator.py:218:    # F_latt = 1.0;
src/nanobrag_torch/simulator.py:222:    #     double F_latt_a = 1.0, F_latt_b = 1.0, F_latt_c = 1.0;
src/nanobrag_torch/simulator.py:224:    #         F_latt_a = sincg(M_PI*h,Na);
src/nanobrag_torch/simulator.py:225:    #         F_latt *= F_latt_a;
src/nanobrag_torch/simulator.py:228:    #         F_latt_b = sincg(M_PI*k,Nb);
src/nanobrag_torch/simulator.py:229:    #         F_latt *= F_latt_b;
src/nanobrag_torch/simulator.py:232:    #         F_latt_c = sincg(M_PI*l,Nc);
src/nanobrag_torch/simulator.py:233:    #         F_latt *= F_latt_c;
src/nanobrag_torch/simulator.py:239:    # "SQUARE (grating): F_latt = sincg(π·h, Na) · sincg(π·k, Nb) · sincg(π·l, Nc)"
src/nanobrag_torch/simulator.py:250:        F_latt_a = sincg(torch.pi * h, Na)
src/nanobrag_torch/simulator.py:251:        F_latt_b = sincg(torch.pi * k, Nb)
src/nanobrag_torch/simulator.py:252:        F_latt_c = sincg(torch.pi * l, Nc)
src/nanobrag_torch/simulator.py:253:        F_latt = F_latt_a * F_latt_b * F_latt_c
src/nanobrag_torch/simulator.py:263:        F_latt = Na * Nb * Nc * 0.723601254558268 * sinc3(
src/nanobrag_torch/simulator.py:282:        F_latt = Na * Nb * Nc * torch.exp(-(rad_star_sqr / 0.63) * fudge)
src/nanobrag_torch/simulator.py:300:        F_latt = torch.where(inside_cutoff,
src/nanobrag_torch/simulator.py:307:    F_total = F_cell * F_latt
src/nanobrag_torch/simulator.py:725:                                    /* ... F_cell and F_latt calculation ... */
src/nanobrag_torch/simulator.py:728:                                    I += F_cell*F_cell*F_latt*F_latt;
[2025-10-06T21:33:45] tokens used: 146,452

[2025-10-06T21:33:48] thinking

**Verifying function implementation**
[2025-10-06T21:33:49] exec bash -lc "sed -n '1,220p' src/nanobrag_torch/utils/physics.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:33:49] bash -lc "sed -n '1,220p' src/nanobrag_torch/utils/physics.py" succeeded in 686ms:
"""
Vectorized physics utilities for nanoBragg PyTorch implementation.

This module contains PyTorch implementations of physical models and
calculations from the original C code.
"""

import torch


# Use different compile modes for CPU vs GPU to avoid CUDA graph issues
# On GPU, "max-autotune" avoids the nested compilation CUDA graph problem
# On CPU, "reduce-overhead" is faster
def _get_compile_decorator():
    """Get appropriate compile decorator based on available hardware."""
    import os
    disable_compile = os.environ.get("NANOBRAGG_DISABLE_COMPILE", "0") == "1"

    if disable_compile:
        # Return identity decorator when compilation is disabled (for gradient testing)
[2025-10-06T21:33:49] tokens used: 147,773

[2025-10-06T21:33:54] thinking

**Investigating F_latt mismatch causes**
[2025-10-06T21:33:55] exec bash -lc "sed -n '200,340p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:33:55] bash -lc "sed -n '200,340p' src/nanobrag_torch/simulator.py" succeeded in 658ms:
    k0 = torch.round(k)
    l0 = torch.round(l)

    # Look up structure factors
    F_cell = crystal_get_structure_factor(h0, k0, l0)

    # Ensure F_cell is on the same device as h (device-neutral implementation per Core Rule #16)
    # The crystal.get_structure_factor may return CPU tensors even when h0/k0/l0 are on CUDA
    if F_cell.device != h.device:
        F_cell = F_cell.to(device=h.device)

    # Calculate lattice structure factor
    #
    # C-Code Implementation Reference (from nanoBragg.c, lines 3062-3081):
    # ```c
    # /* structure factor of the lattice (paralelpiped crystal)
    #     F_latt = sin(M_PI*Na*h)*sin(M_PI*Nb*k)*sin(M_PI*Nc*l)/sin(M_PI*h)/sin(M_PI*k)/sin(M_PI*l);
    # */
    # F_latt = 1.0;
    # if(xtal_shape == SQUARE)
[2025-10-06T21:33:55] tokens used: 151,143

[2025-10-06T21:34:00] thinking

**Verifying parameter calculations**
[2025-10-06T21:34:01] exec bash -lc "sed -n '120,220p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:34:01] bash -lc "sed -n '120,220p' src/nanobrag_torch/simulator.py" succeeded in 684ms:
    if is_multi_source:
        # Multi-source case: broadcast over sources
        # diffracted_beam_unit: (S, F, 3) or (batch, 3)
        # incident_beam_direction: (n_sources, 3)
        # Need to add source dimension to diffracted_beam_unit

        # Add source dimension: (S, F, 3) -> (1, S, F, 3) or (batch, 3) -> (1, batch, 3)
        diffracted_expanded = diffracted_beam_unit.unsqueeze(0)

        # Handle both 2D (batch, 3) and 3D (S, F, 3) cases for incident beam expansion
        if original_n_dims == 2:
            # (batch, 3) case: expand incident to (n_sources, 1, 3)
            incident_expanded = incident_beam_direction.view(n_sources, 1, 3)
        else:
            # (S, F, 3) case: expand incident to (n_sources, 1, 1, 3)
            incident_expanded = incident_beam_direction.view(n_sources, 1, 1, 3)

        # Expand to match diffracted shape
        incident_beam_unit = incident_expanded.expand(n_sources, *diffracted_beam_unit.shape)
        diffracted_beam_unit = diffracted_expanded.expand_as(incident_beam_unit)
[2025-10-06T21:34:01] tokens used: 153,661

[2025-10-06T21:34:11] thinking

**Analyzing vector orientation and polarization factor**

I'm verifying if `rot_a` and related vectors really align by checking `Crystal.get_rotated_real_vectors`, while also trying to confirm the actual value used for `polarization_factor` in the pipeline since defaults and docs seem inconsistent—I'll search `beam_config.polarization_factor` to see how it's applied downstream.
[2025-10-06T21:34:13] exec bash -lc 'rg -n "beam_config.polarization_factor" -n src/nanobrag_torch' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:34:13] bash -lc 'rg -n "beam_config.polarization_factor" -n src/nanobrag_torch' succeeded in 793ms:
src/nanobrag_torch/simulator.py:516:        kahn_value = self.beam_config.polarization_factor if not self.beam_config.nopolar else 0.0
src/nanobrag_torch/__main__.py:772:    if hasattr(beam_config, 'polarization_factor') and beam_config.polarization_factor != 1.0:
src/nanobrag_torch/__main__.py:773:        print(f"  Polarization factor: {beam_config.polarization_factor:.3f}")
src/nanobrag_torch/__main__.py:1055:            beam_config.polarization_factor = config['polarization_factor']
[2025-10-06T21:34:13] tokens used: 156,317

[2025-10-06T21:34:22] thinking

**Checking Simulator initialization**
[2025-10-06T21:34:25] exec bash -lc "sed -n '460,540p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:34:26] bash -lc "sed -n '460,540p' src/nanobrag_torch/simulator.py" succeeded in 676ms:
            if hasattr(crystal_config, 'mosaic_spread_deg'):
                self.crystal.config.mosaic_spread_deg = crystal_config.mosaic_spread_deg
            if hasattr(crystal_config, 'mosaic_domains'):
                self.crystal.config.mosaic_domains = crystal_config.mosaic_domains
            if hasattr(crystal_config, 'mosaic_seed'):
                self.crystal.config.mosaic_seed = crystal_config.mosaic_seed
            if hasattr(crystal_config, 'spindle_axis'):
                self.crystal.config.spindle_axis = crystal_config.spindle_axis
        # Use the provided beam_config, or Crystal's beam_config, or default
        if beam_config is not None:
            self.beam_config = beam_config
        elif hasattr(crystal, 'beam_config') and crystal.beam_config is not None:
            self.beam_config = crystal.beam_config
        else:
            self.beam_config = BeamConfig()
        # Normalize device to ensure consistency
        if device is not None:
            # Create a dummy tensor on the device to get the actual device with index
            temp = torch.zeros(1, device=device)
            self.device = temp.device
[2025-10-06T21:34:26] tokens used: 156,681

[2025-10-06T21:34:35] thinking

**Investigating polarization factor handling**
[2025-10-06T21:34:36] exec bash -lc 'rg -n "apply_polarization" src/nanobrag_torch/simulator.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:34:37] bash -lc 'rg -n "apply_polarization" src/nanobrag_torch/simulator.py' succeeded in 688ms:
43:    apply_polarization: bool = True,
90:        apply_polarization: Whether to apply Kahn polarization correction (default True)
327:    if apply_polarization:
673:            apply_polarization=not self.beam_config.nopolar,
[2025-10-06T21:34:37] tokens used: 158,215

[2025-10-06T21:34:40] thinking

**Examining polarization application logic**
[2025-10-06T21:34:41] exec bash -lc "sed -n '340,520p' src/nanobrag_torch/simulator.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:34:42] bash -lc "sed -n '340,520p' src/nanobrag_torch/simulator.py" succeeded in 661ms:
            # Expand diffracted to (n_sources, S, F, 3) or (n_sources, batch, 3)
            if original_n_dims == 2:
                # batch case
                diffracted_expanded = diffracted_beam_unit.unsqueeze(0).expand(n_sources, -1, -1)
                incident_expanded = incident_beam_direction.unsqueeze(1).expand(-1, diffracted_beam_unit.shape[0], -1)
            else:
                # (S, F, 3) case
                diffracted_expanded = diffracted_beam_unit.unsqueeze(0).expand(n_sources, -1, -1, -1)
                incident_expanded = incident_beam_direction.unsqueeze(1).unsqueeze(1).expand(-1, diffracted_beam_unit.shape[0], diffracted_beam_unit.shape[1], -1)

            # Flatten for polarization calculation
            # Use .contiguous() to avoid CUDA graphs tensor reuse errors
            flat_shape = diffracted_expanded.shape
            incident_flat = incident_expanded.reshape(-1, 3).contiguous()
            diffracted_flat = diffracted_expanded.reshape(-1, 3).contiguous()

            # Calculate polarization
            polar_flat = polarization_factor(
                kahn_factor,
                incident_flat,
[2025-10-06T21:34:42] tokens used: 158,638

[2025-10-06T21:34:45] thinking

**Investigating polarization factor calculation**
[2025-10-06T21:34:45] exec bash -lc "sed -n '220,420p' src/nanobrag_torch/utils/physics.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:34:46] bash -lc "sed -n '220,420p' src/nanobrag_torch/utils/physics.py" succeeded in 708ms:
        double E_out[4];
        double B_out[4];

        unitize(incident,incident);
        unitize(diffracted,diffracted);
        unitize(axis,axis);

        /* component of diffracted unit vector along incident beam unit vector */
        cos2theta = dot_product(incident,diffracted);
        cos2theta_sqr = cos2theta*cos2theta;
        sin2theta_sqr = 1-cos2theta_sqr;

        if(kahn_factor != 0.0){
            /* tricky bit here is deciding which direciton the E-vector lies in for each source
               here we assume it is closest to the "axis" defined above */

            /* cross product to get "vertical" axis that is orthogonal to the cannonical "polarization" */
            cross_product(axis,incident,B_in);
            /* make it a unit vector */
            unitize(B_in,B_in);
[2025-10-06T21:34:46] tokens used: 160,997

[2025-10-06T21:35:08] thinking

**Analyzing polarization and normalization discrepancies**

I'm examining how the code handles the polarization factor, especially the tensor condition use, and comparing Pyro's axis assumptions to the C implementation. I suspect differences in polarization axis orientation and scattering vector units might explain the scaling mismatch with F_latt. I’m considering updating the existing CLI normalization plan to add tasks verifying polarization axis alignment and investigating F_latt discrepancies using trace logs for deeper diagnostics.
[2025-10-06T21:35:11] exec bash -lc 'rg -n "F_latt" reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:35:12] bash -lc 'rg -n "F_latt" reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log' succeeded in 968ms:
48:TRACE_PY: F_latt_a 35.9573598805798
49:TRACE_PY: F_latt_b 46.9838162313509
50:TRACE_PY: F_latt_c 26.4683259730135
51:TRACE_PY: F_latt 44715.9601587609
[2025-10-06T21:35:12] tokens used: 187,126

[2025-10-06T21:35:15] thinking

**Searching for C trace**
[2025-10-06T21:35:16] exec bash -lc 'rg -n "F_latt" reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:35:17] bash -lc 'rg -n "F_latt" reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' succeeded in 721ms:
185:TRACE_C: F_latt_a 35.8890618450812
186:TRACE_C: F_latt_b 38.6324938361129
187:TRACE_C: F_latt_c 25.7024842831081
188:TRACE_C: F_latt 35636.0822038919
[2025-10-06T21:35:17] tokens used: 191,715

[2025-10-06T21:35:20] thinking

**Investigating origin of lattice differences**
[2025-10-06T21:35:21] exec bash -lc 'rg -n "TRACE_C: h " reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:35:21] bash -lc 'rg -n "TRACE_C: h " reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' exited 1 in 724ms:

[2025-10-06T21:35:21] tokens used: 192,577

[2025-10-06T21:35:24] thinking

**Examining C trace format**
[2025-10-06T21:35:25] exec bash -lc "sed -n '150,210p' reports/2025-10-cli-flags/phase_j/trace_c_scaling.log" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:35:26] bash -lc "sed -n '150,210p' reports/2025-10-cli-flags/phase_j/trace_c_scaling.log" succeeded in 740ms:
0% done
0% done
0% done
0% done
0% done
0% done
0% done
0% done
0% done
0% done
0% done
0% done
0% done
0% done
TRACE_C: pix0_vector_meters -0.216475836204836 0.216343050492215 -0.230192414300537
TRACE_C: fdet_vec 0.999982004873912 -0.00599800002923425 -0.000118000000575132
TRACE_C: sdet_vec -0.0059979996566955 -0.999969942765222 -0.0049129997187971
TRACE_C: pixel_pos_meters -0.0996443642887915 0.0368472243540029 -0.231084742080328
TRACE_C: R_distance_meters 0.254336146269938
TRACE_C: omega_pixel_sr 4.15867865980257e-07
[2025-10-06T21:35:26] tokens used: 193,558

[2025-10-06T21:35:29] thinking

**Preparing to add PyTorch trace equivalent**
[2025-10-06T21:35:29] exec bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:35:30] bash -lc "sed -n '1,120p' reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log" succeeded in 721ms:
# Tracing pixel (slow=1039, fast=685)
# Trace complete
TRACE_PY:detector_convention=CUSTOM
TRACE_PY:angles_rad=rotx:0 roty:0 rotz:0 twotheta:0
TRACE_PY:beam_center_m=Xclose:0.217742295 Yclose:0.21390708 pixel_mm:0.172
TRACE_PY:initial_fdet=0.999982 -0.005998 -0.000118
TRACE_PY:initial_sdet=-0.005998 -0.99997 -0.004913
TRACE_PY:initial_odet=-8.8e-05 0.004914 -0.999988
TRACE_PY:Fclose_m=0.217742295
TRACE_PY:Sclose_m=0.21390708
TRACE_PY:close_distance_m=0.231274663460392
TRACE_PY:ratio=0.999987814780285
TRACE_PY:distance_m=0.23127748162732
TRACE_PY:term_fast_before_rot=-0.21773837563869 0.00130601828541 2.569359081e-05
TRACE_PY:term_slow_before_rot=0.00128301466584 0.2139006627876 0.00105092548404
TRACE_PY:term_close_before_rot=-2.03521703845145e-05 0.00113648369624436 -0.23127188816443
TRACE_PY:pix0_before_rotation=-0.21647571314293 0.21634316475225 -0.23019526562923
TRACE_PY:pix0_after_rotz=-0.21647571314293 0.21634316475225 -0.23019526562923
TRACE_PY:pix0_after_twotheta=-0.21647571314293 0.21634316475225 -0.23019526562923
TRACE_PY:fdet_after_rotz=0.999982 -0.005998 -0.000118
[2025-10-06T21:35:30] tokens used: 195,570

[2025-10-06T21:35:44] thinking

**Analyzing subtle vector differences**
[2025-10-06T21:35:47] exec bash -lc 'rg -n "distance" reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:35:48] bash -lc 'rg -n "distance" reports/2025-10-cli-flags/phase_j/trace_c_scaling.log' succeeded in 931ms:
110:  distance=0.231275 detsize=0.423636x0.434644  pixel=0.000172 meters (2463x2527 pixels)
168:TRACE_C: R_distance_meters 0.254336146269938
170:TRACE_C: close_distance_meters 0.231271826111781
[2025-10-06T21:35:48] tokens used: 198,735

[2025-10-06T21:35:56] thinking

**Analyzing geometry and scattering differences**

I’m comparing tiny differences in `close_distance` and their outsized effect on `F_latt` between Python and C versions, suspecting rounding and precision issues in geometry calculations. I plan to inspect the `Detector` code—especially how `ratio` and geometry are computed—to pinpoint the cause and refine instructions for the next development steps.
[2025-10-06T21:35:58] exec bash -lc 'rg -n "ratio" src/nanobrag_torch/models/detector.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:35:59] bash -lc 'rg -n "ratio" src/nanobrag_torch/models/detector.py' succeeded in 928ms:
5:geometry calculations and pixel coordinate generation.
19:        # Use tensor operations to maintain gradient flow
34:    - Pixel coordinate generation and caching
41:        """Initialize detector from configuration."""
351:        ratio = dot_product(beam_vector,vector);
352:        if(ratio == 0.0) { ratio = DBL_MIN; }
353:        if(isnan(close_distance)) close_distance = fabs(ratio*distance);
354:        distance = close_distance/ratio;
445:            # Calculate ratio (r-factor)
446:            ratio = torch.dot(beam_vector, odet_rotated)
449:            # Use torch operations to preserve gradients
450:            min_ratio = torch.tensor(1e-10, device=self.device, dtype=self.dtype)
451:            ratio = torch.where(
452:                torch.abs(ratio) < min_ratio,
453:                torch.sign(ratio) * min_ratio,
454:                ratio
457:            ratio = torch.where(
458:                ratio == 0,
459:                min_ratio,
460:                ratio
[2025-10-06T21:35:59] tokens used: 199,421

[2025-10-06T21:36:24] thinking

**Analyzing float precision impact on lattice factor difference**

I’m examining how using float32 versus float64 precision causes discrepancies in computing lattice factors, hypothesizing that float32 rounding near integer `h,k,l` values leads to significant errors. To confirm, I plan to update the CLI-noise-pix0 plan with a new Phase K3d task that runs the scaling chain in float64, capture evidence, and instruct `ralph` accordingly. I’ll also prep edits to fix_plan.md and later draft input.md reflecting these new diagnostics and instructions.
[2025-10-06T21:36:30] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -13,2 +13,3 @@
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
@@ -184,2 +185,3 @@
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
[2025-10-06T21:36:30] apply_patch(auto_approved=true) exited 0 in 12ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-06T21:36:30] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep

[2025-10-06T21:36:30] tokens used: 202,386
[2025-10-06T21:36:30] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:36:34] thinking

**Checking table row order and presence**
[2025-10-06T21:36:35] exec bash -lc "sed -n '200,240p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:36:36] bash -lc "sed -n '200,240p' plans/active/cli-noise-pix0/plan.md" succeeded in 973ms:

[2025-10-06T21:36:36] tokens used: 209,804
[2025-10-06T21:36:36] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:36:40] thinking

**Verifying sed command range**
[2025-10-06T21:36:43] exec bash -lc "sed -n '173,220p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:36:44] bash -lc "sed -n '173,220p' plans/active/cli-noise-pix0/plan.md" succeeded in 737ms:

### Phase K — Normalization Implementation
Goal: Align PyTorch normalization logic with C based on Phase J evidence (steps division, fluence, r_e², omega/polarization application order).
Prereqs: Phase J report pinpoints the mismatched factor; existing regression suite green.
Exit Criteria: Code changes merged with targeted tests covering the corrected scaling, and docs/fix_plan.md records Attempt #29 metrics before moving to Phase L.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| K1 | Align lattice factor math with C (SQUARE case) | [D] | ✅ 2025-10-24 Attempt #34 (commit 0fef8f7). `Simulator._compute_physics_for_position` now uses `sincg(torch.pi * h, Na)` with embedded C-code reference; regression `tests/test_cli_scaling.py::test_f_latt_square_matches_c` added (skips unless `NB_RUN_PARALLEL=1`). |
| K2 | Recompute scaling chain & extend diagnostics | [D] | ✅ 2025-10-06 Attempt #42. Fresh PyTorch trace captured (trace_py_after.log); scaling chain refreshed showing F_latt_b=46.98 (Py) vs 38.63 (C) = 21.6% error, polar=1.0 (Py) vs 0.913 (C) = 9.6% error. Updated scaling_chain.md with post-SAMPLE-pivot ratios. |
| K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
| K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
| K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
| K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |

### Phase L — Final Parity & Regression Sweep
Goal: Demonstrate full parity for the supervisor command and close CLI-FLAGS-003.
Prereqs: Phases J–K complete; scaling regression tests green.
Exit Criteria: `nb-compare` metrics meet thresholds (correlation ≥0.999, sum_ratio 0.99–1.01, peak distance ≤1 px), targeted pytest nodes pass, docs/fix_plan.md Attempt #30 logs metrics, and this plan is ready for archival.
[2025-10-06T21:36:44] tokens used: 211,467
[2025-10-06T21:36:44] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:36:48] thinking

**Updating fix_plan.md next steps**
[2025-10-06T21:36:56] tokens used: 213,642
[2025-10-06T21:36:56] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:37:03] thinking

**Checking text near line 448**
[2025-10-06T21:37:07] exec bash -lc "sed -n '460,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:37:08] bash -lc "sed -n '460,520p' docs/fix_plan.md" succeeded in 857ms:
  2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
- Attempts History:
  * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
    Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/README.md` - Full evidence report with metrics, hypotheses, next actions
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/summary.json` - Complete parity metrics (correlation, RMSE, sums, peak distances)
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/c_stdout.txt` - C simulation output (max_I=446.254, fluence=1e24, steps=10)
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/py_stdout.txt` - PyTorch output (max_I=5.411e7)
      - `reports/2025-10-cli-flags/phase_i/supervisor_command/diff.png` - Difference heatmap (559 KB)
      - `scripts/nb_compare.py:118-180,396-397` - **Tooling fix deployed:** Added -detpixels_x/-detpixels_y parsing to load_float_image()
    Observations/Hypotheses:
      - **High correlation (0.998) indicates pattern matches:** Shapes and positions correct, magnitudes catastrophically wrong
      - **Intensity ratio 121,250×:** PyTorch raw values ~124,538× higher than C after normalization
      - **Both implementations completed without errors:** Detector geometry, pix0 vectors, convention selection all agree
      - **Hypotheses for debugging loop:**
        1. Missing division by `steps = sources × mosaic × phisteps × oversample²` (C: steps=10 confirmed)
        2. Missing scaling by r_e² (classical electron radius = 2.818×10⁻¹⁵ m; r_e² = 7.94×10⁻³⁰ m²)
        3. Incorrect fluence calculation (C: 1e24 photons/m², PyTorch: verify derivation from flux/exposure/beamsize)
[2025-10-06T21:37:08] tokens used: 215,699
[2025-10-06T21:37:08] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:37:13] thinking

**Preparing patch for Next Actions update**
[2025-10-06T21:37:20] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -457,6 +457,7 @@
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
[2025-10-06T21:37:20] apply_patch(auto_approved=true) exited 0 in 22ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-06T21:37:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep

[2025-10-06T21:37:20] tokens used: 219,315
[2025-10-06T21:37:20] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:37:45] thinking

**Preparing detailed input.md content**

I'm organizing the full content for the `input.md` file, carefully structuring it with all required sections like Summary, Phase, Focus, Branch, and others based on the CLI-FLAGS-003 dtype evidence phase. I'm mapping out commands, priorities with file references, pitfalls, and next steps to ensure a comprehensive and clear diagnostic plan ready to overwrite the file.
[2025-10-06T21:38:05] exec bash -lc "cat <<'EOF' > input.md
Summary: Quantify float32 vs float64 impact on the CLI scaling chain before touching normalization code.
Phase: Evidence
Focus: CLI-FLAGS-003 — Phase K3d dtype-sensitivity sweep
Branch: main
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/
Do Now: CLI-FLAGS-003 K3d dtype sensitivity; NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py
If Blocked: If the float64 run crashes, capture stdout/stderr to dtype_sweep/attempt_failed.log, rerun once at default dtype for comparison, and log config + traceback in Attempt History.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:173 — K3d demands dtype evidence before we reopen implementation work on normalization.
- docs/fix_plan.md:448 — New Next Actions gate K3a/K3c on confirming whether rounding causes the 21.6% F_latt drift.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md — Current float32 ratios show F_latt_b≈46.98 vs C 38.63, so we need a dtype control run.
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log — C baseline keeps h=2.0012, so compare PyTorch float64 traces against this reference.
- src/nanobrag_torch/simulator.py:250 — sincg inputs depend on precise h/k/l; confirming dtype sensitivity de-risks code changes here.
How-To Map:
- Ensure editable install is active and NB_C_BIN remains pointed at golden_suite_generator/nanoBragg.
- From repo root run:
  1) "'`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`.
  2) Move generated logs/JSON into `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/` (stamp subdir).
  3) Record key deltas (hkl_frac, F_latt_*, polar) comparing float32 vs float64 in `dtype_sweep/dtype_sensitivity.md`.
- Note the environment snapshot (commit hash, torch version) alongside results.
Pitfalls To Avoid:
- Do not edit source this loop; gather evidence only.
- No pytest runs while Phase=Evidence.
- Keep Protected Assets untouched (docs/index.md references).
- Avoid clobbering existing reports—create timestamped subdirectories.
- Ensure NB_PYTORCH_DTYPE override is cleared afterward.
- Respect device/dtype neutrality—no hard-coded `.cpu()`/`.cuda()` in probes.
- Capture stdout/stderr for reproducibility; don’t rely on scrollback.
- Do not delete prior scaling artifacts; we still need baseline comparisons.
- Refrain from pushing until supervisor review closes the loop.
Pointers:
- plans/active/cli-noise-pix0/plan.md:173
- reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- src/nanobrag_torch/models/crystal.py:681
- src/nanobrag_torch/simulator.py:250
- docs/development/c_to_pytorch_config_map.md
- specs/spec-a-core.md
Next Up:
1. If dtype drift is confirmed, tackle K3a (mosflm rescale guard) with post-fix orientation traces.
2. If float64 matches C, proceed to K3c regression/docs updates after implementing the needed float32 fix.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:38:06] bash -lc "cat <<'EOF' > input.md
Summary: Quantify float32 vs float64 impact on the CLI scaling chain before touching normalization code.
Phase: Evidence
Focus: CLI-FLAGS-003 — Phase K3d dtype-sensitivity sweep
Branch: main
Mapped tests: none — evidence-only
Artifacts: reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/
Do Now: CLI-FLAGS-003 K3d dtype sensitivity; NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py
If Blocked: If the float64 run crashes, capture stdout/stderr to dtype_sweep/attempt_failed.log, rerun once at default dtype for comparison, and log config + traceback in Attempt History.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:173 — K3d demands dtype evidence before we reopen implementation work on normalization.
- docs/fix_plan.md:448 — New Next Actions gate K3a/K3c on confirming whether rounding causes the 21.6% F_latt drift.
- reports/2025-10-cli-flags/phase_k/f_latt_fix/scaling_chain.md — Current float32 ratios show F_latt_b≈46.98 vs C 38.63, so we need a dtype control run.
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log — C baseline keeps h=2.0012, so compare PyTorch float64 traces against this reference.
- src/nanobrag_torch/simulator.py:250 — sincg inputs depend on precise h/k/l; confirming dtype sensitivity de-risks code changes here.
How-To Map:
- Ensure editable install is active and NB_C_BIN remains pointed at golden_suite_generator/nanoBragg.
- From repo root run:
  1) "'`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`.
  2) Move generated logs/JSON into `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/` (stamp subdir).
  3) Record key deltas (hkl_frac, F_latt_*, polar) comparing float32 vs float64 in `dtype_sweep/dtype_sensitivity.md`.
- Note the environment snapshot (commit hash, torch version) alongside results.
Pitfalls To Avoid:
- Do not edit source this loop; gather evidence only.
- No pytest runs while Phase=Evidence.
- Keep Protected Assets untouched (docs/index.md references).
- Avoid clobbering existing reports—create timestamped subdirectories.
- Ensure NB_PYTORCH_DTYPE override is cleared afterward.
- Respect device/dtype neutrality—no hard-coded `.cpu()`/`.cuda()` in probes.
- Capture stdout/stderr for reproducibility; don’t rely on scrollback.
- Do not delete prior scaling artifacts; we still need baseline comparisons.
- Refrain from pushing until supervisor review closes the loop.
Pointers:
- plans/active/cli-noise-pix0/plan.md:173
- reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log
- reports/2025-10-cli-flags/phase_j/trace_c_scaling.log
- src/nanobrag_torch/models/crystal.py:681
- src/nanobrag_torch/simulator.py:250
- docs/development/c_to_pytorch_config_map.md
- specs/spec-a-core.md
Next Up:
1. If dtype drift is confirmed, tackle K3a (mosflm rescale guard) with post-fix orientation traces.
2. If float64 matches C, proceed to K3c regression/docs updates after implementing the needed float32 fix.
EOF
' succeeded in 1.42s:

[2025-10-06T21:38:06] tokens used: 223,316
[2025-10-06T21:38:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:38:09] thinking

**Preparing for summary and git status**
[2025-10-06T21:38:10] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:38:11] bash -lc 'git status --short' succeeded in 866ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-06T21:38:11] tokens used: 225,323
[2025-10-06T21:38:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:38:20] thinking

**Preparing final analysis and documentation**

I’m gathering key issues and hypotheses around float32 rounding and polarization differences to include in a summary before updating the large `galph_memory.md` file. I’ll carefully append the new entry with today’s date, making sure to capture open questions and next steps before staging and committing everything.
[2025-10-06T21:38:32] exec bash -lc "python - <<'PY'
from datetime import date
entry_date = date.today().isoformat()
lines = f\"\\n## {entry_date} (galph loop)\\n- Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.\\n- Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).\\n- Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.\\n- Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.\\n\"
with open('galph_memory.md', 'a') as fh:
    fh.write(lines)
PY
" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:38:33] bash -lc "python - <<'PY'
from datetime import date
entry_date = date.today().isoformat()
lines = f\"\\n## {entry_date} (galph loop)\\n- Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.\\n- Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).\\n- Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.\\n- Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.\\n\"
with open('galph_memory.md', 'a') as fh:
    fh.write(lines)
PY
" succeeded in 922ms:

[2025-10-06T21:38:33] tokens used: 226,102
[2025-10-06T21:38:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:38:46] thinking

**Reviewing additional lines**
[2025-10-06T21:38:47] exec bash -lc 'tail -n 20 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:38:48] bash -lc 'tail -n 20 galph_memory.md' succeeded in 1.03s:
- Vectorization plan remains untouched; Phase A baselines for tricubic/absorption still pending once CLI parity unblocks bandwidth.
- Follow-up for Ralph: execute Phase K2 per new memo, write updated scaling metrics (including F_cell vs C), keep Attempt #41 notes intact, and stage plan for K3 if ratios finally align.

## 2025-10-31 (galph loop — K2 rescope)
- Evidence review shows PyTorch still rescales MOSFLM cross products; C only does so when `user_cell` is set. Root cause for F_latt_b ≈ +21.6% identified. K2b added to plan with required `mosflm_rescale.py` artifact.
- Noted BeamConfig Kahn factor should default to 0.0 (C `polarization`). Reopened Phase I2 and updated fix_plan next steps to include default realignment during K3.
- Issued new Evidence memo (input.md) directing Ralph to rerun trace harness, refresh scaling markdown, and capture orientation deltas before touching normalization code.

## 2025-11-05 (galph loop — Phase K3 prep)
- Reviewed CLI parity backlog vs long-term goal #1; confirmed `Crystal.compute_cell_tensors` still rescales MOSFLM cross-products and `BeamConfig.polarization_factor` remains 1.0, explaining the lingering F_latt and polar deltas.
- Refreshed `plans/active/cli-noise-pix0/plan.md` context with a new 2025-11-05 recap and rewrote Phase K into a checklist (K3a–K3c) covering rescale gating, polarization defaults, and regression/docs closure.
- Updated `docs/fix_plan.md` CLI-FLAGS-003 Next Actions to point at the new Phase K3 tasks and the exact scripts/tests Ralph must run after code changes.
- Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
- Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.

## 2025-10-06 (galph loop)
- Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
- Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
- Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
- Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
[2025-10-06T21:38:48] tokens used: 226,955
[2025-10-06T21:38:48] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:38:55] thinking

**Correcting appended entry date**
[2025-10-06T21:38:57] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/galph_memory.md
@@ -1036,3 +1036,3 @@
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
[2025-10-06T21:38:57] apply_patch(auto_approved=true) exited 0 in 19ms:
Success. Updated the following files:
M galph_memory.md
[2025-10-06T21:38:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..977681ca1313f1caa1aea6bbc798479d98bd7f1d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep

[2025-10-06T21:38:57] tokens used: 228,085
[2025-10-06T21:38:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..977681ca1313f1caa1aea6bbc798479d98bd7f1d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:01] thinking

**Verifying date consistency**
[2025-10-06T21:39:02] exec bash -lc 'tail -n 20 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:39:03] bash -lc 'tail -n 20 galph_memory.md' succeeded in 918ms:
- Vectorization plan remains untouched; Phase A baselines for tricubic/absorption still pending once CLI parity unblocks bandwidth.
- Follow-up for Ralph: execute Phase K2 per new memo, write updated scaling metrics (including F_cell vs C), keep Attempt #41 notes intact, and stage plan for K3 if ratios finally align.

## 2025-10-31 (galph loop — K2 rescope)
- Evidence review shows PyTorch still rescales MOSFLM cross products; C only does so when `user_cell` is set. Root cause for F_latt_b ≈ +21.6% identified. K2b added to plan with required `mosflm_rescale.py` artifact.
- Noted BeamConfig Kahn factor should default to 0.0 (C `polarization`). Reopened Phase I2 and updated fix_plan next steps to include default realignment during K3.
- Issued new Evidence memo (input.md) directing Ralph to rerun trace harness, refresh scaling markdown, and capture orientation deltas before touching normalization code.

## 2025-11-05 (galph loop — Phase K3 prep)
- Reviewed CLI parity backlog vs long-term goal #1; confirmed `Crystal.compute_cell_tensors` still rescales MOSFLM cross-products and `BeamConfig.polarization_factor` remains 1.0, explaining the lingering F_latt and polar deltas.
- Refreshed `plans/active/cli-noise-pix0/plan.md` context with a new 2025-11-05 recap and rewrote Phase K into a checklist (K3a–K3c) covering rescale gating, polarization defaults, and regression/docs closure.
- Updated `docs/fix_plan.md` CLI-FLAGS-003 Next Actions to point at the new Phase K3 tasks and the exact scripts/tests Ralph must run after code changes.
- Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
- Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.

## 2025-10-06 (galph loop)
- Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
- Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
- Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
- Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
[2025-10-06T21:39:03] tokens used: 228,302
[2025-10-06T21:39:03] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..977681ca1313f1caa1aea6bbc798479d98bd7f1d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:16] thinking

**Investigating header date inconsistencies**
[2025-10-06T21:39:17] exec bash -lc 'rg -n "dtype sweep" galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:39:18] bash -lc 'rg -n "dtype sweep" galph_memory.md' succeeded in 897ms:
1290:- Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
[2025-10-06T21:39:18] tokens used: 229,386
[2025-10-06T21:39:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..977681ca1313f1caa1aea6bbc798479d98bd7f1d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:24] thinking

**Checking lines near 1280**
[2025-10-06T21:39:25] exec bash -lc "sed -n '1280,1305p' galph_memory.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:39:26] bash -lc "sed -n '1280,1305p' galph_memory.md" succeeded in 701ms:

## 2025-11-05 (galph loop — Phase K3 prep)
- Reviewed CLI parity backlog vs long-term goal #1; confirmed `Crystal.compute_cell_tensors` still rescales MOSFLM cross-products and `BeamConfig.polarization_factor` remains 1.0, explaining the lingering F_latt and polar deltas.
- Refreshed `plans/active/cli-noise-pix0/plan.md` context with a new 2025-11-05 recap and rewrote Phase K into a checklist (K3a–K3c) covering rescale gating, polarization defaults, and regression/docs closure.
- Updated `docs/fix_plan.md` CLI-FLAGS-003 Next Actions to point at the new Phase K3 tasks and the exact scripts/tests Ralph must run after code changes.
- Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
- Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.

## 2025-10-06 (galph loop)
- Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
- Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
- Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
- Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
[2025-10-06T21:39:26] tokens used: 336,904
[2025-10-06T21:39:26] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..977681ca1313f1caa1aea6bbc798479d98bd7f1d
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:29] thinking

**Preparing patch for header update**
[2025-10-06T21:39:30] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/galph_memory.md
@@ -1287,3 +1287,3 @@
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
[2025-10-06T21:39:30] apply_patch(auto_approved=true) exited 0 in 48ms:
Success. Updated the following files:
M galph_memory.md
[2025-10-06T21:39:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep

[2025-10-06T21:39:30] tokens used: 337,775
[2025-10-06T21:39:30] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:32] thinking

**Performing tail check**
[2025-10-06T21:39:33] exec bash -lc "sed -n '1280,1305p' galph_memory.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:39:34] bash -lc "sed -n '1280,1305p' galph_memory.md" succeeded in 773ms:

## 2025-11-05 (galph loop — Phase K3 prep)
- Reviewed CLI parity backlog vs long-term goal #1; confirmed `Crystal.compute_cell_tensors` still rescales MOSFLM cross-products and `BeamConfig.polarization_factor` remains 1.0, explaining the lingering F_latt and polar deltas.
- Refreshed `plans/active/cli-noise-pix0/plan.md` context with a new 2025-11-05 recap and rewrote Phase K into a checklist (K3a–K3c) covering rescale gating, polarization defaults, and regression/docs closure.
- Updated `docs/fix_plan.md` CLI-FLAGS-003 Next Actions to point at the new Phase K3 tasks and the exact scripts/tests Ralph must run after code changes.
- Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
- Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.

## 2025-11-06 (galph loop — K3d dtype evidence prep)
- Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
- Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
- Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
- Follow-up: Ralph to execute K3d command, archive dtype comparison, then resume K3a/K3c implementation once rounding impact is quantified.
[2025-10-06T21:39:34] tokens used: 338,023
[2025-10-06T21:39:34] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:38] thinking

**Preparing to stage and commit changes**
[2025-10-06T21:39:39] exec bash -lc 'git add docs/fix_plan.md input.md plans/active/cli-noise-pix0/plan.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:39:40] bash -lc 'git add docs/fix_plan.md input.md plans/active/cli-noise-pix0/plan.md galph_memory.md' succeeded in 792ms:

[2025-10-06T21:39:40] tokens used: 339,566
[2025-10-06T21:39:40] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:43] thinking

**Committing with structured message**
[2025-10-06T21:39:44] exec bash -lc 'git commit -m "SUPERVISOR: CLI parity plan update - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:39:45] bash -lc 'git commit -m "SUPERVISOR: CLI parity plan update - tests: not run"' succeeded in 789ms:
[feature/spec-based-2 bf8add5] SUPERVISOR: CLI parity plan update - tests: not run
 4 files changed, 49 insertions(+), 34 deletions(-)
[2025-10-06T21:39:45] tokens used: 339,864
[2025-10-06T21:39:45] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:39:49] thinking

**Pushing changes to repository**
[2025-10-06T21:39:51] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:39:53] bash -lc 'git push' succeeded in 2.08s:
To github.com:hoidn/nanoBragg.git
   d8bed8a..bf8add5  feature/spec-based-2 -> feature/spec-based-2
[2025-10-06T21:39:53] tokens used: 340,912
[2025-10-06T21:39:53] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:40:03] thinking

**Preparing final detailed summary**
[2025-10-06T21:40:05] exec bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '150,220p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:40:05] bash -lc "nl -ba plans/active/cli-noise-pix0/plan.md | sed -n '150,220p'" succeeded in 894ms:
   150	| H5e | Correct beam-center→F/S mapping units | [D] | ✅ 2025-10-24 Attempt #33. `Detector._configure_geometry` now converts `self.config.beam_center_f/s` (mm) to meters via `/1000.0` before computing Fbeam/Sbeam, resolving the 1.1mm ΔF error. All 26 CLI flags tests passing. Artifacts: `src/nanobrag_torch/models/detector.py:490-515`, `docs/fix_plan.md` Attempt #33. Original task: Investigate the 2025-10-22 trace deltas showing ΔF≈-1.1 mm. Confirm `DetectorConfig.beam_center_*` is stored in millimetres (see `__main__.py:915-937`) and update `Detector._configure_geometry` so BEAM-pivot F/S values convert mm→m before constructing pix0 (match `nanoBragg.c:1184-1239`). Add targeted trace demonstrating the fix under `reports/2025-10-cli-flags/phase_h5/unit_fix/` and record Attempt #33 in fix_plan with metrics. |
   151	
   152	### Phase I — Polarization Alignment (follow-up)
   153	Goal: Match C’s Kahn polarization factor once lattice geometry aligns.
   154	Prereqs: Phases F–H complete; traces show `F_latt` parity.
   155	Exit Criteria: Polarization entries in C/PyTorch traces agree (≈0.9126 for supervisor command) and parity smoke stays green.
   156	
   157	| ID | Task Description | State | How/Why & Guidance |
   158	| --- | --- | --- | --- |
   159	| I1 | Audit polarization inputs | [D] | ✅ Completed 2025-10-17. C defaults polar=1.0/polarization=0.0/nopolar=0 verified at nanoBragg.c:308-309. PyTorch BeamConfig.polarization_factor was defaulting to 0.0 instead of 1.0. |
   160	| I2 | Implement polarization parity | [P] | ✅ 2025-10-17 update set BeamConfig.polarization_factor default to 1.0, but C traces (2025-10-31) confirm the Kahn factor defaults to 0.0 when `-polar` is absent. Reopen to: (a) restore 0.0 default, (b) keep -polar/-nopolar overrides working, and (c) adjust TestCLIPolarization expectations accordingly. |
   161	| I3 | Final parity sweep | [P] | Attempt #27 (2025-10-06) failed with 124,538× intensity scaling gap; remains blocked pending Phase K fixes (orientation rescale + polarization default). |
   162	
   163	### Phase J — Intensity Scaling Evidence
   164	Goal: Isolate the first divergence in the normalization chain (steps, ω, r_e², fluence) responsible for the 1.2×10⁵ intensity mismatch.
   165	Prereqs: Phase I2 complete; beam/pix0/orientation traces from Phases F–H archived.
   166	Exit Criteria: Report under `reports/2025-10-cli-flags/phase_j/scaling_chain.md` documenting C vs PyTorch values for `steps`, `I_before_scaling`, `omega`, `polarization`, `r_e²`, `fluence`, and the resulting per-pixel intensities, with the first mismatched quantity identified and logged in docs/fix_plan.md Attempt history.
   167	
   168	| ID | Task Description | State | How/Why & Guidance |
   169	| --- | --- | --- | --- |
[2025-10-06T21:40:05] tokens used: 341,711
[2025-10-06T21:40:05] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:40:09] thinking

**Adding line numbers to fix_plan entry**
[2025-10-06T21:40:10] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:40:11] bash -lc "nl -ba docs/fix_plan.md | sed -n '440,520p'" succeeded in 721ms:
   440	- Immediate Next Actions (2025-10-15):
   441	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   442	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   443	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   444	- Attempts History: None — new item.
   445	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   446	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   447	
   448	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   449	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   450	- Priority: High
   451	- Status: in_progress (Phases A–H complete; pivot fix landed via H6f, pending H6g traces + Phase K normalization)
   452	- Owner/Date: ralph/2025-10-05
   453	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   454	- Reproduction (C & PyTorch):
   455	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   456	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   457	- First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
   458	- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   459	  1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
[2025-10-06T21:40:11] tokens used: 345,127
[2025-10-06T21:40:11] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:40:15] thinking

**Preparing precise file references**
[2025-10-06T21:40:16] exec bash -lc "nl -ba reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log | sed -n '20,80p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:40:17] bash -lc "nl -ba reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log | sed -n '20,80p'" succeeded in 705ms:
    20	TRACE_PY:fdet_after_rotz=0.999982 -0.005998 -0.000118
    21	TRACE_PY:sdet_after_rotz=-0.005998 -0.99997 -0.004913
    22	TRACE_PY:odet_after_rotz=-8.8e-05 0.004914 -0.999988
    23	TRACE_PY:twotheta_axis=0 1 0
    24	TRACE_PY:fdet_after_twotheta=0.999982 -0.005998 -0.000118
    25	TRACE_PY:sdet_after_twotheta=-0.005998 -0.99997 -0.004913
    26	TRACE_PY:odet_after_twotheta=-8.8e-05 0.004914 -0.999988
    27	TRACE_PY: pix0_vector_meters -0.21647571314293 0.21634316475225 -0.23019526562923
    28	TRACE_PY: fdet_vec 0.999982 -0.005998 -0.000118
    29	TRACE_PY: sdet_vec -0.005998 -0.99997 -0.004913
    30	TRACE_PY: pixel_pos_meters -0.09964424186293 0.03684732838425 -0.23108759345923
    31	TRACE_PY: R_distance_meters 0.25433870408625
    32	TRACE_PY: omega_pixel_sr 4.15860421194165e-07
    33	TRACE_PY: close_distance_meters 0.231274663460392
    34	TRACE_PY: obliquity_factor 0.90931761365727
    35	TRACE_PY: diffracted_vec -0.391777736781811 0.144875033930166 -0.908582098385091
    36	TRACE_PY: incident_vec 0.00051387949 0 -0.99999986
    37	TRACE_PY: lambda_meters 9.768e-11
    38	TRACE_PY: lambda_angstroms 0.9768
    39	TRACE_PY: scattering_vec_A_inv -4016089437.67211 1483159643.01972 935890270.422901
[2025-10-06T21:40:17] tokens used: 346,977
[2025-10-06T21:40:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:40:20] thinking

**Noting need for C trace line numbers**
[2025-10-06T21:40:21] exec bash -lc "nl -ba reports/2025-10-cli-flags/phase_j/trace_c_scaling.log | sed -n '150,220p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-06T21:40:21] bash -lc "nl -ba reports/2025-10-cli-flags/phase_j/trace_c_scaling.log | sed -n '150,220p'" succeeded in 679ms:
   150	0% done
   151	0% done
   152	0% done
   153	0% done
   154	0% done
   155	0% done
   156	0% done
   157	0% done
   158	0% done
   159	0% done
   160	0% done
   161	0% done
   162	0% done
   163	0% done
   164	TRACE_C: pix0_vector_meters -0.216475836204836 0.216343050492215 -0.230192414300537
   165	TRACE_C: fdet_vec 0.999982004873912 -0.00599800002923425 -0.000118000000575132
   166	TRACE_C: sdet_vec -0.0059979996566955 -0.999969942765222 -0.0049129997187971
   167	TRACE_C: pixel_pos_meters -0.0996443642887915 0.0368472243540029 -0.231084742080328
   168	TRACE_C: R_distance_meters 0.254336146269938
   169	TRACE_C: omega_pixel_sr 4.15867865980257e-07
[2025-10-06T21:40:21] tokens used: 348,546
[2025-10-06T21:40:21] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep


[2025-10-06T21:40:31] thinking

**Summarizing key updates and hypotheses**

I'm organizing a final message that highlights line-numbered references to trace differences and plan updates, outlines 1–3 prioritized hypotheses with confidence and next steps focused on CLI parity debugging, and mentions the pending vectorization plan and recent docs/input updates. I’ll emphasize clear structure with sections for key points, hypotheses, and next steps to keep the user informed.
[2025-10-06T21:40:32] codex

**Key Points**
- PyTorch still drifts on the supervisor pixel: `hkl_frac` ≈ (1.9993, 1.9997, −12.9919) and `F_latt_b` ≈ 46.98 vs C’s 38.63, with `polar=1.0` vs 0.9126; see `reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log:30-65` and `reports/2025-10-cli-flags/phase_j/trace_c_scaling.log:167-203`.
- Updated CLI parity plan to add Phase K3d dtype diagnostics so we can quantify float32 rounding before code changes (`plans/active/cli-noise-pix0/plan.md:174-187`); `docs/fix_plan.md:448-462` now gates normalization work on that evidence run.
- Issued an Evidence-phase memo in `input.md` directing Ralph to run `analyze_scaling.py` under `NB_PYTORCH_DTYPE=float64` and stash results in `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`.
- Logged the supervisor decision in `galph_memory.md` for the next loop (dtype sweep before resuming K3a/K3c).
- Vectorization plan remains untouched; we’ll resume once CLI-FLAGS-003 reaches Phase L.

**Hypotheses**
1. Float32 geometry rounding (≈2.8 µm close-distance delta) shifts fractional Miller indices off integers and amplifies sincg → High confidence; confirm by the float64 rerun captured in Phase K3d (`NB_PYTORCH_DTYPE=float64 … analyze_scaling.py`).
2. Residual polarization mismatch may stem from PyTorch’s polarization axis handling (C computes 0.9126 while PyTorch holds 1.0); log axis/ψ terms during the dtype sweep to verify.
3. If float64 still diverges, revisit MOSFLM rescale gating to ensure downstream caches use the guard (rerun `mosflm_rescale.py` after dtype evidence).

**Next Steps**
- Ralph executes the K3d dtype sweep per `input.md`, archives results under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and records conclusions in `dtype_sensitivity.md`.
- Once dtype impact is understood, resume Phase K3a/K3c implementation/tests as already tracked in the plan.
[2025-10-06T21:40:38] tokens used: 351,101
[2025-10-06T21:40:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 8a63633fc4cef7d288665c7375ae083054434538..c0e9166532e2a487744ccb61e904c24430e8914b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -455,10 +455,11 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase C2 parity run exposed a 2.58e2× intensity scaling mismatch (PyTorch max_I≈1.15e5 vs C max_I≈4.46e2). Post-pivot traces (2025-10-31) show two remaining blockers: (a) PyTorch always rescales MOSFLM cross products to user-provided cell lengths, whereas C skips `vector_rescale` unless `-cell` was supplied, yielding ~4.6×10⁻² Å error in `rot_b` and F_latt_b ≈ +21.6 %; (b) BeamConfig still defaults the Kahn factor to 1.0, while C leaves `polarization=0.0`, producing polar=1.0 vs 0.9126.
-- Next Actions (2025-11-05 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
+- Next Actions (2025-11-06 refresh): Phase K3 is the remaining blocker before rerunning the supervisor command — execute these plan tasks in order:
   1. Phase K3a — update `Crystal.compute_cell_tensors` to skip the cross-product rescale whenever MOSFLM reciprocal vectors are supplied, then rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and archive the deltas as `orientation_delta_post_fix.md`.
   2. Phase K3b — set `BeamConfig.polarization_factor` default to 0.0, keep `-polar`/`-nopolar` wiring intact, and capture a fresh scaling-chain delta report (`scaling_chain_post_fix.md`) showing `polar≈0.9126` to match C.
-  3. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
+  3. Phase K3d — run the dtype sweep (`NB_PYTORCH_DTYPE=float64 PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py`), stash outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`, and summarize the float32 vs float64 impact on `hkl_frac`/`F_latt_*` in `dtype_sensitivity.md`.
+  4. Phase K3c — run `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v`, update `docs/architecture/pytorch_design.md` + `docs/development/testing_strategy.md`, and log Attempt #43 with artifacts in `reports/2025-10-cli-flags/phase_k/f_latt_fix/`.
 - Attempts History:
   * [2025-10-06] Attempt #27 (ralph) — Result: **PARITY FAILURE** (Phase I3 supervisor command). **Intensity scaling discrepancy: 124,538× sum ratio.**
     Metrics: Correlation=0.9978 (< 0.999 threshold), sum_ratio=124,538 (should be ~1.0), C max_I=446, PyTorch max_I=5.411e7 (121,000× discrepancy), mean_peak_distance=37.79 px (> 1 px threshold).
diff --git a/galph_memory.md b/galph_memory.md
index 4f0949c3945cf869e6da60a979e6b649aec2bbd4..11df63ff240b2a38eac6fd25ace7b33b4d4e4fb0
--- a/galph_memory.md
+++ b/galph_memory.md
@@ -1034,7 +1034,7 @@
 - Authored new 106-line input.md directing Ralph to clone the trace harness, remove manual beam override, capture fresh PyTorch traces/diffs, and log findings (reports/2025-10-cli-flags/phase_h/*). Added reporting checklist + reference metrics.
 - Follow-ups for Ralph next loop: execute Phase H1 evidence capture, then tackle Phase H2 sincg/NaNbNc diagnosis, defer polarization (Phase I) and `scaled.hkl.1` cleanup until lattice parity improves.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Coin flip=heads → reviewed Ralph commits d150858, b73f0e2; work productive (Phase H1 evidence, Phase G3 orientation fix).
 - Updated plans/active/cli-noise-pix0/plan.md Phase H goal + tasks (H1 marked done; new H2 beam propagation, H3 lattice, H4 parity).
 - docs/fix_plan.md Next Actions now call out H2–H4 sequence; reinforced beam-vector fix as first deliverable.
@@ -1285,7 +1285,7 @@
 - Issued `input.md` (Implementation phase) instructing Ralph to land K3a–K3c, capture mosflm_rescale + scaling_chain artifacts under `reports/2025-10-cli-flags/phase_k/f_latt_fix/`, and rerun the targeted scaling pytest.
 - Follow-up for Ralph: implement the rescale guard + polarization default fix, regenerate scaling evidence, run `pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c`, then log Attempt #43 before moving to Phase L.
 
-## 2025-10-06 (galph loop)
+## 2025-11-06 (galph loop — K3d dtype evidence prep)
 - Reviewed CLI-FLAGS-003 parity status: traces still show F_latt drift (Py F_latt_b≈46.98 vs C 38.63) despite SAMPLE pivot parity. Fractional h shifts (2.0012→1.9993) line up with ~2.8 µm close-distance delta.
 - Hypothesis: float32 rounding in detector geometry/scattering vector pipeline drives the sincg amplification; added Phase K3d dtype sweep to plan and fix_plan (dtype_sensitivity.md artifacts under reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/).
 - Updated supervisor memo targeting evidence-only float64 rerun; no pytest this loop.
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 182ee648b38dcc68b3a16f7a402ec619391914cd..ce3d6d9e5aa0c85d10a8389a405a0bad711fc448
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -11,6 +11,7 @@
 - Gap insight (2025-10-31): Scaling evidence shows MOSFLM matrix runs still rescale real vectors using formula lengths; C skips that step unless `-cell` is provided, so PyTorch must gate the `vector_rescale` analogue when `mosflm_a_star` is set. The same trace confirms the polarization Kahn factor should default to 0.0 (C’s `polarization`), not 1.0, so BeamConfig defaults need to be realigned before Phase L.
 - Gap correction (2025-10-22): Fresh C evidence (`reports/2025-10-cli-flags/phase_h5/c_precedence_2025-10-22.md`) proves nanoBragg ignores `-pix0_vector_mm` whenever custom detector vectors are present. PyTorch now deviates because the lattice factor uses fractional indices (h−h0); fix required before normalization parity.
 - Gap recap (2025-11-05): Manual inspection of `src/nanobrag_torch/models/crystal.py` shows the cross-product rescale still runs even when MOSFLM reciprocal vectors are supplied (lines 681-705), and `BeamConfig.polarization_factor` defaults to 1.0, so scaling remains off despite SAMPLE pivot parity.
+- Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Evidence status: Phase E artifacts (`reports/2025-10-cli-flags/phase_e/`) hold C/PyTorch traces, diffs, and beam-vector checks. Phase H3b1 also stashes WITH/without override traces under `reports/2025-10-cli-flags/phase_h/implementation/` for reference.
 - Documentation anchors for this focus:
   * `specs/spec-a-core.md` — canonical lattice-factor formulas (SQUARE uses sincg(π·h, Na); ROUND/GAUSS definitions used to verify Phase K).
@@ -182,6 +183,7 @@
 | K2b | Document MOSFLM rescale mismatch | [D] | ✅ 2025-10-06 Attempt #42. Created mosflm_rescale.py and orientation_delta.md. Finding: C skips vector_rescale when `user_cell==0`, but PyTorch still rescales, leading to persistent F_latt_b drift. |
 | K3a | Guard MOSFLM rescale path in `Crystal.compute_cell_tensors` | [ ] | Bypass the cross-product rescale when `mosflm_a_star`/`b_star`/`c_star` tensors are provided. After patching `src/nanobrag_torch/models/crystal.py:681-705`, rerun `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python reports/2025-10-cli-flags/phase_k/f_latt_fix/mosflm_rescale.py` and append new ratios to `orientation_delta.md`; stash a post-fix copy as `orientation_delta_post_fix.md`. |
 | K3b | Realign polarization defaults with C | [ ] | Set `BeamConfig.polarization_factor` default to 0.0, keep `-polar` CLI wiring to populate it, and ensure `-nopolar` forces 1.0. Re-run the scaling harness (`reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_output.txt`) to confirm `polar` matches C (≈0.9126); capture results in `scaling_chain_post_fix.md`. |
+| K3d | Diagnose dtype sensitivity of F_latt | [ ] | Re-run `reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py` with detector/crystal/simulator forced to float64 (e.g., `NB_PYTORCH_DTYPE=float64`) and store outputs under `reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`. Compare `hkl_frac` and `F_latt_*` vs float32 to confirm whether rounding drives the 21.6% error; summarize findings in `dtype_sensitivity.md`. |
 | K3c | Regression & documentation close-out | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 pytest tests/test_cli_scaling.py::test_f_latt_square_matches_c -v` plus any new normalization tests. Save log as `phase_k/f_latt_fix/pytest_post_fix.log`, update `docs/architecture/pytorch_design.md` normalization notes and `docs/development/testing_strategy.md`, then record Attempt #43 with metrics and artifacts. |
 
 ### Phase L — Final Parity & Regression Sweep

Reading prompt from stdin...
Already up to date.
To github.com:hoidn/nanoBragg.git
   bf8add5..7c4a1e1  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=50...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=50
Updating 7c4a1e1..2d82b59
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   7c4a1e1..2d82b59  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=50
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 2d82b59..271e2b6
Fast-forward
 docs/fix_plan.md                                   |  17 +
 .../phase_k/f_latt_fix/analyze_scaling.py          | 365 +++++++++++++++++++++
 .../f_latt_fix/dtype_sweep/dtype_sensitivity.json  |  29 ++
 .../f_latt_fix/dtype_sweep/dtype_sensitivity.md    | 140 ++++++++
 .../phase_k/f_latt_fix/dtype_sweep/float32_run.log |  40 +++
 .../phase_k/f_latt_fix/dtype_sweep/float64_run.log |  71 ++++
 .../f_latt_fix/dtype_sweep/trace_float32.json      |  26 ++
 .../f_latt_fix/dtype_sweep/trace_float64.json      |  26 ++
 8 files changed, 714 insertions(+)
 create mode 100755 reports/2025-10-cli-flags/phase_k/f_latt_fix/analyze_scaling.py
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/dtype_sensitivity.json
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/dtype_sensitivity.md
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/float32_run.log
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/float64_run.log
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/trace_float32.json
 create mode 100644 reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/trace_float64.json
From github.com:hoidn/nanoBragg
   2d82b59..271e2b6  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 271e2b6..bf42f7a
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   271e2b6..bf42f7a  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=51
Ralph completed iteration 50; proceeding to 51
