Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=102
To github.com:hoidn/nanoBragg.git
   41ed3c0..5d1ff46  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T14:57:00] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T14:57:00] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T14:57:05] thinking

**Preparing to run git pull with rebase**
[2025-10-07T14:57:05] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:08] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.18s:
Already up to date.
[2025-10-07T14:57:08] tokens used: 13,979

[2025-10-07T14:57:15] thinking

**Planning file reads and memory check**
[2025-10-07T14:57:15] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:16] bash -lc 'cat galph_memory.md' succeeded in 721ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T14:57:16] tokens used: 15,103

[2025-10-07T14:57:20] thinking

**Preparing to read documentation files**
[2025-10-07T14:57:21] exec bash -lc "sed -n '1,160p' docs/index.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:22] bash -lc "sed -n '1,160p' docs/index.md" succeeded in 709ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T14:57:22] tokens used: 18,113

[2025-10-07T14:57:24] thinking

**Skimming spec-a.md**
[2025-10-07T14:57:25] exec bash -lc "sed -n '1,200p' specs/spec-a.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:26] bash -lc "sed -n '1,200p' specs/spec-a.md" succeeded in 680ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T14:57:26] tokens used: 19,776

[2025-10-07T14:57:28] thinking

**Considering scope of specification files**
[2025-10-07T14:57:29] exec bash -lc "sed -n '1,200p' arch.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:29] bash -lc "sed -n '1,200p' arch.md" succeeded in 689ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T14:57:29] tokens used: 20,194

[2025-10-07T14:57:31] thinking

**Opening next documentation file**
[2025-10-07T14:57:33] exec bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:33] bash -lc "sed -n '1,200p' docs/development/c_to_pytorch_config_map.md" succeeded in 670ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T14:57:33] tokens used: 22,768

[2025-10-07T14:57:37] thinking

**Opening debugging documentation**
[2025-10-07T14:57:38] exec bash -lc "sed -n '1,200p' docs/debugging/debugging.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:39] bash -lc "sed -n '1,200p' docs/debugging/debugging.md" succeeded in 715ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T14:57:39] tokens used: 24,718

[2025-10-07T14:57:42] thinking

**Checking for fix_plan.md file**
[2025-10-07T14:57:43] exec bash -lc ls in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:44] bash -lc ls succeeded in 680ms:
1.0
1e6
A.mat
AGENTS.md
AT012_TRACE_ANALYSIS.md
CLAUDE.md
COMMIT_MESSAGE.md
DEBUGGING_NIGHTMARE_PREVENTION_TOOLKIT.md
FINAL_DIAGNOSIS_REPORT.md
HYPOTHESIS_TESTING_RESULTS.md
HYPOTHESIS_TEST_RESULTS.md
LICENSE
Makefile
P1.hkl
PARALLEL_TEST_COMMANDS.md
PARALLEL_VALIDATION_ACCEPTANCE_TESTS.md
PERFORMANCE_ANALYSIS.md
PHASE_4_1_DIAGNOSTIC_REPORT.md
PHASE_5_FINAL_VALIDATION_REPORT.md
PHASE_5_IMPLEMENTATION_SUMMARY.md
[2025-10-07T14:57:44] tokens used: 27,013

[2025-10-07T14:57:47] thinking

**Checking file naming conventions**
[2025-10-07T14:57:48] exec bash -lc 'ls docs | head' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:49] bash -lc 'ls docs | head' succeeded in 695ms:
CLAUDE.md
README.md
architecture
debugging
development
fix_plan.md
fix_plan_archive.md
fix_plan_update.md
index.md
ralph.md
[2025-10-07T14:57:49] tokens used: 28,617

[2025-10-07T14:57:51] thinking

**Checking for fix_plan document**
[2025-10-07T14:57:52] exec bash -lc "sed -n '1,160p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:53] bash -lc "sed -n '1,160p' docs/fix_plan.md" succeeded in 698ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T14:57:53] tokens used: 55,731

[2025-10-07T14:57:55] thinking

**Preparing to explore docs further**
[2025-10-07T14:57:56] exec bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:57:57] bash -lc "sed -n '1,200p' docs/development/testing_strategy.md" succeeded in 683ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T14:57:57] tokens used: 58,774

[2025-10-07T14:58:00] thinking

**Preparing for in-depth code analysis**

I'm getting ready to deeply analyze the codebase aligned with the long-term goals and will review the partially read `docs/fix_plan.md` as well as any active plans in the `plans/active/` directory to understand existing relevant tasks.
[2025-10-07T14:58:02] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:02] bash -lc 'ls plans/active' succeeded in 664ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T14:58:02] tokens used: 64,345

[2025-10-07T14:58:10] thinking

**Reviewing relevant plans**
[2025-10-07T14:58:12] exec bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:13] bash -lc "sed -n '1,200p' plans/active/cli-noise-pix0/plan.md" succeeded in 875ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T14:58:13] tokens used: 65,204

[2025-10-07T14:58:16] thinking

**Focusing on CLI flags and long-term goals**
[2025-10-07T14:58:17] exec bash -lc "sed -n '1,200p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:18] bash -lc "sed -n '1,200p' plans/active/vectorization.md" succeeded in 695ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T14:58:18] tokens used: 68,197

[2025-10-07T14:58:20] thinking

**Continuing to review remaining content**
[2025-10-07T14:58:21] exec bash -lc "sed -n '200,400p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:22] bash -lc "sed -n '200,400p' plans/active/vectorization.md" succeeded in 689ms:

[2025-10-07T14:58:22] tokens used: 70,323

[2025-10-07T14:58:28] thinking

**Reviewing next steps and plans**
[2025-10-07T14:58:29] exec bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:29] bash -lc 'rg "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 725ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
[2025-10-07T14:58:29] tokens used: 70,620
[2025-10-07T14:58:32] exec bash -lc "sed -n '450,580p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:33] bash -lc "sed -n '450,580p' docs/fix_plan.md" succeeded in 696ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-21 refresh → galph):
1. Phase L3k.3 — Finish the outstanding verification gates: regenerate per-φ traces (VG-1), run the supervisor ROI nb-compare (VG-3), and refresh the component delta audit (VG-4) with artifacts under `reports/2025-10-cli-flags/phase_l/rot_vector/`. Update `fix_checklist.md` as each gate turns ✅.
2. Phase L3k.3/VG-5 — Once VG-1/VG-3/VG-4 evidence lands, update `mosflm_matrix_correction.md`, the checklist, and plan notes to flip the VG-5 documentation rows.
3. Phase L3k.4 — After all VG gates pass, record the new Attempt in this entry (metrics: correlation, sum_ratio, b_Y, k_frac) and sync plan/fix_plan ahead of the Phase L4 supervisor-command parity rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
      - `docs/fix_plan.md` — Next Actions retargeted to Phase L3k; checklist referenced.
[2025-10-07T14:58:33] tokens used: 71,117

[2025-10-07T14:58:35] thinking

**Checking for latest attempts**
[2025-10-07T14:58:36] exec bash -lc "sed -n '580,760p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:36] bash -lc "sed -n '580,760p' docs/fix_plan.md" succeeded in 745ms:
    Observations/Hypotheses:
      - **Spindle vectors identical:** Raw=[-1.0,0.0,0.0], Normalized=[-1.0,0.0,0.0], Magnitude=1.0 (exact unit vector)
      - **H1 verdict:** PyTorch's `unitize()` call in `rotate_axis` (utils/geometry.py:91) is a no-op; cannot explain Y-drift O(1e-2) Å
      - **H2 confirmed ruled out:** Volume delta O(1e-3) Å³ << Y-drift magnitude
      - **H3 promoted to primary:** MOSFLM matrix semantics now leading suspect (reciprocal perfect O(1e-9), real diverges in Y)
      - **Test stability:** `pytest --collect-only` passed 4/4 variants after instrumentation
    Next Actions: Phase L3h — Document H3 investigation plan (compare `read_mosflm_matrix` vs C A.mat parsing); update plans/active/cli-noise-pix0/plan.md L3g→[D] (✅ DONE); investigate MOSFLM real↔reciprocal recalculation sequencing before proposing corrective patches.
  * [2025-10-07] Attempt #92 (ralph loop i=92) — Result: **SUCCESS** (Phase L3h MOSFLM matrix probe COMPLETE). **H2 (volume mismatch) RULED OUT — V_formula ≈ V_actual to machine precision.**
    Metrics: V_formula=24682.2566301113 Å³, V_actual=24682.2566301114 Å³, Δ=1.45e-11 Å³ (rel_err=5.9×10⁻¹⁶); reciprocal regeneration exact to 15 digits; pytest collection 579 tests.
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.md` - Primary evidence document
      - `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe_output.log` - 12 MOSFLM probe lines (post-misset reciprocals, reconstructed reals, re-derived reciprocals)
      - `reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_probe.log` - Full 43 TRACE_PY lines
      - `reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py` - Adapted harness from scaling_audit pattern
      - `reports/2025-10-cli-flags/phase_l/rot_vector/harness_run.log` - Execution log
      - `reports/2025-10-cli-flags/phase_l/rot_vector/test_collect.log` - Pytest collection validation
    Observations/Hypotheses:
      - **Volume hypothesis eliminated:** PyTorch uses correct V_actual throughout reciprocal→real→reciprocal pipeline per CLAUDE.md Rule #13
      - **Reciprocal recalculation perfect:** Post-misset a*/b*/c* match re-derived a*/b*/c* to 15 significant figures
      - **H2 cannot explain Y-drift:** Volume delta O(1e-11) Å³ is 7 orders of magnitude smaller than b_Y drift O(1e-2) Å
[2025-10-07T14:58:36] tokens used: 73,217

[2025-10-07T14:58:41] thinking

**Reviewing progress and planning next steps**
[2025-10-07T14:58:42] exec bash -lc "python -c \"import random; import secrets; import time; print('heads' if random.random()<0.5 else 'tails')\"" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:43] bash -lc "python -c \"import random; import secrets; import time; print('heads' if random.random()<0.5 else 'tails')\"" succeeded in 733ms:
heads
[2025-10-07T14:58:43] tokens used: 85,728

[2025-10-07T14:58:46] thinking

**Reviewing recent commits**
[2025-10-07T14:58:46] exec bash -lc 'git log --oneline -10' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:47] bash -lc 'git log --oneline -10' succeeded in 737ms:
5d1ff46 [SYNC i=102] actor=galph status=running
41ed3c0 [SYNC i=102] actor=ralph → next=galph status=ok ralph_commit=b9a7071
b9a7071 CLI-FLAGS-003 tests: Align spindle_axis with supervisor command
0317898 [SYNC i=101] actor=ralph status=running
8c24113 [SYNC i=101] actor=galph → next=ralph status=ok galph_commit=52037df
52037df SUPERVISOR: CLI spindle triage - tests: not run
c97bc42 [SYNC i=101] actor=galph status=running
c919dcd [SYNC i=101] actor=ralph → next=galph status=ok ralph_commit=519ee8b
519ee8b CLI-FLAGS-003 Phase L3k.3: Add φ=0 parity tests documenting base-vector drift
27f1115 [SYNC i=100] actor=ralph status=running
[2025-10-07T14:58:47] tokens used: 88,979

[2025-10-07T14:58:51] thinking

**Reviewing specific commits for issues**
[2025-10-07T14:58:52] exec bash -lc 'git show b9a7071' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:53] bash -lc 'git show b9a7071' succeeded in 813ms:
commit b9a70715f4807d0758141bb8eef52e1b91fbdb86
Author: ollie <ohoidn>
Date:   Tue Oct 7 07:56:09 2025 -0700

    CLI-FLAGS-003 tests: Align spindle_axis with supervisor command
    
    Phase L3k.3 VG-1 preflight: Updated test_cli_scaling_phi0.py to use
    spindle_axis=(-1,0,0) matching supervisor command convention per
    input.md:16 and c_to_pytorch_config_map.md:42.
    
    Changes:
    - tests/test_cli_scaling_phi0.py:87,182 - Updated spindle_axis from
      [0,1,0] (Y-axis) to [-1,0,0] (supervisor convention) in both tests
    
    Evidence captured (EXPECTED failures per TDD):
    - test_rot_b_matches_c: rot_b[0,0,1] rel_error=0.0681 (6.8%)
      Expected: 0.6716 Å (C trace), Got: 0.7173 Å (Py), Δ=+0.0457 Å
    - test_k_frac_phi0_matches_c: k_frac abs_error=2.28
      Expected: -0.607 (C), Got: 1.676 (Py), Δ=+2.28
    
[2025-10-07T14:58:53] tokens used: 89,688

[2025-10-07T14:58:58] thinking

**Investigating intentionally failing tests**
[2025-10-07T14:58:58] exec bash -lc "sed -n '1,240p' tests/test_cli_scaling_phi0.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:58:59] bash -lc "sed -n '1,240p' tests/test_cli_scaling_phi0.py" succeeded in 702ms:
"""
CLI Scaling φ=0 Parity Tests for CLI-FLAGS-003 Phase L3k.3

Tests φ=0 rotated lattice vectors and Miller indices to capture the base-vector
drift before implementing the fix for independent real/reciprocal rotation.

Evidence base: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
Plan reference: plans/active/cli-noise-pix0/plan.md Phase L3k.3
Supervisor memo: input.md:22-45 (Do Now for Phase L3k.3)
"""
import os
import sys
from pathlib import Path
import pytest
import torch
import numpy as np

# Set required environment variable
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

[2025-10-07T14:58:59] tokens used: 93,245

[2025-10-07T14:59:03] thinking

**Analyzing failing tests without expected failure marks**
[2025-10-07T14:59:04] exec bash -lc 'git show 519ee8b' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:04] bash -lc 'git show 519ee8b' succeeded in 725ms:
commit 519ee8b408c61b1f84fbb52b3f82cb6dc5ddecf6
Author: ollie <ohoidn>
Date:   Tue Oct 7 07:28:35 2025 -0700

    CLI-FLAGS-003 Phase L3k.3: Add φ=0 parity tests documenting base-vector drift
    
    - tests: not run (red expected per TDD)
    - status: evidence-only loop per input.md Do Now
    
    Evidence
    - Created tests/test_cli_scaling_phi0.py with TestPhiZeroParity class
    - test_rot_b_matches_c: Asserts rot_b[0,0,1] at φ=0 matches C value (0.6716 Å)
      FAILED: Expected 0.6716 Å, got 0.7173 Å, relative error 6.8%
    - test_k_frac_phi0_matches_c: Asserts k_frac at φ=0 matches C value (-0.607)
      FAILED: Expected -0.607, got 1.676, absolute error 2.28
    - Test collection: 2/2 tests collected successfully
    - Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
      {pytest_phi0.log, pytest_collect.log, sha256.txt}
    
    Root Cause Documented
[2025-10-07T14:59:04] tokens used: 100,144

[2025-10-07T14:59:13] thinking

**Reviewing recent commits and plans**

I'm checking recent commits to see if the work has been productive or regressive, especially noting intentionally failing tests likely meant to be fixed later. I’m also comparing this with existing plans for CLI parameter support and vectorization to decide if any updates or new plans are necessary.
[2025-10-07T14:59:17] exec bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:18] bash -lc 'rg "VECTOR-TRICUBIC-001" -n docs/fix_plan.md' succeeded in 899ms:
19:| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
1985:## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
[2025-10-07T14:59:18] tokens used: 106,727
[2025-10-07T14:59:22] exec bash -lc "sed -n '1985,2150p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:23] bash -lc "sed -n '1985,2150p' docs/fix_plan.md" succeeded in 697ms:
## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
- Priority: High
- Status: in_progress (Phases A–B complete; Phase C implementation pending)
- Owner/Date: galph/2025-10-17
- Plan Reference: `plans/active/vectorization.md`
- Reproduction (C & PyTorch):
  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions (2025-11-21 refresh):
 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
- Attempts History:
  * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
    Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
    Artifacts:
      - `reports/2025-10-vectorization/phase_a/test_at_str_002.collect.log` — Test collection output confirming 3 tests collected
[2025-10-07T14:59:23] tokens used: 107,357

[2025-10-07T14:59:32] thinking

**Evaluating completeness of vectorization plan**

I'm checking if the existing vectorization plan fully covers all upcoming tasks, especially phases C2 and C3. I want to confirm the plan's consistency and whether updates are needed before moving forward with instructing the engineer. It seems some newer tasks might be missing or lacking detail, so I'll review the plan file carefully to ensure it's complete and up to date.
[2025-10-07T14:59:34] exec bash -lc "sed -n '120,260p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:35] bash -lc "sed -n '120,260p' plans/active/vectorization.md" succeeded in 767ms:

[2025-10-07T14:59:35] tokens used: 110,389

[2025-10-07T14:59:37] thinking

**Reviewing full file content**
[2025-10-07T14:59:38] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:39] bash -lc 'cat plans/active/vectorization.md' succeeded in 678ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T14:59:39] tokens used: 110,594

[2025-10-07T14:59:43] thinking

**Retrieving continued plan section**
[2025-10-07T14:59:44] exec bash -lc "sed -n '60,140p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:45] bash -lc "sed -n '60,140p' plans/active/vectorization.md" succeeded in 736ms:
| E1 | Regression tests sweep | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_tricubic_vectorized.py -v` (CPU + CUDA when available). Log outputs under `phase_e/pytest.log`. |
| E2 | Performance benchmark | [ ] | Reuse the Phase A harnesses (`tricubic_baseline.py`, `absorption_baseline.py`) in "baseline" vs "vectorized" modes; run CPU & CUDA sweeps with identical seeds and persist outputs to `phase_e/perf_results.json`. |
| E3 | Parity against C reference | [ ] | Use `nb-compare --resample --outdir reports/2025-10-vectorization/phase_e/nb_compare -- -default_F ...` (match AT-STR-002 config) to ensure intensities align within tolerance. Summarize metrics in `phase_e/summary.md`. |

### Phase F — Detector Absorption Vectorization
Goal: Apply the same vectorization discipline to `_apply_detector_absorption`, eliminating Python loops over `thicksteps` while preserving physics.
Prereqs: Phase E validated so tricubic changes are stable; absorption baseline from Phase A available.
Exit Criteria: Vectorized absorption path merged, tests updated, and performance improvements documented similar to tricubic work.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| F1 | Refresh design notes | [ ] | Append absorption section to `design_notes.md` describing tensor shapes (`(T,S,F)`), numerical stability considerations, and potential reuse of exponential precomputation. |
| F2 | Implement vectorized absorption | [ ] | Modify `_apply_detector_absorption` to broadcast layer indices and parallax tensors as described; maintain differentiability and device neutrality. Record implementation notes in `phase_f/implementation.md`. |
| F3 | Validate & benchmark | [ ] | `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_abs_001.py -v` plus microbenchmark update; capture results under `phase_f/summary.md` comparing against Phase A data. |

### Phase G — Documentation & Closure
Goal: Ensure documentation, plans, and fix_plan reflect the new vectorized behavior and that artifacts are archived.
Prereqs: Phases A–F complete.
Exit Criteria: Plan archived or marked complete, docs updated, and fix_plan entry closed.

[2025-10-07T14:59:45] tokens used: 112,591

[2025-10-07T14:59:49] thinking

**Identifying missing details in Phase C table**
[2025-10-07T14:59:50] exec bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
print(text.split('### Phase C')[1].split('### Phase D')[0])
PY" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:51] bash -lc "python - <<'PY'
from pathlib import Path
text = Path('plans/active/vectorization.md').read_text()
print(text.split('### Phase C')[1].split('### Phase D')[0])
PY" succeeded in 829ms:
 — Implementation: Neighborhood Gather
Goal: Replace scalar neighbor gathering with fully batched advanced indexing inside `Crystal._tricubic_interpolation` while keeping fallbacks for out-of-range queries.
Prereqs: Phase B design finalized; create feature branch per SOP if needed.
Exit Criteria: Vectorized gather merged, unit tests covering neighborhood assembly added, and plan task C1–C3 marked done with artifact references.
Implementation notes: capture all Phase C artifacts under `reports/2025-10-vectorization/phase_c/` (see table for filenames). Confirm every new test collects via `pytest --collect-only` before running the selector.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
| C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |


[2025-10-07T14:59:51] tokens used: 113,481

[2025-10-07T14:59:57] thinking

**Checking plan inconsistencies**
[2025-10-07T14:59:58] exec bash -lc 'rg "C2" -n plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T14:59:58] bash -lc 'rg "C2" -n plans/active/vectorization.md' succeeded in 681ms:
5:- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
6:- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
39:| C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
[2025-10-07T14:59:58] tokens used: 114,357

[2025-10-07T15:00:02] thinking

**Investigating status discrepancies**
[2025-10-07T15:00:03] exec bash -lc 'ls reports/2025-10-vectorization/phase_c' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:00:04] bash -lc 'ls reports/2025-10-vectorization/phase_c' succeeded in 672ms:
collect_log.txt
diff_snapshot.json
gather_notes.md
gradient_smoke.log
implementation_notes.md
runtime_probe.json
status_snapshot.txt
test_tricubic_interpolation_enabled.log
test_tricubic_out_of_bounds_fallback.log
test_tricubic_vectorized.log
[2025-10-07T15:00:04] tokens used: 114,994

[2025-10-07T15:00:07] thinking

**Checking existence and content of log file**
[2025-10-07T15:00:08] exec bash -lc 'head -n 40 reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:00:08] bash -lc 'head -n 40 reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log' succeeded in 654ms:
============================= test session starts ==============================
platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /home/ollie/miniconda3/envs/myenv/bin/python3.13
cachedir: .pytest_cache
rootdir: /home/ollie/Documents/tmp/nanoBragg
configfile: pyproject.toml
collecting ... collected 8 items

tests/test_tricubic_vectorized.py::TestTricubicGather::test_vectorized_matches_scalar PASSED [ 12%]
tests/test_tricubic_vectorized.py::TestTricubicGather::test_neighborhood_gathering_internals PASSED [ 25%]
tests/test_tricubic_vectorized.py::TestTricubicGather::test_oob_warning_single_fire ✓ Phase C2: OOB warning single-fire behavior validated
  - First OOB: warning printed, interpolation disabled, returned default_F=100.0
  - Second OOB: no warning, still returns default_F=100.0
  - In-bounds post-disable: uses fallback path, returns 50.0
PASSED [ 37%]
tests/test_tricubic_vectorized.py::TestTricubicGather::test_device_neutrality[cpu] PASSED [ 50%]
tests/test_tricubic_vectorized.py::TestTricubicGather::test_device_neutrality[cuda] PASSED [ 62%]
tests/test_at_str_002.py::test_tricubic_interpolation_enabled PASSED     [ 75%]
tests/test_at_str_002.py::test_tricubic_out_of_bounds_fallback PASSED    [ 87%]
tests/test_at_str_002.py::test_auto_enable_interpolation PASSED          [100%]

[2025-10-07T15:00:08] tokens used: 115,290

[2025-10-07T15:00:21] thinking

**Evaluating plan and fix_plan alignment**

I'm sorting out how to update the vectorization plan and fix_plan to reflect that phase C2 is done and only C3 remains, ensuring consistency between documents. This looks like a planning task since it involves modifying the main plan’s notes and next actions, so I’m preparing to review related docs to support the update.
[2025-10-07T15:00:22] exec bash -lc "sed -n '1,200p' docs/architecture/pytorch_design.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:00:23] bash -lc "sed -n '1,200p' docs/architecture/pytorch_design.md" succeeded in 908ms:
# nanoBragg PyTorch Architecture Design (Addendum)

## 1.2 Differentiability vs Performance

Principle: Differentiability is required; over-hardening is not. Prefer the minimal change that passes gradcheck and preserves vectorization.

- Minimal Differentiability Contract
  - Return analytic limits at removable singularities only when the raw op produces NaN/Inf or unacceptable relative error in tests.
  - Keep the nominal fast path branch-free (or mask-based) and fully vectorized.
  - Avoid speculative guards and extra branches unless backed by (a) a reproduced gradient failure or (b) a measured numerical/perf improvement.

- Branching Budget (Hot Helpers)
  - Per-element branching inside hot helpers (e.g., `sincg`, `sinc3`, polarization) must be justified with numbers (gradcheck evidence or microbenchmark delta).

- Mask vs Guard
  - Masks gate analytic limits; a single epsilon guard may backstop tiny denominators. If the mask tolerance renders guards redundant, prefer the mask alone.

- Precision Guidance
  - Default dev dtype: float64; default prod dtype: float32. Tolerances must state dtype assumptions and be tested in both where relevant.

[2025-10-07T15:00:23] tokens used: 116,737

[2025-10-07T15:00:26] thinking

**Checking additional spec files**
[2025-10-07T15:00:39] exec bash -lc "sed -n '1,200p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:00:40] bash -lc "sed -n '1,200p' specs/spec-a-core.md" succeeded in 925ms:
# nanoBragg Spec A — Core Engine

This shard contains the normative physics, geometry, sampling, and data handling requirements. CLI flag semantics live in [spec-a-cli.md](spec-a-cli.md); cross-implementation profiles and developer tooling are captured in [spec-a-parallel.md](spec-a-parallel.md).

Overview (Normative)

- Purpose: Simulates far-field diffraction from a perfect-lattice nanocrystal on a pixelated area
detector. No near-field propagation or detector PSF beyond pixel solid-angle/obliquity is modeled.
No symmetry is imposed; reflection indexing is P1 only (no Friedel pairing).
- Scope: Renders pixel intensities from a set of sources (beam divergence and spectral dispersion),
crystal orientation (including rotation oscillation and mosaic domains), and detector geometry.
Outputs: raw float image, SMV-format integer image (with and without Poisson noise), and optional
PGM.
- Key constants:
    - Classical electron radius squared r_e^2 = 7.94079248018965e-30 m^2.
    - Avogadro’s number = 6.02214179e23 mol^-1.

Units & Conversions (Normative)

- Length:
[2025-10-07T15:00:40] tokens used: 117,730

[2025-10-07T15:00:54] thinking

**Preparing for detailed plan updates**
[2025-10-07T15:00:55] exec bash -lc 'cat reports/2025-10-vectorization/phase_c/implementation_notes.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:00:56] bash -lc 'cat reports/2025-10-vectorization/phase_c/implementation_notes.md' succeeded in 960ms:
# Phase C1 Implementation Notes: Batched Neighborhood Gather

**Date:** 2025-10-07
**Git SHA:** (to be recorded in fix_plan)
**Initiative:** VECTOR-TRICUBIC-001 (PERF-PYTORCH-004 backlog)
**Plan Reference:** `plans/active/vectorization.md` Phase C (tasks C1–C3)
**Design Reference:** `reports/2025-10-vectorization/phase_b/design_notes.md`

---

## Executive Summary

Successfully implemented batched neighborhood gather (Phase C1) in `Crystal._tricubic_interpolation`. The implementation constructs `(B, 4, 4, 4)` structure factor neighborhoods for batched Miller index queries using advanced PyTorch indexing, eliminating the need for Python loops over query points.

**Key Deliverable:** Infrastructure for vectorized tricubic interpolation is complete. Phase D (polynomial evaluation vectorization) can now consume the batched neighborhoods.

---

## Implementation Changes

[2025-10-07T15:00:56] tokens used: 133,767

[2025-10-07T15:01:15] thinking

**Updating planning documentation for C3 tasks**

I’m preparing to revise the vectorization plan to show Phases C1 and C2 as done and highlight outstanding C3 tasks like shape assertions and caching. I’ll add detailed subtasks and checklists for C3 in the plan file to align with instruction formats and ensure fix_plan next actions focus on completing C3. The approach includes patching the markdown with updated snapshots, guidance, and embedded checklists reflecting granular verification steps before moving forward.
[2025-10-07T15:01:26] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/vectorization.md
@@ -4,4 +4,4 @@
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
@@ -39,3 +39,10 @@
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
[2025-10-07T15:01:26] apply_patch(auto_approved=true) exited 0 in 11ms:
Success. Updated the following files:
M plans/active/vectorization.md
[2025-10-07T15:01:26] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.

[2025-10-07T15:01:26] tokens used: 142,074
[2025-10-07T15:01:26] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:01:33] thinking

**Updating Next Actions section**
[2025-10-07T15:01:34] exec bash -lc "sed -n '1995,2015p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:01:35] bash -lc "sed -n '1995,2015p' docs/fix_plan.md" succeeded in 957ms:
- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
- Next Actions (2025-11-21 refresh):
 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
- Attempts History:
  * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
    Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
    Artifacts:
      - `reports/2025-10-vectorization/phase_a/test_at_str_002.collect.log` — Test collection output confirming 3 tests collected
      - `reports/2025-10-vectorization/phase_a/test_at_str_002.log` — Full pytest execution log for tricubic tests
      - `reports/2025-10-vectorization/phase_a/test_at_abs_001.log` — Full pytest execution log for absorption tests
      - `reports/2025-10-vectorization/phase_a/env.json` — Environment snapshot (Python 3.13.7, PyTorch 2.8.0+cu128, CUDA available)
    Observations/Hypotheses:
      - Current tricubic implementation passes all acceptance tests without warnings, indicating it works correctly for existing test cases
      - No evidence yet of fallback warnings or performance issues in these specific tests
      - Test collection confirmed 3 tricubic tests exist and are discoverable
      - CUDA is available in test environment for future GPU benchmarking
      - Phase A1 complete per plan guidance (`plans/active/vectorization.md` tasks A1 complete)
    Next Actions: Log Phase A1 evidence in fix_plan and begin Phase B design work—specifically draft the tensor-shape broadcast plan (B1), map C polin3 semantics to batched tensor ops (B2), and outline the gradient/device checklist (B3) in `reports/2025-10-vectorization/phase_b/design_notes.md` before touching implementation code.
[2025-10-07T15:01:35] tokens used: 143,255
[2025-10-07T15:01:35] turn diff:
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:01:39] thinking

**Updating next steps list**
[2025-10-07T15:01:47] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -1996,5 +1996,5 @@
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
[2025-10-07T15:01:47] apply_patch(auto_approved=true) exited 0 in 25ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T15:01:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.

[2025-10-07T15:01:47] tokens used: 144,586
[2025-10-07T15:01:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:02:13] thinking

**Preparing detailed input.md plan**

I'm gathering all necessary context and deciding precise instructions for the input.md document, including task summaries, focus identifiers, test commands, modes, branches, and supporting info to clearly guide the engineer on Phase C3 vectorization implementation per the plan.
[2025-10-07T15:02:15] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:02:16] bash -lc 'cat input.md' succeeded in 966ms:
Summary: Confirm spindle-axis parity for CLI-FLAGS-003 before re-running supervisor command.
Mode: Parity
Focus: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c; tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_k_frac_phi0_matches_c
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/vg1_phi_grid_py.log
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/vg1_phi_grid_c.log
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/pytest_phi0.log
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/pytest_collect.log
Artifacts: docs/fix_plan.md
Artifacts: plans/active/cli-noise-pix0/plan.md
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/fix_checklist.md
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/mosflm_matrix_correction.md
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md
Do Now: CLI-FLAGS-003 Phase L3k.3 — align the φ=0 lattice-vector test with the supervisor command by wiring spindle_axis = (-1, 0, 0), rerunning the targeted pytest selector (`KMP_DUPLICATE_LIB_OK=TRUE NB_RUN_PARALLEL=1 NB_C_BIN=./golden_suite_generator/nanoBragg pytest -v tests/test_cli_scaling_phi0.py::TestPhiZeroParity::test_rot_b_matches_c`), and capturing the updated failure output under reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/ before refreshing the VG-1 checklist.
If Blocked: If pytest setup keeps tripping on missing context, run `KMP_DUPLICATE_LIB_OK=TRUE PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/rot_vector/trace_harness.py --pixel 685 1039 --device cpu --dtype float32 --out reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/vg1_phi_grid_py.log` and document the numeric gap in `vg1_phi_grid_py.log` / `vg1_phi_grid_c.log` so we can revisit the pytest wiring next loop.
Priorities & Rationale:
- plans/active/cli-noise-pix0/plan.md:276-309 keeps Phase L3k.3 gates open until φ=0 evidence lands with supervisor-axis parity.
- docs/fix_plan.md:450-520 records VG-1.4 (k_frac drift 1.8e-2) as the current blocker; today’s run validates whether the spindle axis mismatch is the culprit.
[2025-10-07T15:02:16] tokens used: 146,285
[2025-10-07T15:02:16] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:02:28] thinking

**Preparing vectorization plan overwrite**

I'm getting ready to rewrite the vectorization plan focusing on tricubic interpolation by targeting about 120 lines, covering all required sections in the specified order with relevant details like branch set to main, mapped tests, artifacts, action items, priorities, pitfalls, and pointers—making sure to follow formatting rules closely and include examples like explicit pytest commands and log paths.
[2025-10-07T15:02:45] exec bash -lc "cat <<'EOF' > input.md
Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
Mode: Perf
Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
Branch: main
Mapped tests: tests/test_tricubic_vectorized.py -k \"gather\"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
Artifacts: reports/2025-10-vectorization/phase_c/implementation_notes.md
Artifacts: plans/active/vectorization.md
Artifacts: docs/fix_plan.md
Do Now: VECTOR-TRICUBIC-001 Phase C3 — add the gather shape assertions + device-aware cache adjustments in Crystal._tricubic_interpolation, then run "'`KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` to confirm the path stays green and capture the log under reports/2025-10-vectorization/phase_c/.
If Blocked: If assertions or cache updates trip device/dtype mismatches, drop into `python -m pdb src/nanobrag_torch/models/crystal.py` with a minimal batched call (see tests/test_tricubic_vectorized.py::TestTricubicGather::test_vectorized_matches_scalar) and log the failing tensor shapes/devices in reports/2025-10-vectorization/phase_c/debug_notes.md before undoing the partial change.
Priorities & Rationale:
- plans/active/vectorization.md:5-18 — snapshot now singles out C3 as the remaining Phase C blocker before polynomial vectorization.
- plans/active/vectorization.md:37-52 — C3 row + checklist define concrete evidence (assertions, cache audit, pytest logs) required before Phase D starts.
- docs/fix_plan.md:1989-2005 — Next Actions demand C3 completion plus recorded pytest output ahead of the Attempt update.
- reports/2025-10-vectorization/phase_c/implementation_notes.md:15-120 — current notes cover C1; extend with the C3 audit so plan/fix_plan can cite the line numbers.
- specs/spec-a-core.md:230-312 — interpolation contract insists on metric duality; shape assertions prevent silent regressions when batching polynomials later.
How-To Map:
- `pytest --collect-only tests/test_tricubic_vectorized.py -q | tee reports/2025-10-vectorization/phase_c/collect_gather.log`
- `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v | tee reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`
- `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v | tee reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log`
- Update `reports/2025-10-vectorization/phase_c/implementation_notes.md` with a “Phase C3 updates” section summarising assertion lines, cache audit, and device checks.
- Flip checklist items C3.1–C3.3 to ✅ in plans/active/vectorization.md and log the Attempt in docs/fix_plan.md with command outputs + SHA256 hashes of the two pytest logs.
Pitfalls To Avoid:
- Do not reintroduce `.cpu()` or `.numpy()` when touching cache tensors; always use `.type_as(sample)` per CLAUDE Rule #16.
- Keep assertions lightweight (boolean checks) so they do not execute data-dependent Python loops over batch elements.
- Maintain differentiability—no `.item()` on tensors involved in interpolation; rely on `.shape` and `.ndim` properties instead.
- Preserve device neutrality in tests by guarding CUDA cases with `torch.cuda.is_available()`.
- Respect Protected Assets: stay within reports/2025-10-vectorization/phase_c/ for new evidence, and leave docs/index.md untouched.
- Run only the targeted selectors above; defer full pytest to the end of the coding loop if additional files change.
- Avoid editing polynomial helpers yet; Phase D will handle `polint`/`polin2`/`polin3` after C3 is closed.
- Keep log filenames consistent with prior attempts so history tools stay diffable.
- Ensure new assertions are gated behind feature flags if they would fire during unit tests without interpolation enabled.
- No ad-hoc scripts in repo root—reuse existing tests for reproduction.
Pointers:
- plans/active/vectorization.md:33-64 (Phase C table and C3 checklist)
- docs/fix_plan.md:1989-2005 (VECTOR-TRICUBIC-001 next actions)
- reports/2025-10-vectorization/phase_c/implementation_notes.md:15-120 (current gather notes to extend)
- tests/test_tricubic_vectorized.py:180-314 (existing gather tests used for evidence)
- src/nanobrag_torch/models/crystal.py:355-460 (tricubic gather implementation and cache handling)
Next Up: Phase D1 — vectorize `polint` once C3 artifacts and Attempt entry are committed.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:02:46] bash -lc "cat <<'EOF' > input.md
Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
Mode: Perf
Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
Branch: main
Mapped tests: tests/test_tricubic_vectorized.py -k \"gather\"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
Artifacts: reports/2025-10-vectorization/phase_c/implementation_notes.md
Artifacts: plans/active/vectorization.md
Artifacts: docs/fix_plan.md
Do Now: VECTOR-TRICUBIC-001 Phase C3 — add the gather shape assertions + device-aware cache adjustments in Crystal._tricubic_interpolation, then run "'`KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` to confirm the path stays green and capture the log under reports/2025-10-vectorization/phase_c/.
If Blocked: If assertions or cache updates trip device/dtype mismatches, drop into `python -m pdb src/nanobrag_torch/models/crystal.py` with a minimal batched call (see tests/test_tricubic_vectorized.py::TestTricubicGather::test_vectorized_matches_scalar) and log the failing tensor shapes/devices in reports/2025-10-vectorization/phase_c/debug_notes.md before undoing the partial change.
Priorities & Rationale:
- plans/active/vectorization.md:5-18 — snapshot now singles out C3 as the remaining Phase C blocker before polynomial vectorization.
- plans/active/vectorization.md:37-52 — C3 row + checklist define concrete evidence (assertions, cache audit, pytest logs) required before Phase D starts.
- docs/fix_plan.md:1989-2005 — Next Actions demand C3 completion plus recorded pytest output ahead of the Attempt update.
- reports/2025-10-vectorization/phase_c/implementation_notes.md:15-120 — current notes cover C1; extend with the C3 audit so plan/fix_plan can cite the line numbers.
- specs/spec-a-core.md:230-312 — interpolation contract insists on metric duality; shape assertions prevent silent regressions when batching polynomials later.
How-To Map:
- `pytest --collect-only tests/test_tricubic_vectorized.py -q | tee reports/2025-10-vectorization/phase_c/collect_gather.log`
- `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v | tee reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`
- `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v | tee reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log`
- Update `reports/2025-10-vectorization/phase_c/implementation_notes.md` with a “Phase C3 updates” section summarising assertion lines, cache audit, and device checks.
- Flip checklist items C3.1–C3.3 to ✅ in plans/active/vectorization.md and log the Attempt in docs/fix_plan.md with command outputs + SHA256 hashes of the two pytest logs.
Pitfalls To Avoid:
- Do not reintroduce `.cpu()` or `.numpy()` when touching cache tensors; always use `.type_as(sample)` per CLAUDE Rule #16.
- Keep assertions lightweight (boolean checks) so they do not execute data-dependent Python loops over batch elements.
- Maintain differentiability—no `.item()` on tensors involved in interpolation; rely on `.shape` and `.ndim` properties instead.
- Preserve device neutrality in tests by guarding CUDA cases with `torch.cuda.is_available()`.
- Respect Protected Assets: stay within reports/2025-10-vectorization/phase_c/ for new evidence, and leave docs/index.md untouched.
- Run only the targeted selectors above; defer full pytest to the end of the coding loop if additional files change.
- Avoid editing polynomial helpers yet; Phase D will handle `polint`/`polin2`/`polin3` after C3 is closed.
- Keep log filenames consistent with prior attempts so history tools stay diffable.
- Ensure new assertions are gated behind feature flags if they would fire during unit tests without interpolation enabled.
- No ad-hoc scripts in repo root—reuse existing tests for reproduction.
Pointers:
- plans/active/vectorization.md:33-64 (Phase C table and C3 checklist)
- docs/fix_plan.md:1989-2005 (VECTOR-TRICUBIC-001 next actions)
- reports/2025-10-vectorization/phase_c/implementation_notes.md:15-120 (current gather notes to extend)
- tests/test_tricubic_vectorized.py:180-314 (existing gather tests used for evidence)
- src/nanobrag_torch/models/crystal.py:355-460 (tricubic gather implementation and cache handling)
Next Up: Phase D1 — vectorize `polint` once C3 artifacts and Attempt entry are committed.
EOF
' succeeded in 852ms:

[2025-10-07T15:02:46] tokens used: 157,676
[2025-10-07T15:02:46] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:02:50] thinking

**Verifying plan line number accuracy**
[2025-10-07T15:02:50] exec bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,120p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:02:51] bash -lc "nl -ba plans/active/vectorization.md | sed -n '1,120p'" succeeded in 634ms:
     1	## Context
     2	- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
     3	- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
     4	- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
     5	- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
     6	- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
     7	
     8	### Phase A — Evidence & Baseline Capture
     9	Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
    10	Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
    11	Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.
    12	
    13	| ID | Task Description | State | How/Why & Guidance |
    14	| --- | --- | --- | --- |
    15	| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
    16	| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
    17	| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |
    18	
    19	### Phase B — Tricubic Vectorization Design
    20	Goal: Lock the tensor-shape design, broadcasting plan, and gradient checks before code changes.
[2025-10-07T15:02:51] tokens used: 161,469
[2025-10-07T15:02:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:02:55] thinking

**Verifying line references consistency**
[2025-10-07T15:02:55] exec bash -lc "nl -ba docs/fix_plan.md | sed -n '1980,2020p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:02:56] bash -lc "nl -ba docs/fix_plan.md | sed -n '1980,2020p'" succeeded in 705ms:
  1980	  * arch.md §15: "Use torch.autograd.gradcheck with dtype=torch.float64" (✅ existing tests honour float64; extend same discipline to new cases).
  1981	  * No regressions in existing test suite (✅ core geometry baseline 31/31 passed; gradient tests now can execute without C++ compilation errors).
  1982	
  1983	---
  1984	
  1985	## [VECTOR-TRICUBIC-001] Vectorize tricubic interpolation and detector absorption
  1986	- Spec/AT: specs/spec-a-core.md §4 (structure factor sampling), specs/spec-a-parallel.md §2.3 (tricubic acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, nanoBragg.c lines 2604–3278 (polin3/polin2/polint) and 3375–3450 (detector absorption loop).
  1987	- Priority: High
  1988	- Status: in_progress (Phases A–B complete; Phase C implementation pending)
  1989	- Owner/Date: galph/2025-10-17
  1990	- Plan Reference: `plans/active/vectorization.md`
  1991	- Reproduction (C & PyTorch):
  1992	  * PyTorch baseline tests: `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py tests/test_at_abs_001.py -v`
  1993	  * Optional microbenchmarks (to be created per plan Phase A): `PYTHONPATH=src KMP_DUPLICATE_LIB_OK=TRUE python scripts/benchmarks/sample_tricubic_baseline.py`
  1994	  * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
  1995	- First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
  1996	- Next Actions (2025-11-21 refresh):
  1997	 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
  1998	 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
  1999	 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
[2025-10-07T15:02:56] tokens used: 163,008
[2025-10-07T15:02:56] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:02:59] thinking

**Verifying line number references**
[2025-10-07T15:03:01] exec bash -lc "nl -ba reports/2025-10-vectorization/phase_c/implementation_notes.md | sed -n '1,140p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:03:01] bash -lc "nl -ba reports/2025-10-vectorization/phase_c/implementation_notes.md | sed -n '1,140p'" succeeded in 681ms:
     1	# Phase C1 Implementation Notes: Batched Neighborhood Gather
     2	
     3	**Date:** 2025-10-07
     4	**Git SHA:** (to be recorded in fix_plan)
     5	**Initiative:** VECTOR-TRICUBIC-001 (PERF-PYTORCH-004 backlog)
     6	**Plan Reference:** `plans/active/vectorization.md` Phase C (tasks C1–C3)
     7	**Design Reference:** `reports/2025-10-vectorization/phase_b/design_notes.md`
     8	
     9	---
    10	
    11	## Executive Summary
    12	
    13	Successfully implemented batched neighborhood gather (Phase C1) in `Crystal._tricubic_interpolation`. The implementation constructs `(B, 4, 4, 4)` structure factor neighborhoods for batched Miller index queries using advanced PyTorch indexing, eliminating the need for Python loops over query points.
    14	
    15	**Key Deliverable:** Infrastructure for vectorized tricubic interpolation is complete. Phase D (polynomial evaluation vectorization) can now consume the batched neighborhoods.
    16	
    17	---
    18	
    19	## Implementation Changes
    20	
[2025-10-07T15:03:01] tokens used: 164,760
[2025-10-07T15:03:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:06] thinking

**Preparing to update galph_memory and check git status**
[2025-10-07T15:03:09] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:03:10] bash -lc 'git status --short' succeeded in 846ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/vectorization.md
[2025-10-07T15:03:10] tokens used: 167,198
[2025-10-07T15:03:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:12] thinking

**Verifying code diffs**
[2025-10-07T15:03:13] exec bash -lc 'git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:03:13] bash -lc 'git diff' succeeded in 771ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528..d88eed3 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index bd8ec47..f9463cb 100644
--- a/input.md
[2025-10-07T15:03:13] tokens used: 167,417
[2025-10-07T15:03:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:23] thinking

**Appending update to galph_memory.md**
[2025-10-07T15:03:29] tokens used: 170,040
[2025-10-07T15:03:29] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:32] thinking

**Investigating patch failure causes**
[2025-10-07T15:03:32] exec bash -lc 'tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:03:33] bash -lc 'tail -n 40 galph_memory.md' succeeded in 896ms:
- Updated `docs/fix_plan.md` Next Actions to point at the new L3j workflow; removed stale L3i instrumentation steps.
- Authored `input.md` (Parity mode, 100 lines) instructing Ralph to update mosflm_matrix_correction.md, draft `fix_checklist.md`, run pytest --collect-only, and log artifacts under rot_vector/ before touching code.
- No production code changes performed; expect Ralph’s Attempt #94 to document memo/checklist completion plus collect-only log before proceeding to φ-rotation implementation.

## 2025-11-21 (galph loop — VECTOR-TRICUBIC-001 Phase C2 prep)
- Updated `plans/active/vectorization.md:5-36` to record Phase C1 completion and spotlight C2/C3 as the remaining blockers before polynomial work.
- Refreshed `docs/fix_plan.md:1889-1892` Next Actions so they now call out C2, C3, and the Phase C close-out handoff instead of repeating the already-finished gather task.
- Replaced `input.md` with a Docs-mode memo steering Ralph toward authoring `tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`, logging the targeted pytest run, and parking artifacts under `reports/2025-10-vectorization/phase_c/`.
- No production code changes; edits limited to planning docs and supervisor memo. Expect Ralph to execute Phase C2 next and log a new Attempt entry once the regression test and warning evidence land.

## 2025-11-21 (galph loop — CLI L3k implementation prep)
- Added Phase L3k to `plans/active/cli-noise-pix0/plan.md` with tasks for memo, code fix, gate execution, and logging prior to Phase L4.
- Updated `docs/fix_plan.md:450-463` (Attempt #95) so Next Actions now target L3k.1–L3k.4 and the new checklist-driven workflow.
- Replaced `input.md` (Docs mode, 100 lines) to steer Ralph toward executing Phase L3k, running pytest/nb-compare with the canonical command, and documenting VG-1⇢VG-5 artifacts.
- Expect Ralph to draft the implementation memo, add the docstring reference, implement the φ rotation patch, drive `fix_checklist.md` to ✅, and log Attempt #96 before attempting Phase L4 parity.
## 2025-11-21 (galph loop — CLI-FLAGS L3k triage)
- Reviewed Phase L3k memo + recent traces; PyTorch still rotates reciprocal vectors during φ, yielding k_frac drift (≈−0.59 vs C −0.607) and F_latt sign flip (+1.35 vs −2.38) in `trace_py_scaling_20251117.log`. Root cause remains mismatched φ rotation pipeline.
- Identified secondary nuisance: per-φ harness already built; thresholds summarized (k_frac Δ≤1e-6, F_latt sign match, b_Y Δ≤1e-6) for VG-1; instrumentation command retained.
- Selected Debug/Parity focus on CLI-FLAGS-003; next confirm step is to implement Phase L3k reciprocal recompute, then re-run per-φ traces, targeted pytest lattice selector, and ROI nb-compare per checklist.
- Authored `input.md` (Parity) directing Ralph to add the nanoBragg.c docstring, rotate only real vectors, recompute reciprocals, run harness + pytest + nb-compare, update fix_checklist + fix_plan, and archive old traces. Artifacts to land under `reports/2025-10-cli-flags/phase_l/rot_vector/` subfolders.
[2025-10-07T15:03:33] tokens used: 171,609
[2025-10-07T15:03:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:36] thinking

**Appending new section to file**
[2025-10-07T15:03:38] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-21 (galph loop — Vectorization Phase C3 prep)
- Reviewed "'`plans/active/vectorization.md` and `reports/2025-10-vectorization/phase_c/` artifacts; confirmed C1/C2 are complete and only C3 remains before polynomial work.
- Updated plan snapshot and added a Phase C3 verification checklist (assertions, cache audit, targeted pytest logs) so evidence expectations are explicit.
- Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
- Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
- Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:03:38] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-21 (galph loop — Vectorization Phase C3 prep)
- Reviewed "'`plans/active/vectorization.md` and `reports/2025-10-vectorization/phase_c/` artifacts; confirmed C1/C2 are complete and only C3 remains before polynomial work.
- Updated plan snapshot and added a Phase C3 verification checklist (assertions, cache audit, targeted pytest logs) so evidence expectations are explicit.
- Synced `docs/fix_plan.md` Next Actions with the new checklist, dropping the stale C2 reminder and focusing on C3 deliverables + Attempt logging.
- Rewrote `input.md` (Perf mode) steering Ralph to implement the C3 updates, run the two targeted selectors, update implementation notes, and flip checklist items before moving to Phase D.
- Expect Ralph to land Phase C3 code/tests, capture logs under `reports/2025-10-vectorization/phase_c/`, and append a new Attempt entry prior to starting D1 polynomial vectorization.
EOF
' succeeded in 717ms:

[2025-10-07T15:03:38] tokens used: 173,708
[2025-10-07T15:03:38] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:42] thinking

**Preparing commit for changes**
[2025-10-07T15:03:43] exec bash -lc 'git add docs/fix_plan.md plans/active/vectorization.md input.md galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:03:43] bash -lc 'git add docs/fix_plan.md plans/active/vectorization.md input.md galph_memory.md' succeeded in 757ms:

[2025-10-07T15:03:43] tokens used: 174,261
[2025-10-07T15:03:43] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:47] thinking

**Committing with descriptive message**
[2025-10-07T15:03:49] exec bash -lc 'git commit -m "SUPERVISOR: VECTOR-TRICUBIC-001 planning sync - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:03:50] bash -lc 'git commit -m "SUPERVISOR: VECTOR-TRICUBIC-001 planning sync - tests: not run"' succeeded in 930ms:
[feature/spec-based-2 de5cd69] SUPERVISOR: VECTOR-TRICUBIC-001 planning sync - tests: not run
 4 files changed, 57 insertions(+), 48 deletions(-)
[2025-10-07T15:03:50] tokens used: 174,956
[2025-10-07T15:03:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:03:56] thinking

**Correcting branch info in input file**
[2025-10-07T15:03:57] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/input.md
@@ -3,3 +3,3 @@
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
[2025-10-07T15:03:57] apply_patch(auto_approved=true) exited 0 in 31ms:
Success. Updated the following files:
M input.md
[2025-10-07T15:03:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.

[2025-10-07T15:03:57] tokens used: 176,113
[2025-10-07T15:03:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:04:01] thinking

**Preparing to amend commit**
[2025-10-07T15:04:01] exec bash -lc 'git add input.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:04:02] bash -lc 'git add input.md' succeeded in 850ms:

[2025-10-07T15:04:02] tokens used: 176,340
[2025-10-07T15:04:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:04:05] thinking

**Amending the commit**
[2025-10-07T15:04:05] exec bash -lc 'git commit --amend --no-edit' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:04:06] bash -lc 'git commit --amend --no-edit' succeeded in 688ms:
[feature/spec-based-2 694e383] SUPERVISOR: VECTOR-TRICUBIC-001 planning sync - tests: not run
 Date: Tue Oct 7 08:03:50 2025 -0700
 4 files changed, 56 insertions(+), 47 deletions(-)
[2025-10-07T15:04:06] tokens used: 176,523
[2025-10-07T15:04:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:04:09] thinking

**Verifying clean working tree**
[2025-10-07T15:04:09] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:04:10] bash -lc 'git status --short' succeeded in 755ms:

[2025-10-07T15:04:10] tokens used: 190,291
[2025-10-07T15:04:10] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:04:14] thinking

**Pushing changes to remote**
[2025-10-07T15:04:15] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:04:17] bash -lc 'git push' succeeded in 2.30s:
To github.com:hoidn/nanoBragg.git
   5d1ff46..694e383  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T15:04:17] tokens used: 190,566
[2025-10-07T15:04:17] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:04:33] thinking

**Summarizing final response content**

I'll prepare a clear final update for the user covering plan revisions with file references, fix_plan adjustments, recent commit observations including test failures from Ralph's work, adherence to documentation review instructions, and actionable next steps, all organized as concise bullet points for easy navigation.
[2025-10-07T15:04:34] exec bash -lc 'rg -n "Vectorization Phase C3 prep" galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T15:04:35] bash -lc 'rg -n "Vectorization Phase C3 prep" galph_memory.md' succeeded in 903ms:
1652:## 2025-11-21 (galph loop — Vectorization Phase C3 prep)
[2025-10-07T15:04:35] tokens used: 191,281
[2025-10-07T15:04:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.


[2025-10-07T15:04:43] thinking

**Summarizing commit review and next steps**
[2025-10-07T15:04:43] codex

**Update**
- Reframed the vectorization plan so Phase C3 is the sole blocker before polynomial work; added an explicit checklist covering assertions, cache audit, and targeted pytest evidence (`plans/active/vectorization.md:5-64`).
- Synced `docs/fix_plan.md:1985-1999` Next Actions with the new checklist—dropped the stale C2 reminder and now require logging the Phase C3 artifacts plus the follow-up Attempt.
- Issued a fresh supervisor memo steering Ralph to implement C3 (assertions + device-aware caching) and capture the two targeted selectors under `reports/2025-10-vectorization/phase_c/` (`input.md:1-32`).
- Logged the coordination details for future loops in galph_memory (`galph_memory.md:1652-1656`) so the next supervisor invocation knows C3 must land before Phase D1.
- Reviewed Ralph’s latest commits (`519ee8b`, `b9a7071`); both add failing φ=0 parity tests (`tests/test_cli_scaling_phi0.py:1-240`) as expected-red evidence, so C3 work should proceed while keeping an eye on that outstanding CLI parity fix.

Next up: once C3 evidence is green and logged, kick off Phase D1 to vectorize `polint`.
[2025-10-07T15:04:50] tokens used: 191,860
[2025-10-07T15:04:50] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 964f528c3c7709f101dc140d8678e0ac2eeafe55..d88eed384acf02044d4b0fbec44c6cb8d010d899
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -1994,9 +1994,9 @@
   * Shapes/ROI: 256² & 512² detectors for microbench; oversample 1; structure-factor grid enabling tricubic.
 - First Divergence (if known): Current tricubic path drops to nearest-neighbour fallback for batched pixel grids, emitting warnings and forfeiting accuracy/performance; detector absorption still loops over `thicksteps`, preventing full vectorization and creating hotspots in profiler traces (see reports/benchmarks/20250930-165726-compile-cache/analysis.md).
 - Next Actions (2025-11-21 refresh):
- 1. Phase C2 — add/extend the targeted pytest (`tests/test_tricubic_vectorized.py::test_oob_warning_single_fire`) to confirm the warning fires once and interpolation disables; store the `pytest -k oob_warning -v` log under `reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log`.
- 2. Phase C3 — add shape assertions + device-aware caching, record findings in `phase_c/implementation_notes.md`, and attach the post-assertion `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output as evidence.
- 3. Phase C close-out — after C2/C3 artifacts land, update this plan and the fix_plan attempts with the new evidence before scheduling Phase D polynomial vectorization.
+ 1. Phase C3 — implement the shape assertions + device-aware caching updates (see plan checklist C3.1/C3.2), recording line references in `reports/2025-10-vectorization/phase_c/implementation_notes.md`.
+ 2. Phase C3 evidence — capture targeted pytest logs (`env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`) under `reports/2025-10-vectorization/phase_c/`, then flip checklist items C3.1–C3.3 to ✅.
+ 3. Phase C close-out — once C3 artifacts land, update this entry with Attempt # (include assertion/caching diff + log hashes) and coordinate Phase D kickoff via plan + input.md.
 - Attempts History:
   * [2025-10-06] Attempt #1 (ralph loop) — Result: **Phase A1 COMPLETE** (test collection & execution baseline captured). All tricubic and absorption tests passing.
     Metrics: AT-STR-002: 3/3 tests passed in 2.12s (test_tricubic_interpolation_enabled, test_tricubic_out_of_bounds_fallback, test_auto_enable_interpolation). AT-ABS-001: 5/5 tests passed in 5.88s. Collection: 3 tricubic tests found.
diff --git a/input.md b/input.md
index f9463cbdff08c8c578f1ec3296e1bf2fc55a33c9..9861cc9e99a2a0e02e3ddf74fecc6801f9484d0f
--- a/input.md
+++ b/input.md
@@ -1,7 +1,7 @@
 Summary: Land Phase C3 by hardening tricubic gather assertions and cache device handling so Phase D polynomial work starts on a clean base.
 Mode: Perf
 Focus: VECTOR-TRICUBIC-001 Vectorize tricubic interpolation and detector absorption — Phase C3
-Branch: main
+Branch: feature/spec-based-2
 Mapped tests: tests/test_tricubic_vectorized.py -k "gather"; tests/test_at_str_002.py::test_tricubic_interpolation_enabled
 Artifacts: reports/2025-10-vectorization/phase_c/test_tricubic_vectorized.log
 Artifacts: reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
diff --git a/plans/active/vectorization.md b/plans/active/vectorization.md
index d43778aa917551fc3907b1677d44620c548c18f3..65e4d42773ab472f9b3df3846b9b5ade8841a70a
--- a/plans/active/vectorization.md
+++ b/plans/active/vectorization.md
@@ -2,8 +2,8 @@
 - Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
 - Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
 - Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
-- Gap Snapshot (2025-11-21): Phase C1 batched gather is COMPLETE (Attempts #4/#5; artifacts under `reports/2025-10-vectorization/phase_c/`). Remaining blockers before polynomial work are C2 (OOB fallback validation) and C3 (shape assertions + device-aware caching).
-- Supervisory note (2025-11-21): Keep the Phase B design memo (§2–§4) and `gather_notes.md` as the contract; ensure fix_plan next actions emphasise C2/C3 artifacts landing in `reports/2025-10-vectorization/phase_c/`.
+- Gap Snapshot (2025-11-21 refresh): Phase C1 (batched gather) and C2 (OOB fallback validation) are COMPLETE with artifacts under `reports/2025-10-vectorization/phase_c/`. Outstanding blocker before engaging Phase D polynomial work is C3 (shape assertions + device/device-aware caching) so the gather path cannot regress silently.
+- Supervisory note (2025-11-21): Guard C3 deliverables with explicit evidence: update `phase_c/implementation_notes.md` with the new assertion/caching strategy, capture the targeted pytest log, and record the tensor-shape/caching checklist below before advancing to Phase D.
 
 ### Phase A — Evidence & Baseline Capture
 Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
@@ -37,7 +37,14 @@
 | --- | --- | --- | --- |
 | C1 | Implement batched neighborhood gather | [D] | ✅ Completed 2025-10-17 (Attempt #5). Batched gather infrastructure validated; all tests passing. Artifacts: `reports/2025-10-vectorization/phase_c/{gather_notes.md, collect_log.txt, test_*.log, diff_snapshot.json, runtime_probe.json}`. Scalar path (B=1) uses existing polin3; batched path (B>1) falls back to nearest-neighbor pending Phase D. |
 | C2 | Preserve fallback semantics | [D] | ✅ Completed 2025-10-07 (Attempt #1). Authored `test_oob_warning_single_fire` capturing stdout to verify single-warning behavior; test asserts `_interpolation_warning_shown` flag state, `interpolate` disable, and `default_F` fallback on OOB queries. All tricubic tests pass (8/8). Artifacts: `reports/2025-10-vectorization/phase_c/{test_tricubic_vectorized.log, status_snapshot.txt}`; test code at `tests/test_tricubic_vectorized.py:199-314`. |
-| C3 | Add shape assertions & cache hooks | [ ] | Introduce lightweight assertions to catch unexpected shapes; ensure caches remain device-aware (use `.type_as` instead of `.cpu()`). Summarize tensor shapes + cache invalidation rules in `phase_c/implementation_notes.md`, and include `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v` output once assertions are in place. |
+| C3 | Add shape assertions & cache hooks | [ ] | Add runtime assertions for `(B, 4, 4, 4)` neighborhoods and `(B,)` outputs, audit cache invalidation to ensure tensors stay on the caller device/dtype (replace `.cpu()` with `.type_as` where needed), and document changes in `phase_c/implementation_notes.md` (new “C3 updates” section). Capture `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` plus `tests/test_at_str_002.py::test_tricubic_interpolation_enabled` logs under `phase_c/` once assertions land. |
+
+#### Phase C3 Verification Checklist
+| ID | Task Description | State | How/Why & Guidance |
+| --- | --- | --- | --- |
+| C3.1 | Assertion coverage | [ ] | Add explicit `assert neighborhood.shape[-3:] == (4, 4, 4)` and `assert output.shape == query_shape` (after reshaping). Record code references in `phase_c/implementation_notes.md` with line numbers. |
+| C3.2 | Device-aware caching audit | [ ] | Inspect `Crystal._tricubic_interpolation` cache paths; ensure tensors use `.type_as(sample)` and keep `self._tricubic_cache_device` in sync. Document audit in `phase_c/implementation_notes.md` and include snippet confirming device matches input. |
+| C3.3 | Targeted pytest evidence | [ ] | Run `env KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_tricubic_vectorized.py -k "gather" -v` and `pytest tests/test_at_str_002.py::test_tricubic_interpolation_enabled -v`; store logs under `reports/2025-10-vectorization/phase_c/` and update docs/fix_plan.md Attempts once green. |
 
 ### Phase D — Implementation: Polynomial Evaluation
 Goal: Vectorize `polint`, `polin2`, and `polin3` so they consume batches from Phase C without Python loops.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   694e383..3b9746b  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=102...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=102
Already up to date.
Updating 3b9746b..bc754e4
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   3b9746b..bc754e4  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=102
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating bc754e4..12742e5
Fast-forward
 plans/active/vectorization.md                      |   8 +-
 .../phase_c/implementation_notes.md                | 156 +++++++++++++++++++++
 .../phase_c/test_at_str_002_phi.log                |  10 ++
 .../phase_c/test_tricubic_vectorized.log           |  17 +--
 src/nanobrag_torch/models/crystal.py               |  40 +++++-
 5 files changed, 215 insertions(+), 16 deletions(-)
 create mode 100644 reports/2025-10-vectorization/phase_c/test_at_str_002_phi.log
From github.com:hoidn/nanoBragg
   bc754e4..12742e5  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 12742e5..292ce44
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   12742e5..292ce44  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=103
Ralph completed iteration 102; proceeding to 103
