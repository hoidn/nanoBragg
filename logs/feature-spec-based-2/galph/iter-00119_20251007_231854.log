Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=119
To github.com:hoidn/nanoBragg.git
   47f43b5..f3aeac6  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T23:18:59] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T23:18:59] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review docs/bugs/verified_c_bugs.md and specs/. Make sure that the phi 0 carryover C implementation bug wasnt propagated to the specs. Update the specs (if needed) and pytorch implementation to fix this bug, if it was propagated.
</2>
<3>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</3>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T23:19:05] thinking

**Preparing to run git pull with timeout**
[2025-10-07T23:19:05] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:08] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && timeout 30 git pull --rebase' succeeded in 2.31s:
Already up to date.
[2025-10-07T23:19:08] tokens used: 14,056

[2025-10-07T23:19:09] thinking

**Preparing to read galph_memory file**
[2025-10-07T23:19:09] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:10] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat galph_memory.md' succeeded in 709ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T23:19:10] tokens used: 14,294

[2025-10-07T23:19:13] thinking

**Preparing to read documentation files**
[2025-10-07T23:19:14] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:14] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/index.md' succeeded in 703ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T23:19:14] tokens used: 17,300

[2025-10-07T23:19:17] thinking

**Reading spec file**
[2025-10-07T23:19:17] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:18] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat specs/spec-a.md' succeeded in 697ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T23:19:18] tokens used: 18,992

[2025-10-07T23:19:20] thinking

**Reviewing architectural documentation**
[2025-10-07T23:19:21] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:21] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat arch.md' succeeded in 698ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T23:19:21] tokens used: 19,374

[2025-10-07T23:19:23] thinking

**Searching for c_to_pytorch_config_map.md**
[2025-10-07T23:19:24] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:24] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/c_to_pytorch_config_map.md' succeeded in 714ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T23:19:24] tokens used: 22,183

[2025-10-07T23:19:26] thinking

**Opening debugging documentation**
[2025-10-07T23:19:26] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:27] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/debugging/debugging.md' succeeded in 752ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T23:19:27] tokens used: 24,118

[2025-10-07T23:19:29] thinking

**Verifying fix_plan path**
[2025-10-07T23:19:29] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:30] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/fix_plan.md' succeeded in 747ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-22 (ralph loop #103)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T23:19:30] tokens used: 26,624

[2025-10-07T23:19:32] thinking

**Recognizing plan completeness and next steps**
[2025-10-07T23:19:33] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:34] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/development/testing_strategy.md' succeeded in 727ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T23:19:34] tokens used: 29,532

[2025-10-07T23:19:36] thinking

**Examining active plans directory**
[2025-10-07T23:19:37] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:38] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active' succeeded in 726ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T23:19:38] tokens used: 32,221

[2025-10-07T23:19:41] thinking

**Preparing to review CLI and vectorization**
[2025-10-07T23:19:42] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active/cli-noise-pix0' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:43] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && ls plans/active/cli-noise-pix0' succeeded in 718ms:
plan.md
[2025-10-07T23:19:43] tokens used: 32,517
[2025-10-07T23:19:45] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:45] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/cli-noise-pix0/plan.md' succeeded in 752ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Spec alignment note (2025-11-26): `specs/spec-a-core.md:211-214` states φ sampling SHALL follow `phi = phi0 + phistep * tic` with no state carryover. Keep the C-side defect recorded in `docs/bugs/verified_c_bugs.md:166-204` (§C-PARITY-001) quarantined to parity harnesses; do not promote it to the normative spec or default PyTorch behavior. Track that `src/nanobrag_torch/models/crystal.py:1097-1198` currently caches `_phi_last_cache` to emulate C; the remediation plan must either remove or gate this behavior behind an explicit parity toggle once CLI validation is unblocked.
- Gap snapshot update (2025-11-23 PM): Attempt #109 regenerated the TRACE_C_PHI log under `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/` and re-ran `compare_per_phi_traces.py`; Δk now measures 1.8116e-2 at φ_tic=0 while φ≥1 stay within 2.85e-5, confirming the carryover mismatch and leaving VG-1 blocked until the remediation lands.
- Gap snapshot update (2025-11-26): Attempts #111 and #113 produced per-φ traces with max Δk=2.845e-05. This still exceeds the VG-1 gate (Δk, Δb_y ≤ 1e-6). Treat those commits as partial progress until fresh traces prove the tighter tolerance.
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot refresh (2025-10-07 08:41): Attempt #101 activated TRACE_C_PHI (C instrumentation) and captured matching Py per-φ traces. Divergence isolated to φ_tic=0 (Δk≈1.81e-2) while φ>0 steps remain within 3e-5. Phase L3k.3 moves to φ=0 initialization parity (L3k.3c) plus ROI/nb-compare follow-ups.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
[2025-10-07T23:19:45] tokens used: 32,803

[2025-10-07T23:19:48] thinking

**Preparing to review plans**
[2025-10-07T23:19:49] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:50] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat plans/active/vectorization.md' succeeded in 874ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog supporting docs/fix_plan.md entry [VECTOR-TRICUBIC-001].
- Phase Goal: Deliver a production-ready batched tricubic interpolation pipeline (gather + polynomial evaluation) and subsequently vectorize detector absorption without regressing parity, gradients, or device/dtype neutrality.
- Dependencies:
  - specs/spec-a-core.md §4 (structure-factor sampling contract)
  - specs/spec-a-parallel.md §2.3 (tricubic acceptance tests + tolerances)
  - docs/architecture/pytorch_design.md §§2.2–2.4 (vectorization strategy, broadcast shapes)
  - docs/development/testing_strategy.md §§1.4–2 (test cadence, authoritative commands)
  - docs/development/pytorch_runtime_checklist.md (device/vectorization guardrails)
  - `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint) & 3375–3450 (detector absorption loop)
  - Existing artifacts under `reports/2025-10-vectorization/phase_*/`
- Status Snapshot (2025-11-27): Phases A–C complete with gather vectorization merged (commit 12742e5). Polynomial helpers still scalar; detector absorption remains looped. Phase D is the active gate before parity/perf validation (Phase E) and absorption work (Phase F).
- Execution Notes: Store new evidence under `reports/2025-10-vectorization/phase_<letter>/` directories; every implementation task must quote the matching C snippet per CLAUDE Rule #11. Maintain CPU+CUDA parity and include `pytest --collect-only` proof before targeted runs.

### Phase A — Evidence & Baseline Capture
Goal: Record baseline behaviour/warnings/timings for tricubic interpolation and detector absorption prior to vectorization.
Prereqs: Editable install (`pip install -e .`), C binary available if parity comparisons are needed, `KMP_DUPLICATE_LIB_OK=TRUE` set.
Exit Criteria: Baseline pytest logs + benchmark metrics archived and referenced in fix_plan.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-07T23:19:50] tokens used: 35,920

[2025-10-07T23:19:54] thinking

**Analyzing long-term goals and bug documentation**
[2025-10-07T23:19:55] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/bugs/verified_c_bugs.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:19:55] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat docs/bugs/verified_c_bugs.md' succeeded in 833ms:
# Verified `nanoBragg.c` Bugs (2025-10)

## Severity Overview
- **High:** C-IMPL-BUG-002, C-DESIGN-FLAW-001, C-DESIGN-FLAW-003, NANO-C-BUG-001, NANO-C-BUG-002
- **Medium:** C-DESIGN-FLAW-002, C-DESIGN-FLAW-005, C-PARITY-001
- **Low:** C-LOGGING-BUG-001

Artifact logs for the reproductions below live under `docs/bugs/artifacts/`.

---

### C-IMPL-BUG-002 — Incorrect Angle Units in `mosaic_rotation_umat` (High)
**Summary:** The random misset path feeds `90.0` (degrees) into `mosaic_rotation_umat`, but the helper interprets angles in radians. The code therefore constructs rotation matrices using a 90-radian cap (≈5156°), which produces non-physical orientations.

**Reproduction:**
```bash
./golden_suite_generator/nanoBragg \
  -cell 50 60 70 80 90 100 \
  -misset random \
  -default_F 1 -N 0 \
[2025-10-07T23:19:55] tokens used: 38,818

[2025-10-07T23:20:02] thinking

**Reviewing CLI flag implementation status and phi issue**
[2025-10-07T23:20:03] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "phi" specs/spec-a-core.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:20:04] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "phi" specs/spec-a-core.md' succeeded in 901ms:
211:                    - φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
248:    - Define steps = (number of sources) · (number of mosaic domains) · (phisteps) · (oversample^2).
414:        - Steps = (#accepted divergence points) × dispsteps × mosaic_domains × phisteps ×
507:    - For each of horizontal divergence, vertical divergence, spectral dispersion, phi, and detector thickness sampling, missing combinations of count/range/step SHALL be resolved per the rules in “Sources, Divergence & Dispersion” and “Sampling & Accumulation”, resulting in:
575:    - Setup: sources=1; mosaic_domains=1; oversample=1; phisteps=2 with identical physics across steps (e.g., zero mosaic and symmetric phi so F_cell and F_latt identical); disable thickness/polar/omega oversample toggles.
[2025-10-07T23:20:04] tokens used: 42,571

[2025-10-07T23:20:12] thinking

**Reading code near line 211**
[2025-10-07T23:20:15] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '180,250p' specs/spec-a-core.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:20:16] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '180,250p' specs/spec-a-core.md" succeeded in 933ms:
        - If domains set > 0 and spread < 0: force domains = 1, spread = 0.

Sampling & Accumulation (Normative)

- Loop order per pixel within ROI and unmasked:
    - For each detector thickness layer index t = 0..thicksteps-1:
        - Odet = t·(thickness/steps) (meters).
        - For subpixel grid (oversample × oversample):
            - Compute detector-plane coordinates (meters): Fdet and Sdet at subpixel centers.
            - Detector point in lab frame: P = D0 + Fdet·f + Sdet·s + Odet·o. If curved detector is
enabled, an alternative spherical mapping is used: start at distance along b and rotate about s and
f by small angles Sdet/distance and Fdet/distance respectively.
            - Diffracted unit vector d = unit(P); airpath R = ||P||.
            - Solid angle per subpixel:
                - ω = pixel^2 / R^2 · (close_distance / R).
                - If point-pixel mode: ω = 1 / R^2.
            - Absorption per thickness layer (if enabled):
                - Parallax factor: ρ = d·o.
                - Capture fraction for this layer: exp(−t·Δz·μ/ρ) − exp(−(t+1)·Δz·μ/ρ), where Δz =
thickness/steps.
[2025-10-07T23:20:16] tokens used: 42,976

[2025-10-07T23:20:20] thinking

**Verifying -nonoise implementation**
[2025-10-07T23:20:20] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "nonoise" -n' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:20:21] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg "nonoise" -n' succeeded in 816ms:
src/nanobrag_torch/__main__.py:339:    parser.add_argument('-nonoise', action='store_true',
src/nanobrag_torch/__main__.py:711:    config['suppress_noise'] = args.nonoise
src/nanobrag_torch/__main__.py:1185:        # CLI-FLAGS-003: Honor -nonoise flag
context:248:            if(strstr(argv[i], "-nonoise") )
context:2276:            if(strstr(argv[i], "-nonoise") )
context:2609:        printf("\t-nonoise         \tdisable generating the noisefile\n");
context:6274:            if(strstr(argv[i], "-nonoise") )
context:8812:***-nonoise***
galph_memory.md:899:- Sync succeeded (already up to date). Investigated CLI gaps for `-nonoise` and `-pix0_vector_mm`; confirmed parser lacks flags and Detector ignores stored `custom_pix0_vector` (src/nanobrag_torch/__main__.py:542,1152).
galph_memory.md:904:- Re-confirmed CLI gaps: -nonoise absent from parser (src/nanobrag_torch/__main__.py:334) and pix0 overrides ignored by Detector (src/nanobrag_torch/models/detector.py:326); Phase B of plans/active/cli-noise-pix0/plan.md remains the active path.
galph_memory.md:927:- Follow-up for Ralph: add `tests/test_cli_flags.py` covering pix0 aliases + -nonoise suppression, run `pytest` per memo, stash log, and record Attempt entry before moving to Phase C2.
galph_memory.md:931:- Reviewed Ralph commit b6c6a61 (`tests/test_cli_flags.py`); tests look solid and cover meters/mm aliases, override persistence, and -nonoise suppression — no regressions spotted.
galph_memory.md:1131:- Hypotheses for Phase I3 parity gap (triage): (1) Polarization factor may still diverge if CLI path misses Kahn defaults despite BeamConfig fix—confirm by running nb-compare; (2) -nonoise might still emit noiseimage if simulator flag regressed; (3) pix0 override suppression with custom vectors must match C—verify stdout pix0 to ensure parity. Highest-confidence risk is #1; next step is the nb-compare command recorded in input.md (correlation + polarization metrics).
nonBragg.c:719:            if(strstr(argv[i], "-nonoise") )
docs/fix_plan.md:22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
docs/fix_plan.md:450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
docs/fix_plan.md:457:  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
docs/fix_plan.md:458:  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
docs/fix_plan.md:1475:      - `reports/2025-10-cli-flags/phase_a/c_with_nonoise.log` - C run WITH -nonoise
docs/fix_plan.md:1476:      - `reports/2025-10-cli-flags/phase_a/c_with_noise.log` - C run WITHOUT -nonoise
[2025-10-07T23:20:21] tokens used: 44,713

[2025-10-07T23:20:27] thinking

**Assessing CLI flag support and spec compliance**

I'm piecing together the current state of CLI flag support, especially for -nonoise and -pix0_vector_mm, since -nonoise seems implemented but -pix0_vector_mm might still need work. I also want to verify if the phi spec is correctly followed in the PyTorch code, focusing on path resetting per phi step and whether prior bugs related to caching have been fixed. Checking relevant source code and tests will help clarify these outstanding areas.
[2025-10-07T23:20:30] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1050,1200p' src/nanobrag_torch/models/crystal.py" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:20:30] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '1050,1200p' src/nanobrag_torch/models/crystal.py" succeeded in 804ms:

        # Step 1: Apply spindle rotation to ONLY real-space vectors (a, b, c)
        # This follows spec-compliant semantics where each φ step gets a fresh rotation.
        # Spec reference (specs/spec-a-core.md:211-214):
        #   "φ step: φ = φ0 + (step index)*phistep; rotate the reference cell (a0,b0,c0)
        #    about u by φ to get (ap,bp,cp)."
        #
        # NOTE: This is the SPEC-COMPLIANT path. The C code (nanoBragg.c:3044-3058) contains
        # a bug where it skips rotation when phi==0, causing ap/bp/cp to carry over stale
        # values from the previous pixel's last φ step. This is documented as C-PARITY-001
        # in docs/bugs/verified_c_bugs.md:166-204. An opt-in parity shim will be added in
        # Phase L3k.3c.4 for validation harnesses that need to reproduce the C bug.
        #
        # Shape: (N_phi, 3)

        # Apply rotation to base vectors for all φ angles
        # When phi=0, rotate_axis applies identity rotation, yielding base vectors
        a_phi = rotate_axis(
            self.a.unsqueeze(0).expand(config.phi_steps, -1),
            spindle_axis.unsqueeze(0).expand(config.phi_steps, -1),
[2025-10-07T23:20:30] tokens used: 48,157

[2025-10-07T23:20:38] thinking

**Evaluating spec compliance and parity shim plan**

I'm checking the spec path implementation to confirm no phi bug is present and verifying documentation for contradictions. I notice the parity shim is still TODO, which might be needed for parity comparison with the buggy C path. I’m also reviewing vectorization support and long-term goals to plan next steps, including running a simple Python command for an unrelated task.
[2025-10-07T23:20:40] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python -c \"import random; import secrets; print('heads' if secrets.randbits(1)==0 else 'tails')\"" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:20:40] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && python -c \"import random; import secrets; print('heads' if secrets.randbits(1)==0 else 'tails')\"" succeeded in 752ms:
tails
[2025-10-07T23:20:40] tokens used: 50,573

[2025-10-07T23:21:25] thinking

**Deciding focus and action type for parity shim tasks**
**Preparing detailed planning for parity shim tasks**

I’m deciding to create or update a focused plan for the parity shim work under CLI-FLAGS-003 L3k.3c tasks. Since this is a multi-step effort, the planning action fits well. I’m gathering relevant documentation, test files, and code context to build a structured and comprehensive plan update.
[2025-10-07T23:21:31] codex
**Preparing detailed planning for parity shim tasks**

I’m deciding to create or update a focused plan for the parity shim work under CLI-FLAGS-003 L3k.3c tasks. Since this is a multi-step effort, the planning action fits well. I’m gathering relevant documentation, test files, and code context to build a structured and comprehensive plan update.
[2025-10-07T23:21:32] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat tests/test_cli_scaling_phi0.py' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:21:33] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && cat tests/test_cli_scaling_phi0.py' succeeded in 886ms:
"""
CLI Scaling φ=0 Parity Tests for CLI-FLAGS-003 Phase L3k.3

Tests φ=0 rotated lattice vectors and Miller indices to capture the base-vector
drift before implementing the fix for independent real/reciprocal rotation.

Evidence base: reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/
Plan reference: plans/active/cli-noise-pix0/plan.md Phase L3k.3
Supervisor memo: input.md:22-45 (Do Now for Phase L3k.3)
"""
import os
import sys
from pathlib import Path
import pytest
import torch
import numpy as np

# Set required environment variable
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

[2025-10-07T23:21:33] tokens used: 54,554

[2025-10-07T23:21:38] thinking

**Planning shim and test additions**

I’m gathering details on the C code bug and where in the Python code to implement a parity shim, aiming to reference relevant docs and reports to build a clear plan that includes specific tests for optional bug reintroduction.
[2025-10-07T23:21:39] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 120 reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:21:40] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && head -n 120 reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md' succeeded in 814ms:
# CLI-FLAGS-003 Phase L Diagnosis Log

**Status**: Active investigation of φ rotation parity discrepancies
**Current Phase**: L3k (φ=0 Carryover Evidence Collection)
**Last Updated**: 2025-10-07 (ralph i=107)

---

## 2025-10-07: Phase L3k.3c.2 — φ=0 Carryover Evidence Collection

**Summary**: Captured PyTorch φ=0 state probe results. **BLOCKED** awaiting C trace generation (Phase L3k.3b) to compute deltas and complete carryover story.

### Probe Results

From `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251123/rot_vector_state_probe.log`:

```
b_base_y 0.7173197865486145
rot_b_phi0_y 0.7173197865486145
rot_b_phi1_y 0.7122385501861572
[2025-10-07T23:21:40] tokens used: 57,880

[2025-10-07T23:22:06] thinking

**Designing and preparing new plan file**

I'm working out how to create a detailed new plan file focused on the parity shim tasks, organizing it into phases with checklists and cross-references. I’m considering folder structure, task statuses, and updates needed in existing plans and documentation before actually writing the plan content and creating the directories.
[2025-10-07T23:22:10] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && mkdir -p plans/active/cli-phi-parity-shim' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:22:11] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && mkdir -p plans/active/cli-phi-parity-shim' succeeded in 992ms:

[2025-10-07T23:22:11] tokens used: 61,538

[2025-10-07T23:22:17] thinking

**Drafting detailed project plan**

I'm outlining a multi-phase plan covering spec verification, shim design, implementation with tests, and documentation handoff. I'll include tasks, goals, artifact paths, and relevant references, then write it all into `plan.md` carefully.
[2025-10-07T23:22:45] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > plans/active/cli-phi-parity-shim/plan.md
## Context
- Initiative: CLI-FLAGS-003 ("'`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
- Dependencies:
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).

### Phase A — Spec Baseline Confirmation (Prerequisite)
Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Catalogue existing spec evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/` contains `pytest_phi0.log`, `comparison_summary.md`, and `sha256.txt`. Reference these in future memos/tests. |
| A2 | Note authoritative tests & selectors | [D] | ✅ `tests/test_cli_scaling_phi0.py::{TestPhiZeroParity::test_rot_b_matches_c,test_k_frac_matches_spec}` locked to spec constants (tolerance ≤1e-6). Collect-only selector: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q`. |
| A3 | Record VG-1 tolerances | [D] | ✅ VG-1 gate: |Δrot_b_phi0_y| ≤ 1e-6 Å and |Δk_frac_phi0| ≤ 1e-6. Log lives in `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` §VG-1. |

### Phase B — Parity Shim Design & API
Goal: Define how the optional carryover mode is requested, how it flows through configs/models, and how it coexists with the spec path.
Prereqs: Phase A complete; review `golden_suite_generator/nanoBragg.c:3040-3095` for reference logic.
Exit Criteria: Design note approved, interface decisions captured in plan + fix_plan, and implementation ready to start.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| B1 | Draft design note (`design.md`) | [ ] | Create `parity_shim/<timestamp>/design.md` summarising: (1) Opt-in trigger surface (CLI flag vs environment vs config field); (2) Data flow sketch showing when stale vectors should replace spec vectors; (3) Gradient/torch.compile considerations; (4) Interaction with batching (phi × mosaic). Include direct C-code excerpts per CLAUDE Rule #11. |
| B2 | Choose API & config plumbing | [ ] | Decide naming/location (e.g., `CrystalConfig.phi_carryover_mode` or `SimulatorConfig.c_parity`). Document default (`spec`) vs legacy (`c`) modes; ensure CLI mapping is unambiguous and does not repurpose existing flags. Update `design.md` and note required changes to `src/nanobrag_torch/__main__.py` and config dataclasses. |
| B3 | Define validation strategy | [ ] | Enumerate required tests & scripts: (a) extend `tests/test_cli_scaling_phi0.py` with parity-toggle cases; (b) targeted pytest selectors (CPU and CUDA); (c) per-φ trace capture using `scripts/compare_per_phi_traces.py`; (d) nb-compare/ROI expectations if needed. Add these to `design.md` with commands and artifact targets. |

### Phase C — Implementation & Verification Tasks
Goal: Implement the parity shim and prove both modes behave as intended without regressing vectorization, gradients, or devices.
Prereqs: Phase B approvals published and referenced from fix_plan/input.md.
Exit Criteria: Production code contains opt-in shim, tests/logs stored, fix_plan Attempt logged with metrics.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
| C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |

### Phase D — Documentation & Handoff
Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
Prereqs: Phase C complete, evidence uploaded.
Exit Criteria: Docs refreshed, plan cross-references updated, Next Actions ready for nb-compare rerun.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
| D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
| D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |

EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:22:46] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > plans/active/cli-phi-parity-shim/plan.md
## Context
- Initiative: CLI-FLAGS-003 ("'`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
- Dependencies:
  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).

### Phase A — Spec Baseline Confirmation (Prerequisite)
Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Catalogue existing spec evidence | [D] | ✅ `reports/2025-10-cli-flags/phase_l/rot_vector/base_vector_debug/20251007T231515Z/` contains `pytest_phi0.log`, `comparison_summary.md`, and `sha256.txt`. Reference these in future memos/tests. |
| A2 | Note authoritative tests & selectors | [D] | ✅ `tests/test_cli_scaling_phi0.py::{TestPhiZeroParity::test_rot_b_matches_c,test_k_frac_matches_spec}` locked to spec constants (tolerance ≤1e-6). Collect-only selector: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q`. |
| A3 | Record VG-1 tolerances | [D] | ✅ VG-1 gate: |Δrot_b_phi0_y| ≤ 1e-6 Å and |Δk_frac_phi0| ≤ 1e-6. Log lives in `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` §VG-1. |

### Phase B — Parity Shim Design & API
Goal: Define how the optional carryover mode is requested, how it flows through configs/models, and how it coexists with the spec path.
Prereqs: Phase A complete; review `golden_suite_generator/nanoBragg.c:3040-3095` for reference logic.
Exit Criteria: Design note approved, interface decisions captured in plan + fix_plan, and implementation ready to start.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| B1 | Draft design note (`design.md`) | [ ] | Create `parity_shim/<timestamp>/design.md` summarising: (1) Opt-in trigger surface (CLI flag vs environment vs config field); (2) Data flow sketch showing when stale vectors should replace spec vectors; (3) Gradient/torch.compile considerations; (4) Interaction with batching (phi × mosaic). Include direct C-code excerpts per CLAUDE Rule #11. |
| B2 | Choose API & config plumbing | [ ] | Decide naming/location (e.g., `CrystalConfig.phi_carryover_mode` or `SimulatorConfig.c_parity`). Document default (`spec`) vs legacy (`c`) modes; ensure CLI mapping is unambiguous and does not repurpose existing flags. Update `design.md` and note required changes to `src/nanobrag_torch/__main__.py` and config dataclasses. |
| B3 | Define validation strategy | [ ] | Enumerate required tests & scripts: (a) extend `tests/test_cli_scaling_phi0.py` with parity-toggle cases; (b) targeted pytest selectors (CPU and CUDA); (c) per-φ trace capture using `scripts/compare_per_phi_traces.py`; (d) nb-compare/ROI expectations if needed. Add these to `design.md` with commands and artifact targets. |

### Phase C — Implementation & Verification Tasks
Goal: Implement the parity shim and prove both modes behave as intended without regressing vectorization, gradients, or devices.
Prereqs: Phase B approvals published and referenced from fix_plan/input.md.
Exit Criteria: Production code contains opt-in shim, tests/logs stored, fix_plan Attempt logged with metrics.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| C1 | Implement opt-in carryover | [ ] | Modify `Crystal.get_rotated_real_vectors` (and supporting helpers) to optionally reuse φ_{last} vectors when parity mode enabled. Must remain batched: use tensor masking/index operations rather than Python loops. Include C reference snippet (`nanoBragg.c:3044-3058`) in docstring as mandated. Ensure default path unchanged. |
| C2 | Update CLI / configs | [ ] | Wire the chosen API through `CrystalConfig`, `SimulatorConfig`, and CLI parser. Provide unit coverage in `tests/test_cli_flags.py` (e.g., new `TestPhiParityShim`) verifying flag parsing, default mode, and interaction with existing options. |
| C3 | Add regression & parity tests | [ ] | Extend `tests/test_cli_scaling_phi0.py` with parity-enabled assertions (expect C bug values). Parameterise over devices (CPU + CUDA when available). Capture logs under `parity_shim/<timestamp>/pytest_{cpu,cuda}.log`. Ensure spec tests still pass. |
| C4 | Capture per-φ traces | [ ] | Run `scripts/compare_per_phi_traces.py` twice (spec vs C parity, parity-shim vs C). Store outputs (`trace_summary.md`, `delta_metrics.json`, raw traces) under the new report directory. Confirm parity mode reproduces Δk/Δb from C within 1e-6 while spec mode remains at spec baselines. |
| C5 | Summarise metrics & log attempt | [ ] | Write `summary.md` describing test outcomes, trace comparisons, and any tolerances. Update `docs/fix_plan.md` Attempt history (CLI-FLAGS-003) with metrics, references, and git commit SHA. |

### Phase D — Documentation & Handoff
Goal: Align specs/docs with dual-mode behavior and prepare for Phase L4 supervisor command parity rerun.
Prereqs: Phase C complete, evidence uploaded.
Exit Criteria: Docs refreshed, plan cross-references updated, Next Actions ready for nb-compare rerun.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| D1 | Update documentation | [ ] | Refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md` (add parity shim section), `docs/bugs/verified_c_bugs.md` (note shim availability), and `README_PYTORCH.md` or CLI docs if new flag added. Ensure spec documents remain unchanged (bug stays quarantined). |
| D2 | Sync plans/fix_plan | [ ] | Mark relevant rows in `plans/active/cli-noise-pix0/plan.md` as [D] or [P] with links to this plan’s artifacts. Update `docs/fix_plan.md` Next Actions to advance to Phase L4. |
| D3 | Prepare handoff to supervisor command rerun | [ ] | Document in `summary.md` which commands/tests must run next (e.g., nb-compare, supervisor command). Provide clear Do Now guidance for transitioning into Phase L4 in `input.md`. |

EOF
' succeeded in 900ms:

[2025-10-07T23:22:46] tokens used: 64,348

[2025-10-07T23:22:53] thinking

**Preparing to update plan references**
[2025-10-07T23:22:53] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "L3k.3c.4" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:22:54] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && rg -n "L3k.3c.4" plans/active/cli-noise-pix0/plan.md' succeeded in 861ms:
309:| L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
310:| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
[2025-10-07T23:22:54] tokens used: 67,550

[2025-10-07T23:22:57] thinking

**Preparing to update specific rows**
[2025-10-07T23:22:57] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '300,330p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:22:58] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '300,330p' plans/active/cli-noise-pix0/plan.md" succeeded in 762ms:
| L3k.3e | Finalize documentation + checklist (VG-5) | [ ] | When VG-1/VG-3/VG-4 pass, mark remaining rows in `fix_checklist.md` ✅, append resolutions to `mosflm_matrix_correction.md`, and prep notes for the L3k.4 attempt log. |
| L3k.4 | Log Attempt + plan sync | [ ] | **BLOCKED on L3k.3 completion.** Append new Attempt entry in `docs/fix_plan.md` CLI-FLAGS-003 with metrics (correlation, sum_ratio, b_Y delta, k_frac delta from VG artifacts), reference all artifact paths (per-φ traces, pytest log, nb-compare summary, updated checklist), document observations (H5 confirmed, thresholds met), and flip L3k.1–L3k.4 rows to [D] in this plan. Update Next Actions to proceed to Phase L4 supervisor command parity rerun. |

#### L3k.3c Tasks — Restore φ=0 Parity with C Reference

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
| L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
| L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
| L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |

### Phase L4 — Supervisor Command Parity Rerun
Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.
Prereqs: L3 validation artifacts show ≤1e-6 deltas for scaling factors; regression tests green.
Exit Criteria: nb-compare metrics meet thresholds, artifacts stored under `reports/2025-10-cli-flags/phase_l/supervisor_command_rerun/`, docs/fix_plan.md Attempt #56 documents the pass, and this plan is ready for archival.

| ID | Task Description | State | How/Why & Guidance |
[2025-10-07T23:22:58] tokens used: 68,184

[2025-10-07T23:23:01] thinking

**Updating plan references in rows**
[2025-10-07T23:23:05] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -309,4 +309,4 @@
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
[2025-10-07T23:23:05] apply_patch(auto_approved=true) exited 0 in 17ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T23:23:05] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T23:23:05] tokens used: 70,536
[2025-10-07T23:23:05] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:23:09] thinking

**Updating docs/fix_plan.md with new plan reference**
[2025-10-07T23:23:11] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:23:12] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && sed -n '450,520p' docs/fix_plan.md" succeeded in 1.14s:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
- Attempts History:
  * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
    Metrics: Planning-only (no tests executed).
    Artifacts:
      - `plans/active/cli-noise-pix0/plan.md` — New Phase L3k section outlining implementation gates.
[2025-10-07T23:23:12] tokens used: 71,645
[2025-10-07T23:23:12] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:23:19] thinking

**Updating Next Actions to new plan**
[2025-10-07T23:23:25] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -459,7 +459,6 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases A–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
[2025-10-07T23:23:25] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T23:23:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..ac170ff514f1720faa244a7854c6dcde81bd6d61
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases A–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T23:23:25] tokens used: 74,489
[2025-10-07T23:23:25] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..ac170ff514f1720faa244a7854c6dcde81bd6d61
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases A–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:23:31] thinking

**Clarifying phase references**
[2025-10-07T23:23:33] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/docs/fix_plan.md
@@ -460,3 +460,3 @@
 - Next Actions (2025-11-27 refresh → galph loop i=118):
-1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases A–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
 2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
[2025-10-07T23:23:33] apply_patch(auto_approved=true) exited 0 in 15ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T23:23:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

[2025-10-07T23:23:33] tokens used: 142,339
[2025-10-07T23:23:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:23:49] thinking

**Formulating documentation-focused instructions**

I’m organizing the instructions to Ralph around producing a design doc for the parity shim, setting Mode to Docs since this iteration centers on documentation rather than code. I’m specifying the exact plan item, test commands to run collect-only, mapped tests, expected artifacts, and branch information to ensure clarity and consistency with the plan before I update input.md.
[2025-10-07T23:23:50] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:23:51] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' succeeded in 906ms:
## feature/spec-based-2...origin/feature/spec-based-2
 M docs/fix_plan.md
 M plans/active/cli-noise-pix0/plan.md
?? plans/active/cli-phi-parity-shim/
[2025-10-07T23:23:51] tokens used: 144,877
[2025-10-07T23:23:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:23:56] thinking

**Preparing detailed commit plan**
[2025-10-07T23:23:57] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:23:58] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && nl -ba plans/active/cli-phi-parity-shim/plan.md' succeeded in 717ms:
     1	## Context
     2	- Initiative: CLI-FLAGS-003 (`-nonoise` / `-pix0_vector_mm`) — φ=0 parity shim design (Phase L3k.3c.4–L3k.3c.5 in `plans/active/cli-noise-pix0/plan.md`).
     3	- Phase Goal: Design and supervise implementation of an **opt-in** φ=0 carryover shim that reproduces the documented C bug (C-PARITY-001) without regressing the new spec-compliant default path. Deliver validated traces, tests, and documentation so the supervisor command can run PyTorch vs C parity with matching φ behavior.
     4	- Dependencies:
     5	  - `specs/spec-a-core.md:204-240` — Normative φ rotation pipeline.
     6	  - `docs/bugs/verified_c_bugs.md:166-204` — C-PARITY-001 description and reproduction command.
     7	  - `reports/2025-10-cli-flags/phase_l/rot_vector/` — Existing φ trace artifacts (VG-1 baseline evidence).
     8	  - `tests/test_cli_scaling_phi0.py` — Spec compliance tests that must remain green.
     9	  - `src/nanobrag_torch/models/crystal.py:1070-1130` — Current spec-compliant rotation implementation.
    10	  - `scripts/compare_per_phi_traces.py` and `reports/2025-10-cli-flags/phase_l/` harness notes — Required for parity validation.
    11	- Current Status (2025-11-27): Spec baseline locked (VG-1 met with ≤1e-6 deltas); parity shim not yet designed. Default path removes `_phi_last_cache`. Need explicit toggle plus regression coverage before L4 supervisor command rerun.
    12	- Artifact Directory: Use `reports/2025-10-cli-flags/phase_l/parity_shim/<YYYYMMDDTHHMMSSZ>/` for new evidence (traces, logs, design notes, checksums).
    13	- Guardrails: Preserve vectorization (no per-step Python loops), maintain device/dtype neutrality, obey Protected Assets (do not move files listed in `docs/index.md`).
    14	
    15	### Phase A — Spec Baseline Confirmation (Prerequisite)
    16	Goal: Freeze references confirming spec-compliant behavior so parity shim development cannot regress the default path.
    17	Prereqs: None (evidence already captured; this phase records provenance and identifies gaps).
    18	Exit Criteria: Artifact pointers recorded here and in fix_plan; VG-1 tolerances documented for quick re-validation.
    19	
    20	| ID | Task Description | State | How/Why & Guidance |
[2025-10-07T23:23:58] tokens used: 145,343
[2025-10-07T23:23:58] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:01] thinking

**Preparing line-number references**
[2025-10-07T23:24:02] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '440,520p'" in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:02] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && nl -ba docs/fix_plan.md | sed -n '440,520p'" succeeded in 708ms:
   440	    `PY`
   441	- First Divergence (if known): `parse_and_validate_args` (src/nanobrag_torch/__main__.py:435) calls `read_hkl_file`/`try_load_hkl_or_fdump` without forwarding the parsed dtype, so HKL/Fdump data is always loaded as float32. When the CLI is run with `-dtype float64`, the simulator converts those float32 tensors to float64 later, permanently losing precision relative to the requested double-precision path and violating the DTYPE-DEFAULT-001 guarantee.
   442	- Immediate Next Actions (2025-10-15):
   443	  * Update `parse_and_validate_args` (and any helper that constructs `CrystalConfig`) to thread the parsed dtype/device into HKL/Fdump loaders so CLI `-dtype` honours float64 from the start.
   444	  * Add a regression test (e.g., `tests/test_cli_dtype.py`) that invokes the parser with `-dtype float64` and asserts `config['hkl_data'][0].dtype == torch.float64`, covering both HKL and Fdump paths.
   445	  * Re-run AT-IO-003 and the CLI smoke (help + minimal render) to ensure no regressions, capturing logs under `reports/DTYPE-CLI/<date>/`.
   446	- Attempts History: None — new item.
   447	- Risks/Assumptions: Ensure `write_fdump` continues to emit float64 on disk (spec requirement) while the in-memory tensor honours caller dtype; watch for latent callers that relied on the old float64 default during plan DTYPE-DEFAULT-001 migration.
   448	- Exit Criteria: CLI runs with `-dtype float64` produce double-precision HKL/Fdump tensors end-to-end, regression test passes, and existing dtype-sensitive tests (AT-IO-003, CLI smoke, gradchecks) remain green.
   449	
   450	## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
   451	- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
   452	- Priority: High
   453	- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
   454	- Owner/Date: ralph/2025-10-05
   455	- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
   456	- Reproduction (C & PyTorch):
   457	  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   458	  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
   459	- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
[2025-10-07T23:24:02] tokens used: 147,797
[2025-10-07T23:24:02] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:12] thinking

**Preparing input.md content**

I’m putting together detailed sections for input.md, including instructions, mapped tests, artifacts with paths and timestamps, priorities referencing line numbers, and guidance like pitfalls and how-to commands. I want to ensure each part is thorough and clear before writing the file, using placeholders for timestamp and crafting fallback and next-up notes thoughtfully.
[2025-10-07T23:24:21] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Draft the φ=0 carryover parity-shim design so spec mode stays default while C parity becomes opt-in.
Mode: Docs
Focus: CLI-FLAGS-003 L3k.3c.4 — parity shim design
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling_phi0.py (collect-only)
Artifacts: plans/active/cli-phi-parity-shim/plan.md; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/design.md; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/collect_only.log
Do Now: CLI-FLAGS-003 L3k.3c.4 — KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q (stash log under parity_shim/<timestamp>/)
If Blocked: Capture why the design note cannot progress in design.md (status, missing data), run the collect-only selector anyway, and log the attempt in docs/fix_plan.md before pausing.
Priorities & Rationale:
- plans/active/cli-phi-parity-shim/plan.md:26-35 set the design tasks (B1-B3) that must complete before any implementation.
- docs/fix_plan.md:450-463 promotes L3k.3c.4/5 as the next gate to unlock the supervisor command parity rerun.
- specs/spec-a-core.md:204-240 keeps φ rotation normative; the shim must not change this default path.
- docs/bugs/verified_c_bugs.md:166-204 documents C-PARITY-001; the shim design must trace back to this evidence.
- tests/test_cli_scaling_phi0.py:1-192 already encode the spec baseline; design must preserve these assertions and plan parity-only cases.
How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/parity_shim/"'$(date -u +%Y%m%dT%H%M%SZ) for the new evidence drop.
- Draft design.md covering trigger surface, data flow, validation commands; cite nanoBragg.c lines 3040-3095 verbatim per CLAUDE Rule #11.
- KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q > parity_shim/.../collect_only.log
- Note planned trace commands (scripts/compare_per_phi_traces.py, nb-compare) and pytest selectors inside design.md, pointing to the new report directory.
Pitfalls To Avoid:
- Do not alter production code yet; this loop is design-only.
- Keep spec mode default—no plan for toggling without explicit opt-in.
- Maintain vectorization constraints when outlining implementation (no Python loops in design).
- Respect Protected Assets; do not move files listed in docs/index.md.
- Ensure collect-only log captures that the selector still discovers both φ tests.
- Reference C code via exact snippets; paraphrasing violates CLAUDE Rule #11.
- When proposing CLI flags, avoid collisions with existing options.
- Plan for device/dtype neutrality; design must cover CPU and CUDA traces.
- Preserve existing artifacts; new evidence goes under parity_shim/<timestamp>/.
Pointers:
- plans/active/cli-phi-parity-shim/plan.md:33-48 — design + implementation checklist.
- plans/active/cli-noise-pix0/plan.md:303-317 — L3k.3c rows now referencing the new plan.
- docs/fix_plan.md:450-463 — refreshed Next Actions for CLI-FLAGS-003.
- specs/spec-a-core.md:204-240 — normative φ rotation description.
- docs/bugs/verified_c_bugs.md:166-204 — C bug reference to emulate.
Next Up: 1) Promote the chosen API through Crystal/Simulator configs (plan C2). 2) Prepare pytest parity cases once mode exists (plan C3).
EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:22] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' > input.md
Summary: Draft the φ=0 carryover parity-shim design so spec mode stays default while C parity becomes opt-in.
Mode: Docs
Focus: CLI-FLAGS-003 L3k.3c.4 — parity shim design
Branch: feature/spec-based-2
Mapped tests: tests/test_cli_scaling_phi0.py (collect-only)
Artifacts: plans/active/cli-phi-parity-shim/plan.md; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/design.md; reports/2025-10-cli-flags/phase_l/parity_shim/<timestamp>/collect_only.log
Do Now: CLI-FLAGS-003 L3k.3c.4 — KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q (stash log under parity_shim/<timestamp>/)
If Blocked: Capture why the design note cannot progress in design.md (status, missing data), run the collect-only selector anyway, and log the attempt in docs/fix_plan.md before pausing.
Priorities & Rationale:
- plans/active/cli-phi-parity-shim/plan.md:26-35 set the design tasks (B1-B3) that must complete before any implementation.
- docs/fix_plan.md:450-463 promotes L3k.3c.4/5 as the next gate to unlock the supervisor command parity rerun.
- specs/spec-a-core.md:204-240 keeps φ rotation normative; the shim must not change this default path.
- docs/bugs/verified_c_bugs.md:166-204 documents C-PARITY-001; the shim design must trace back to this evidence.
- tests/test_cli_scaling_phi0.py:1-192 already encode the spec baseline; design must preserve these assertions and plan parity-only cases.
How-To Map:
- mkdir -p reports/2025-10-cli-flags/phase_l/parity_shim/"'$(date -u +%Y%m%dT%H%M%SZ) for the new evidence drop.
- Draft design.md covering trigger surface, data flow, validation commands; cite nanoBragg.c lines 3040-3095 verbatim per CLAUDE Rule #11.
- KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q > parity_shim/.../collect_only.log
- Note planned trace commands (scripts/compare_per_phi_traces.py, nb-compare) and pytest selectors inside design.md, pointing to the new report directory.
Pitfalls To Avoid:
- Do not alter production code yet; this loop is design-only.
- Keep spec mode default—no plan for toggling without explicit opt-in.
- Maintain vectorization constraints when outlining implementation (no Python loops in design).
- Respect Protected Assets; do not move files listed in docs/index.md.
- Ensure collect-only log captures that the selector still discovers both φ tests.
- Reference C code via exact snippets; paraphrasing violates CLAUDE Rule #11.
- When proposing CLI flags, avoid collisions with existing options.
- Plan for device/dtype neutrality; design must cover CPU and CUDA traces.
- Preserve existing artifacts; new evidence goes under parity_shim/<timestamp>/.
Pointers:
- plans/active/cli-phi-parity-shim/plan.md:33-48 — design + implementation checklist.
- plans/active/cli-noise-pix0/plan.md:303-317 — L3k.3c rows now referencing the new plan.
- docs/fix_plan.md:450-463 — refreshed Next Actions for CLI-FLAGS-003.
- specs/spec-a-core.md:204-240 — normative φ rotation description.
- docs/bugs/verified_c_bugs.md:166-204 — C bug reference to emulate.
Next Up: 1) Promote the chosen API through Crystal/Simulator configs (plan C2). 2) Prepare pytest parity cases once mode exists (plan C3).
EOF
' succeeded in 885ms:

[2025-10-07T23:24:22] tokens used: 150,914
[2025-10-07T23:24:22] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:25] thinking

**Preparing for Git hygiene check**
[2025-10-07T23:24:26] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:27] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' succeeded in 785ms:
## feature/spec-based-2...origin/feature/spec-based-2
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
?? plans/active/cli-phi-parity-shim/
[2025-10-07T23:24:27] tokens used: 152,187
[2025-10-07T23:24:27] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:29] thinking

**Preparing to stage changes**
[2025-10-07T23:24:30] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:31] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git diff' succeeded in 750ms:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a832737..a91512c 100644
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
[2025-10-07T23:24:31] tokens used: 152,478
[2025-10-07T23:24:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:33] thinking

**Checking new plan file diff**
[2025-10-07T23:24:34] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:35] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status' succeeded in 748ms:
On branch feature/spec-based-2
Your branch is up to date with 'origin/feature/spec-based-2'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   docs/fix_plan.md
	modified:   input.md
	modified:   plans/active/cli-noise-pix0/plan.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	plans/active/cli-phi-parity-shim/

no changes added to commit (use "git add" and/or "git commit -a")
[2025-10-07T23:24:35] tokens used: 155,742
[2025-10-07T23:24:35] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:39] thinking

**Staging updated plan files**
[2025-10-07T23:24:41] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md input.md plans/active/cli-noise-pix0/plan.md plans/active/cli-phi-parity-shim/plan.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:42] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add docs/fix_plan.md input.md plans/active/cli-noise-pix0/plan.md plans/active/cli-phi-parity-shim/plan.md' succeeded in 795ms:

[2025-10-07T23:24:42] tokens used: 166,687
[2025-10-07T23:24:42] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:45] thinking

**Checking status**
[2025-10-07T23:24:46] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:47] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' succeeded in 992ms:
## feature/spec-based-2...origin/feature/spec-based-2
M  docs/fix_plan.md
M  input.md
M  plans/active/cli-noise-pix0/plan.md
A  plans/active/cli-phi-parity-shim/plan.md
[2025-10-07T23:24:47] tokens used: 167,608
[2025-10-07T23:24:47] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:50] thinking

**Preparing commit message**
[2025-10-07T23:24:51] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: parity shim planning - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:51] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: parity shim planning - tests: not run"' succeeded in 781ms:
[feature/spec-based-2 7ef88d2] SUPERVISOR: parity shim planning - tests: not run
 4 files changed, 97 insertions(+), 104 deletions(-)
 create mode 100644 plans/active/cli-phi-parity-shim/plan.md
[2025-10-07T23:24:51] tokens used: 167,995
[2025-10-07T23:24:51] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:54] thinking

**Preparing to push changes**
[2025-10-07T23:24:54] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:24:57] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 2.56s:
To github.com:hoidn/nanoBragg.git
   f3aeac6..7ef88d2  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T23:24:57] tokens used: 169,301
[2025-10-07T23:24:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:24:59] thinking

**Preparing to update galph_memory.md**
[2025-10-07T23:25:00] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 40 galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:25:01] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && tail -n 40 galph_memory.md' succeeded in 792ms:
## 2025-11-27 (galph loop — φ=0 spec audit)
- Confirmed spec mandate (`specs/spec-a-core.md:211`) requires fresh φ rotations each step; C-PARITY-001 documents nanoBragg.c’s stale-vector carryover (`docs/bugs/verified_c_bugs.md:166`).
- PyTorch currently mirrors the bug via `_phi_last_cache` in `src/nanobrag_torch/models/crystal.py:1115-1198`; this contradicts the spec and the long-term goal to eliminate the carryover.
- CLI plan still instructs emulating the bug (L3k.3c.3). Issued new input.md directing Ralph to refresh `diagnosis.md` (L3k.3c.4) with spec-vs-parity guidance, log an Attempt, and run collect-only pytest. Expect next loop to revise the plan and design a spec-compliant default plus optional parity shim.

## 2025-10-07 (galph loop — φ=0 spec alignment)
- Reconfirmed spec mandate (`specs/spec-a-core.md:211-214`) that every φ step re-rotates the lattice and that C’s carryover bug is quarantined in `docs/bugs/verified_c_bugs.md:166-204`.
- Noted PyTorch still mirrors the bug via `_phi_last_cache` (`src/nanobrag_torch/models/crystal.py:1097-1198`); updated `docs/fix_plan.md` Next Actions and `plans/active/cli-noise-pix0/plan.md` context to call this out and require a parity shim decision.
- Issued new `input.md` (Docs mode) directing Ralph to refresh `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md`, log the attempt, cross-link the plan, and run the collect-only selector with `KMP_DUPLICATE_LIB_OK=TRUE`.
- No tests run; repo clean after commit `10333c0`.

## 2025-10-07 22:16 UTC (galph loop — VECTOR-TRICUBIC-001 planning refresh)
- Rewrote `plans/active/vectorization.md` with phased structure (A–G) and explicit Phase D/F checklists; added D1–D4/D5 guidance and future absorption tasks.
- Updated `docs/fix_plan.md:2194-2210` Next Actions to align with the refreshed plan (Phase D1–D4 plus Phase E staging).
- Issued new `input.md` (Docs mode) directing Ralph to complete Phase D1 documentation, capture collect-only proof, and log tensor-shape/C-reference requirements.
- Follow-up: Ralph to author `reports/2025-10-vectorization/phase_d/polynomial_validation.md`, run collect-only selector, and prepare tap_points.md if needed before coding D2.


## 2025-11-27 (galph loop — φ rotation plan refresh)
- Rebased with origin (no conflicts) and reviewed CLI-FLAGS-003 scope vs long-term goal #1.
[2025-10-07T23:25:01] tokens used: 169,594
[2025-10-07T23:25:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:25:04] thinking

**Appending summary entry to log**
[2025-10-07T23:25:08] exec bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-11-28 (galph loop — parity shim planning)
- Added dedicated plan "'`plans/active/cli-phi-parity-shim/plan.md` with Phases A–D covering design, implementation, and documentation for the φ=0 carryover shim; Phase B now gates API selection and validation strategy.
- Updated `plans/active/cli-noise-pix0/plan.md:L3k.3c.4-5` to point at the new plan and clarified evidence expectations (reports/2025-10-cli-flags/phase_l/parity_shim/...).
- Refreshed `docs/fix_plan.md:450-463` Next Actions to align with the new plan (execute Phases B–D before resuming nb-compare work).
- Issued `input.md` (Docs mode) directing Ralph to author the design note, choose the opt-in trigger, and run the collect-only selector before coding. Command: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q`.
- Commit `7ef88d2` pushed on `feature/spec-based-2`; no tests run in supervisor loop.

EOF
' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:25:09] bash -lc "cd /Users/ollie/Documents/nanoBragg3 && cat <<'EOF' >> galph_memory.md

## 2025-11-28 (galph loop — parity shim planning)
- Added dedicated plan "'`plans/active/cli-phi-parity-shim/plan.md` with Phases A–D covering design, implementation, and documentation for the φ=0 carryover shim; Phase B now gates API selection and validation strategy.
- Updated `plans/active/cli-noise-pix0/plan.md:L3k.3c.4-5` to point at the new plan and clarified evidence expectations (reports/2025-10-cli-flags/phase_l/parity_shim/...).
- Refreshed `docs/fix_plan.md:450-463` Next Actions to align with the new plan (execute Phases B–D before resuming nb-compare work).
- Issued `input.md` (Docs mode) directing Ralph to author the design note, choose the opt-in trigger, and run the collect-only selector before coding. Command: `KMP_DUPLICATE_LIB_OK=TRUE pytest tests/test_cli_scaling_phi0.py --collect-only -q`.
- Commit `7ef88d2` pushed on `feature/spec-based-2`; no tests run in supervisor loop.

EOF
' succeeded in 894ms:

[2025-10-07T23:25:09] tokens used: 171,616
[2025-10-07T23:25:09] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:25:12] thinking

**Checking git status before committing**
[2025-10-07T23:25:12] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:25:13] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' succeeded in 880ms:
## feature/spec-based-2...origin/feature/spec-based-2
 M galph_memory.md
[2025-10-07T23:25:13] tokens used: 172,979
[2025-10-07T23:25:13] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:25:17] thinking

**Preparing memory update commit**
[2025-10-07T23:25:18] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add galph_memory.md' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:25:19] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git add galph_memory.md' succeeded in 896ms:

[2025-10-07T23:25:19] tokens used: 173,290
[2025-10-07T23:25:19] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:25:21] thinking

**Committing changes**
[2025-10-07T23:25:22] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: memory update - tests: not run"' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:25:23] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git commit -m "SUPERVISOR: memory update - tests: not run"' succeeded in 769ms:
[feature/spec-based-2 2dda6dc] SUPERVISOR: memory update - tests: not run
 1 file changed, 8 insertions(+)
[2025-10-07T23:25:23] tokens used: 173,470
[2025-10-07T23:25:23] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:25:25] thinking

**Pushing changes to repository**
[2025-10-07T23:25:26] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:25:28] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git push' succeeded in 2.51s:
To github.com:hoidn/nanoBragg.git
   7ef88d2..2dda6dc  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T23:25:28] tokens used: 173,779
[2025-10-07T23:25:28] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:25:32] thinking

**Confirming repository cleanliness**
[2025-10-07T23:25:33] exec bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' in /Users/ollie/Documents/nanoBragg3
[2025-10-07T23:25:33] bash -lc 'cd /Users/ollie/Documents/nanoBragg3 && git status -sb' succeeded in 726ms:
## feature/spec-based-2...origin/feature/spec-based-2
[2025-10-07T23:25:33] tokens used: 177,292
[2025-10-07T23:25:33] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun


[2025-10-07T23:25:37] thinking

**Preparing final summary**

I’m crafting a friendly, concise response that highlights key actions like creating and updating plans, references relevant file paths, notes that tests weren’t run, and suggests next steps for Ralph to follow the new plan. I’ll use bullet points and an optional header to keep it clear and actionable.
[2025-10-07T23:25:38] codex

- Created new parity-shim supervision plan (`plans/active/cli-phi-parity-shim/plan.md:1-60`) with phased tasks covering design, implementation, and documentation for the φ=0 carryover toggle.
- Updated the existing CLI plan rows (`plans/active/cli-noise-pix0/plan.md:303-317`) to delegate L3k.3c.4–L3k.3c.5 to the new plan and clarified evidence targets (`reports/2025-10-cli-flags/phase_l/parity_shim/...`).
- Realigned CLI-FLAGS-003 Next Actions in `docs/fix_plan.md:450-463` to reference the new plan phases before resuming nb-compare work.
- Issued refreshed supervisor instructions (`input.md:1-29`) directing Ralph to author the parity-shim design note and capture the collect-only pytest log.

Tests: not run (planning/doc-only loop).

Next steps for Ralph: follow `input.md`—write the design note, decide on the opt-in interface per plan Phase B, and record the collect-only output under the new parity_shim report directory.
[2025-10-07T23:25:41] tokens used: 177,966
[2025-10-07T23:25:41] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index a8327377c99b2fc8eeae311734e34e530180226a..a91512cf6a12b860b64acdff6cad3e2d93bdf944
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,11 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-26 refresh → galph loop i=112, amended 2025-11-27):
-1. **Phase L3k.3c.3 (lock spec φ=0 baselines)** — Attempt #115 merged the spec-compliant rotation, but VG-1 remains open because k_frac still uses a "differs-from-C" guard. Capture fresh per-φ traces with the new implementation, record the spec targets (rot_b_y=0.7173197865 Å, k_frac=1.6756687164) in `comparison_summary.md`, update `tests/test_cli_scaling_phi0.py` to assert those values with ≤1e-6 tolerances, and regenerate `delta_metrics.json` showing max Δk, Δb_y ≤1e-6 on CPU+CUDA before advancing.
-2. **Phase L3k.3c.4 (parity shim design)** — After the default path matches the spec, add an opt-in carryover mode for parity harnesses. Document the toggle in `diagnosis.md`, cite `specs/spec-a-core.md:211-214` and `docs/bugs/verified_c_bugs.md:166-204`, and capture evidence that the shim reproduces the C trace without affecting the default run.
-3. **Phase L3k.3c.5 (docs/tests refresh)** — Revise `tests/test_cli_scaling_phi0.py`, `mosflm_matrix_correction.md`, and `fix_checklist.md` so default assertions target the spec values while parity cases sit behind the new shim. Store collect-only and targeted pytest logs showing both selectors discovered.
-4. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
+- Next Actions (2025-11-27 refresh → galph loop i=118):
+1. **Phase L3k.3c.4 (parity shim design + implementation)** — Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: keep VG-1 spec artifacts on hand, publish the design note, wire the opt-in carryover mode through configs/CLI, and capture parity traces + targeted pytest logs under `reports/2025-10-cli-flags/phase_l/parity_shim/`.
+2. **Phase L3k.3c.5 (dual-mode documentation/tests)** — Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md` to refresh `diagnosis.md`, `tests/test_cli_scaling_phi0.py`, and related checklists so spec mode remains default while the parity shim is explicitly covered. Archive collect-only outputs for both spec and parity selectors.
+3. Phase L3k.3d — Resolve the nb-compare ROI anomaly (C sum≈0) before repeating VG-3/VG-4; capture the corrected summary.json/logs under `nb_compare_phi_fix/` once correlation ≥0.9995 and sum_ratio 0.99–1.01. After VG-1/VG-3/VG-4 pass, proceed to L3k.3e → L3k.4 documentation and fix_plan logging ahead of the Phase L4 supervisor-command rerun.
 - Attempts History:
   * [2025-11-21] Attempt #95 (galph supervisor loop) — Result: **PLANNING UPDATE** (Phase L3k added). **No code changes.**
     Metrics: Planning-only (no tests executed).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 95e1771ecf31a5b737cbe6088fa11bcad43e18e5..0d666b54ec3a17de706f6e3e2760424e56d438f2
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -307,8 +307,8 @@
 | L3k.3c.1 | Reinstate C-aligned assertions | [D] | ✅ Attempt #103 (2025-10-07) restored the C expectations in `tests/test_cli_scaling_phi0.py`, leaving both φ=0 parity tests failing against the C reference. Artifact: `reports/.../pytest_phi0_regression.log`. Keep these assertions active so the fix cannot be masked. |
 | L3k.3c.2 | Diagnose φ=0 state carryover | [D] | Attempt #109 captured paired traces under `base_vector_debug/20251123/`, recorded Δk=1.8116×10⁻² and Δb_y=4.573155×10⁻² Å in `diagnosis.md` + `delta_by.txt`, and documented the carryover remediation plan (cache φ_last → reuse at φ_tic=0 with nanoBragg.c:3044 guard). |
 | L3k.3c.3 | Lock spec φ=0 baselines & tighten tests | [D] | ✅ 2025-10-07 Attempt #118 (ralph Mode: Parity/Evidence): Captured spec baseline evidence under `base_vector_debug/20251007T231515Z/`. Tests PASSED (2/2 in 2.14s): rot_b[0,0,1]=0.7173197865 Å (≤1e-6 ✓), k_frac(φ=0)=1.6756687164 (≤1e-6 ✓). Artifacts: metadata.txt (torch 2.8.0+cu128, git 4cb561b), pytest_phi0.log, sha256.txt (checksums), comparison_summary.md (full evidence). VG-1 satisfied on CPU; CUDA smoke deferred to next loop. Next: L3k.3c.4 C-parity shim design. Reference: docs/fix_plan.md Attempt #118. |
-| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Once the spec path is green, add an **opt-in** parity mode (e.g., config flag or CLI switch) that reproduces nanoBragg.c’s φ=0 carryover for comparison harnesses without polluting the default behavior. Document the toggle in `diagnosis.md`, cite `docs/bugs/verified_c_bugs.md:166-204`, and capture unit tests showing: (a) default path obeys spec (φ=0 deltas ≤1e-6); (b) parity toggle reintroduces the C-style plateau (tests expect C trace value). |
-| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Revise `tests/test_cli_scaling_phi0.py` so default assertions target the spec values while optional parity cases only run when the shim is enabled. Update `mosflm_matrix_correction.md`, `fix_checklist.md`, and docs/fix_plan Attempt notes to explain the two modes and reference where the parity shim is invoked in the supervisor command. Preserve VG-1 thresholds and ensure collect-only evidence captures both selectors. |
+| L3k.3c.4 | Design explicit C-parity carryover shim | [ ] | Execute `plans/active/cli-phi-parity-shim/plan.md` Phases B–C: author design note (API + validation strategy), implement opt-in carryover mode in Crystal/CLI without regressing spec defaults, and capture parity vs spec traces under `reports/2025-10-cli-flags/phase_l/parity_shim/`. Reference `docs/bugs/verified_c_bugs.md:166-204` in code/docstrings and keep VG-1 spec tests green. |
+| L3k.3c.5 | Update docs/tests for dual-mode behavior | [ ] | Follow Phase D of `plans/active/cli-phi-parity-shim/plan.md`: extend `tests/test_cli_scaling_phi0.py` with parity-toggle coverage, refresh `diagnosis.md` + related docs, and document toggle usage in fix_plan/input.md. Ensure collect-only evidence captures both selectors and VG-1 tolerances remain ≤1e-6. |
 | L3k.3c.6 | Document spec vs parity contract | [D] | ✅ 2025-10-07 (Attempt #114). Refreshed `reports/2025-10-cli-flags/phase_l/rot_vector/diagnosis.md:116-353` with complete 6-section analysis: (1) Normative spec behavior citing specs/spec-a-core.md:211, (2) C-PARITY-001 evidence from docs/bugs/verified_c_bugs.md:166, (3) Current PyTorch behavior (crystal.py:1115 cache mechanism), (4) Compatibility plan (spec-compliant default vs optional C-parity shim), (5) Verification checklist (VG-1 through VG-5 gates), (6) References & next actions. Captured pytest collect-only output to `reports/2025-10-cli-flags/phase_l/rot_vector/collect_only.log` (2 tests collected successfully). Logged Attempt #114 in docs/fix_plan.md with artifacts. Recommendation: Keep current C-parity implementation to complete CLI-FLAGS-003 validation; post-cleanup, introduce `--c-parity-mode` flag and default to spec-compliant behavior. |
 
 ### Phase L4 — Supervisor Command Parity Rerun

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   2dda6dc..4a3f637  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=119...
Already up to date.
From github.com:hoidn/nanoBragg
   b49b79d..974cb6d  main       -> origin/main
[sync] state: actor=ralph status=waiting-ralph iter=119
Updating 4a3f637..df556f4
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   4a3f637..df556f4  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=119
Already up to date.
Already up to date.
From github.com:hoidn/nanoBragg
 + 974cb6d...d0360de main       -> origin/main  (forced update)
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating df556f4..bc34c03
Fast-forward
 docs/fix_plan.md                                   |  22 +
 plans/active/cli-phi-parity-shim/plan.md           |   6 +-
 .../parity_shim/20251007T232657Z/collect_only.log  |   4 +
 .../phase_l/parity_shim/20251007T232657Z/design.md | 662 +++++++++++++++++++++
 4 files changed, 691 insertions(+), 3 deletions(-)
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/collect_only.log
 create mode 100644 reports/2025-10-cli-flags/phase_l/parity_shim/20251007T232657Z/design.md
From github.com:hoidn/nanoBragg
   df556f4..bc34c03  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating bc34c03..3afd44f
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   bc34c03..3afd44f  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=120
Ralph completed iteration 119; proceeding to 120
