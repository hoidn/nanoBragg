Already up to date.
Waiting for expected_actor=galph...
Already up to date.
[sync] state: actor=galph status=complete iter=91
To github.com:hoidn/nanoBragg.git
   42405c0..07d5837  HEAD -> feature/spec-based-2
$ codex exec -m gpt-5-codex -c model_reasoning_effort=high --dangerously-bypass-approvals-and-sandbox
[2025-10-07T11:04:44] OpenAI Codex v0.38.0 (research preview)
--------
workdir: /Users/ollie/Documents/nanoBragg3
model: gpt-5-codex
provider: openai
approval: never
sandbox: danger-full-access
reasoning effort: high
reasoning summaries: auto
--------
[2025-10-07T11:04:44] User instructions:
<role>
planning, review and analysis. do not make implementation code changes.
</role>
<current long-term goals>
in order of decreasing priority:
<1>
run a successful parallel test of pytorch nanobragg against nanobragg c with this command:

nanoBragg  -mat A.mat -floatfile img.bin -hkl scaled.hkl  -nonoise  -nointerpolate -oversample 1  -exposure 1  -flux 1e18 -beamsize 1.0  -spindle_axis -1 0 0 -Xbeam 217.742295 -Ybeam 213.907080  -distance 231.274660 -lambda 0.976800 -pixel 0.172 -detpixels_x 2463 -detpixels_y 2527 -odet_vector -0.000088 0.004914 -0.999988 -sdet_vector -0.005998 -0.999970 -0.004913 -fdet_vector 0.999982 -0.005998 -0.000118 -pix0_vector_mm -216.336293 215.205512 -230.200866  -beam_vector 0.00051387949 0.0 -0.99999986  -Na 36  -Nb 47 -Nc 29 -osc 0.1 -phi 0 -phisteps 10 -detector_rotx 0 -detector_roty 0 -detector_rotz 0 -twotheta 0

this will require first adding support for the following cli params to pytorch nanobragg:
-nonoise
-pix0_vector_mm

</1>
<2>
review and firm up if needed plans/active/vectorization.md. then implement it (or rather, delegate its implementation to ralph), starting with the tricubic interpolation vectorization 
</2>
</current long-term goals>
</past long term goals>
(just for archival / reference purposes):
- error-correcting the engineer agent 
- profiling pytorch nanobragg to find performance bottlenecks. analyzing to understand the CRITICAL slowness of the pytorch implementation compared to reference C, which persists after our recent improvement attempts
- finding performance issues in the PyTorch reimplementation of nanobragg (originally a C code) and speeding it up. It should be efficiently vectorized and faster than C nanobragg, but currently it's slower 
- ensuring that the pytorch implementation uses fp32 (not fp64) by default 
- understanding why pytorch is slower than C in the warm condition at 4096x4096 resolution and fixing the underlying performance issue, if one is found. THIS IS A CRITICAL PERFORMANCE ISSUE.
- once all the above are taken care of: building a user-facing showcase of autodiff-based parameter refinement, with plots / visuals

</past long-term goals>
<task>
You are galph, a planner / supervisor agent. you are overseeing the work of an agent (ralph) that is running prompts/main.md in a loop, using docs/fix_plan.md as its instruction set and long term memory. 

You will get invoked repeatedly, for multiple iterations. Use galph_memory.md to communicate with your future self. You'll plans under plans/, when needed, to help steer multi-turn efforts by the coder agent (ralph). Those plans will be cross referenced from docs/fix_plan.md so that ralph can find / read them. 

At the start of every invocation:
- Run `timeout 30 git pull --rebase` with a hard 30-second timeout  to sync with origin before reviewing context. If the command times out, immediately abort any partial rebase (`git rebase --abort`) and fall back to a normal merge via `git pull --no-rebase`. Whatever path you take, resolve resulting conflicts (docs/fix_plan.md is a frequent hotspot) and document key decisions in galph_memory.md. If the pull reports conflicts:
  * Run `git status --short` to list conflicted files.
  * Fix each file (remove conflict markers, keep the intended content) and stage it with `git add`.
  * When the index is clean, resume with `timeout 30 git rebase --continue --no-edit`. IMPORTANT: NEVER RUN THIS COMMAND WITHOUT TIMEOUT
- After resolving any conflicts, read the latest galph_memory.md entry (and any linked plan files) so you do not lose past context.
- Prune or summarize older entries when they become stale or redundant.

During the main, central phase of invocation you will be doing essentially three things:
<main analysis step 1> 
An initial analysis pass in which you gather and review information in order to choose a <focus issue> for the turn, corresponding to <instructions> steps <0> through <3>. This will involve a multi-category selection process. You will choose both a <focus issue> and an associated <Action type> for the remainder of the iteration. The available <Action type>s are the following:
<Action type> list:
<1>
<Evidence collection> (i.e. Evidence task)
No full pytest runs. Allowed: non-mutating probes and CLI validation tools (e.g., scripts/validation/*, nb-compare, pixel trace); pytest --collect-only to validate selectors; and in TDD mode only, a single targeted pytest run to confirm the newly authored test fails. Do not change production code. This gate applies only to galph. Ralph is exempt. Do not include any Phase label in input.md.

Evidence collection includes the following subtype:
    Callchain Tracing (Evidence subtype)
    - When to use: before code edits when the pipeline/factor order relevant to the current issue is unclear; when onboarding a new surface; or upon parity failures where the locus is unknown.
    - Directive: first, emit descriptions for the following things:
       - <analysis_question> (required): Free‑text description of the behavior/bug/perf issue to investigate. This will be closely related to <focus issue>, but viewed from the point of view of relevant code execution paths and their entry points.
       - <initiative_id> and <scope_hints> 

    - Directive: then read and carefully follow the instructions in `prompts/callchain.md` with the question‑driven invocation (<analysis_question>) and produce standardized artifacts under `reports/<initiative_id>/`.
    - Example invocation variables (fill at run time):
      analysis_question: "<what are we trying to understand or fix?>"
      initiative_id: "<short‑slug>"
      scope_hints: ["CLI flags", "normalization", "scaling"]
      roi_hint: "<minimal input/ROI>"
      namespace_filter: "<project primary package>"
      time_budget_minutes: 30
    - Expected outputs:
      - `reports/<initiative_id>/callchain/static.md` (entry→sink with file:line anchors)
      - `reports/<initiative_id>/callgraph/dynamic.txt` (optional, module‑filtered)
      - `reports/<initiative_id>/trace/tap_points.md` (proposed numeric taps with owners)
      - `reports/<initiative_id>/summary.md` (question‑oriented narrative + next steps)
      - `reports/<initiative_id>/env/trace_env.json`
    - Guardrails: evidence‑only (no prod edits), module/device/dtype neutrality, small ROI, respect Protected Assets, stable key names in traces.
</Evidence collection>
</1>
<2>
<Debug> i.e. Debugging — Hypothesis + Triage (initial pass):
- pairs with <focus issue>s that are related to debugging or parity analysis.
<steps>
- Formulate 1–3 plausible hypotheses for the observed gap/issue.
- Triage each with checks appropriate to scope using existing artifacts or quick, documented reproductions; this triage may constitute the primary work for the iteration. Record outcomes succinctly in the evidence.
- For the top hypothesis, state confidence and the single confirming step to run next. Deliver 1–3 ranked hypotheses with supporting evidence, artifact paths, and the next confirming step.
</steps>
</Debug>
</2>
<3>
<Planning>
- we will be calling the plan topic the <focus issue> of this turn.
- based on which long term <goal> and sub-goal is that effort / plan? 
- Which existing docs/fix_plan.md items does it (i.e. the <focus issue>) relate to? 
- Documentation review for <focus issue>: Using `docs/index.md` as the map, identify and read the specific documents relevant to the chosen <focus issue> (e.g., component contracts, architecture ADRs, parity/testing strategy). List the file paths you will rely on (with a one‑line rationale each) before drafting or updating the plan.
- think deeply. draft / redraft the plan and save it to a .md under plans/active/. Structure the write-up as a phased implementation document (see `plans/archive/general-detector-geometry/implementation.md` for tone/shape): begin with context + phase overviews, then outline each phase’s intent, prerequisites, and exit criteria. When a phase benefits from explicit tracking, embed a checklist table using the `ID | Task Description | State | How/Why & Guidance` format (with `[ ]`, `[P]`, `[D]` markers) inside that phase section.
  • Include reproduction commands, owners (if known), and decision rules in the guidance column.
  • Favor narrative flow first; layer checklists only where they clarify verification steps or deliverables.
  • Mini-template to crib when drafting:
    ```md
    ## Context
    - Initiative: <initiative>
    - Phase Goal: <outcome>
    - Dependencies: <docs/tests>

    ### Phase A — <short title>
    Goal: <what this phase proves or delivers>
    Prereqs: <artifacts or measurements required before starting>
    Exit Criteria: <verifiable completion signal>

    | ID | Task Description | State | How/Why & Guidance (including API / document / artifact / source file references) |
    | --- | --- | --- | --- |
    | A1 | <Key diagnostic or implementation step> | [ ] | Run `<command>`; capture results under `reports/<date>/...`. |
    | A2 | <Follow-up validation> | [ ] | Compare against `<artifact>`; stop if deviation > threshold. |
    ```
- When refreshing an existing plan, retrofit it to this phased format before adding or editing tasks.
- review docs/fix_plan.md. edit if needed. cross reference the new plans .md so that ralph can find it.
</Planning>
</3>

<4>
<Review or housekeeping>
- Review and evaluate ralph's work. Scrutinize the commit history. Look at the diffs. 
- Are the docs/fix_plan.md contents and priorities sane? things to consider:
  - if docs/fix_plan.md is longer than 1000 lines it should be housecleaned. If it's disorganized and / or internally inconsistent, consider how this could be addressed. 
- after considering the above, you have enough information to choose a <focus issue> for this turn. do so. Consider the nature of the <focus issue>:
    - Do we need a new docs/fix_plan item to put ralph back on course, fix one of his mistakes, or instruct him to do something that he overlooked? If so, draft it and add it to docs/fix_plans
    - does the <focus issue> involve identified issues in docs/fix_plan.md? If so, fix them. If you decide to shorten docs/fix_plan.md, the least relevant portions should be moved to archive/fix_plan_archive.md (with summary + archive cross reference if appropriate)
</Review or housekeeping>
</4>

In addition to selecting an <Action type> and <focus issue> you will choose a <Mode> flag. 
 - Mode flags are combinable and refine execution, and are applicable to both the supervisor (you) and ralph; do not include any Phase label in input.md.
 - available modes: <TDD | Parity | Perf | Docs | none>
<mode descriptions>
TDD mode (supervisor-scoped): When operating in supervisor evidence mode, author/update a single minimal failing test that encodes the acceptance criterion. Confirm it fails via a targeted pytest selector; record the selector and expected failure text in input.md. Do not change production code, and do not include any Phase label in input.md.
</mode descriptions>

</main analysis step 1>

<main analysis step 2>
Here you will do a deep analysis. You will follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. This corresponds to <instructions> step <3.2>.


</main analysis step 2>

<main analysis step 3>
Here you synthesize the analysis findings into output files (<instructions> steps <3.5> to <4>)
</main analysis step 3>


Before concluding each invocation:
- Append a concise update to galph_memory.md capturing key findings, decisions, and open questions (reference file paths or plan names).
- Note any follow-up actions you expect Ralph to take.
- If no substantial update is needed, explicitly log that fact so future runs know context was reviewed.
</task>

<instructions>
<0>
READ the following files:
- Index of project documentation: `./docs/index.md`
- $SPECS: `./specs/spec-a.md`
- $ARCH: `./arch.md` (ADR-backed implementation architecture; reconcile design with spec, surface conflicts)
- docs/development/c_to_pytorch_config_map.md — C↔Py config parity and implicit rules
-- docs/debugging/debugging.md — Parallel trace-driven debugging SOP
- $PLAN: `./fix_plan.md` (living, prioritized to‑do; keep it up to date)
- $TESTS: `./docs/development/testing_strategy.md` (testing philosophy, tiers, seeds/tolerances, commands)
- Set `AUTHORITATIVE_CMDS_DOC=./docs/development/testing_strategy.md` (or project‑specific path) and consult it for authoritative reference commands and test discovery.
<0>
<1>
do a deep analysis of the codebase in light of the <current long term goals>. What are some current issues / gaps and possible approaches to resolving them? Review docs/fix_plan.md and plans/active/, as previous iterations of you may have already done some legwork.
 
At this point, you can do a premature <Callchain tracing> action ahead of time, if it helps you gather information needed for this analysis.
</1>
<2>
flip a coin using python. if it comes up <heads>:
review ralph's work over the last N (~10 but can be more or less - you decide) iterations. Check the commit history. Has the work been productive? Have there been regressions? Do we need to provide any feedback / course-correction?
</heads>
if it comes up <tails>: proceed to step <3>
</2>
<3>
Given your findings in <1> and <2>, think about whether there's any need for a multi-turn planning effort -- i.e. ralph can't see the forest for the trees and may struggle with major refactorings and multi-turn implementation efforts unless they are coordinated by you. Is there a need for such planning *right now*? If such a plan is already spoken for (plans/active/ or wherever else past galph might have saved to), does that plan require updates or is it up to date / high quality and simply pending? IFF you determine the need for a new plan or modification of an existing one:
<yes case>
This plan-related work is now your <focus issue>.
You will be following the <Planning> <Action type> instructions. Think about what this will entail but don't execute the <Planning> instructions yet.
</yes case>
</no case>
Since you are not <Planning>, you must select one of the other <Action type>s and an associated <focus issue> based on what you think is the most productive work increment for this iteration. Think about the associated work, but don't execute it yet.
</no case>
</3>
<3.2>
- Documentation review for <focus issue>: From `docs/index.md`, enumerate and read the documents that are most relevant to the chosen <focus issue>`; note the key file paths you will rely on for the impending analysis.
- Then carefully follow the guidelines of the selected <Mode> and <Action type>, applying them to the selected <focus issue>. Complete the task that you selected in step <3>.
</3.2>
<3.5>
Render and write ./input.md (supervisor→engineer steering memo). Overwrite the entire file every invocation. Keep length ~100–200 lines. Include these sections in order:
Header:
- Summary: <one‑sentence goal for this loop>
 - Mode: <TDD | Parity | Perf | Docs | none>
- Focus: <plan item ID/title from docs/fix_plan.md>
- Branch: <expected branch>
- Mapped tests: <validated list | none — evidence‑only>
- Artifacts: <key paths to produce under reports/>
- Do Now: 1 line naming the exact docs/fix_plan.md item (ID and title) to execute this loop, plus the exact pytest command/env to reproduce it (only when an authoritative mapping exists). If no such test exists, the Do Now MUST be to author the minimal targeted test first and then run it. If you intend to delegate the choice, write “Do Now: delegate” and provide decision guidance below.
  - Note: If operating in supervisor <Evidence collection> (internal-only), do not run the full suite. Allowed: pytest --collect-only to validate selectors; in TDD mode only, run one targeted selector to confirm a new failing test. All other test execution is deferred to Ralph. Do not include any Phase label in input.md.
<Do Now guidelines>
Verification scripts: You may run nb-compare and scripts/validation/* to collect metrics and artifacts (no code changes). Record outputs under reports/.
Mapped tests under supervisor evidence mode: Include exact selectors in input.md; validate with --collect-only; do not run them (except the TDD failure confirmation). Do not include any Phase label in input.md.
Command Sourcing (tests): Only include an exact pytest command in Do Now when sourced from an authoritative mapping (e.g., docs/development/testing_strategy.md) or an existing, known test file/identifier. If no authoritative mapping exists, set the Do Now task to author the minimal targeted test first; do not guess at a pytest selector here.
Implementation: refer to phased plans, checklists, and all associated artifacts
</Do Now guidelines>
- If Blocked: fallback action (what to run/capture, how to record it in Attempts History).
- Priorities & Rationale: 3–6 bullets with file pointers (specs/arch/tests/plan) justifying the Do Now.
- How-To Map: exact commands (pytest, nb-compare), env vars, ROI/thresholds, and where to store artifacts; prefer using `scripts/validation/*` when available.
- Pitfalls To Avoid: 5–10 crisp do/don’t reminders (device/dtype neutrality, vectorization, Protected Assets, two‑message loop policy, no ad‑hoc scripts).
- Pointers: file paths with line anchors to the most relevant spec/arch/testing_strategy/fix_plan entries for this loop.
- Next Up (optional): 1–2 candidates Ralph may choose next loop if he finishes early (still one thing per loop).

 Rules:
 - Ralph must not edit input.md. You (galph) are the single writer.
 - If input.md’s Do Now conflicts with an existing in_progress selection in fix_plan.md, Ralph is allowed to switch; he must record the change in Attempts History.
- Do not instruct Ralph to run the full test suite more than once per turn. Require targeted tests first; run the full suite once at the end only if code changed. For prompt/docs‑only loops, require `pytest --collect-only -q` instead.
- Prefer referencing reusable scripts under `scripts/validation/` from Do Now when available.
- Commit input.md each run as part of step <4> (commit only if the content changed).
 </3.5>

<4>
Before finishing the loop, enforce git hygiene:
- Run `git status --short` to inspect new or modified files that appeared during this invocation.
- Review diffs for each change; revert only if you created it this loop and it was accidental.
- Stage intentional updates with `git add -A` and commit via `git commit -m "SUPERVISOR: <scope> - <tests or rationale>"`, noting any tests run (use `tests: not run` when you skip them).
- After committing, run `git push` to share the updates. If the push is rejected, `timeout 30 git pull --rebase`, resolve conflicts (capture decisions—especially for docs/fix_plan.md—in galph_memory.md), then push again.
- If you deliberately leave the tree dirty, document the rationale in galph_memory.md so the next invocation knows why.
</4>
</instructions>
<notes>
- ignore 'routing violations'. these are out of scope.
- ignore AT parallel 012-related items for now
</notes>
Now carefully and exhaustively follow your <instructions>, while keeping in mind the <task> directives.


[2025-10-07T11:04:46] thinking

**Preparing to update repository**
[2025-10-07T11:04:47] exec bash -lc 'timeout 30 git pull --rebase' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:04:49] bash -lc 'timeout 30 git pull --rebase' succeeded in 2.46s:
Already up to date.
[2025-10-07T11:04:49] tokens used: 13,975

[2025-10-07T11:04:51] thinking

**Preparing to read galph_memory.md**
[2025-10-07T11:04:54] exec bash -lc 'cat galph_memory.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:04:54] bash -lc 'cat galph_memory.md' succeeded in 699ms:
## 2025-09-30 (loops 1-4 summary)
- Established parity backlog: AT-020/021/022/024 failing; created first supervisor plan for AT-021 and enforced prompts/debug.md routing.
- Diagnosed AT-024 random misset cap mismatch (π/2 vs 90 radians) and opened dedicated plan; insisted Ralph stop verification-only loops.
- Flagged torch.compile warm-up overhead (per-instance compilation, inline tensor factories) and opened AT-012 rotation parity plan (Phases A–E).
- Documented performance hotspots (`_compute_physics_for_position` guard tensors, `Crystal.compute_cell_tensors` clamps) and chronic dirty worktree artifacts blocking `git pull --rebase`.

## 2025-09-30 (loops 5-10 summary)
- Authored repo hygiene checklist (REPO-HYGIENE-002) to undo accidental `golden_suite_generator/nanoBragg.c` churn and purge stray reports.
- Created PERF-PYTORCH-004 plan to hoist constants, introduce compile caching, and remove Dynamo graph breaks; reiterated need for prompts/debug.md while parity fails.
- Repeatedly documented routing violations from Ralph and emphasized restoring Core Rule #13 metric duality after WIP commit 058986f swapped `V_actual` for formula volume.
- Noted that `_compute_physics_for_position` still recompiles each Simulator and that benchmarks in `reports/benchmarks/20250930-004916/` show ≥200× slowdown vs C for small detectors.

## 2025-09-30 (ralph debugging loop — AT-012 float32 regression)
- **Context**: AT-PARALLEL-012 test_simple_cubic_correlation failing (43/50 peaks matched, need ≥95%) after DTYPE-DEFAULT-001 (commit 8c2ceb4) switched simulator to native float32.
- **Investigation**:
  * Reproduced: 43/50 peaks matched (86%), corr≈1.0 (perfect physics) ✅
  * Parity matrix test: PASSES perfectly ✅ (live C↔Py comparison with current float32)
  * **Root cause identified**: PyTorch float32 produces 7× more unique values (4901 vs C's 669) in hot pixels, fragmenting intensity plateaus. Peak detection algorithm (scipy.ndimage.maximum_filter) is sensitive to plateau structure.
  * Parallel comparison: C float32 beam center (20×20 ROI) has 91 unique values; PyTorch has 331 (3.6× fragmentation). Max absolute diff tiny (0.0017).
  * **First Divergence**: Numerical accumulation patterns differ (likely FMA, compiler opts, vectorized accumulation order, or torch.compile kernel fusion) → perfect correlation but incompatible plateau structure.
[2025-10-07T11:04:54] tokens used: 14,117

[2025-10-07T11:04:57] thinking

**Preparing to read documentation files**
[2025-10-07T11:04:57] exec bash -lc 'cat docs/index.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:04:58] bash -lc 'cat docs/index.md' succeeded in 720ms:
# Project Documentation Index

Welcome to the central index for all `nanoBragg-PyTorch` project documentation. This guide provides a map to the key technical specifications, development processes, and historical records that define the project.

---

## 🏛️ Permanent Documentation

These are the core, living documents that guide the project.

### Core Project Guides
### PyTorch Guardrails
* **[PyTorch Runtime Checklist](./development/pytorch_runtime_checklist.md)** – quick do/don’t list for vectorization and device placement. Always review before editing simulator code.
* **[PyTorch Design](./architecture/pytorch_design.md#vectorization-strategy)** – detailed explanation of the required broadcast shapes and batched flows.
* **[Testing Strategy §1.4](./development/testing_strategy.md#14-pytorch-device--dtype-discipline)** – required CPU/GPU smoke tests and compile checks.

* **[CLAUDE.md](../CLAUDE.md)** - The primary instruction set for the AI agent.
* **[README.md](../README.md)** - The main project entry point.
* **[README_PYTORCH.md](../README_PYTORCH.md)** - Comprehensive user guide for the PyTorch implementation, including CLI usage, parallel comparison tools, and visualization.
* **[PROJECT_STATUS.md](../PROJECT_STATUS.md)** - Tracks the current active development initiative.
[2025-10-07T11:04:58] tokens used: 16,887

[2025-10-07T11:05:00] thinking

**Preparing to review large spec file**
[2025-10-07T11:05:00] exec bash -lc 'cat specs/spec-a.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:01] bash -lc 'cat specs/spec-a.md' succeeded in 714ms:
# nanoBragg Spec A — Sharded Specification

Spec A is now organized across multiple shards. Read them together for the full normative contract.

- [spec-a-core.md](spec-a-core.md): Core physics, geometry, sampling, data, and associated acceptance tests.
- [spec-a-cli.md](spec-a-cli.md): CLI surface area, precedence rules, and CLI-focused acceptance tests.
- [spec-a-parallel.md](spec-a-parallel.md): Conformance profiles, parallel validation suites, and developer tooling requirements.

Each shard cross-references the others; updates must keep them consistent.
[2025-10-07T11:05:01] tokens used: 19,066

[2025-10-07T11:05:03] thinking

**Considering additional documentation**
[2025-10-07T11:05:04] exec bash -lc 'cat arch.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:04] bash -lc 'cat arch.md' succeeded in 732ms:
# nanoBragg PyTorch — Implementation Architecture

Document version: 1.0 (aligned with specs/spec-a.md)
Target spec: specs/spec-a.md (single-file normative spec)
Implementation target: Python (>=3.11) + PyTorch (float32 default). Type blocks may use TypeScript-style for clarity; implement with Python dataclasses and torch tensors.

## Running The CLI

- Install (recommended):
  - `pip install -e .` from repo root (provides `nanoBragg` console script).
- Run (installed):
  - `nanoBragg -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Run (without install):
  - `PYTHONPATH=src python -m nanobrag_torch -hkl P1.hkl -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -floatfile out.bin`
- Minimal quick test (no HKL):
  - `nanoBragg -default_F 1 -cell 100 100 100 90 90 90 -lambda 1.0 -distance 100 -detpixels 128 -pgmfile test.pgm`

Notes
- Entry point: `src/nanobrag_torch/__main__.py` (module runner `python -m nanobrag_torch`).
- Required inputs: provide `-hkl` (or existing `Fdump.bin`) or set `-default_F > 0`, and either `-mat` (MOSFLM A*) or `-cell`.
[2025-10-07T11:05:04] tokens used: 19,411

[2025-10-07T11:05:06] thinking

**Locating configuration map documentation**
[2025-10-07T11:05:06] exec bash -lc 'cat docs/development/c_to_pytorch_config_map.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:07] bash -lc 'cat docs/development/c_to_pytorch_config_map.md' succeeded in 710ms:
# C-CLI to PyTorch Configuration Map

## Critical Importance Notice

**This document is the authoritative source of truth for configuration parity between nanoBragg.c and the PyTorch implementation.**

Before writing any test or implementation that involves C-code validation, you **MUST** consult this document. Failure to ensure 1:1 configuration parity is the most common source of bugs, particularly with:
- Implicit pivot mode logic
- Convention-dependent beam center calculations
- Rotation axis defaults
- Unit conversions

## Quick Reference Table

### Crystal Parameters

| C-CLI Flag | PyTorch Config Field | C Variable | Units/Convention | Critical Notes |
|------------|---------------------|------------|------------------|----------------|
| `-cell a b c al be ga` | `CrystalConfig.cell_a/b/c/alpha/beta/gamma` | `a[0], b[0], c[0], alpha, beta, gamma` | Å and degrees → radians | Must convert degrees to radians internally |
| `-N <val>` | `CrystalConfig.N_cells` | `Na, Nb, Nc` | Number of unit cells | Sets all three axes to same value |
[2025-10-07T11:05:07] tokens used: 22,161

[2025-10-07T11:05:09] thinking

**Opening debugging documentation**
[2025-10-07T11:05:09] exec bash -lc 'cat docs/debugging/debugging.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:10] bash -lc 'cat docs/debugging/debugging.md' succeeded in 735ms:
# nanoBragg PyTorch Debugging Guidelines

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** PyTorch Development Team

## Overview

This document outlines the debugging methodology and tools for the nanoBragg PyTorch implementation. The debugging approach is built around a parallel trace comparison between the C code and the PyTorch implementation to ensure correctness and facilitate rapid issue resolution.

## Core Debugging Philosophy

### Parallel Trace Comparison Rule

**CRITICAL:** All debugging of physics discrepancies MUST begin with a parallel trace comparison. This involves:
1. Generating a detailed, step-by-step log of intermediate variables from the original C code for a specific pixel (the "Golden Trace").
2. Generating an identical log from the PyTorch implementation using `scripts/debug_pixel_trace.py`.
3. Comparing these two logs line-by-line to find the first point of divergence.

This methodology is mandatory to avoid guesswork and ensure bugs are found deterministically.
[2025-10-07T11:05:10] tokens used: 24,910

[2025-10-07T11:05:12] thinking

**Checking plan file path**
[2025-10-07T11:05:12] exec bash -lc 'cat docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:13] bash -lc 'cat docs/fix_plan.md' succeeded in 731ms:
# Fix Plan Ledger

**Last Updated:** 2025-10-17 (galph loop)
**Active Focus:**
- ROUTING: Close the reopened guard plan by capturing a fresh regression audit referencing commit `c49e3be` and re-confirming the guarded `loop.sh` flow (`plans/active/routing-loop-guard/plan.md` Phases A–C) before automation resumes.
- ROUTING-SUPERVISOR: Launch Phase A of `plans/active/supervisor-loop-guard/plan.md`, then drive Phase B guard work (B2–B4) and new task B5 to add `supervisor.sh` to docs/index.md so Protected-Asset policy covers the script before automation runs again.
- AT-012: Plan archived (`plans/archive/at-parallel-012-plateau-regression/plan.md`); monitor for regressions using `reports/2025-10-AT012-regression/phase_c_validation/` artifacts and re-open only if peak matches drop below spec.
- GRADIENT: Execute `plans/active/gradcheck-tier2-completion/plan.md` Phase A (A1–A3 baseline audit + env alignment) before adding misset/beam gradchecks from Phases B/C; once pass logs exist, close `[AT-TIER2-GRADCHECK]` with Phase D documentation updates.
- DTYPE: ✅ Complete. Plan archived to `plans/archive/dtype-default-fp32/`. All phases (A-D) finished; float32 defaults documented in arch.md, pytorch_runtime_checklist.md, CLAUDE.md, prompts/debug.md.
- PERF: Land plan task B7 (benchmark env toggle fix), rerun Phase B6 ten-process reproducibility with the new compile metadata, capture the weighted-source parity memo feeding C5, then execute Phase C diagnostics (C1/C2 plus C8/C9 pixel-grid & rotated-vector cost probes, and new C10 mosaic RNG timing) ahead of Phase D caching work (D5/D6/D7) and detector-scalar hoisting (D8).

## Index
| ID | Title | Priority | Status |
| --- | --- | --- | --- |
| [PROTECTED-ASSETS-001](#protected-assets-001-docsindexmd-safeguard) | Protect docs/index.md assets | Medium | in_progress |
| [REPO-HYGIENE-002](#repo-hygiene-002-restore-canonical-nanobraggc) | Restore canonical nanoBragg.c | Medium | in_progress |
| [PERF-PYTORCH-004](#perf-pytorch-004-fuse-physics-kernels) | Fuse physics kernels | High | in_progress |
| [AT-TIER2-GRADCHECK](#at-tier2-gradcheck-implement-tier-2-gradient-correctness-tests) | Implement Tier 2 gradient correctness tests | High | in_progress |
| [VECTOR-TRICUBIC-001](#vector-tricubic-001-vectorize-tricubic-interpolation-and-detector-absorption) | Vectorize tricubic interpolation and detector absorption | High | in_progress |
| [ABS-OVERSAMPLE-001](#abs-oversample-001-fix-oversample_thick-subpixel-absorption) | Fix -oversample_thick subpixel absorption | High | in_planning |
[2025-10-07T11:05:13] tokens used: 27,951

[2025-10-07T11:05:15] thinking

**Opening large file and planning next steps**
[2025-10-07T11:05:16] exec bash -lc 'cat docs/development/testing_strategy.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:16] bash -lc 'cat docs/development/testing_strategy.md' succeeded in 738ms:
# nanoBragg PyTorch Testing Strategy

**Version:** 1.1  
**Date:** 2024-07-25  
**Owner:** [Your Name/Team]

## 1. Introduction & Philosophy

This document outlines the comprehensive testing strategy for the PyTorch implementation of nanoBragg. The primary goal is to ensure that the new application is a correct, verifiable, and trustworthy scientific tool.
Our testing philosophy is a three-tiered hybrid approach, designed to build confidence layer by layer:

1. **Tier 1: Translation Correctness:** We first prove that the PyTorch code is a faithful, numerically precise reimplementation of the original C code's physical model. The C code is treated as the "ground truth" specification.
2. **Tier 2: Gradient Correctness:** We then prove that the new differentiable capabilities are mathematically sound.
3. **Tier 3: Scientific Validation:** Finally, we validate the model against objective physical principles.

All tests will be implemented using the PyTest framework.

### 1.4 PyTorch Device & Dtype Discipline

- **Device-neutral code:** Every PyTorch path MUST operate correctly on both CPU and CUDA tensors and across supported dtypes. Do not hard-code `.cpu()`/`.cuda()` calls, create CPU-only constants, or assume float64 execution when the caller may supply float32/half tensors.
[2025-10-07T11:05:16] tokens used: 30,844

[2025-10-07T11:05:21] thinking

**Preparing for deep codebase analysis**
[2025-10-07T11:05:22] exec bash -lc 'ls plans/active' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:22] bash -lc 'ls plans/active' succeeded in 814ms:
cli-noise-pix0
gradcheck-tier2-completion
oversample-thick-subpixel.md
perf-pytorch-compile-refactor
routing-loop-guard
source-weight-normalization.md
supervisor-loop-guard
unification.md
vectorization.md
[2025-10-07T11:05:22] tokens used: 33,558

[2025-10-07T11:05:26] thinking

**Inspecting plan file**
[2025-10-07T11:05:27] exec bash -lc 'cat plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:27] bash -lc 'cat plans/active/cli-noise-pix0/plan.md' succeeded in 704ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T11:05:27] tokens used: 64,577

[2025-10-07T11:05:29] thinking

**Reviewing vectorization plan**
[2025-10-07T11:05:30] exec bash -lc 'cat plans/active/vectorization.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:31] bash -lc 'cat plans/active/vectorization.md' succeeded in 713ms:
## Context
- Initiative: PERF-PYTORCH-004 vectorization backlog; supports long-term goal "Parallel parity + performance" from docs/fix_plan.md.
- Phase Goal: Deliver a production-ready, fully vectorized tricubic interpolation pipeline (gather + polynomial evaluation) and follow with detector absorption vectorization without regressing physics, gradients, or device neutrality.
- Dependencies: specs/spec-a-core.md §4 (Structure factors), specs/spec-a-parallel.md §2.3 (Interpolation acceptance tests), docs/architecture/pytorch_design.md §§2.2–2.4, docs/architecture/c_code_overview.md (tricubic routines), docs/development/testing_strategy.md §§2–4, docs/development/pytorch_runtime_checklist.md, `nanoBragg.c` lines 2604–3278 (polin3/polin2/polint + detector absorption), `tests/test_at_str_002.py`, `tests/test_at_abs_001.py`, `reports/benchmarks/20250930-165726-compile-cache/` (current performance references). No dedicated tricubic/absorption microbenchmarks exist yet; Phase A will author reusable harnesses under `scripts/benchmarks/` so future loops can rerun baselines without ad-hoc snippets.
- Gap Snapshot (2025-11-18): Phase A1–A3 evidence captured under `reports/2025-10-vectorization/phase_a/` (pytest logs plus tricubic/absorption baselines). **Phase B design memo landed in Attempt #3 (`reports/2025-10-vectorization/phase_b/design_notes.md`) covering tensor shapes, polynomial mapping, and gradient/device checklists.** Next blocker is executing Phase C implementation tasks using that design as the contract.
- Supervisory note (2025-11-18 → refreshed 2025-11-18b): fix_plan#VECTOR-TRICUBIC-001 now pivots to Phase C execution (tasks C1–C3). Keep `KMP_DUPLICATE_LIB_OK=TRUE` exported, reuse the design memo’s Section 2/3 diagrams, and stage changes behind feature-flag-friendly commits to ease review if batching becomes necessary.
- Gap snapshot refresh (2025-11-20): No code changes have landed since the design memo; Phase C remains unstarted. The updated guidance below locks in artifact destinations (`reports/2025-10-vectorization/phase_c/`) and reproduction commands so Ralph can take the first implementation step without further supervisor clarification.

### Phase A — Evidence & Baseline Capture
Goal: Document the current (non-vectorized) behavior, warnings, and performance so we can prove the impact of the refactor.
Prereqs: Editable install (`pip install -e .`), C binary available for parity (when needed), environment variable `KMP_DUPLICATE_LIB_OK=TRUE`.
Exit Criteria: Baseline pytest log, timing snippet results, and notes stored under `reports/2025-10-vectorization/phase_a/` with references in docs/fix_plan.md Attempt history.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| A1 | Re-run tricubic acceptance tests | [D] | ✅ Completed 2025-10-06 (`reports/2025-10-vectorization/phase_a/test_at_str_002.log`, `.collect.log`, `test_at_abs_001.log`, `env.json`). Re-run only if dependencies change or new warnings appear. |
| A2 | Measure current tricubic runtime | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/tricubic_baseline.py` created; CPU & CUDA baselines captured in `phase_a/tricubic_baseline.md` and `phase_a/tricubic_baseline_results.json`). Key finding: scalar-only implementation @ ~1.4 ms/call (CPU), ~5.5 ms/call (CUDA). |
| A3 | Record detector absorption baseline | [D] | ✅ Completed 2025-10-07 (`scripts/benchmarks/absorption_baseline.py` created; CPU & CUDA baselines captured in `phase_a/absorption_baseline.md` and `phase_a/absorption_baseline_results.json`). GPU shows 5.4× speedup for 512² detector. |

### Phase B — Tricubic Vectorization Design
[2025-10-07T11:05:31] tokens used: 67,382

[2025-10-07T11:05:32] thinking

**Continuing plan review**
[2025-10-07T11:05:33] exec bash -lc "sed -n '120,240p' plans/active/vectorization.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:33] bash -lc "sed -n '120,240p' plans/active/vectorization.md" succeeded in 697ms:

[2025-10-07T11:05:33] tokens used: 68,884

[2025-10-07T11:05:39] thinking

**Preparing to analyze long-term goals**
[2025-10-07T11:05:39] exec bash -lc 'rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:40] bash -lc 'rg -n "CLI-FLAGS-003" -n docs/fix_plan.md' succeeded in 743ms:
22:| [CLI-FLAGS-003](#cli-flags-003-handle-nonoise-and-pix0_vector_mm) | Handle -nonoise and -pix0_vector_mm | High | in_progress |
450:## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
463:  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
[2025-10-07T11:05:40] tokens used: 69,389

[2025-10-07T11:05:42] thinking

**Scrolling through lines**
[2025-10-07T11:05:42] exec bash -lc "sed -n '450,540p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:43] bash -lc "sed -n '450,540p' docs/fix_plan.md" succeeded in 722ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-19 refresh):
  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
- Attempts History:
  * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
    Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log:1-41` - Refreshed trace with live values (polar=0.91464138, omega_pixel=4.20404859e-07 sr, F_cell=0, I_before_scaling=0)
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md:1-54` - Phase L2c comparison report showing first divergence and all divergent factors
[2025-10-07T11:05:43] tokens used: 69,730

[2025-10-07T11:05:47] thinking

**Evaluating progress and planning analysis**
[2025-10-07T11:05:48] exec bash -lc "python -c \"import random; print('heads' if random.random()<0.5 else 'tails')\"" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:49] bash -lc "python -c \"import random; print('heads' if random.random()<0.5 else 'tails')\"" succeeded in 747ms:
heads
[2025-10-07T11:05:49] tokens used: 71,529

[2025-10-07T11:05:51] thinking

**Checking recent commits by Ralph**
[2025-10-07T11:05:52] exec bash -lc 'git log --oneline -n 10' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:53] bash -lc 'git log --oneline -n 10' succeeded in 752ms:
07d5837 [SYNC i=91] actor=galph status=running
42405c0 [SYNC i=91] actor=ralph → next=galph status=ok ralph_commit=9775cfd
9775cfd CLI-FLAGS-003 L3g: Spindle-axis magnitude and volume evidence gathering
b80f837 [SYNC i=90] actor=ralph status=running
a58b2e3 [SYNC i=90] actor=galph → next=ralph status=ok galph_commit=3407e43
3407e43 SUPERVISOR: CLI-FLAGS L3g guidance - tests: not run
015ce55 [SYNC i=90] actor=galph status=running
62c4816 [SYNC i=90] actor=ralph → next=galph status=ok ralph_commit=6f38851
6f38851 VECTOR-TRICUBIC-001 (Phase C1): Complete batched gather validation
aaa3e91 [SYNC i=89] actor=ralph status=running
[2025-10-07T11:05:53] tokens used: 71,802

[2025-10-07T11:05:55] thinking

**Reviewing recent commits by Ralph**
[2025-10-07T11:05:55] exec bash -lc 'git show 9775cfd' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:56] bash -lc 'git show 9775cfd' succeeded in 821ms:
commit 9775cfdf38ad2e64dc8fd5aa314b7d54e1adb564
Author: ollie <ohoidn>
Date:   Tue Oct 7 04:03:39 2025 -0700

    CLI-FLAGS-003 L3g: Spindle-axis magnitude and volume evidence gathering
    
    - Captured spindle-axis norm (C=1.0 exact, PyTorch needs instrumentation)
    - Volume metrics: V_actual delta +3.347e-03 Å³ (exceeds 1e-6 Å³ tolerance)
    - **H2 RULED OUT**: Volume delta O(1e-3) Å³ << Y-drift O(1e-2) Å (1000x smaller)
    - H1 PRIMARY SUSPECT: Y-component drift (+6.8% b_y) aligns with spindle orientation
    - Artifacts: spindle_audit.log, volume_probe.md, analysis.md updated
    - Evidence-only loop per input.md guidance (no simulator edits)
    
    Test suite: 652 tests collected (pytest --collect-only -q passed)
    Module: evidence/CLI-FLAGS-003
    Status: Phase L3g complete, H2 ruled out, H1 needs instrumentation probe

diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 6a364c7..17cc325 100644
--- a/docs/fix_plan.md
[2025-10-07T11:05:56] tokens used: 72,329

[2025-10-07T11:05:58] thinking

**Committing environment and plan fixes**
[2025-10-07T11:05:59] exec bash -lc 'git show 6f38851' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:05:59] bash -lc 'git show 6f38851' succeeded in 740ms:
commit 6f38851c1ff90e9408e0f3a566cd0c34c97dfcc4
Author: ollie <ohoidn>
Date:   Tue Oct 7 03:45:37 2025 -0700

    VECTOR-TRICUBIC-001 (Phase C1): Complete batched gather validation
    
    - Validated batched neighborhood gather infrastructure (crystal.py:355-410)
    - All AT-STR-002 tests passing: 3/3 in 2.15s
    - Captured Phase C1 evidence per plan requirements:
      - Test collection log confirming 3 tests
      - Execution logs for all tricubic tests
      - Comprehensive gather_notes.md documenting implementation
      - Runtime/environment metadata in JSON artifacts
    - Scalar path (B=1) uses existing polin3 helper (validated)
    - Batched path (B>1) correctly falls back to nearest-neighbor
    - No code changes needed; validation-only loop
    - Device/dtype neutrality preserved
    - Memory footprint acceptable (268 MB for 1024² detector)
    
    Test suite: 3 passed, 0 failed, 0 skipped
[2025-10-07T11:05:59] tokens used: 75,563

[2025-10-07T11:06:09] thinking

**Reviewing plan consistency and evidence**

I’m noticing new report files and evidence but no code changes, so I’m focusing on evaluating if the existing plans—especially the CLI one—properly reflect completed evidence tasks. The commit suggests L3g is done, but the plan still marks L3f and L3g as incomplete, indicating it might be outdated or missing updates. I want to confirm this mismatch carefully to decide if the plan needs revision or if I should propose a new plan to capture these details and ensure future tasks like instrumentation are included.
[2025-10-07T11:06:10] exec bash -lc 'rg -n "L3f" -n plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:06:11] bash -lc 'rg -n "L3f" -n plans/active/cli-noise-pix0/plan.md' succeeded in 942ms:
265:| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
267:| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
[2025-10-07T11:06:11] tokens used: 120,395

[2025-10-07T11:06:13] thinking

**Reviewing plan for L3g search**
[2025-10-07T11:06:14] exec bash -lc 'rg -n "L3g" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:06:15] bash -lc 'rg -n "L3g" plans/active/cli-noise-pix0/plan.md' succeeded in 798ms:
266:| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
267:| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
[2025-10-07T11:06:15] tokens used: 124,356

[2025-10-07T11:06:27] thinking

**Assessing need to update plan**
[2025-10-07T11:06:28] exec bash -lc 'cat docs/architecture/detector.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:06:29] bash -lc 'cat docs/architecture/detector.md' succeeded in 940ms:
# Detector Architecture Deep Dive

**Status:** Authoritative Specification  
**Last Updated:** Phase 5 Implementation

**⚠️ CRITICAL:** This component uses a [hybrid unit system](#61-critical-hybrid-unit-system-overrides-global-rule) that overrides the global Angstrom-only rule.

This document provides the complete technical specification for the Detector component. For global project rules on units and coordinate systems, see [Global Conventions](./conventions.md).

---

## 1. Overview

The Detector class manages the detector geometry for diffraction simulations, including:
- Position and orientation (basis vectors)
- Pixel coordinate generation and caching
- Support for various detector conventions (MOSFLM, XDS)
- Dynamic geometry with rotations and tilts
- Full differentiability for optimization workflows

[2025-10-07T11:06:29] tokens used: 126,447

[2025-10-07T11:06:30] thinking

**Checking CLI specification file**
[2025-10-07T11:06:31] exec bash -lc 'cat specs/spec-a-cli.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:06:32] bash -lc 'cat specs/spec-a-cli.md' succeeded in 688ms:
# nanoBragg Spec A — CLI Binding

This shard documents the command-line interface, header precedence, and CLI-focused acceptance tests. It should be read alongside [spec-a-core.md](spec-a-core.md) for the simulation engine requirements and [spec-a-parallel.md](spec-a-parallel.md) for conformance profiles.

CLI Interface (Normative)

All options recognized by this code version are enumerated below. Values with units are converted
immediately as specified in Units & Conversions. Unsupported flags are not recognized even if
present in header comments.

- Input files:
    - -hkl <file>: Text file of “h k l F” (integers h,k,l; real F). Required unless Fdump.bin exists
or -default_F used.
    - -mat <file>: 3×3 MOSFLM-style A matrix (reciprocal cell vectors scaled by 1/λ). Required
unless -cell used.
    - -cell a b c alpha beta gamma: Direct cell in Å and degrees; alternative to -mat.
    - -img <file>: Read SMV header; may set fpixels, spixels, pixel size (mm), distance (mm), close
distance (mm), wavelength (Å), beam centers (mm), ORGX/ORGY (pixels), φ start (deg), oscillation
range (deg), 2θ (deg). Image data is read but not used.
    - -mask <file>: Read SMV mask; uses same headers to initialize geometry as -img. Zero-valued
[2025-10-07T11:06:32] tokens used: 129,862

[2025-10-07T11:06:41] thinking

**Evaluating plan updates for rotation vector tasks**

I'll verify if the L3f and L3g tasks can be marked done based on commit evidence and analysis docs. Then, I’ll update the plan statuses accordingly and consider adding new instrumentation tasks to keep the plan aligned with next steps. I'll also check relevant reports to confirm details before restructuring the plan.
[2025-10-07T11:06:43] exec bash -lc 'head -n 40 reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:06:43] bash -lc 'head -n 40 reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md' succeeded in 883ms:
# Rotation Vector φ=0 Drift Analysis

## Executive Summary

Phase L3f rotation-vector audit reveals component-level discrepancies in real-space vectors at φ=0 while reciprocal vectors remain highly aligned. Key finding: **Y-component drift in all three real-space vectors (0.04-6.8% deltas)** explains the k_frac offset observed in Phase L2c/L3e.

## Key Metrics

### Metric Duality (from invariant_probe.md)
- **Volume discrepancy**: +3.35e-03 Å³ (+0.000014%)
- **a·a* deviation**: -6.264e-04 (C=1.000626, Py=1.000000)
- **b·b* deviation**: +4.414e-04 (C=0.999559, Py=1.000000)
- **c·c* deviation**: +1.872e-04 (C=0.999813, Py=1.000000)

**Interpretation**: PyTorch achieves near-perfect metric duality (a·a* ≈ 1.0 within 7.5e-05) as required by crystallographic convention. C implementation shows O(1e-3) deviations from unity, suggesting accumulated numerical drift in the reciprocal-space recalculation pipeline.

## Component-Level Findings

### Real-Space Vector Deltas (from rot_vector_comparison.md)

[2025-10-07T11:06:43] tokens used: 133,379

[2025-10-07T11:06:48] thinking

**Confirming next steps**
[2025-10-07T11:06:49] exec bash -lc "sed -n '40,160p' reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:06:50] bash -lc "sed -n '40,160p' reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md" succeeded in 716ms:
## Hypotheses for Y-Component Drift (Phase L3g Input)

### H1: Spindle Axis Normalization
**Status**: Primary suspect
**Evidence**: Y-component drift pattern matches spindle-axis orientation (spec default: [0,1,0])
**Mechanism**: If PyTorch normalizes spindle vector before φ rotation while C uses raw input, small magnitude errors amplify into real-space Y drift after cross-product reconstruction
**Test**: Compare `spindle_axis` magnitude in traces; verify `Crystal.get_rotated_real_vectors` normalization path

### H2: Reciprocal→Real Reconstruction Volume
**Status**: Secondary suspect
**Evidence**: Volume delta (+3.3e-03 Å³) suggests different V_actual usage
**Mechanism**: Spec (CLAUDE.md Rule #13) mandates V_actual = a·(b×c) for reconstruction. If C uses formula volume while PyTorch uses V_actual, cross-products acquire systematic bias
**Test**: Log V_formula vs V_actual in both implementations; check if C bypasses recalculation

### H3: Phi Step Initialization
**Status**: Unlikely (φ=0 case)
**Evidence**: Phi-independent drift would require base vector misalignment
**Mechanism**: At φ=0, rotation matrix is identity—drift must stem from pre-rotation state
**Test**: Extend probe to φ>0 steps; if drift is phi-invariant, rule out rotation code

[2025-10-07T11:06:50] tokens used: 134,911

[2025-10-07T11:07:04] thinking

**Updating plan and documentation tasks**

I’m laying out a detailed update for the plan and fix_plan docs to reflect completed and ongoing tasks, especially for phases L3f and L3g. This includes revising task statuses, adding new instrumentation tasks, and aligning next action items with the latest evidence from recent attempts. I want to ensure the plan structure, task descriptions, and summaries all stay consistent and clear before making edits.
[2025-10-07T11:07:07] exec bash -lc 'head -n 20 reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:07:08] bash -lc 'head -n 20 reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log' succeeded in 979ms:
================================================================================
Spindle-Axis & Volume Audit for CLI-FLAGS-003 Phase L3g
================================================================================

## Spindle-Axis Comparison

### C Reference
From c_trace_scaling.log:
  spindle ROTATION_AXIS= -1 0 0

Raw vector: (-1.0, 0.0, 0.0)
Norm: 1.0 (exact, unit vector)

### PyTorch
LIMITATION: Current TRACE_PY output does not explicitly log spindle_axis vector.
The harness configuration uses default spindle_axis=[0, 1, 0] per specs/spec-a-core.md,
but the supervisor command may override this via `-spindle_axis -1 0 0`.

**Required Action:** Add `TRACE_PY: spindle_axis` line to simulator instrumentation
or trace harness config dump to verify runtime value matches C.
[2025-10-07T11:07:08] tokens used: 137,916

[2025-10-07T11:07:10] thinking

**Preparing to update plan and apply patch**
[2025-10-07T11:07:11] exec bash -lc "sed -n '1,140p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:07:12] bash -lc "sed -n '1,140p' plans/active/cli-noise-pix0/plan.md" succeeded in 752ms:
## Context
- Initiative: CLI Parity for nanoBragg PyTorch vs C (supports long-term goal in prompts/supervisor.md)
- Phase Goal: Accept `-nonoise` and `-pix0_vector_mm` flags with C-equivalent semantics so the parallel comparison command in prompts/supervisor.md executes end-to-end.
- Dependencies: specs/spec-a-cli.md §§3.2–3.4, docs/architecture/detector.md §5, docs/development/c_to_pytorch_config_map.md (detector pivot + noise), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860 (flag behavior), docs/debugging/detector_geometry_checklist.md (pix0 validation), docs/development/testing_strategy.md §2 (CLI parity tests).
- Current gap snapshot (2025-10-18 refresh): Phase H4 parity landed (Attempt #25) with pix0 deltas < 2e-8 m and regression tolerances tightened; the remaining blocker before executing the supervisor command end-to-end is Phase I polarization alignment.
- Gap snapshot update (2025-10-19): Attempt #27 parity run reveals 1.24538e5× intensity scaling mismatch despite polarization fix; Phases J–L track the normalization diagnosis, fix, and closure required before long-term Goal #1 completes.
- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
- Gap snapshot update (2025-10-24): Attempt #35 reran the PyTorch trace harness post-unit-fix; metrics still show |Δpix0| ≈ 1.145 mm, so a fresh diagnostics phase is required before resuming normalization work.
- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
- Gap snapshot update (2025-10-27): Attempt #41 validated Phase H6g — SAMPLE pivot parity holds with pix0 deltas ≤2.85 µm, beam center deltas 0.0, and supporting artifacts under `reports/2025-10-cli-flags/phase_h6/post_fix/`. Remaining blockers: rerun the scaling chain (Phase K2), execute the scaling regression + doc updates (Phase K3), then resume Phase L parity once normalization matches C.
- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
- Gap snapshot update (2025-10-17): Attempt #53 (Phase L1c) realigned HKL Fdump I/O with C padding (`read_fdump`/`write_fdump`) and added regression coverage (`TestHKLFdumpParity::test_scaled_hkl_roundtrip`) with max |ΔF| = 0.0. Proceed to L1d to regenerate parity metrics before reviving scaling traces.
- Gap snapshot update (2025-11-11): Discovered the trace harness omitted `-beam_vector`, `-flux`, and `-beamsize`, forcing oversample=4 and a +Z beam; Py traces zeroed `F_cell` and inflated `steps`. Marked unresolved pending harness fix.
- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
- Gap snapshot update (2025-11-13): Latest harness rerun aborted because `trace_harness.py` still expected the legacy `read_hkl_file` return tuple (see `trace_py_fullrun.log`). **Resolved in Attempt #74, which updated the harness to the `(F_grid, metadata)` signature.**
- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
- Gap snapshot update (2025-11-17 late): Attempt #78 completed the Phase L3c harness rerun; TRACE_PY now reports F_cell=190.27 with matching metadata, so the immediate focus moves to auditing CLI ingestion (L3c) and adding regression coverage (L3d).
[2025-10-07T11:07:12] tokens used: 138,344

[2025-10-07T11:07:19] thinking

**Updating plan with new 2025-11-20 gap snapshot**

I’m focusing on adding a new 2025-11-20 bullet capturing attempt #89’s spindle and volume data, updating phase L3 task statuses with latest instrumentation notes, and appending new audit findings near the plan’s end using apply_patch for smooth integration.
[2025-10-07T11:07:27] tokens used: 142,068

[2025-10-07T11:07:30] thinking

**Investigating patch failure details**
[2025-10-07T11:07:30] exec bash -lc "sed -n '120,220p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:07:31] bash -lc "sed -n '120,220p' plans/active/cli-noise-pix0/plan.md" succeeded in 927ms:
| G2 | Teach `Crystal` to ingest orientation | [D] | ✅ 2025-10-17 Attempt #17 (ralph). Modified `Crystal.compute_cell_tensors()` (lines 545-603) to detect MOSFLM orientation in config, convert to tensors with proper device/dtype, and integrate with Core Rules 12-13 pipeline. Tests: 26/26 passed (CLI), 35/35 passed (crystal). Metric duality perfect. Artifacts: `reports/2025-10-cli-flags/phase_g/README.md`. |
| G3 | Trace verification + parity rerun | [D] | ✅ 2025-10-06 Attempt #18 (ralph). Fixed MOSFLM matrix transpose bug (`src/nanobrag_torch/io/mosflm.py:88`). Reciprocal vectors now match C exactly (9/9 components to 16 decimals). Miller indices match: (2,2,-13). F_cell perfect match: 300.58. Real vectors within 0.05Å (<0.2% error). Artifacts: `reports/2025-10-cli-flags/phase_g/trace_summary_orientation_fixed.md`, `traces/trace_c.log`, `traces/trace_py_fixed.log`. Intensity parity still divergent (deferred to Phase H polarization). |

### Phase H — Lattice Structure Factor Alignment
Goal: Ensure the CLI-provided beam vector propagates through Detector→Simulator and bring scattering/lattice parity back in line before polarization work.
Prereqs: Phases F and G complete; orientation traces captured (Phase G3 artifacts in place).
Exit Criteria: Trace comparison shows `pix0_vector` components matching C within 5e-5 m, `h`, `k`, `l` fractional components within 1e-3, `F_latt_a/b/c` within 0.5% (signed), and a parity rerun demonstrates ≥0.95 correlation improvement attributable to lattice fixes (polarization still disabled).

Update 2025-10-17: Attempt #22 proved the projection-based override mapping pushes pix0 off by 2.16e-1 m; Attempt #23 (now superseded) inferred the C code ignored `-pix0_vector_mm` when custom detector vectors are present. Phase J traces captured on 2025-10-21 demonstrate the override IS honoured (C recomputes `Fbeam/Sbeam` ≈0.2179/0.2139 m), so PyTorch must re-apply overrides even in the custom-vector path.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| H1 | Refresh trace evidence post-orientation | [D] | ✅ 2025-10-17: `reports/2025-10-cli-flags/phase_h/trace_harness.py` + `trace_comparison.md` captured the no-override trace and logged Attempt #19 (beam vector divergence documented). |
| H2 | Fix incident beam propagation from CLI | [D] | ✅ 2025-10-17 Attempt #20 (ralph). Simulator now clones `detector.beam_vector` (commit 8c1583d); regression covered by `tests/test_cli_flags.py::TestCLIBeamVector::test_custom_beam_vector_propagates`. Pending: rerun `phase_h/trace_harness.py` to confirm `incident_vec` parity before Phase H3. |
| H3a | Diagnose residual lattice mismatch | [D] | ✅ 2025-10-17 Attempt #21 (ralph). `trace_py_after_H3_refresh.log`, `pix0_reproduction.md`, and `implementation_notes.md` quantify the ~1.14 mm pix0 delta and show the cascade into scattering vector and `F_latt` disparities; `attempt_log.txt` restored with evidence summary. |
| H3b1 | Capture C vs PyTorch pix0/F/S references (override on/off) | [D] | ✅ 2025-10-17 Attempt #23: Stored paired C traces (`reports/2025-10-cli-flags/phase_h/implementation/c_trace_with_override.log` / `_without_override.log`), PyTorch traces, and `pix0_mapping_analysis.md`; evidence proves C geometry is identical with or without `-pix0_vector_mm` when custom vectors are supplied. |
| H3b2 | Implement pix0 precedence (custom vectors > override) | [D] | ✅ 2025-10-06 Attempt #24 (commit d6f158c). `Detector._calculate_pix0_vector` now skips overrides when any custom detector vector is supplied; override logic only executes in the no-custom-vectors path. Validation: `tests/test_cli_flags.py::TestCLIPix0Override::test_pix0_vector_mm_beam_pivot` (CPU) and evidence log `reports/2025-10-cli-flags/phase_h/implementation/pix0_override_validation.md`. Residual pix0 Y-delta (≈3.9 mm) traced to missing post-rotation `Fbeam/Sbeam` recomputation and deferred to H4. |
| H3b3 | Repair CLI regression + artifacts for precedence | [D] | ✅ 2025-10-06 Attempt #24. Regression test now covers BOTH precedence cases (custom vectors ignored, standard path applies override) and records expected C pix0 vector in `pix0_expected.json`. CUDA parametrisation remains skipped until parity fix lands; tolerance temporarily relaxed to 5 mm pending H4 geometry alignment. |
| H4a | Port post-rotation beam-centre recomputation | [D] | ✅ 2025-10-17 Attempt #25: Ported nanoBragg.c lines 1846-1860 into `Detector._calculate_pix0_vector`; see `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/implementation.md`. |
| H4b | Refresh traces and parity evidence | [D] | ✅ 2025-10-17 Attempt #25: Stored C/PyTorch traces in `reports/2025-10-cli-flags/phase_h/parity_after_lattice_fix/trace_c.log` and `trace_py.log`; `summary.md` records pix0 deltas ≤1.3e-8 m and `F_latt` agreement <0.2%. |
[2025-10-07T11:07:31] tokens used: 143,484

[2025-10-07T11:07:36] thinking

**Verifying target line location**
[2025-10-07T11:07:36] exec bash -lc 'rg -n "Gap snapshot refresh" plans/active/cli-noise-pix0/plan.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:07:36] bash -lc 'rg -n "Gap snapshot refresh" plans/active/cli-noise-pix0/plan.md' succeeded in 738ms:
7:- Gap snapshot refresh (2025-10-22): Attempt #31 restored C precedence for custom detector vectors (pix0 override now gated again). Outstanding work: H5c PyTorch traces and Phase K normalization to eliminate the `F_latt`-driven intensity gap.
9:- Gap snapshot refresh (2025-10-26): Attempt #40 completed Phase H6f — custom detector vectors now force SAMPLE pivot parity, parity visuals relocated under `reports/2025-10-cli-flags/phase_h6/visuals/`, and targeted regression tests cover pivot selection. Outstanding work at that point: Phase H6g trace rerun to confirm |Δpix0| < 5e-5 m before returning to Phase K scalings.
11:- Gap snapshot refresh (2025-11-09): Attempt #49 closed Phase K3g3 — `tests/test_cli_scaling.py::test_f_latt_square_matches_c` now passes after isolating the HKL cache, but the full supervisor command still shows correlation ≈ 0.9965 and sum_ratio ≈ 1.26×10⁵. Need fresh HKL/normalization parity evidence (Phase L) before rerunning nb-compare.
12:- Gap snapshot refresh (2025-11-10): Attempt #56 (evidence loop) proved the existing `TRACE_PY` path prints placeholder scaling data (`capture_fraction 1`, `polar 1.0`, `steps`=φ-steps only). Without exposing the real per-pixel factors computed in `Simulator.run`, Phase L2b cannot produce a trustworthy PyTorch trace. Instrumentation must pull actual values from `_apply_detector_absorption`, polarization kernels, and total-step calculation before rerunning the harness.
15:- Gap snapshot refresh (2025-11-12): Attempt #66 (commit 1d2e6ac) completed Phase L2b0 — the trace harness now feeds the full supervisor flag set, and the refreshed `trace_py_scaling.log` confirms `steps=10`, `fluence≈1.0e24`, and `r_e^2` parity with C. TRACE_PY still reports `I_before_scaling NOT_EXTRACTED`, `polar=0`, and `I_pixel_final=0`, so Phase L2b instrumentation must surface the real polarization/absorption tensors before we can quantify the K3e k_frac drift.
17:- Gap snapshot refresh (2025-11-14): Attempt #73 showed `Crystal.hkl_data` unset (leading to `F_cell=0`), keeping L2b open; **Attempt #74 fixed this by wiring the HKL tensor/metadata before Simulator construction.**
18:- Gap snapshot refresh (2025-11-15): Attempts #69/#71/#74 finished Phase L2 — TRACE_PY now reports real scaling factors, `scaling_audit_summary.md` flags `I_before_scaling` as the lone divergence, and C shows `F_cell=190.27` for hkl=(-7,-1,-14) while PyTorch remains at 0. Next phase focuses on understanding how C derives that amplitude (likely via generated `Fdump.bin`) before touching normalization code.
19:- Gap snapshot refresh (2025-11-17): Attempt #77 reran Phase L3a probe on the current workstation, logged `probe_20251117.log` (F_cell=190.270004 for hkl=(-7,-1,-14)), and confirmed scaled.hkl already covers the supervisor reflection. Remaining blockers shift to wiring that data through the harness/CLI path (Phase L3c onward).
21:- Gap snapshot refresh (2025-11-18): Attempt #80 (evidence loop) closed Phase L3c — `cli_hkl_audit.md` now documents the missing `.to(device=device)` transfer at `__main__.py:1073`, confirmed probe artifacts, and queued the device fix + regression test for L3d.
28:- Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
29:- Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
[2025-10-07T11:07:36] tokens used: 145,193

[2025-10-07T11:07:39] thinking

**Preparing to update changelog bullets**
[2025-10-07T11:07:43] exec bash -lc "sed -n '240,320p' plans/active/cli-noise-pix0/plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:07:44] bash -lc "sed -n '240,320p' plans/active/cli-noise-pix0/plan.md" succeeded in 760ms:
| L1d | Re-run parity script after fixes and update artefacts | [D] | ✅ Attempt #54 (2025-10-17): Regenerated C cache using supervisor command flags, achieved perfect HKL parity (max |ΔF|=0.0, 0 mismatches). Artifacts: `reports/2025-10-cli-flags/phase_l/hkl_parity/{Fdump_c_20251109.bin, summary_20251109.md, metrics_20251109.json}`. Phase L2 prerequisites now met—structure factors match C exactly. |

### Phase L2 — Scaling Chain Audit
Goal: Capture a side-by-side breakdown of the intensity scaling pipeline (I_before_scaling → ω → polarization → r_e² → fluence → steps) for the supervisor command to isolate the first divergence that drives the 1.26×10⁵ sum ratio.
Prereqs: Phase L1d artifacts in place; Ralph working under `prompts/debug.md`; C binary instrumentable via `golden_suite_generator/` per CLAUDE Rule #0.3.
Exit Criteria: C and PyTorch traces capturing scaling factors are stored under `reports/2025-10-cli-flags/phase_l/scaling_audit/`, a comparison summary identifies the first mismatched term with quantitative deltas, and docs/fix_plan.md Attempt log references the findings.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
| L2a | Instrument C scaling chain | [D] | ✅ 2025-10-06 Attempt #55: Reused existing TRACE_C hooks (nanoBragg.c 3367-3382), captured `c_trace_scaling.log` for pixel (685,1039), and recorded setup in `instrumentation_notes.md`. Artifacts live under `reports/2025-10-cli-flags/phase_l/scaling_audit/`; ready to mirror fields on the PyTorch side. |
| L2b | Expose and log PyTorch scaling factors | [D] | ✅ Attempts #69, #72, and #74 (commits `1cf77b5`, `0f3de26`) now drive the harness through the updated HKL API, attach `crystal.hkl_data` / `crystal.hkl_metadata`, and capture live TRACE_PY output for pixel (685,1039). `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log` shows real polarization/omega/steps, and `harness_hkl_state_fixed.txt` confirms the HKL tensor lives on the simulator device. |
| L2c | Diff traces & record first divergence | [D] | ✅ Attempt #71 refreshed `scaling_audit_summary.md` via `scripts/validation/compare_scaling_traces.py`, highlighting `I_before_scaling` as the first divergence (C=9.4365e5, Py=0) while all downstream scaling factors match within 2e-3%. This establishes that the remaining gap stems from missing structure-factor coverage rather than normalization math. |

### Phase L3 — Normalization Fix Implementation
Goal: Patch the PyTorch scaling pipeline so every factor (omega, polarization, capture_fraction, r_e², fluence, steps) matches the C implementation within 1e-6 relative error.
Prereqs: L2 comparison summary pointing to the exact divergent factor; relevant C references documented; regression tests identified.
Exit Criteria: PyTorch source changes with inline C-code docstring references are merged, targeted regression tests cover the corrected scaling semantics, and new artifacts demonstrate matching intermediate values. docs/fix_plan.md records the fix attempt and resulting metrics.

| ID | Task Description | State | How/Why & Guidance |
| --- | --- | --- | --- |
[2025-10-07T11:07:44] tokens used: 146,476

[2025-10-07T11:07:48] thinking

**Preparing to patch snapshot entries**
[2025-10-07T11:07:50] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./plans/active/cli-noise-pix0/plan.md
@@ -29,2 +29,3 @@
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
[2025-10-07T11:07:50] apply_patch(auto_approved=true) exited 0 in 14ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T11:07:50] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..c3bc1c526fd2ea1621c4e44b48660208b66ce0f7
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.

[2025-10-07T11:07:50] tokens used: 165,339
[2025-10-07T11:07:50] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..c3bc1c526fd2ea1621c4e44b48660208b66ce0f7
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.


[2025-10-07T11:07:52] thinking

**Updating table for L3 rows**
[2025-10-07T11:07:57] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/plans/active/cli-noise-pix0/plan.md
@@ -265,5 +265,5 @@
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
[2025-10-07T11:07:57] apply_patch(auto_approved=true) exited 0 in 26ms:
Success. Updated the following files:
M plans/active/cli-noise-pix0/plan.md
[2025-10-07T11:07:57] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

[2025-10-07T11:07:57] tokens used: 168,532
[2025-10-07T11:07:57] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:08:01] thinking

**Updating fix_plan next actions**
[2025-10-07T11:08:01] exec bash -lc "sed -n '450,520p' docs/fix_plan.md" in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:08:02] bash -lc "sed -n '450,520p' docs/fix_plan.md" succeeded in 958ms:
## [CLI-FLAGS-003] Handle -nonoise and -pix0_vector_mm
- Spec/AT: specs/spec-a-cli.md flag catalogue, docs/architecture/detector.md §5 (pix0 workflow), docs/development/c_to_pytorch_config_map.md (pivot rules), golden_suite_generator/nanoBragg.c lines 720–1040 & 1730–1860
- Priority: High
- Status: in_progress (Phases A–H complete; K3a/K3b/K3d landed via Attempts #43–44, pending per-φ evidence + normalization closure)
- Owner/Date: ralph/2025-10-05
- Plan Reference: `plans/active/cli-noise-pix0/plan.md`
- Reproduction (C & PyTorch):
  * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
  * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
- First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
- Next Actions (2025-11-19 refresh):
  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
- Attempts History:
  * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
    Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
    Artifacts:
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_py_scaling.log:1-41` - Refreshed trace with live values (polar=0.91464138, omega_pixel=4.20404859e-07 sr, F_cell=0, I_before_scaling=0)
      - `reports/2025-10-cli-flags/phase_l/scaling_audit/scaling_audit_summary.md:1-54` - Phase L2c comparison report showing first divergence and all divergent factors
[2025-10-07T11:08:02] tokens used: 170,047
[2025-10-07T11:08:02] turn diff:
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:08:04] thinking

**Updating next actions list**
[2025-10-07T11:08:08] apply_patch auto_approved=true:
M /Users/ollie/Documents/nanoBragg3/./docs/fix_plan.md
@@ -459,6 +459,6 @@
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
[2025-10-07T11:08:08] apply_patch(auto_approved=true) exited 0 in 23ms:
Success. Updated the following files:
M docs/fix_plan.md
[2025-10-07T11:08:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

[2025-10-07T11:08:08] tokens used: 172,143
[2025-10-07T11:08:08] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:08:11] thinking

**Verifying plan and input.md existence**
[2025-10-07T11:08:12] exec bash -lc 'cat input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:08:12] bash -lc 'cat input.md' succeeded in 798ms:
Summary: Capture spindle-axis magnitude and volume evidence for the φ=0 rotation drift so Phase L3g can conclude with documented hypotheses before any simulator edits.
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L3g rotation-vector drift
Branch: feature/spec-based-2
Mapped tests: tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics (collect-only)
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log; reports/2025-10-cli-flags/phase_l/rot_vector/volume_probe.md; reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md; docs/fix_plan.md attempt update (CLI-FLAGS-003)
Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics
If Blocked: Capture the failing harness stdout/stderr under reports/2025-10-cli-flags/phase_l/rot_vector/blocked.log, note the exact exception + command, and record the blocker (with artifact path) in docs/fix_plan.md Attempts before stopping.
Priorities & Rationale:
- specs/spec-a-core.md:120 — Direct↔reciprocal reconstruction mandates V_actual; the audit must quantify PyTorch vs C usage before touching the implementation.
- arch.md:170 — CrystalConfig spindle_axis contract expects unit vectors, so we confirm runtime normalization for CLI inputs (especially -spindle_axis -1 0 0).
- docs/debugging/debugging.md:15 — Parallel trace workflow is required; fresh TRACE_PY data is prerequisite to any fix.
- docs/development/testing_strategy.md:184 — Rotation pipeline details guide which tensors to log (phi→mosaic order).
- docs/architecture/c_code_overview.md:310 — Highlights where C re-normalizes spindle vectors; use it to cross-check harness outputs.
- plans/active/cli-noise-pix0/plan.md:253 — Phase L3 checklist lists rot-vector audit and hypothesis framing as blocking tasks.
- docs/fix_plan.md:460 — Next Actions already call for this probe; keeping ledger evidence up to date prevents redundant loops.
- reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md:1 — Existing hypotheses (spindle norm, V reuse) require confirming evidence.
How-To Map:
- Step 0 (environment prep):
  - export KMP_DUPLICATE_LIB_OK=TRUE
[2025-10-07T11:08:12] tokens used: 172,872
[2025-10-07T11:08:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:08:33] thinking

**Preparing updated instructions for instrumentation**

I'll organize detailed new input reflecting the updated focus on the CLI-FLAGS-003 instrumentation plan, ensuring all required sections like Summary, Do Now command, How-To steps (including adding instrumentation), and documentation references are included and aligned with the latest task priorities. This will help produce a clear, directive input file around 100–200 lines.
[2025-10-07T11:08:51] exec bash -lc "cat <<'EOF' > input.md
Summary: Instrument the φ=0 trace to emit raw + normalized spindle-axis data so CLI-FLAGS-003 Phase L3g can lock hypotheses before simulator edits.
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L3g spindle normalization evidence
Branch: feature/spec-based-2
Mapped tests: tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics (collect-only)
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log; reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log; reports/2025-10-cli-flags/phase_l/rot_vector/volume_probe.md; reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md; docs/fix_plan.md (CLI-FLAGS-003 attempt update)
Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics
If Blocked: Capture failing command + traceback to reports/2025-10-cli-flags/phase_l/rot_vector/blocked.log, note the issue in docs/fix_plan.md Attempts (CLI-FLAGS-003) with the artifact path, and stop.
Priorities & Rationale:
- specs/spec-a-cli.md:20 — CLI binding requires honoring -spindle_axis exactly; instrumentation must confirm the runtime vector before changes.
- arch.md:170 — Spindle-axis contract expects unit vectors; need evidence before adjusting normalization.
- docs/debugging/debugging.md:15 — Parallel trace SOP obligates refreshed TRACE_PY before touching production code.
- docs/development/testing_strategy.md:184 — Rotation/mosaic sequencing defines which tensors to log.
- docs/fix_plan.md:456 — Next Actions now call for spindle instrumentation and doc sync; we must deliver artifacts to close L3g.
- plans/active/cli-noise-pix0/plan.md:265 — Phase L3 checklist marks L3g [P]; spindle-axis evidence is the remaining blocker.
How-To Map:
- Prep:
  - export KMP_DUPLICATE_LIB_OK=TRUE
  - export PYTHONPATH=src
  - sha256sum A.mat scaled.hkl > reports/2025-10-cli-flags/phase_l/rot_vector/input_files.sha256
  - git rev-parse HEAD >> reports/2025-10-cli-flags/phase_l/rot_vector/input_files.sha256
  - date -Iseconds >> reports/2025-10-cli-flags/phase_l/rot_vector/input_files.sha256
- Step 1 (guard):
  - pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics | tee reports/2025-10-cli-flags/phase_l/rot_vector/test_collect.log
- Step 2 (instrumentation):
  - Extend reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py (or the TRACE_PY hooks it imports) to emit both the raw spindle axis from CLI config and the normalized axis used by Crystal/Simulator. Follow existing TRACE_PY naming (e.g., \"TRACE_PY: spindle_axis_raw\" / \"TRACE_PY: spindle_axis_norm\") and guard behind the trace flag so production runs stay untouched.
  - If simulator changes are unavoidable, keep them under debug branches only and cite the exact nanoBragg.c lines being mirrored (C logs spindle axis in the trace).
- Step 3 (refresh trace):
  - PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py \\
      --pixel 685 1039 --config supervisor --device cpu --dtype float32 \\
      --out reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log \\
      | tee reports/2025-10-cli-flags/phase_l/rot_vector/trace_run.log
  - Ensure the new TRACE_PY lines appear and the run reports 40 TRACE_PY + 10 TRACE_PY_PHI entries.
- Step 4 (spindle audit):
  - Update reports/2025-10-cli-flags/phase_l/rot_vector/spindle_probe.py (or add logic) to parse the new TRACE_PY lines alongside "'`reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`.
  - Generate reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log summarizing raw vs normalized vectors, norms, Δ(norm), and tolerance check (≤5e-4).
- Step 5 (volume refresh):
  - Recompute V_formula and V_actual for both implementations using the updated trace data; append the float32 table and a float64 rerun (repeat Step 3 with --dtype float64) to reports/2025-10-cli-flags/phase_l/rot_vector/volume_probe.md.
- Step 6 (analysis & ledger):
  - Append a dated section to reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md capturing the spindle results, volume deltas, dtype/device coverage, and updated hypothesis ranking.
  - Update docs/fix_plan.md Attempts (CLI-FLAGS-003) with metrics, artifacts, and the new tolerance verdict; mark hypothesis status.
  - Edit plans/active/cli-noise-pix0/plan.md Phase L3 to flip L3g to [D] if the evidence satisfies the exit criteria.
- Step 7 (optional CUDA sweep):
  - If `torch.cuda.is_available()`, rerun Step 3 with --device cuda --dtype float32 and log the device/dtype in spindle_audit.log; note results in the fix-plan attempt.
Pitfalls To Avoid:
- Skipping KMP_DUPLICATE_LIB_OK leads to MKL crashes; set it first.
- Emitting TRACE_PY lines outside the trace guard risks polluting production logs—keep instrumentation conditional.
- Forgetting to record device/dtype in spindle_audit.log weakens the evidence; print them explicitly.
- Overwriting existing logs without archiving loses historical context; append or version filenames.
- Touching simulator physics while still in evidence mode violates the doc-first mandate; focus on instrumentation only.
- Leaving docs/fix_plan.md and the plan un-updated after collecting evidence reopens the loop; sync them before ending.
- Allowing pytest collect to fail without investigation will stall downstream work; fix import issues immediately.
- Writing artifacts outside reports/2025-10-cli-flags/phase_l/rot_vector/ scatters the audit trail; keep everything in the same folder tree.
- Ignoring float64 rerun misses precision regressions; capture at least one double-precision sweep if feasible.
- Neglecting to cite the exact nanoBragg.c line numbers in new TRACE_PY comments makes parity review harder; annotate the instrumentation.
Pointers:
- specs/spec-a-cli.md:20 — CLI authority on -spindle_axis semantics.
- arch.md:170 — Spindle-axis normalization expectations.
- docs/debugging/debugging.md:15 — Required trace workflow.
- docs/development/testing_strategy.md:184 — Phi rotation ordering guidance.
- docs/development/c_to_pytorch_config_map.md:1 — Flag parity reminders.
- docs/architecture/detector.md:120 — Pivot formulas interacting with spindle axis.
- plans/active/cli-noise-pix0/plan.md:265 — Phase L3 task table and exit criteria.
- docs/fix_plan.md:456 — Next Actions referencing this evidence pass.
- reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md:1 — Hypotheses history to extend.
- reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md:1 — Baseline vector deltas to cite.
- reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_per_phi.json:1 — φ-wise evidence for cross-checks.
Next Up: After spindle evidence lands, draft the implementation plan for the chosen normalization fix (Phase L3h) and prepare the nb-compare rerun workflow for Phase L4 once parity metrics align.
EOF
' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:08:52] bash -lc "cat <<'EOF' > input.md
Summary: Instrument the φ=0 trace to emit raw + normalized spindle-axis data so CLI-FLAGS-003 Phase L3g can lock hypotheses before simulator edits.
Mode: Parity
Focus: CLI-FLAGS-003 / Phase L3g spindle normalization evidence
Branch: feature/spec-based-2
Mapped tests: tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics (collect-only)
Artifacts: reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log; reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log; reports/2025-10-cli-flags/phase_l/rot_vector/volume_probe.md; reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md; docs/fix_plan.md (CLI-FLAGS-003 attempt update)
Do Now: CLI-FLAGS-003 Handle -nonoise and -pix0_vector_mm — pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics
If Blocked: Capture failing command + traceback to reports/2025-10-cli-flags/phase_l/rot_vector/blocked.log, note the issue in docs/fix_plan.md Attempts (CLI-FLAGS-003) with the artifact path, and stop.
Priorities & Rationale:
- specs/spec-a-cli.md:20 — CLI binding requires honoring -spindle_axis exactly; instrumentation must confirm the runtime vector before changes.
- arch.md:170 — Spindle-axis contract expects unit vectors; need evidence before adjusting normalization.
- docs/debugging/debugging.md:15 — Parallel trace SOP obligates refreshed TRACE_PY before touching production code.
- docs/development/testing_strategy.md:184 — Rotation/mosaic sequencing defines which tensors to log.
- docs/fix_plan.md:456 — Next Actions now call for spindle instrumentation and doc sync; we must deliver artifacts to close L3g.
- plans/active/cli-noise-pix0/plan.md:265 — Phase L3 checklist marks L3g [P]; spindle-axis evidence is the remaining blocker.
How-To Map:
- Prep:
  - export KMP_DUPLICATE_LIB_OK=TRUE
  - export PYTHONPATH=src
  - sha256sum A.mat scaled.hkl > reports/2025-10-cli-flags/phase_l/rot_vector/input_files.sha256
  - git rev-parse HEAD >> reports/2025-10-cli-flags/phase_l/rot_vector/input_files.sha256
  - date -Iseconds >> reports/2025-10-cli-flags/phase_l/rot_vector/input_files.sha256
- Step 1 (guard):
  - pytest --collect-only -q tests/test_trace_pixel.py::TestScalingTrace::test_scaling_trace_matches_physics | tee reports/2025-10-cli-flags/phase_l/rot_vector/test_collect.log
- Step 2 (instrumentation):
  - Extend reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py (or the TRACE_PY hooks it imports) to emit both the raw spindle axis from CLI config and the normalized axis used by Crystal/Simulator. Follow existing TRACE_PY naming (e.g., \"TRACE_PY: spindle_axis_raw\" / \"TRACE_PY: spindle_axis_norm\") and guard behind the trace flag so production runs stay untouched.
  - If simulator changes are unavoidable, keep them under debug branches only and cite the exact nanoBragg.c lines being mirrored (C logs spindle axis in the trace).
- Step 3 (refresh trace):
  - PYTHONPATH=src python reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py \\
      --pixel 685 1039 --config supervisor --device cpu --dtype float32 \\
      --out reports/2025-10-cli-flags/phase_l/rot_vector/trace_py_rot_vector.log \\
      | tee reports/2025-10-cli-flags/phase_l/rot_vector/trace_run.log
  - Ensure the new TRACE_PY lines appear and the run reports 40 TRACE_PY + 10 TRACE_PY_PHI entries.
- Step 4 (spindle audit):
  - Update reports/2025-10-cli-flags/phase_l/rot_vector/spindle_probe.py (or add logic) to parse the new TRACE_PY lines alongside "'`reports/2025-10-cli-flags/phase_l/scaling_audit/c_trace_scaling.log`.
  - Generate reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log summarizing raw vs normalized vectors, norms, Δ(norm), and tolerance check (≤5e-4).
- Step 5 (volume refresh):
  - Recompute V_formula and V_actual for both implementations using the updated trace data; append the float32 table and a float64 rerun (repeat Step 3 with --dtype float64) to reports/2025-10-cli-flags/phase_l/rot_vector/volume_probe.md.
- Step 6 (analysis & ledger):
  - Append a dated section to reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md capturing the spindle results, volume deltas, dtype/device coverage, and updated hypothesis ranking.
  - Update docs/fix_plan.md Attempts (CLI-FLAGS-003) with metrics, artifacts, and the new tolerance verdict; mark hypothesis status.
  - Edit plans/active/cli-noise-pix0/plan.md Phase L3 to flip L3g to [D] if the evidence satisfies the exit criteria.
- Step 7 (optional CUDA sweep):
  - If `torch.cuda.is_available()`, rerun Step 3 with --device cuda --dtype float32 and log the device/dtype in spindle_audit.log; note results in the fix-plan attempt.
Pitfalls To Avoid:
- Skipping KMP_DUPLICATE_LIB_OK leads to MKL crashes; set it first.
- Emitting TRACE_PY lines outside the trace guard risks polluting production logs—keep instrumentation conditional.
- Forgetting to record device/dtype in spindle_audit.log weakens the evidence; print them explicitly.
- Overwriting existing logs without archiving loses historical context; append or version filenames.
- Touching simulator physics while still in evidence mode violates the doc-first mandate; focus on instrumentation only.
- Leaving docs/fix_plan.md and the plan un-updated after collecting evidence reopens the loop; sync them before ending.
- Allowing pytest collect to fail without investigation will stall downstream work; fix import issues immediately.
- Writing artifacts outside reports/2025-10-cli-flags/phase_l/rot_vector/ scatters the audit trail; keep everything in the same folder tree.
- Ignoring float64 rerun misses precision regressions; capture at least one double-precision sweep if feasible.
- Neglecting to cite the exact nanoBragg.c line numbers in new TRACE_PY comments makes parity review harder; annotate the instrumentation.
Pointers:
- specs/spec-a-cli.md:20 — CLI authority on -spindle_axis semantics.
- arch.md:170 — Spindle-axis normalization expectations.
- docs/debugging/debugging.md:15 — Required trace workflow.
- docs/development/testing_strategy.md:184 — Phi rotation ordering guidance.
- docs/development/c_to_pytorch_config_map.md:1 — Flag parity reminders.
- docs/architecture/detector.md:120 — Pivot formulas interacting with spindle axis.
- plans/active/cli-noise-pix0/plan.md:265 — Phase L3 task table and exit criteria.
- docs/fix_plan.md:456 — Next Actions referencing this evidence pass.
- reports/2025-10-cli-flags/phase_l/rot_vector/analysis.md:1 — Hypotheses history to extend.
- reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md:1 — Baseline vector deltas to cite.
- reports/2025-10-cli-flags/phase_l/per_phi/trace_py_rot_vector_per_phi.json:1 — φ-wise evidence for cross-checks.
Next Up: After spindle evidence lands, draft the implementation plan for the chosen normalization fix (Phase L3h) and prepare the nb-compare rerun workflow for Phase L4 once parity metrics align.
EOF
' succeeded in 947ms:

[2025-10-07T11:08:52] tokens used: 178,830
[2025-10-07T11:08:52] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:08:56] thinking

**Preparing to finalize updates**
[2025-10-07T11:08:56] exec bash -lc 'git status --short' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:08:57] bash -lc 'git status --short' succeeded in 812ms:
 M docs/fix_plan.md
 M input.md
 M plans/active/cli-noise-pix0/plan.md
[2025-10-07T11:08:57] tokens used: 181,008
[2025-10-07T11:08:57] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:09:00] thinking

**Staging changes for commit**
[2025-10-07T11:09:01] exec bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:09:01] bash -lc 'git add docs/fix_plan.md plans/active/cli-noise-pix0/plan.md input.md' succeeded in 723ms:

[2025-10-07T11:09:01] tokens used: 181,322
[2025-10-07T11:09:01] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:09:05] thinking

**Preparing commit message**
[2025-10-07T11:09:05] exec bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS L3g plan sync - tests: not run"' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:09:06] bash -lc 'git commit -m "SUPERVISOR: CLI-FLAGS L3g plan sync - tests: not run"' succeeded in 759ms:
[feature/spec-based-2 0afce02] SUPERVISOR: CLI-FLAGS L3g plan sync - tests: not run
 3 files changed, 61 insertions(+), 92 deletions(-)
[2025-10-07T11:09:06] tokens used: 181,481
[2025-10-07T11:09:06] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:09:09] thinking

**Pushing changes**
[2025-10-07T11:09:10] exec bash -lc 'git push' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:09:12] bash -lc 'git push' succeeded in 2.28s:
To github.com:hoidn/nanoBragg.git
   07d5837..0afce02  feature/spec-based-2 -> feature/spec-based-2
[2025-10-07T11:09:12] tokens used: 182,567
[2025-10-07T11:09:12] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:09:15] thinking

**Appending summary entry to galph_memory.md**
[2025-10-07T11:09:17] exec bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-20 (galph loop — CLI spindle instrumentation setup)
- Recorded new context line in "'`plans/active/cli-noise-pix0/plan.md` for Attempt #89 (spindle + volume probe). Marked L3f ✅, kept L3g `[P]` with explicit instruction to surface `TRACE_PY: spindle_axis` before simulator edits; L3h now depends on that evidence.
- Updated `docs/fix_plan.md` Next Actions (CLI-FLAGS-003) to focus on spindle-axis instrumentation → doc/plan sync → eventual nb-compare rerun. input.md refreshed accordingly.
- Expect Ralph to extend `trace_harness.py` (or TRACE_PY hooks) with raw/normalized spindle logging, rerun the φ=0 trace, append results to `spindle_audit.log`, and update fix_plan/plan entries before shifting to implementation.
EOF
' in /Users/ollie/Documents/nanoBragg3/.
[2025-10-07T11:09:18] bash -lc "cat <<'EOF' >> galph_memory.md

## 2025-11-20 (galph loop — CLI spindle instrumentation setup)
- Recorded new context line in "'`plans/active/cli-noise-pix0/plan.md` for Attempt #89 (spindle + volume probe). Marked L3f ✅, kept L3g `[P]` with explicit instruction to surface `TRACE_PY: spindle_axis` before simulator edits; L3h now depends on that evidence.
- Updated `docs/fix_plan.md` Next Actions (CLI-FLAGS-003) to focus on spindle-axis instrumentation → doc/plan sync → eventual nb-compare rerun. input.md refreshed accordingly.
- Expect Ralph to extend `trace_harness.py` (or TRACE_PY hooks) with raw/normalized spindle logging, rerun the φ=0 trace, append results to `spindle_audit.log`, and update fix_plan/plan entries before shifting to implementation.
EOF
' succeeded in 713ms:

[2025-10-07T11:09:18] tokens used: 184,034
[2025-10-07T11:09:18] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.


[2025-10-07T11:09:27] thinking

**Summarizing final message contents**
[2025-10-07T11:09:27] codex

**Planning Update**
- Re-read core parity references (`specs/spec-a-cli.md`, `arch.md`, `docs/architecture/detector.md`, `docs/development/c_to_pytorch_config_map.md`, `docs/debugging/debugging.md`, `docs/development/testing_strategy.md`) to ground the spindle-axis audit before altering the plan.
- Reviewed Ralph’s latest evidence commits 6f38851 (VECTOR-TRICUBIC-001 Phase C1 validation) and 9775cfd (CLI-FLAGS-003 Phase L3g probes); both added artifacts without code churn but left spindle instrumentation open.
- Refreshed the CLI parity plan: added the 2025-11-20 gap snapshot, marked L3f done, and left L3g `[P]` with explicit TRACE_PY spindle-axis instrumentation requirements (`plans/active/cli-noise-pix0/plan.md:265-267`).
- Synced `docs/fix_plan.md:456-464` Next Actions to focus on spindle-axis logging → plan/doc alignment → eventual nb-compare rerun, and rewrote `input.md` to drive that evidence loop.
- Logged the update in `galph_memory.md` so the next supervisor loop knows the spindle trace remains outstanding.

Next steps for Ralph:
1. Extend `reports/2025-10-cli-flags/phase_l/scaling_audit/trace_harness.py` (or TRACE_PY hooks) to emit raw + normalized spindle vectors, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log`.
2. Refresh `volume_probe.md` / `analysis.md` with the new evidence and update `docs/fix_plan.md` + `plans/active/cli-noise-pix0/plan.md` to close Phase L3g before considering simulator changes.
[2025-10-07T11:09:31] tokens used: 185,293
[2025-10-07T11:09:31] turn diff:
diff --git a/docs/fix_plan.md b/docs/fix_plan.md
index 17cc3259b27a6991e5ebb01aaf019efafdf0d5f0..d904000b04c8914a7087daa324f51b97b3d9328b
--- a/docs/fix_plan.md
+++ b/docs/fix_plan.md
@@ -457,10 +457,10 @@
   * C: Run the supervisor command from `prompts/supervisor.md` (with and without `-nonoise`) using `NB_C_BIN=./golden_suite_generator/nanoBragg`; capture whether the noisefile is skipped and log `DETECTOR_PIX0_VECTOR`.
   * PyTorch: After implementation, `nanoBragg` CLI should parse the same command, respect the pix0 override, and skip noise writes when `-nonoise` is present.
 - First Divergence (if known): Phase L2c comparison shows all scaling factors (ω, polarization, r_e², fluence, steps) match C within 0.2%, but `I_before_scaling` diverges because PyTorch reports `F_cell=0` at hkl≈(−7,−1,−14) while C's trace records `F_cell=190.27`. **Phase L3b (Attempt #76) proved the data exists (scaled.hkl contains F=190.27 for this reflection); root cause is configuration/loading, NOT missing coverage.**
-- Next Actions (2025-11-19 refresh):
-  1. Phase L3f rotation-vector audit — Capture aligned `TRACE_C` vs `TRACE_PY` rot-vector dumps for φ=0 using the updated harness, write `rot_vector_comparison.md` under `reports/2025-10-cli-flags/phase_l/rot_vector/`, and quantify Δ components that explain the `k_frac` offset (target <5e-4).
-  2. Phase L3g hypothesis framing — Summarize likely causes of the φ=0 drift (spindle axis, reciprocal reconstitution, phi step sizing) in `rot_vector/analysis.md`, cite supporting traces, and update this plan/fix_plan before touching simulator code.
-  3. Phase L4 parity rerun — After alignment fixes land and documentation is refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
+- Next Actions (2025-11-20 refresh):
+  1. Phase L3g instrumentation — Extend the trace harness (or simulator TRACE_PY hooks) to emit raw + normalized `spindle_axis` vectors for the supervisor command, rerun the φ=0 trace, and append results to `reports/2025-10-cli-flags/phase_l/rot_vector/spindle_audit.log` alongside the volume table.
+  2. Phase L3h doc/plan alignment — Once spindle evidence lands, update `rot_vector/analysis.md`, this plan entry, and `plans/active/cli-noise-pix0/plan.md` with the chosen corrective approach before green-lighting simulator edits.
+  3. Phase L4 parity rerun — After the spindle normalization fix is implemented and documentation refreshed, execute the supervisor command end-to-end, capture nb-compare metrics (correlation ≥0.9995, sum_ratio 0.99–1.01), archive results, and close CLI-FLAGS-003.
 - Attempts History:
   * [2025-11-13] Attempt #71 (ralph loop) — Result: **SUCCESS** (Phase L2b validation + Phase L2c complete). **Harness already functional from Attempt #69; executed comparison script to identify first divergence.**
     Metrics: 40 TRACE_PY lines captured; test suite passes 4/4 variants (cpu/cuda × float32/float64). Comparison identifies `I_before_scaling` as first divergent factor (C=943654.809, PyTorch=0, -100% delta).
diff --git a/plans/active/cli-noise-pix0/plan.md b/plans/active/cli-noise-pix0/plan.md
index 4cb8f8f2bf331422933e839070e56829acd820e6..594d5ee923f941193b84ed953ab78465d2666a21
--- a/plans/active/cli-noise-pix0/plan.md
+++ b/plans/active/cli-noise-pix0/plan.md
@@ -27,6 +27,7 @@
 - Gap snapshot update (2025-11-06): Traces (`reports/2025-10-cli-flags/phase_k/f_latt_fix/trace_py_after.log`) show the SAMPLE pivot fix leaves residual close-distance deltas (~2.8 µm), which push the fractional Miller index from 2.0012 (C) to 1.9993 (PyTorch). Those 0.002 shifts around integer values amplify sincg results (F_latt_b ≈ +21.6%). Need dtype diagnostics to confirm float32 rounding vs geometry formula drift before coding a fix.
 - Gap snapshot refresh (2025-11-07): dtype sweep (`reports/2025-10-cli-flags/phase_k/f_latt_fix/dtype_sweep/`) rules out precision and exposes a φ-grid mismatch—PyTorch logs `k≈1.9997` (φ=0°) while C logs `k≈1.9928` (φ=0.09°). Next action: capture per-φ traces to align sampling before rerunning normalization tests.
 - Gap snapshot refresh (2025-11-19): Latest scaling audit (`reports/2025-10-cli-flags/phase_l/scaling_validation/analysis_20251119.md`) shows `F_cell` parity restored while per-phi instrumentation (Attempt #86) now emits the expected `TRACE_PY_PHI` entries. The refreshed log exposes a residual phi=0 mismatch (`k_frac` -0.589 in PyTorch vs -0.607 in C) that flips `F_latt_b`’s sign, so Phase L3 needs a dedicated rotation-vector audit before touching normalization again.
+- Gap snapshot refresh (2025-11-20): Attempt #89 (ralph loop i=90) completed the Phase L3g spindle/volume probe. `spindle_audit.log` and `volume_probe.md` confirm reciprocal vectors retain ≤1e-9 alignment while real-space Y components drift (b_y +6.8%). Hypothesis H2 (V_formula vs V_actual) is ruled out; remaining blocker is capturing `TRACE_PY: spindle_axis` output so spindle normalization can be proven (or disproven) before code edits.
 - Diagnostic note (2025-11-08 galph audit): `scripts/trace_per_phi.py` currently subtracts `pix0_vector` from `detector.get_pixel_coords()`, yielding plane-relative vectors instead of sample-to-pixel paths. Fix this double subtraction in the Phase K3f PyTorch harness before recording new parity traces.
 - Gap confirmation (2025-11-08 trace diff): Phase K3f base-lattice traces show PyTorch keeps the placeholder unit cell volume (`V≈1 Å^3`) when MOSFLM vectors are supplied, so `Crystal.compute_cell_tensors` fails to rescale the real vectors. C multiplies `b*×c*` by `V_cell≈2.4682×10^4 Å^3` before converting to meters, yielding |a|≈26.75 Å; PyTorch leaves |a|≈5.8×10^3 Å, which in turn inflates h/k/l by ≈6 units. Fix requires mirroring the MOSFLM derivation pipeline in `Crystal.compute_cell_tensors` (see `specs/spec-a-core.md` Geometry + `golden_suite_generator/nanoBragg.c` 3135-3210).
 - Gap snapshot update (2025-11-08 evening): Commit 46ba36b implements the MOSFLM rescale path and new regression test `TestMOSFLMCellVectors::test_mosflm_cell_vectors` passes (see `reports/2025-10-cli-flags/phase_k/base_lattice/post_fix/cell_tensors_py.txt`). Base-lattice summary now records the fix; remaining blocker is Phase K3g3 to rerun scaling evidence and refresh nb-compare/pytest artifacts.
@@ -262,9 +263,9 @@
 | L3c | Audit CLI HKL loading path | [D] | ✅ 2025-10-18 Attempt #80: Refreshed `cli_hkl_audit.md` with precise line refs (line 1073) showing dtype-only transfer; confirmed probe artifacts and logged device gap blocking CUDA parity. |
 | L3d | Add targeted regression tests | [D] | ✅ Attempt #81 (2025-11-18): Added `TestHKLDevice::test_hkl_tensor_respects_device` covering CPU/CUDA × float32/float64; ensures HKL tensors honor requested device/dtype and lookups return F≈190.27 for (-7,-1,-14). |
 | L3e | Refresh per-phi scaling validation | [D] | ✅ Attempt #86 (2025-10-07 timestamp, replayed 2025-11-19 artifacts): Harness now captures 10 `TRACE_PY_PHI` lines plus JSON, reruns `compare_scaling_traces.py`, and stores outputs under `reports/2025-10-cli-flags/phase_l/{per_phi,scaling_validation}/`. Remaining delta isolated to `k_frac`/`F_latt_b` at phi=0. |
-| L3f | Rotation-vector audit (new) | [ ] | Capture side-by-side `TRACE_C: rot_{a,b,c}` vs `TRACE_PY: rot_{a,b,c}` for phi=0 using updated harness, and dump aligned values (Angstrom + Angstrom^-1) into `reports/2025-10-cli-flags/phase_l/rot_vector/rot_vector_comparison.md`. Highlight delta components >5e-4 and confirm whether the drift originates pre- or post-phi rotation (reference `nanoBragg.c:3006-3098`, `Crystal.get_rotated_real_vectors`). |
-| L3g | Fractional Miller alignment plan | [ ] | From the rot-vector audit, derive hypotheses for the `k_frac` offset (e.g., spindle-axis normalization, reciprocal-vector reconstitution, phi step size). Document hypotheses + confirming probes in `rot_vector/analysis.md`, then update this plan + docs/fix_plan with the chosen corrective action before any simulator edits. |
-| L3h | Update documentation & plans | [ ] | Once L3f/L3g evidence lands and the corrective code path is defined, refresh `docs/fix_plan.md`, architectural docs (`docs/architecture/pytorch_design.md`), and this plan to capture the normalization + rotation data flow. Mark Phase L3 `[D]` after implementation + doc sync. |
+| L3f | Rotation-vector audit (new) | [D] | ✅ Attempts #86/#88 (2025-11-18/19) produced `rot_vector_comparison.md`, `invariant_probe.md`, and per-φ JSON showing φ=0 real vectors drifting in Y while reciprocal vectors remain aligned ≤1e-9. Evidence archived under `reports/2025-10-cli-flags/phase_l/rot_vector/`. |
+| L3g | Fractional Miller alignment plan | [P] | Hypotheses captured in `rot_vector/analysis.md` and `spindle_audit.log`; H2 (V_formula vs V_actual) ruled out, spindle normalization (H1) promoted to primary suspect. Remaining actions: instrument `TRACE_PY` (or simulator) to log raw + normalized spindle axis, rerun harness, append results to `spindle_audit.log`, then document the chosen corrective path before touching simulator code. |
+| L3h | Update documentation & plans | [ ] | After L3g instrumentation closes, refresh this plan + `docs/fix_plan.md` with the selected corrective approach; mirror summary in `analysis.md` and adjust architectural docs (`docs/architecture/pytorch_design.md`) if rotation data flow changes. Mark Phase L3 `[D]` once evidence + doc updates are complete. |
 
 ### Phase L4 — Supervisor Command Parity Rerun
 Goal: Demonstrate end-to-end parity for the supervisor command (correlation ≥ 0.9995, sum_ratio 0.99–1.01, mean_peak_distance ≤ 1 px) and close CLI-FLAGS-003.

Reading prompt from stdin...
To github.com:hoidn/nanoBragg.git
   0afce02..8de3852  HEAD -> feature/spec-based-2
Waiting for Ralph to complete i=91...
Already up to date.
[sync] state: actor=ralph status=waiting-ralph iter=91
Updating 8de3852..675296f
Fast-forward
 sync/state.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
From github.com:hoidn/nanoBragg
   8de3852..675296f  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=ralph status=running-ralph iter=91
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 675296f..519849c
Fast-forward
 docs/fix_plan.md                                   |  15 ++
 plans/active/cli-noise-pix0/plan.md                |   2 +-
 .../rot_vector/trace_py_rot_vector_per_phi.json    |   2 +-
 .../phase_l/rot_vector/analysis.md                 |  49 +++++
 .../phase_l/rot_vector/spindle_audit.log           | 236 ++++-----------------
 .../phase_l/rot_vector/trace_py_rot_vector.log     |   3 +
 .../phase_l/rot_vector/trace_run.log               |   2 +-
 .../phase_l/scaling_audit/trace_py_env.json        |   4 +-
 src/nanobrag_torch/simulator.py                    |  11 +
 9 files changed, 129 insertions(+), 195 deletions(-)
From github.com:hoidn/nanoBragg
   675296f..519849c  feature/spec-based-2 -> origin/feature/spec-based-2
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Already up to date.
Updating 519849c..a593278
Fast-forward
 sync/state.json | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)
From github.com:hoidn/nanoBragg
   519849c..a593278  feature/spec-based-2 -> origin/feature/spec-based-2
[sync] state: actor=galph status=complete iter=92
Ralph completed iteration 91; proceeding to 92
